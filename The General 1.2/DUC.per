;DUC.per

;=========================<>=========================
;				       SCOUTING
;=========================<>=========================

    ;------------------
    ;   DUC Scouting
    ;------------------

        (load "The General 1.2/Functions/Reset")

        ;Reset
        (defrule
        (true)
        =>
        (set-goal g-num-military-scouts 0)
        (set-goal g-num-sheep-scouts 0)
        (set-goal g-num-villager-scouts 0)
        (set-goal g-num-auto-scouts 0)
        (set-goal g-num-villager-auto-scouts 0)
        (set-goal g-temp 0)
        (set-goal g-temp2 NO)
        )

        ;--------------------------------
        ;   Calculate Number of Scouts
        ;--------------------------------

            ;Calculate number of military scouts
            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (current-age == dark-age)
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            (up-compare-goal g-scouting-status != PUSH-DEER)
            =>
            (up-full-reset-search)
            (up-filter-include cmdid-military -1 -1 -1)
            (up-find-local c: all-units-class c: 10)
            (up-remove-objects search-local object-data-speed <= 80)
            (up-get-search-state g-local-total)
            (up-modify-goal g-num-military-scouts g:= g-local-total)
            (up-modify-goal g-num-military-scouts c:min 5)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (current-age == dark-age)
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            (unit-type-count villager > 16)
            (up-compare-goal g-scouting-status != PUSH-DEER)
            =>
            (up-modify-goal g-num-military-scouts c:min 1)
            )

            ;Calculate number of villager scouts
            (defrule
            ; (up-compare-goal g-difficulty >= HARDEST)
            (current-age == dark-age)
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            (military-population == 0)
            (building-type-count-total town-center == 0)
            =>
            (up-get-fact unit-type-count villager g-num-villager-scouts)
            )

            ; (defrule
            ; (military-population == 0)
            ; (current-age == dark-age)
            ; (building-type-count town-center > 0)
            ; (up-compare-goal g-current-sheep-count == 0)
            ; (up-compare-goal g-total-decaying-hunt-food < 200)
            ; (unit-type-count villager <= 16)
            ; =>
            ; (set-goal g-num-villager-scouts 1)
            ; )

            ;Calculate number of sheep scouts
            (defrule
            (up-compare-goal g-difficulty >= HARDEST)
            (game-time < 200)
            (up-set-target-by-id g: g-current-sheep-id)
			(up-object-data object-data-class == livestock-class)
            (up-object-data object-data-hitpoints > 0)
            (building-type-count-total town-center > 0)
            =>
            (up-modify-goal g-temp c:+ 1)
            )
            (defrule
            (up-compare-goal g-difficulty >= HARDEST)
            (game-time < 200)
            (up-set-target-by-id g: g-next-sheep-id)
            (up-object-data object-data-hitpoints > 0)
            (building-type-count-total town-center > 0)
            =>
            (up-modify-goal g-temp c:+ 1)
            )
            (defrule
            (up-compare-goal g-difficulty >= HARDEST)
            (game-time < 200)
            (up-set-target-by-id g: g-backup-sheep-id)
            (up-object-data object-data-hitpoints > 0)
            (building-type-count-total town-center > 0)
            =>
            (up-modify-goal g-temp c:+ 1)
            )
            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (game-time < 200)
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            (up-compare-goal g-current-sheep-count > 0)
            =>
            (up-modify-goal g-num-sheep-scouts g:= g-current-sheep-count)
            (up-modify-goal g-num-sheep-scouts g:- g-temp)
            )

            ; ;Reduce number of explorers if we have many players
            ; (defrule
            ; (up-compare-goal g-num-sheep-scouts > 0)
            ; (up-modify-goal g-temp g:= g-num-military-scouts)
            ; (up-modify-goal g-temp g:+ g-num-villager-scouts)
            ; (up-modify-goal g-temp g:+ g-num-sheep-scouts)
            ; (up-compare-goal g-temp > 1)
            ; =>
            ; (up-modify-goal g-temp c:- 1)
            ; (up-modify-goal g-num-sheep-scouts g:- g-temp)
            ; (up-modify-goal g-num-sheep-scouts c:max 0)
            ; )
            ; (defrule
            ; (up-compare-goal g-num-villager-scouts > 0)
            ; (up-modify-goal g-temp g:= g-num-military-scouts)
            ; (up-modify-goal g-temp g:+ g-num-villager-scouts)
            ; (goal g-num-sheep-scouts 0)
            ; (up-compare-goal g-temp > 1)
            ; =>
            ; (up-modify-goal g-temp c:- 1)
            ; (up-modify-goal g-num-villager-scouts g:- g-temp)
            ; (up-modify-goal g-num-villager-scouts c:max 0)
            ; )
            ; (defrule
            ; (up-compare-goal g-num-military-scouts >= 1)
            ; (goal g-num-villager-scouts 0)
            ; (goal g-num-sheep-scouts 0)
            ; =>
            ; (set-goal g-num-military-scouts 0)
            ; )

            ;Reset scout group if any units in scout group have died
            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-group-size c: 8 > 0)
            =>
            (up-set-group search-local c: 8)
            (up-get-search-state g-local-total)
            (up-modify-goal g-temp g:= g-local-total)
            (up-remove-objects search-local object-data-hitpoints <= 0)
            (up-remove-objects search-local object-data-player != my-player-number)
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-group-size c: 8 > 0)
            (up-compare-goal g-temp g:!= g-local-total)
            =>
            (set-goal g-temp2 YES)
            )

            (defrule
            (up-group-size c: 8 > 0)
            (or
                (and
                    (up-compare-goal g-difficulty >= HARDEST)
                    (goal g-temp2 YES))
                (and
                    (up-compare-goal g-difficulty < HARDEST)
                    (building-type-count-total town-center >= 1)))
            =>
            (set-goal g-temp2 NO)
            (up-modify-group-flag 0 c: 8)
            (up-reset-group c: 8)
            ; (chat-to-all "reset group 8")
            )

            ;Check if we have enough military in scout group
            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            =>
            (up-full-reset-search)
            (up-set-group search-local c: 8)
            (up-remove-objects search-local object-data-cmdid != cmdid-military)
            (up-remove-objects search-local object-data-speed <= 80)
            (up-get-search-state g-local-total)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            (goal g-scouting-status PUSH-DEER)
            =>
            (up-modify-goal g-local-total c:- 1)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            (up-compare-goal g-local-total g:!= g-num-military-scouts)
            =>
            (set-goal g-temp2 YES)
            (up-full-reset-search)
            (up-set-group search-local c: 8)
            (up-remove-objects search-local object-data-cmdid == cmdid-military)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-filter-include cmdid-military -1 -1 -1)
            (up-find-remote c: all-units-class c: 10)
            (up-remove-objects search-remote object-data-speed <= 80)
            (up-set-target-point g-position-self-x)
            (up-clean-search search-remote object-data-speed search-order-desc)
            (up-remove-objects search-remote object-data-index g:>= g-num-military-scouts)
            (up-get-search-state g-local-total)
            (set-goal g-loop-counter 0)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (goal g-temp2 YES)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter < 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-get-search-state g-local-total)
            (up-jump-rule -1)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (goal g-temp2 YES)
            =>
            (set-goal g-temp2 NO)
            ; (up-chat-data-to-all "scout with %d military" g: g-num-military-scouts)
            (up-modify-group-flag 0 c: 8)
            (up-reset-group c: 8)
            (up-create-group 0 0 c: 8)
            (up-modify-group-flag 1 c: 8)
            )

            ;Check if we have enough villagers in scout group
            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            =>
            (up-full-reset-search)
            (up-set-group search-local c: 8)
            (up-remove-objects search-local object-data-class != villager-class)
            (up-get-search-state g-local-total)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            (up-compare-goal g-local-total g:!= g-num-villager-scouts)
            =>
            (set-goal g-temp2 YES)
            (up-full-reset-search)
            (up-set-group search-local c: 8)
            (up-remove-objects search-local object-data-class == villager-class)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: villager-class c: 10)
            (up-set-target-point g-position-self-x)
            (up-clean-search search-remote object-data-distance search-order-desc)
            (up-remove-objects search-remote object-data-index g:>= g-num-villager-scouts)
            (set-goal g-loop-counter 0)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (goal g-temp2 YES)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter < 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-get-search-state g-local-total)
            (up-jump-rule -1)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (goal g-temp2 YES)
            =>
            (set-goal g-temp2 NO)
            ; (up-chat-data-to-all "scout with %d vils" g: g-num-villager-scouts)
            (up-modify-group-flag 0 c: 8)
            (up-reset-group c: 8)
            (up-create-group 0 0 c: 8)
            (up-modify-group-flag 1 c: 8)
            )

            ;Check if we have enough sheep in scout group
            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            =>
            (up-full-reset-search)
            (up-set-group search-local c: 8)
            (up-remove-objects search-local object-data-class != livestock-class)
            (up-get-search-state g-local-total)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            (up-compare-goal g-local-total g:!= g-num-sheep-scouts)
            =>
            (set-goal g-temp2 YES)
            (up-full-reset-search)
            (up-set-group search-local c: 8)
            (up-remove-objects search-local object-data-class == livestock-class)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: livestock-class c: 10)
            (up-remove-objects search-remote object-data-player != my-player-number)
            (up-remove-objects search-remote object-data-hitpoints <= 0)
            )

            (defrule
            (up-compare-goal g-difficulty >= HARDEST)
            (goal g-temp2 YES)
            (building-type-count-total town-center > 0)
            =>
            (up-remove-objects search-local object-data-id g:== g-current-sheep-id)
            (up-remove-objects search-local object-data-id g:== g-next-sheep-id)
            (up-remove-objects search-local object-data-id g:== g-backup-sheep-id)
            (up-get-search-state g-local-total)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (goal g-temp2 YES)
            =>
            (up-set-target-point g-position-self-x)
            (up-clean-search search-remote object-data-distance search-order-desc)
            (up-remove-objects search-remote object-data-index g:>= g-num-sheep-scouts)
            (set-goal g-loop-counter 0)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (goal g-temp2 YES)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter < 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-get-search-state g-local-total)
            (up-jump-rule -1)
            )

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (goal g-temp2 YES)
            =>
            (set-goal g-temp2 NO)
            ; (up-chat-data-to-all "scout with %d sheep" g: g-num-sheep-scouts)
            (up-modify-group-flag 0 c: 8)
            (up-reset-group c: 8)
            (up-create-group 0 0 c: 8)
            (up-modify-group-flag 1 c: 8)
            )

        ;------------------------------
        ;   Find next point to scout
        ;------------------------------

            (load "The General 1.2/Functions/Reset Mini")

            (defrule
            (or
                (up-compare-goal g-difficulty >= HARDEST)
                (building-type-count-total town-center == 0))
            (up-group-size c: 8 > 0)
            (up-compare-goal g-position-self-x >= 0)
            (up-compare-goal g-position-self-y >= 0)
            =>
            (up-full-reset-search)
            (up-set-group search-local c: 8)
            (up-get-search-state g-local-total)
            (set-goal g-loop-counter 0)
            (set-goal g-loop-counter2 0)
            (set-goal g-scout-current-score 0)
            (set-goal g-scout-best-score -99999)
            (set-goal g-scout-los 0)
            (set-goal g-scout-radius 0)
            (set-goal g-num-auto-scouts PENDING)
            (set-goal g-num-villager-auto-scouts PENDING)
            )

                ;Get scout LOS
                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-compare-goal g-position-self-x >= 0)
                (up-compare-goal g-position-self-y >= 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-get-object-data object-data-point-x g-point-x)
                (up-get-object-data object-data-point-y g-point-y)
                (up-get-object-data object-data-move-x g-point2-x)
                (up-get-object-data object-data-move-y g-point2-y)
                (up-point-distance g-point-x g-point2-x > 1)
                (up-object-data object-data-idling != 1)
                (up-timer-status t-10-sec != timer-triggered)
                =>
                (up-full-reset-search)
                (up-set-group search-local c: 8)
                (up-get-search-state g-local-total)
                (set-goal g-scout-current-score 0)
                (set-goal g-scout-best-score -99999)
                (set-goal g-scout-los 0)
                (set-goal g-scout-radius 0)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-jump-rule -1)
                )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (current-age == dark-age)
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-get-object-data object-data-point-x g-point-x)
                (up-get-object-data object-data-point-y g-point-y)
                (up-get-object-data object-data-move-x g-point2-x)
                (up-get-object-data object-data-move-y g-point2-y)
                (or
                    (up-point-distance g-point-x g-point2-x <= 1)
                    (or
                        (up-object-data object-data-idling == 1)
                        ; (or
                            ; (up-path-distance g-point2-x 0 == 65535)
                            (timer-triggered t-10-sec)));)
                (up-compare-goal g-position-self-x >= 0)
                (up-compare-goal g-position-self-y >= 0)
                =>
                (up-get-object-data object-data-range g-scout-los)
                (up-modify-goal g-scout-los c:+ 2)
                (up-modify-goal g-scout-los c:max 3)
                (up-modify-goal g-scout-los c:min 8)
                ; (up-chat-data-to-all "Scout LOS %d" g: g-scout-los)
                (set-goal g-num-auto-scouts 0)
                (set-goal g-num-villager-auto-scouts 0)
                ; (up-modify-goal g-temp3 c:* 10)
                )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-speed >= 80)    ;not sheep
                =>
                (up-modify-goal g-scout-los c:max 4)
                )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-base-type == eagle-warrior)
                =>
                (up-modify-goal g-scout-los c:max 5)
                )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-base-type == scout-cavalry)
                (or
                    (civ-selected mongol)
                    (players-civ any-ally mongol))
                =>
                (up-modify-goal g-scout-los c:max 6)
                )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                =>
                (up-modify-goal g-scout-los c:- 1)
                )

                ;Find best point to scout
                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                =>
                (up-modify-goal g-scout-radius g:= g-scout-los)
                ; (up-modify-goal g-scout-radius c:+ SCOUT-SEARCH-RADIUS)
                (up-modify-goal g-scout-radius c:* 2)
                ; (up-chat-data-to-all "Radius %d" g: g-scout-radius)
                (up-modify-goal g-offset-x g:= g-scout-radius)
                (up-modify-goal g-offset-x c:* -1)
                (up-modify-goal g-offset-y g:= g-offset-x)
                )

                    ;Get point to check
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    =>
                    (up-get-point position-object g-point-x)
                    (up-modify-goal g-point-x g:+ g-offset-x)
                    (up-modify-goal g-point-y g:+ g-offset-y)
                    (up-bound-point g-point-x g-point-x)
                    (up-set-target-point g-point-x)
                    )

                    ;If already within the unit's LOS, don't consider point
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-modify-goal g-temp2 g:= g-scout-los)
                    (up-modify-goal g-temp3 g:= g-temp2)
                    (up-modify-goal g-temp3 c:* -1)
                    (up-compare-goal g-offset-x g:>= g-temp3)
                    (up-compare-goal g-offset-x g:<= g-temp2)
                    (up-compare-goal g-offset-y g:>= g-temp3)
                    (up-compare-goal g-offset-y g:<= g-temp2)
                    ; (up-compare-goal g-offset-x g:!= g-min-x)
                    ; (up-compare-goal g-offset-x g:!= g-max-x)
                    ; (up-compare-goal g-offset-y g:!= g-min-y)
                    ; (up-compare-goal g-offset-y g:!= g-max-y)
                    (up-compare-goal g-offset-x g:< g-scout-radius)
                    (up-compare-goal g-offset-y g:< g-scout-radius)
                    =>
                    (up-modify-goal g-offset-x c:+ 3)
                    (up-jump-rule -2)
                    )

                    ;Check if point is explored
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-point-explored g-point-x == explored-no)
                    =>
                    (up-modify-goal g-scout-current-score c:+ 150)
                    )

                    ;Check for unexplored tiles near this point
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-modify-goal g-point2-x g:= g-point-x)
                    (up-modify-goal g-point2-y g:= g-point-y)
                    (up-modify-goal g-point2-x g:- g-scout-los)
                    (up-point-explored g-point2-x == explored-no)
                    =>
                    (up-modify-goal g-scout-current-score c:+ 50)
                    )
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-modify-goal g-point2-x g:= g-point-x)
                    (up-modify-goal g-point2-y g:= g-point-y)
                    (up-modify-goal g-point2-x g:+ g-scout-los)
                    (up-point-explored g-point2-x == explored-no)
                    =>
                    (up-modify-goal g-scout-current-score c:+ 50)
                    )
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-modify-goal g-point2-x g:= g-point-x)
                    (up-modify-goal g-point2-y g:= g-point-y)
                    (up-modify-goal g-point2-y g:- g-scout-los)
                    (up-point-explored g-point2-x == explored-no)
                    =>
                    (up-modify-goal g-scout-current-score c:+ 50)
                    )
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-modify-goal g-point2-x g:= g-point-x)
                    (up-modify-goal g-point2-y g:= g-point-y)
                    (up-modify-goal g-point2-y g:+ g-scout-los)
                    (up-point-explored g-point2-x == explored-no)
                    =>
                    (up-modify-goal g-scout-current-score c:+ 50)
                    )

                    ;Check distance to g-position-self
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    ; (up-point-explored g-point-x == explored-no)
                    =>
                    (up-get-point-distance g-point-x g-position-self-x g-temp2)
                    (up-modify-goal g-temp2 c:* -7)
                    (up-modify-goal g-scout-current-score g:+ g-temp2)
                    )

                    ;If Nomad and TC isn't built, explore around food resources
                    (defrule
                    (or
                        (up-compare-goal g-map-style != NOMAD)
                        (building-type-count-total town-center > 0))
                    =>
                    (up-jump-rule 2)
                    )

                        (defrule
                        (or
                            (up-compare-goal g-difficulty >= HARDEST)
                            (building-type-count-total town-center == 0))
                        (up-group-size c: 8 > 0)
                        =>
                        (up-reset-search 0 0 1 1)
                        (up-reset-filters)
                        (up-filter-distance c: -1 c: 6)
                        (up-find-resource c: deer-class c: 1)
                        (up-find-resource c: boar-class c: 1)
                        (up-get-search-state g-local-total)
                        )

                        (defrule
                        (or
                            (up-compare-goal g-difficulty >= HARDEST)
                            (building-type-count-total town-center == 0))
                        (up-group-size c: 8 > 0)
                        (up-compare-goal g-remote-total > 0)
                        =>
                        (up-modify-goal g-scout-current-score c:+ 300)
                        )

                    ; ;Check how many unexplored tiles are near this point
                    ; (defrule
                    ; (up-compare-goal g-difficulty >= HARDEST)
                    ; (up-group-size c: 8 > 0)
                    ; (up-set-target-object search-local g: g-loop-counter)
                    ; =>
                    ; ; (up-modify-goal g-offset2-x g:= g-scout-los)
                    ; ; (up-modify-goal g-offset2-x c:* -1)
                    ; ; (up-modify-goal g-offset2-y g:= g-offset2-x)
                    ; (set-goal g-offset2-x -3)
                    ; (set-goal g-offset2-y -3)
                    ; )

                    ;     (defrule
                    ;     (up-compare-goal g-difficulty >= HARDEST)
                    ;     (up-group-size c: 8 > 0)
                    ;     (up-set-target-object search-local g: g-loop-counter)
                    ;     =>
                    ;     (up-copy-point g-point2-x g-point-x)
                    ;     (up-modify-goal g-point2-x g:+ g-offset2-x)
                    ;     (up-modify-goal g-point2-y g:+ g-offset2-y)
                    ;     ; (up-bound-point g-point2-x g-point2-x)
                    ;     )

                    ;     (defrule
                    ;     (up-compare-goal g-difficulty >= HARDEST)
                    ;     (up-group-size c: 8 > 0)
                    ;     (up-set-target-object search-local g: g-loop-counter)
                    ;     (up-compare-goal g-point2-x >= 0)
                    ;     (up-compare-goal g-point2-y >= 0)
                    ;     (up-compare-goal g-point2-x <= HUNDRED-PERCENT-MAP-SIZE)
                    ;     (up-compare-goal g-point2-y <= HUNDRED-PERCENT-MAP-SIZE)
                    ;     (up-point-explored g-point2-x == explored-no)
                    ;     =>
                    ;     ; (up-modify-goal g-scout-current-score c:+ 2)
                    ;     (up-modify-goal g-scout-current-score c:+ 12)
                    ;     )

                    ;     (defrule
                    ;     (up-group-size c: 8 > 0)
                    ;     (up-set-target-object search-local g: g-loop-counter)
                    ;     ; (up-compare-goal g-offset2-x g:< g-scout-los)
                    ;     (up-compare-goal g-offset2-x < 3)
                    ;     =>
                    ;     (up-modify-goal g-offset2-x c:+ 2)
                    ;     (up-jump-rule -3)
                    ;     )
                    ;     (defrule
                    ;     (up-group-size c: 8 > 0)
                    ;     (up-set-target-object search-local g: g-loop-counter)
                    ;     ; (up-compare-goal g-offset2-x g:>= g-scout-los)
                    ;     ; (up-compare-goal g-offset2-y g:< g-scout-los)
                    ;     (up-compare-goal g-offset2-x >= 3)
                    ;     (up-compare-goal g-offset2-y < 3)
                    ;     =>
                    ;     (up-modify-goal g-offset2-y c:+ 2)
                    ;     ; (up-modify-goal g-offset2-x g:= g-scout-los)
                    ;     ; (up-modify-goal g-offset2-x c:* -1)
                    ;     (set-goal g-offset2-x -3)
                    ;     (up-jump-rule -4)
                    ;     )

                    ;Check if other scouts nearby
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    =>
                    (up-reset-search 0 0 1 1)
                    (up-set-group search-remote c: 8)
                    (up-get-search-state g-local-total)
                    (set-goal g-loop-counter2 0)
                    )

                        (defrule
                        (or
                            (up-compare-goal g-difficulty >= HARDEST)
                            (building-type-count-total town-center == 0))
                        (up-group-size c: 8 > 0)
                        (up-set-target-object search-local g: g-loop-counter)
                        (up-set-target-object search-remote g: g-loop-counter2)
                        (up-get-object-data object-data-point-x g-point3-x)
                        (up-get-object-data object-data-point-y g-point3-y)
                        (up-point-distance g-point-x g-point3-x <= 10)
                        (up-compare-goal g-loop-counter2 g:< g-remote-total)
                        (up-compare-goal g-loop-counter2 < 40)
                        =>
                        (up-get-point-distance g-point-x g-point3-x g-temp2)
                        (up-modify-goal g-temp2 c:* 2)
                        (up-modify-goal g-temp2 c:- 20)
                        (up-modify-goal g-scout-current-score g:+ g-temp2)
                        (up-modify-goal g-loop-counter2 c:+ 1)
                        (up-jump-rule -1)
                        )

                    ;Check distance to enemy
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-object-data object-data-class != livestock-class)
                    =>
                    (up-get-point position-flank g-point3-x)
                    (up-get-point-distance g-position-self-x g-point3-x g-temp2)
                    (up-modify-goal g-scout-current-score g:+ g-temp2)
                    (up-get-point-distance g-point-x g-point3-x g-temp2)
                    (up-modify-goal g-scout-current-score g:- g-temp2)
                    )
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-object-data object-data-class == livestock-class)
                    =>
                    (up-get-point position-flank g-point3-x)
                    (up-get-point-distance g-position-self-x g-point3-x g-temp2)
                    (up-modify-goal g-scout-current-score g:- g-temp2)
                    (up-get-point-distance g-point-x g-point3-x g-temp2)
                    (up-modify-goal g-scout-current-score g:+ g-temp2)
                    )

                    ;Check if best score
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-compare-goal g-scout-current-score g:> g-scout-best-score)
                    =>
                    (up-copy-point g-point4-x g-point-x)
                    (up-modify-goal g-scout-best-score g:= g-scout-current-score)
                    )

                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-compare-goal g-offset-x g:< g-scout-radius)
                    =>
                    (up-modify-goal g-offset-x c:+ 3)
                    (set-goal g-scout-current-score 0)
                    (up-jump-rule -17)
                    )
                    (defrule
                    (or
                        (up-compare-goal g-difficulty >= HARDEST)
                        (building-type-count-total town-center == 0))
                    (up-group-size c: 8 > 0)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-compare-goal g-offset-x g:>= g-scout-radius)
                    (up-compare-goal g-offset-y g:< g-scout-radius)
                    =>
                    (up-modify-goal g-offset-y c:+ 3)
                    (up-modify-goal g-offset-x g:= g-scout-radius)
                    (up-modify-goal g-offset-x c:* -1)
                    (set-goal g-scout-current-score 0)
                    (up-jump-rule -18)
                    )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                ; (or
                    (up-compare-goal g-scout-best-score <= 0)
                    ; (up-path-distance g-point4-x 0 == 65535))
                (up-object-data object-data-class != villager-class)
                (up-object-data object-data-class != livestock-class)
                =>
                (up-modify-goal g-num-auto-scouts c:+ 1)
                )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                ; (or
                    (up-compare-goal g-scout-best-score <= 0)
                    ; (up-path-distance g-point4-x 0 == 65535))
                (or
                    (up-object-data object-data-class == villager-class)
                    (up-object-data object-data-class == livestock-class))
                =>
                (up-copy-point g-point4-x g-position-self-x)
                (set-goal g-scout-best-score 1)
                )

                ;Claim Sheep
                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-class != livestock-class)
                =>
                (up-set-target-point g-point-x)
                (up-reset-search 0 0 1 1)
                (up-reset-filters)
                (up-filter-distance c: -1 c: 30)
                (up-find-resource c: livestock-class c: 4)
                (up-remove-objects search-remote object-data-player != 0)
                (up-remove-objects search-remote object-data-hitpoints <= 0)
                (up-clean-search search-remote object-data-distance search-order-asc)
                )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-class != livestock-class)
                (up-set-target-object search-remote c: 0)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:* -20)
                (up-modify-goal g-temp2 c:+ 600)
                )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-class != livestock-class)
                (up-set-target-object search-remote c: 0)
                (up-compare-goal g-temp2 g:> g-scout-best-score)
                =>
                (up-get-point position-object g-point4-x)
                ; (chat-to-all "claim sheep")
                )

                ; (defrule
                ; (up-group-size c: 8 > 0)
                ; (up-set-target-object search-local g: g-loop-counter)
                ; (or
                ;     (up-compare-goal g-scout-best-score <= 0)
                ;     (or
                ;         (building-type-count-total town-center > 0)
                ;         ; (or
                ;             (military-population > 0)))
                ;             ;(up-path-distance g-point4-x 0 == 65535))))
                ; (up-object-data object-data-class == villager-class)
                ; =>
                ; ; (chat-to-all "can't find villager spot")
                ; (up-get-point position-center g-point4-x)
                ; ; (up-send-flare g-point4-x)
                ; ; (up-modify-goal g-num-villager-auto-scouts c:+ 1)
                ; )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-set-target-object search-local g: g-loop-counter)
                ; (up-path-distance g-point4-x 0 != 65535)
                (up-compare-goal g-scout-best-score > 0)
                =>
                (up-remove-objects search-local object-data-index g:!= g-loop-counter)
                (up-target-point g-point4-x action-move -1 -1)
                ; (up-chat-data-to-all "Score: %d" g: g-scout-best-score)
                ; (up-send-flare g-point4-x)
                )

                (defrule
                (or
                    (up-compare-goal g-difficulty >= HARDEST)
                    (building-type-count-total town-center == 0))
                (up-group-size c: 8 > 0)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-compare-goal g-loop-counter g:< g-local-total)
                =>
                (up-full-reset-search)
                (up-set-group search-local c: 8)
                (up-get-search-state g-local-total)
                (set-goal g-scout-current-score 0)
                (set-goal g-scout-best-score -99999)
                (set-goal g-scout-los 0)
                (set-goal g-scout-radius 0)
                (set-goal g-temp NO)
                (up-jump-rule -31)
                )

        ;-----------------------
        ;   Set Exploring SNs
        ;-----------------------

            (defrule
            (up-compare-goal g-difficulty >= HARDEST)
            (up-group-size c: 8 > 0)
            (up-compare-goal g-num-auto-scouts >= 0)
            (up-compare-sn sn-number-explore-groups g:!= g-num-auto-scouts)
            (current-age == dark-age)
            =>
            (up-modify-sn sn-number-explore-groups g:= g-num-auto-scouts)
            (up-modify-sn sn-total-number-explorers s:= sn-cap-civilian-explorers)
            (up-modify-sn sn-total-number-explorers g:+ g-num-auto-scouts)
            (up-modify-sn sn-number-explore-groups g:= g-num-auto-scouts)
            (up-modify-sn sn-number-explore-groups c:max 0)
            (up-modify-sn sn-total-number-explorers c:max 0)
            ; (up-chat-data-to-all "Auto explore %d" s: sn-number-explore-groups)
            (up-reset-scouts)
            )

            (defrule
            (up-compare-goal g-difficulty >= HARDEST)
            (up-group-size c: 8 > 0)
            (up-compare-goal g-num-villager-auto-scouts >= 0)
            (up-compare-sn sn-cap-civilian-explorers g:!= g-num-villager-auto-scouts)
            (current-age == dark-age)
            =>
            (up-modify-sn sn-total-number-explorers s:= sn-number-explore-groups)
            (up-modify-sn sn-total-number-explorers g:+ g-num-villager-auto-scouts)
            (up-modify-sn sn-cap-civilian-explorers g:= g-num-villager-auto-scouts)
            (up-modify-sn sn-minimum-civilian-explorers g:= g-num-villager-auto-scouts)
            (up-get-fact unit-type-count villager g-temp4)
            (up-modify-sn sn-percent-civilian-explorers g:= g-num-villager-auto-scouts)
            (up-modify-sn sn-percent-civilian-explorers g:%/ g-temp4)
            (up-modify-sn sn-total-number-explorers c:max 0)
            (up-modify-sn sn-cap-civilian-explorers c:max 0)
            (up-modify-sn sn-minimum-civilian-explorers c:max 0)
            ; (up-chat-data-to-all "Vil Auto explore %d" g: g-num-villager-auto-scouts)
            ; (up-chat-data-to-all "Vil Auto explore SN %d" s: sn-cap-civilian-explorers)
            (up-reset-scouts)
            )

            (defrule
            (military-population == 0)
            (or
                (and
                    (goal g-num-auto-scouts 0)
                    (goal g-num-villager-auto-scouts 0))
                (up-compare-goal g-difficulty < HARDEST))
            (current-age == dark-age)
            (building-type-count town-center > 0)
            (up-compare-goal g-current-sheep-count < 3)
            (up-compare-goal g-total-sheep-found < 8)
            (unit-type-count villager <= 20)
            (up-compare-sn sn-cap-civilian-explorers <= 0)
            =>
            (set-strategic-number sn-total-number-explorers 1)
            (set-strategic-number sn-cap-civilian-explorers 1)
            (set-strategic-number sn-minimum-civilian-explorers 1)
            (up-get-fact unit-type-count villager g-temp4)
            (up-modify-sn sn-percent-civilian-explorers c:= 1)
            (up-modify-sn sn-percent-civilian-explorers g:%/ g-temp4)
            ; (chat-to-all "explore with villager")
            )

            #load-if-defined HUN-CIV

                (defrule
                (military-population == 0)
                (current-age == dark-age)
                (building-type-count town-center > 0)
                ; (up-compare-goal g-current-sheep-count < 3)
                ; (up-compare-goal g-total-sheep-found < 8)
                (unit-type-count villager <= 20)
                (up-compare-sn sn-cap-civilian-explorers <= 0)
                =>
                (set-strategic-number sn-total-number-explorers 1)
                (set-strategic-number sn-cap-civilian-explorers 1)
                (set-strategic-number sn-minimum-civilian-explorers 1)
                (up-get-fact unit-type-count villager g-temp4)
                (up-modify-sn sn-percent-civilian-explorers c:= 1)
                (up-modify-sn sn-percent-civilian-explorers g:%/ g-temp4)
                ; (chat-to-all "explore with villager2")
                ; (up-chat-data-to-all "Current %d" g: g-current-sheep-count)
                ; (up-chat-data-to-all "Total %d" g: g-total-sheep-found)
                )

            #end-if

            (defrule
            (timer-triggered t-10-sec)
            (military-population == 0)
            (or
                (and
                    (goal g-num-auto-scouts 0)
                    (goal g-num-villager-auto-scouts 0))
                (up-compare-goal g-difficulty < HARDEST))
            (current-age == dark-age)
            (building-type-count town-center > 0)
            (up-compare-goal g-current-sheep-count < 3)
            (up-compare-goal g-total-sheep-found < 8)
            (unit-type-count villager <= 20)
            =>
            (up-jump-rule 1)
            )
                (defrule
                (timer-triggered t-10-sec)
                (up-compare-sn sn-cap-civilian-explorers > 0)
                (or
                    (and
                        (goal g-num-auto-scouts 0)
                        (goal g-num-villager-auto-scouts 0))
                    (up-compare-goal g-difficulty < HARDEST))
                =>
                (up-modify-sn sn-total-number-explorers s:= sn-number-explore-groups)
                (set-strategic-number sn-cap-civilian-explorers 0)
                (set-strategic-number sn-minimum-civilian-explorers 0)
                (set-strategic-number sn-percent-civilian-explorers 0)
                ; (chat-to-all "reset villager scouts")
                )

            (defrule
            (or
                (current-age >= feudal-age)
                (up-compare-goal g-difficulty < HARDEST))
            (up-compare-sn sn-number-explore-groups != 1)
            =>
            (set-strategic-number sn-number-explore-groups 1)
            (up-modify-sn sn-total-number-explorers s:max sn-number-explore-groups)
            ; (chat-to-all "explore with military")
            )

            (load "The General 1.2/Functions/Reset Mini")

            (defrule
            (timer-triggered t-10-sec)
            (unit-type-count villager-builder == 0)
            (up-compare-goal g-boar-lurer-id < 0)
            (strategic-number sn-cap-civilian-explorers > 0)
            (unit-type-count villager <= 10)
            (current-age == dark-age)
            =>
            (up-full-reset-search)
            (up-find-local c: villager-class c: 10)
            (up-remove-objects search-local object-data-order != orderid-explore)
            (up-get-search-state g-local-total)
            (up-modify-goal g-temp g:= g-local-total)
            (up-full-reset-search)
            (up-find-local c: villager-class c: 10)
            (up-remove-objects search-local object-data-idling == 0)
            (up-get-search-state g-local-total)
            (up-modify-goal g-local-total g:+ g-temp)
            )

            (defrule
            (timer-triggered t-10-sec)
            (unit-type-count villager-builder == 0)
            (up-compare-goal g-boar-lurer-id < 0)
            (strategic-number sn-cap-civilian-explorers > 0)
            (unit-type-count villager <= 10)
            (current-age == dark-age)
            (goal g-local-total 0)
            =>
            (up-full-reset-search)
            (up-filter-exclude -1 actionid-build orderid-build -1)
            (up-find-local c: villager-class c: 10)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: town-center c: 1)
            )

            (defrule
            (timer-triggered t-10-sec)
            (unit-type-count villager-builder == 0)
            (up-compare-goal g-boar-lurer-id < 0)
            (strategic-number sn-cap-civilian-explorers > 0)
            (unit-type-count villager <= 10)
            (current-age == dark-age)
            (goal g-local-total 0)
            (up-set-target-object search-local c: 0)
            (up-set-target-object search-remote c: 0)
            =>
            (up-target-objects 1 action-garrison -1 -1)
            ; (chat-to-all "garrison villagers to scout")
            )

    ;------------------------------
    ;	GOAL: g-current-sheep-id
    ;	GOAL: g-next-sheep-id
    ;	GOAL: g-backup-sheep-id
    ;------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (not
            (up-set-target-by-id g: g-current-sheep-id))
        (up-set-target-by-id g: g-next-sheep-id)
        =>
        (up-modify-goal g-current-sheep-id g:= g-next-sheep-id)
        ; (chat-to-all "set current sheep")
        (set-goal g-next-sheep-id PENDING)
        )
        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (not
            (up-set-target-by-id g: g-next-sheep-id))
        (up-set-target-by-id g: g-backup-sheep-id)
        =>
        (up-modify-goal g-next-sheep-id g:= g-backup-sheep-id)
        ; (chat-to-all "set next sheep")
        (set-goal g-backup-sheep-id PENDING)
        )

        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (up-compare-goal g-current-sheep-count > 0)
        =>
        (up-set-target-point g-position-self-x)	;search from sheep near sheep gather point
        (up-full-reset-search)
        (up-find-local c: livestock-class c: 20)
        (up-clean-search search-local object-data-distance search-order-asc)
        (up-remove-objects search-local object-data-player != my-player-number)
        (up-remove-objects search-local object-data-id g:== g-current-sheep-id)
        (up-remove-objects search-local object-data-id g:== g-next-sheep-id)
        (up-remove-objects search-local object-data-id g:== g-backup-sheep-id)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-filter-status c: status-pending c: list-active)
        (up-find-status-remote c: town-center-foundation c: 1)
        (up-get-search-state g-local-total)
        )

        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (or
            (building-type-count town-center == 1)
            (and
                (up-set-target-object search-remote c: 0)
                (up-object-data object-data-hitpoints >= 1200)))
        (not
            (up-set-target-by-id g: g-current-sheep-id))
        (up-set-target-object search-local c: 0)
        =>
        (up-get-object-data object-data-id g-current-sheep-id)
        (up-remove-objects search-local object-data-index == 0)
        ; (chat-to-all "found current sheep")
        )
        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (building-type-count town-center >= 1)
        (not
            (up-set-target-by-id g: g-next-sheep-id))
        (up-set-target-object search-local c: 0)
        =>
        (up-get-object-data object-data-id g-next-sheep-id)
        (up-remove-objects search-local object-data-index == 0)
        ; (chat-to-all "found next sheep")
        )
        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (unit-type-count villager-shepherd >= 6)
        (not
            (up-set-target-by-id g: g-backup-sheep-id))
        (up-set-target-object search-local c: 0)
        =>
        (up-get-object-data object-data-id g-backup-sheep-id)
        (up-remove-objects search-local object-data-index == 0)
        ; (chat-to-all "found backup sheep")
        )

        ;Reset current or next sheep if they are dead or converted
        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (up-compare-goal g-current-sheep-id != PENDING)
        (or
            (not
                (up-set-target-by-id g: g-current-sheep-id))
            (and
                (up-set-target-by-id g: g-current-sheep-id)
                (and
                    (up-object-data object-data-player != my-player-number)
                    (up-object-data object-data-hitpoints > 0))))
        =>
        (set-goal g-current-sheep-id PENDING)
        ; (chat-to-all "reset current sheep")
        )
        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (up-compare-goal g-next-sheep-id != PENDING)
        (or
            (not
                (up-set-target-by-id g: g-next-sheep-id))
            (and
                (up-set-target-by-id g: g-next-sheep-id)
                (and
                    (up-object-data object-data-player != my-player-number)
                    (up-object-data object-data-hitpoints > 0))))
        =>
        (set-goal g-next-sheep-id PENDING)
        ; (chat-to-all "reset next sheep")
        )
        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (up-compare-goal g-backup-sheep-id != PENDING)
        (or
            (not
                (up-set-target-by-id g: g-backup-sheep-id))
            (and
                (up-set-target-by-id g: g-backup-sheep-id)
                (and
                    (up-object-data object-data-player != my-player-number)
                    (up-object-data object-data-hitpoints > 0))))
        =>
        (set-goal g-backup-sheep-id PENDING)
        ; (chat-to-all "reset backup sheep")
        )
        (defrule
        (or
            (up-compare-goal g-difficulty >= HARDEST)
            (building-type-count-total town-center == 0))
        (up-compare-goal g-backup-sheep-id != PENDING)
        (unit-type-count villager-shepherd < 6)
        =>
        (set-goal g-backup-sheep-id PENDING)
        ; (chat-to-all "backup sheep not needed")
        )

    ;---------------
    ;   Sheep DUC
    ;---------------

        (load "The General 1.2/Functions/Reset Mini")

        ;This section controls the movement of sheep and how villagers gather the sheep
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count-total town-center == 1)
        (or
            (up-set-target-by-id g: g-current-sheep-id)
            (or
                (up-set-target-by-id g: g-next-sheep-id)
                (up-set-target-by-id g: g-backup-sheep-id)))
        =>
        (up-copy-point g-point-x g-position-self-x)
        (up-modify-goal g-point-x c:- 1)			;Get point a little bit away from the TC center
        (up-modify-goal g-point-y c:- 1)			;Get point a little bit away from the TC center
        (up-bound-point g-point-x g-point-x)
        (up-set-target-point g-point-x)
        (up-full-reset-search)
        (set-goal g-temp sheep)
        )
        
        ;Move current sheep to TC
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-temp sheep)
        (building-type-count-total town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-object-data object-data-idling == 1)	;current sheep is idle
        (up-object-data object-data-distance >= 3)	;current sheep too far away from TC
        (up-object-data object-data-hitpoints > 0)
        (up-object-data object-data-player == my-player-number)
        (up-add-object-by-id search-local g: g-current-sheep-id)
        (up-compare-goal g-point-x >= 0)
        (up-compare-goal g-point-y >= 0)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-target-point g-point-x action-move -1 -1)
        ; (up-send-flare g-point-x)
        )

        ;Detect how many sheep we have, only send sheep if we have < 2 dead sheep
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count-total town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-status c: status-gather c: list-active)
        (up-filter-distance c: -1 c: 10)
        (set-strategic-number sn-focus-player-number 0)
        (up-find-status-remote c: livestock-class c: 2)
        (up-get-search-state g-local-total)
        (up-filter-status c: status-ready c: list-active)
        )

        ;Pick a point to send sheep to
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count-total town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-object-data object-data-hitpoints == 0)	;current sheep is dead
        (up-object-data object-data-carry < 30)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-hitpoints > 0)
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        (up-object-data object-data-player == my-player-number)
        (up-compare-goal g-remote-total < 2)        ;we have less than two dead sheep
        =>
        (up-set-target-point g-position-self-x)
        (set-goal g-temp2 865)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-temp2 865)
        (building-type-count-total town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        =>
        (up-copy-point g-point-x g-position-self-x)
        (up-modify-goal g-point-x c:- 1)			;Get point a little bit away from the TC center
        (up-modify-goal g-point-y c:- 1)			;Get point a little bit away from the TC center
        (up-bound-point g-point-x g-point-x)
        (up-full-reset-search)
        (up-set-target-point g-point-x)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-temp2 865)
        (building-type-count-total town-center == 1)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        (up-set-target-by-id g: g-current-sheep-id)
        =>
        (up-get-object-data object-data-precise-distance g-temp3)
        (set-goal g-loop-counter 0)
        )

            ;Pick point away from current sheep location, if necessary
            (defrule
            (up-compare-goal g-difficulty >= HARDEST)
            (goal g-temp2 865)
            (building-type-count-total town-center == 1)
            (up-set-target-by-id g: g-next-sheep-id)
            (up-object-data object-data-idling == 1)	;next sheep is idle
            (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
            (up-set-target-by-id g: g-current-sheep-id)
            (up-compare-goal g-temp3 < 75)
            (up-compare-goal g-loop-counter < 3)
            =>
            (up-modify-goal g-point-y c:+ 1)
            (up-bound-point g-point-x g-point-x)
            (up-set-target-point g-point-x)
            (up-get-object-data object-data-precise-distance g-temp3)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-temp2 865)
        (building-type-count-total town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        (goal g-loop-counter 5)
        =>
        (up-copy-point g-point-x g-position-self-x)
        (up-modify-goal g-point-x c:- 1)			;Get point a little bit away from the TC center
        (up-modify-goal g-point-y c:- 1)			;Get point a little bit away from the TC center
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-temp2 865)
        (building-type-count-total town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        (up-compare-goal g-point-x >= 0)
        (up-add-object-by-id search-local g: g-next-sheep-id)
        (up-set-target-object search-local c: 0)
        (up-object-data object-data-player == my-player-number)
        =>
        (up-target-point g-point-x action-default -1 -1)
        )

        (load "The General 1.2/Functions/Reset Mini")

        ;Get sheep to send to sheep gather point (exclude the current sheep to gather)
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count-total town-center == 1)
        (up-compare-goal g-current-sheep-count > 0)
        (timer-triggered t-5-sec)
        =>
        (up-set-target-point g-sheep-gather-x)
        (up-full-reset-search)
        (up-filter-distance c: 3 c: -1)
        (up-find-local c: livestock-class c: 10)
        (up-remove-objects search-local object-data-id g:== g-current-sheep-id)
        (up-remove-objects search-local object-data-group-flag == 8)
        (up-remove-objects search-local object-data-player != my-player-number)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        ;Exclude the next sheep to gather if the current sheep is almost completely gathered
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count-total town-center == 1)
        (up-compare-goal g-current-sheep-count > 0)
        (timer-triggered t-5-sec)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-object-data object-data-carry < 30)
        =>
        (up-remove-objects search-local object-data-id g:== g-next-sheep-id)
        (up-get-search-state g-local-total)
        )

        ;Send sheep to sheep gather point
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count-total town-center == 1)
        (up-compare-goal g-current-sheep-count > 0)
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-point g-sheep-gather-x action-move -1 -1)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count-total town-center == 1)
        (up-compare-goal g-current-sheep-count > 0)
        (up-group-size c: 8 > 0)
        =>
        (up-full-reset-search)
        (up-set-group search-local c: 8)
        (up-remove-objects search-local object-data-class != livestock-class)
        (up-remove-objects search-local object-data-hitpoints <= 0)
        (up-remove-objects search-local object-data-idling == 1)
        )
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count-total town-center == 1)
        (up-compare-goal g-current-sheep-count > 0)
        (up-group-size c: 8 > 0)
        (up-set-target-object search-local c: 0)
        (up-object-data object-data-move-x == -1)
        (up-object-data object-data-move-y == -1)
        =>
        (up-get-object-data object-data-move-x g-temp)
        (up-target-point 0 action-stop -1 -1)
        ; (chat-to-all "stop scout sheep")
        )

        ;Retask shepherds if they target a sheep too far from town center

        (load "The General 1.2/Functions/Reset Mini")

        ;First, determine if any sheep are incorrectly being targeted
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count-total town-center == 1)
        (unit-type-count livestock-class > 0)
        (up-set-target-by-id g: g-current-sheep-id)
        ; (or
        ;     (up-object-data object-data-tasks-count <= 6)
        ;     (unit-type-count villager-shepherd <= 6))
        =>
        (up-set-target-point g-position-self-x)
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-find-remote c: livestock-class c: 20)
        (up-remove-objects search-remote object-data-tasks-count == 0)          ;remove sheep not being targeted by anything
        (up-remove-objects search-remote object-data-player != my-player-number);sometimes the search can find sheep not owned by us
        (up-remove-objects search-remote object-data-id g:== g-current-sheep-id)
        (set-goal g-temp 9431)
        )

        ;If so, get villagers that are targeting the sheep
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-temp 9431)
        (building-type-count-total town-center == 1)
        (unit-type-count livestock-class > 0)
        (up-set-target-by-id g: g-current-sheep-id)
        ; (or
        ;     (up-object-data object-data-tasks-count <= 6)
        ;     (unit-type-count villager-shepherd <= 6))
        (up-set-target-object search-remote c: 0)
        (up-get-object-data object-data-id g-temp2)  ;store sheep ID that is incorrectly being targeted
        =>
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-find-local c: villager-class c: 40)
        (up-remove-objects search-local object-data-target-id g:!= g-temp2)  ;remove villagers not targeting the sheep
        (set-goal g-temp 9432)
        (up-set-target-point g-position-self-x)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-temp 9432)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-object-data object-data-distance <= 3)
        (building-type-count-total town-center == 1)
        (unit-type-count livestock-class > 0)
        ; (or
        ;     (up-object-data object-data-tasks-count <= 6)
        ;     (unit-type-count villager-shepherd <= 6))
        (up-set-target-object search-remote c: 0)               ;we found sheep being incorrectly targeted
        (up-set-target-object search-local c: 0)                ;we found villagers targeting incorrect sheep
        (up-set-target-by-id g: g-current-sheep-id)             ;we have a sheep we want to gather
        =>
        (up-target-objects 1 action-default -1 -1)
        )

        ;If sheep isn't close, garrison shepherds in TC to send them toward the TC and/or retask them
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-temp 9432)
        (building-type-count-total town-center == 1)
        (unit-type-count livestock-class > 0)
        (up-set-target-object search-remote c: 0)               ;we found sheep being incorrectly targeted
        (up-set-target-object search-local c: 0)                ;we found villagers targeting incorrect sheep
        (up-set-target-by-id g: g-current-sheep-id)             ;we have a sheep we want to gather
        (up-object-data object-data-distance > 3)
        (up-object-data object-data-distance < 7)
        (up-object-data object-data-hitpoints > 0)
        ; (or
        ;     (up-object-data object-data-tasks-count <= 6)
        ;     (unit-type-count villager-shepherd <= 6))
        =>
        (up-reset-search 0 0 1 1)
        (up-reset-filters)
        (up-find-remote c: town-center c: 1)
        (up-target-objects 0 action-garrison -1 -1)
        ; (chat-to-all "villagers targeting wrong sheep")
        )

        (load "The General 1.2/Functions/Reset Mini")

        ;Task idle sheep to TC
        (defrule
        (up-compare-goal g-difficulty < HARDEST)
        (up-compare-goal g-current-sheep-count > 0)
        (up-compare-goal g-position-self-x >= 0)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-distance c: 2 c: -1)
        (up-find-local c: livestock-class c: 10)
        (up-remove-objects search-local object-data-idling != 1)
        (up-get-search-state g-local-total)
        )
        (defrule
        (up-compare-goal g-difficulty < HARDEST)
        (up-compare-goal g-current-sheep-count > 0)
        (up-compare-goal g-position-self-x >= 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-copy-point g-point-x g-position-self-x)
        (up-modify-goal g-point-x c:- 1)
        (up-modify-goal g-point-y c:+ 1)
        (up-target-point g-point-x action-move -1 -1)
        ; (chat-to-all "send idle sheep to TC")
        )

    ;-------------------
    ;   TC Ungarrison
    ;-------------------

        ;This forces a speedy ungarrison for when villagers are tasked to garrison in the TC to be retasked
        (defrule
        (building-type-count town-center > 0)
        (goal g-town-under-attack NO)
        (up-enemy-units-in-town == 0)
        (up-enemy-buildings-in-town == 0)
        =>
        (up-ungarrison c: town-center)
        )

    ;-----------
    ;   Nomad
    ;-----------

        ; (load "The General 1.2/Functions/Reset")

        ; (defrule
        ; (goal g-map-style NOMAD)
        ; (up-compare-goal g-position-self-x >= 0)
        ; =>
        ; (up-find-local c: villager-class c: 20)
        ; (up-set-target-point g-position-self-x)
        ; (up-remove-objects search-local object-data-distance < 8)
        ; (up-get-search-state g-local-total)
        ; )

        ; (defrule
        ; (goal g-map-style NOMAD)
        ; (up-compare-goal g-position-self-x >= 0)
        ; (up-compare-goal g-local-total > 0)
        ; =>
        ; (up-target-point g-position-self-x action-default -1 -1)
        ; ; (chat-to-all "send villagers")
        ; (disable-self)
        ; )


;=========================<>=========================
;				HUNTING AND GATHERING
;=========================<>=========================

    ;---------------
    ;   Push Deer
    ;---------------

        (load "The General 1.2/Functions/Reset Mini")
        
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout-id)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-current-deer-id PENDING)
        =>
        (set-goal g-loop-counter 0)
        (up-set-target-point g-position-self-x)
        (up-full-reset-search)
        )

            (defrule
            (up-compare-goal g-difficulty >= HARDEST)
            (goal g-scouting-status PUSH-DEER)
            (building-type-count-total town-center > 0)
            (up-set-target-by-id g: g-scout-id)
            (up-compare-goal g-current-deer-count > 0)
            (goal g-current-deer-id PENDING)
            (up-set-target-by-id g: g-loop-counter)
            (up-object-data object-data-class == deer-class)
            (up-object-data object-data-carry > 0)
            (up-object-data object-data-hitpoints > 0)
            (up-object-data object-data-distance <= 45)
            (up-get-object-data object-data-point-x g-point-x)
            (up-get-object-data object-data-point-y g-point-y)
            (up-point-explored g-point-x != explored-no)
            =>
            (up-add-object-by-id search-remote g: g-loop-counter)
            )

            (defrule
            (up-compare-goal g-difficulty >= HARDEST)
            (goal g-scouting-status PUSH-DEER)
            (building-type-count-total town-center > 0)
            (up-set-target-by-id g: g-scout-id)
            (up-compare-goal g-current-deer-count > 0)
            (goal g-current-deer-id PENDING)
            (up-compare-goal g-loop-counter g:< g-id-loop-max-objects)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -2)
            )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout-id)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-current-deer-id PENDING)
        (up-set-target-object search-remote c: 0)
        =>
        (up-clean-search search-remote object-data-distance search-order-asc)
        (set-goal g-deer-pushing-status SEARCHED-FOR-DEER)
        )

        ;Get ID of deer to push
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-deer-pushing-status SEARCHED-FOR-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout-id)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-current-deer-id PENDING)
        (up-set-target-object search-remote c: 0)
        =>
        (up-get-object-data object-data-id g-current-deer-id)
        (set-goal g-deer-pushing-status FOUND-DEER)
        )

        ;Send Scout to point behind deer to push deer to TC
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-deer-pushing-status FOUND-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout-id)
        (up-set-target-by-id g: g-current-deer-id)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-current-deer-count > 0)
        =>
        (up-get-object-data object-data-precise-x g-point-x)
        (up-get-object-data object-data-precise-y g-point-y)
        (up-copy-point g-point2-x g-position-self-x)
        (up-modify-goal g-point2-x c:* 100)
        (up-modify-goal g-point2-y c:* 100)
        (up-lerp-tiles g-point-x g-point2-x c: -75)       ;send scout one tile away from deer
        (up-bound-precise-point g-point-x 1 c: 0)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-deer-pushing-status FOUND-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout-id)
        (up-set-target-by-id g: g-current-deer-id)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-current-deer-count > 0)
        (up-add-object-by-id search-local g: g-scout-id)
        (up-set-target-object search-local c: 0)
        =>
        (up-set-precise-target-point g-point-x)
        (set-strategic-number sn-target-point-adjustment 6) ;allow targeting a precise point
        (up-target-point 0 action-move -1 -1)
        (set-strategic-number sn-target-point-adjustment 0)
        (set-goal g-deer-pushing-status CHECK-DEER-DISTANCE)
        (up-set-target-point g-position-self-x)
        )

        ;Check if deer is close to TC, if so, find villager to hunt deer
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-deer-pushing-status CHECK-DEER-DISTANCE)
        (goal g-scouting-status PUSH-DEER)
        (up-set-target-by-id g: g-current-deer-id)
        (up-get-object-data object-data-distance g-temp2)
        (up-compare-goal g-temp2 <= 4)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-current-deer-count > 0)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-distance c: -1 c: 10)
        (up-find-local c: female-shepherd c: 2)		;prioritize hunting deer with a shepherd instead of a hunter
        (up-find-local c: male-shepherd c: 2)
        (up-find-local c: villager-class c: 2)
        (set-goal g-deer-pushing-status FOUND-DEER-HUNTER)
        (up-get-search-state g-local-total)
        )

        ;If deer is close, hunt deer with villager
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-deer-pushing-status FOUND-DEER-HUNTER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-current-deer-id)
        (up-compare-goal g-current-deer-count > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-clean-search search-local object-data-distance search-order-asc)
        (up-remove-objects search-local object-data-index > 3)  ;hunt deer with 4 vils max
        (up-target-objects 1 action-default -1 -1)
        (set-goal g-deer-pushing-status SHOOT-DEER)
        )

        ;If deer too far from TC, stop hunters
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-deer-pushing-status SHOOT-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-current-deer-id)
        (up-compare-goal g-current-deer-count > 0)
        =>
        (up-set-target-point g-position-self-x)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-deer-pushing-status SHOOT-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-current-deer-id)
        (up-compare-goal g-current-deer-count > 0)
        (up-object-data object-data-distance > 5)
        =>
        (up-full-reset-search)
        (up-find-local c: male-hunter c: 10)
        (up-find-local c: female-hunter c: 10)
        (up-remove-objects search-local object-data-target-id g:!= g-current-deer-id)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (goal g-deer-pushing-status SHOOT-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-current-deer-id)
        (up-compare-goal g-current-deer-count > 0)
        (up-object-data object-data-distance > 5)
        (up-set-target-object search-local c: 0)
        =>
        (up-target-point 0 action-stop -1 -1)
        (set-goal g-deer-pushing-status CHECK-DEER-DISTANCE)
        )

        ;If deer is not close, tell scout to nudge the deer again
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-compare-goal g-deer-pushing-status >= CHECK-DEER-DISTANCE)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout-id)
        (up-set-target-by-id g: g-current-deer-id)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-current-deer-count > 0)
        =>
        (set-goal g-deer-pushing-status FOUND-DEER)
        )

        ;Once deer is hunted, reset the deer ID again so we can push another deer
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-set-target-by-id g: g-current-deer-id)
        (up-object-data object-data-hitpoints == 0)
        =>
        (set-goal g-current-deer-id PENDING)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-compare-goal g-current-deer-id > 0)
        (not
            (up-set-target-by-id g: g-current-deer-id))
        =>
        (set-goal g-current-deer-id PENDING)
        )

    ;------------------
    ;   Boar Hunting
    ;------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (not
            (up-set-target-by-id g: g-current-boar-id))
        (or
            (up-compare-goal g-boar-hunt-status != PENDING)
            (up-compare-goal g-current-boar-id != PENDING))
        =>
        (set-goal g-current-boar-id PENDING)
        (set-goal g-boar-hunt-status PENDING)
        (set-goal g-boar-lurer-id PENDING)
        ; (chat-local-to-self "reset boar-hunting")
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status TARGET-BOAR)
        (or
            (not
                (up-set-target-by-id g: g-boar-lurer-id))
            (and
                (up-set-target-by-id g: g-boar-lurer-id)
                (up-object-data object-data-target-id g:!= g-current-boar-id)))
        =>
        (set-goal g-current-boar-id PENDING)
        (set-goal g-boar-hunt-status PENDING)
        (set-goal g-boar-lurer-id PENDING)
        ; (chat-local-to-self "boar lurer was retasked, send lurer again")
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (up-compare-goal g-boar-hunt-status < READY-TO-LURE)
        (up-compare-flag g-flag == BOAR-HUNTING-CONDITIONS-MET)
        ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
        (up-compare-goal g-current-boar-count > 0)
        =>
        (set-goal g-boar-hunt-status READY-TO-LURE)
        ; (chat-local-to-self "ready to lure")
        ; (up-chat-data-to-all "Total hunt: %d" g: g-total-decaying-hunt-food)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status READY-TO-LURE)
        ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
        (up-compare-goal g-current-boar-count > 0)
        =>
        (set-goal g-current-boar-id PENDING)
        (set-goal g-loop-counter 0)
        (up-set-target-point g-position-self-x)
        (up-full-reset-search)
        )

            (defrule
            (up-compare-goal g-difficulty >= HARD)
            (goal g-boar-hunt-status READY-TO-LURE)
            ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
            (up-compare-goal g-current-boar-count > 0)
            (goal g-current-boar-id PENDING)
            (up-set-target-by-id g: g-loop-counter)
            (up-object-data object-data-class == boar-class)
            (up-object-data object-data-carry > 0)
            (up-object-data object-data-hitpoints > 0)
            (up-object-data object-data-distance <= MAX-BOAR-HUNT-DISTANCE)
            (up-get-object-data object-data-point-x g-point-x)
            (up-get-object-data object-data-point-y g-point-y)
            (up-point-explored g-point-x != explored-no)
            =>
            (up-add-object-by-id search-remote g: g-loop-counter)
            )

            (defrule
            (up-compare-goal g-difficulty >= HARD)
            (goal g-boar-hunt-status READY-TO-LURE)
            ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
            (up-compare-goal g-current-boar-count > 0)
            (goal g-current-boar-id PENDING)
            (up-compare-goal g-loop-counter g:< g-id-loop-max-objects)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -2)
            )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status READY-TO-LURE)
        ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
        (up-compare-goal g-current-boar-count > 0)
        (goal g-current-boar-id PENDING)
        (up-set-target-object search-remote c: 0)
        =>
        (up-get-point position-center g-point-x)
        (up-set-target-point g-point-x)
        (up-clean-search search-remote object-data-distance search-order-desc)
        ; (chat-local-to-self "search for boar")
        )

        ;Get ID of boar to lure
        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status READY-TO-LURE)
        ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
        (up-compare-goal g-current-boar-count > 0)
        (goal g-current-boar-id PENDING)
        (up-set-target-object search-remote c: 0)
        =>
        (up-get-object-data object-data-id g-current-boar-id)
        (set-goal g-boar-hunt-status SET-BOAR-ID)
        ; (chat-local-to-self "set boar to hunt")
        )

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status SET-BOAR-ID)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (up-research-status c: ri-loom < research-complete)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-exclude -1 actionid-explore orderid-build -1)
        (up-find-local c: villager-class c: 20)
        (up-remove-objects search-local object-data-type == male-lumberjack)
        (up-remove-objects search-local object-data-type == female-lumberjack)
        (up-remove-objects search-local object-data-type == male-gold-miner)
        (up-remove-objects search-local object-data-type == female-gold-miner)
        (up-remove-objects search-local object-data-type == male-stone-miner)
        (up-remove-objects search-local object-data-type == female-stone-miner)
        (up-remove-objects search-local object-data-type == male-builder)
        (up-remove-objects search-local object-data-type == female-builder)
        (up-remove-objects search-local object-data-hitpoints < 25)
        (up-clean-search search-local object-data-distance search-order-asc)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status SET-BOAR-ID)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (research-completed ri-loom)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-exclude -1 actionid-explore orderid-build -1)
        (up-find-local c: villager-class c: 20)
        (up-remove-objects search-local object-data-type == male-lumberjack)
        (up-remove-objects search-local object-data-type == female-lumberjack)
        (up-remove-objects search-local object-data-type == male-gold-miner)
        (up-remove-objects search-local object-data-type == female-gold-miner)
        (up-remove-objects search-local object-data-type == male-stone-miner)
        (up-remove-objects search-local object-data-type == female-stone-miner)
        (up-remove-objects search-local object-data-type == male-builder)
        (up-remove-objects search-local object-data-type == female-builder)
        (up-remove-objects search-local object-data-hitpoints < 40)
        (up-clean-search search-local object-data-distance search-order-asc)
        )
            
        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status SET-BOAR-ID)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (up-set-target-object search-local c: 0)
        (up-object-data object-data-class == villager-class)
        =>
        (up-get-object-data object-data-id g-boar-lurer-id)
        (set-goal g-boar-hunt-status DROP-LURER-RESOURCES)
        ; (chat-local-to-self "find boar lurer")
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status DROP-LURER-RESOURCES)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (up-set-target-by-id g: g-boar-lurer-id)
        (up-object-data object-data-carry > 5)	;lurer is carrying more than 5 resources
        (building-type-count town-center > 0)
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-find-remote c: town-center c: 1)
        (up-set-target-object search-remote c: 0)
        (up-add-object-by-id search-local g: g-boar-lurer-id)
        (up-target-objects 1 action-default -1 -1)
        ; (chat-local-to-self "drop resources before luring boar")
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status DROP-LURER-RESOURCES)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (up-set-target-by-id g: g-boar-lurer-id)
        (or
            (up-object-data object-data-carry <= 5)
            (building-type-count town-center == 0))
        =>
        (up-full-reset-search)
        (up-set-target-by-id g: g-current-boar-id)
        (up-add-object-by-id search-local g: g-boar-lurer-id)
        (up-target-objects 1 action-default -1 -1)	;right-click the boar with the villager, villager will auto-retreat to TC once boar attacks
        (set-goal g-boar-hunt-status TARGET-BOAR)
        ; (chat-local-to-self "target boar")
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status TARGET-BOAR)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action == actionid-attack)
        =>
        (set-goal g-boar-hunt-status LURE-BOAR)
        ; (chat-local-to-self "retreat lurer")
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status LURE-BOAR)
        (dropsite-min-distance live-boar <= 6)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints > 0)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-exclude -1 actionid-build orderid-build -1)
        (up-find-local c: villager-class c: 40)
        (up-remove-objects search-local object-data-type == male-gold-miner)
        (up-remove-objects search-local object-data-type == female-gold-miner)
        (up-remove-objects search-local object-data-type == male-stone-miner)
        (up-remove-objects search-local object-data-type == female-stone-miner)
        (up-remove-objects search-local object-data-type == male-builder)
        (up-remove-objects search-local object-data-type == female-builder)
        (up-remove-objects search-local object-data-hitpoints < 25)
        (up-clean-search search-local object-data-distance search-order-asc)
        (up-remove-objects search-local object-data-index > 3)
        (up-get-search-state g-local-total)
        ; (chat-local-to-self CHAT-BOAR-GET-ASSISTANT-HUNTERS)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status LURE-BOAR)
        (dropsite-min-distance live-boar <= 6)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-local-total < 4)
        =>
        (up-set-target-point g-position-self-x)
        (up-filter-exclude -1 actionid-build orderid-build -1)
        (up-find-local c: female-lumberjack c: 40)
        (up-find-local c: male-lumberjack c: 40)
        (up-remove-objects search-local object-data-hitpoints < 25)
        (up-clean-search search-local object-data-distance search-order-asc)
        (up-remove-objects search-local object-data-index > 3)
        (up-get-search-state g-local-total)
        ; (chat-local-to-self CHAT-BOAR-GET-ASSISTANT-HUNTERS)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status LURE-BOAR)
        (dropsite-min-distance live-boar <= 6)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-local-total >= 4)
        =>
        (set-goal g-boar-hunt-status ASSIST-HUNTING-BOAR)
        (up-drop-resources food c: 3)
        (up-target-objects 1 action-default -1 -1)
        ; (chat-local-to-self "assist hunting boar")
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status ASSIST-HUNTING-BOAR)
        (dropsite-min-distance live-boar > 6)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints > 0)
        =>
        (set-goal g-boar-hunt-status PENDING)
        (up-full-reset-search)
        (up-find-local c: female-hunter c: 10)
        (up-find-local c: male-hunter c: 10)
        (up-remove-objects search-local object-data-target-id g:!= g-current-boar-id)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-find-remote c: town-center c: 1)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status ASSIST-HUNTING-BOAR)
        (dropsite-min-distance live-boar > 6)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints > 0)
        (up-set-target-object search-local c: 0)
        (up-set-target-object search-remote c: 0)
        =>
        (up-target-objects 1 action-garrison -1 -1)
        ; (chat-local-to-self "boar is running away, stop hunting")
        )

        (defrule
        (up-compare-goal g-difficulty >= HARD)
        (goal g-boar-hunt-status ASSIST-HUNTING-BOAR)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints == 0)
        =>
        (set-goal g-boar-hunt-status PENDING)
        ; (chat-local-to-self "boar is hunted")
        )

    ;---------------------
    ;   Llama Gathering
    ;---------------------

        ;Incan llama won't be gathered automatically without DUC code:
        #load-if-defined INCAN-CIV

            ;Target llama
            (defrule
            (timer-triggered t-10-sec)
            (unit-type-count llama > 0)
            =>
            (up-full-reset-search)
            (up-set-target-point g-position-self-x)
            (up-filter-distance c: 2 c: -1)
            (up-find-local c: llama c: 20)
            )

            (defrule
            (timer-triggered t-10-sec)
            (unit-type-count llama > 0)
            (up-set-target-object search-local c: 0)
            (up-object-data object-data-player == my-player-number)
            =>
            (set-strategic-number sn-target-point-adjustment 4)
            (up-target-point g-position-self-x action-default -1 -1)
            (set-strategic-number sn-target-point-adjustment 0)
            )

            (defrule
            (unit-type-count llama > 0)
            (game-time >= 30)
            (unit-type-count villager-shepherd == 0)
            (unit-type-count villager-hunter == 0)
            (building-type-count house >= 2)
            =>
            (up-full-reset-search)
            (up-set-target-point g-position-self-x)
            (up-modify-goal g-temp2 s:= sn-focus-player-number)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-filter-distance c: -1 c: 2)
            (up-find-remote c: llama c: 1)
            (set-goal g-temp 1118)
            )

            (defrule
            (goal g-temp 1118)
            (unit-type-count llama > 0)
            (up-set-target-object search-remote c: 0)
            =>
            (up-reset-search 1 1 0 0)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 8)
            (up-find-local c: villager-class c: 1)
            (up-target-objects 1 action-default -1 -1) ;kill llama
            )
            
        #end-if

;=========================<>=========================
;			       RETASK VILLAGERS
;=========================<>=========================

    ;----------------------------
    ;   Ensure Enough Foragers
    ;----------------------------

        ; (load "The General 1.2/Functions/Reset Mini")

        ; (defrule
        ; (current-age == dark-age)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (unit-type-count villager >= 16)
        ; =>
        ; (up-get-fact unit-type-count villager g-temp)
        ; (up-modify-goal g-temp c:- 15)
        ; (up-modify-goal g-temp c:min 4)
        ; (up-get-fact unit-type-count villager-builder g-temp2)
        ; (up-modify-goal g-temp g:- g-temp2)
        ; )

        ; (defrule
        ; (current-age == dark-age)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (unit-type-count villager >= 16)
        ; (unit-type-count villager-forager g:< g-temp)
        ; =>
        ; (up-full-reset-search)
        ; (up-set-target-point g-position-self-x)
        ; (up-filter-distance c: -1 c: 20)
        ; (up-find-local c: mill c: 1)
        ; (up-filter-status c: status-pending c: list-active)
        ; (up-find-status-local c: mill c: 1)
        ; (set-goal g-temp2 23947)
        ; )

        ; (defrule
        ; (goal g-temp2 23947)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (up-set-target-object search-local c: 0)
        ; =>
        ; (up-get-point position-object g-point-x)
        ; (up-set-target-point g-point-x)
        ; (up-full-reset-search)
        ; (up-filter-status c: status-resource c: list-active)
        ; (up-filter-distance c: -1 c: 5)
        ; (up-find-resource c: forage-class c: 6)
        ; (up-clean-search search-remote object-data-distance search-order-asc)
        ; (up-remove-objects search-remote object-data-index == 0) ;remove closest bush because it often is blocked by the mill
        ; (up-get-search-state g-local-total)
        ; (set-goal g-temp2 23948)
        ; )        

        ; (defrule
        ; (goal g-temp2 23948)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (up-compare-goal g-remote-total > 0)
        ; (up-set-target-object search-remote c: 0)
        ; =>
        ; (up-reset-search 1 1 0 0)
        ; (up-reset-filters)
        ; (up-find-local c: female-shepherd c: 1)
        ; (up-find-local c: male-shepherd c: 1)
        ; (up-find-local c: female-hunter c: 1)
        ; (up-find-local c: male-hunter c: 1)
        ; (up-remove-objects search-local object-data-index > 0)
        ; (up-get-search-state g-local-total)
        ; (set-goal g-temp2 23949)
        ; )

        ; (defrule
        ; (goal g-temp2 23949)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (up-compare-goal g-local-total == 1)
        ; (up-compare-goal g-remote-total > 0)
        ; (up-set-target-object search-remote c: 0)
        ; =>
        ; (up-target-objects 0 action-default -1 -1)
        ; )

    ;---------------------------
    ;   Retask Early Foragers
    ;---------------------------

        ;Retask when gathering from forage bushes without mill
        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (unit-type-count villager-forager > 0)
        (building-type-count town-center > 0)
        (building-type-count mill == 0)
        (up-compare-goal g-total-sheep-found > 0)
        (unit-type-count villager-shepherd <= 5)
        (current-age == dark-age)
        (unit-type-count villager < 13)
        =>
        (up-full-reset-search)
        (up-find-local c: male-forager c: 20)
        (up-find-local c: female-forager c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-find-remote c: town-center c: 1)
        (up-get-search-state g-local-total)
        (set-goal g-temp 53640)
        )

        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (goal g-temp 53640)
        (up-compare-goal g-local-total > 0)
        (up-set-target-object search-remote c: 0)
        =>
        (up-target-objects 1 action-garrison -1 -1)
        ; (chat-local-to-self "retask early foragers")
        )

    ;-------------------------
    ;   Retask Far Foragers
    ;-------------------------

        ;Retask when gathering from forage bushes away from mill
        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (unit-type-count villager-forager > 0)
        (building-type-count town-center > 0)
        (building-type-count mill > 0)
        (up-compare-goal g-total-sheep-found > 0)
        (unit-type-count villager-shepherd <= 5)
        (current-age == dark-age)
        (unit-type-count villager < 13)
        =>
        (up-full-reset-search)
        (up-find-local c: male-forager c: 20)
        (up-find-local c: female-forager c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        (set-goal g-temp 53641)
        )

            (defrule
            (goal g-temp 53641)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (current-age == dark-age)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-filter-distance c: -1 c: 6)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: mill c: 1)
            (up-find-remote c: town-center c: 1)
            (up-filter-status c: status-pending c: list-active)
            (up-find-status-remote c: mill c: 1)
            (up-find-status-remote c: town-center-foundation c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-temp 53641)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (goal g-remote-total 0)
            (current-age == dark-age)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: town-center c: 1)
            (set-goal g-temp 53642)
            )

            (defrule
            (goal g-temp 53642)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (up-set-target-object search-remote c: 0)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-objects 1 action-garrison -1 -1)
            ; (chat-local-to-self "retask far foragers")
            (up-jump-rule 1)
            )

            (defrule
            (goal g-temp 53641)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-compare-goal g-loop-counter < 40)
            (current-age == dark-age)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )

    ;---------------------------
    ;   Ensure Enough Hunters
    ;---------------------------

        ; (load "The General 1.2/Functions/Reset Mini")

        ; (defrule
        ; (unit-type-count villager-forager > 4)
        ; (unit-type-count villager-hunter < 4)
        ; (dropsite-min-distance hunting < 5)
        ; =>
        ; (up-full-reset-search)
        ; (up-find-local c: male-forager c: 20)
        ; (up-find-local c: female-forager c: 20)
        ; (up-remove-objects search-local object-data-carry >= 3)
        ; (up-set-target-point g-position-self-x)
        ; (up-filter-distance c: -3 c: 8)
        ; (up-filter-status c: status-gather c: list-inactive)
        ; (up-find-resource c: boar-class c: 1)
        ; (up-find-resource c: deer-class c: 1)
        ; (up-remove-objects search-local object-data-index > 0)
        ; (up-remove-objects search-remote object-data-carry < 10)
        ; (up-clean-search search-remote object-data-distance search-order-asc)
        ; (up-get-search-state g-local-total)
        ; )

        ; (defrule
        ; (unit-type-count villager-forager > 4)
        ; (unit-type-count villager-hunter < 4)
        ; (dropsite-min-distance hunting < 6)
        ; (up-compare-goal g-local-total > 0)
        ; (up-set-target-object search-remote c: 0)
        ; =>
        ; (up-target-objects 1 action-default -1 -1)
        ; )

    ;---------------------------------
    ;   Retask Boar Hunters to Wood
    ;---------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (timer-triggered t-5-sec)
        (building-type-count town-center > 0)
        (unit-type-count villager-wood g:< g-desired-num-wood-vils)
        (unit-type-count villager-hunter s:> sn-minimum-number-hunters)
        (up-compare-goal g-desired-num-wood-vils > 1)
        (unit-type-count villager < 20)
        =>
        (up-set-target-point g-position-self-x)
        (up-full-reset-search)
        (up-filter-distance c: -1 c: 5)
        (up-find-local c: female-hunter c: 5)
        (up-find-local c: male-hunter c: 5)
        (up-clean-search search-local object-data-carry search-order-desc)
        (up-remove-objects search-local object-data-index > 0)
        (up-find-remote c: town-center c: 1)
        )

        (defrule
        (timer-triggered t-5-sec)
        (building-type-count town-center > 0)
        (unit-type-count villager-wood g:< g-desired-num-wood-vils)
        (unit-type-count villager-hunter s:> sn-minimum-number-hunters)
        (up-compare-goal g-desired-num-wood-vils > 1)
        (unit-type-count villager < 20)
        (up-set-target-object search-local c: 0)
        (up-set-target-object search-remote c: 0)
        =>
        (up-target-objects 1 action-garrison -1 -1)
        ; (chat-to-all "Retask hunter to wood")
        )

    ;------------------------------
    ;   Retask Early Lumberjacks
    ;------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (building-type-count town-center > 0)
        (unit-type-count villager-wood > 0)
        (current-age == dark-age)
        (unit-type-count villager <= VILS-FOR-LUMBER-CAMP)
        (strategic-number sn-wood-gatherer-percentage == 0)
        (or
            (dropsite-min-distance food < 4)
            (or
                (dropsite-min-distance hunting < 4)
                (up-compare-goal g-usable-farm-count > 0)))
        =>
        (up-find-local c: male-lumberjack c: 20)
        (up-find-local c: female-lumberjack c: 20)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (building-type-count town-center > 0)
        (unit-type-count villager-wood > 0)
        (current-age == dark-age)
        (unit-type-count villager <= VILS-FOR-LUMBER-CAMP)
        (strategic-number sn-wood-gatherer-percentage == 0)
        (or
            (dropsite-min-distance food < 4)
            (or
                (dropsite-min-distance hunting < 4)
                (up-compare-goal g-usable-farm-count > 0)))
        (up-compare-goal g-local-total > 0)
        =>
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-reset-search 0 0 1 1)
        (up-reset-filters)
        (up-find-remote c: town-center c: 1)
        )

        (defrule
        (up-compare-goal g-map-style != NOMAD)
        (up-compare-goal g-difficulty >= EXTREME)
        (building-type-count town-center > 0)
        (unit-type-count villager-wood > 0)
        (current-age == dark-age)
        (unit-type-count villager <= VILS-FOR-LUMBER-CAMP)
        (strategic-number sn-wood-gatherer-percentage == 0)
        (or
            (dropsite-min-distance food < 4)
            (or
                (dropsite-min-distance hunting < 4)
                (up-compare-goal g-usable-farm-count > 0)))
        (up-compare-goal g-local-total > 0)
        (up-set-target-object search-remote c: 0)
        =>
        (up-target-objects 1 action-garrison -1 -1)
        ; (chat-local-to-self "retask early lumberjacks")
        )

    ;----------------------------
    ;   Retask Far Lumberjacks
    ;----------------------------

        (load "The General 1.2/Functions/Reset Mini")

        ;Retask lumberjacks when gathering wood away from a dropsite
        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (unit-type-count villager-wood > 0)
        (building-type-count town-center > 0)
        (building-type-count lumber-camp > 0)
        (dropsite-min-distance wood < 7)
        (current-age == dark-age)
        =>
        (up-full-reset-search)
        (up-find-local c: male-lumberjack c: 20)
        (up-find-local c: female-lumberjack c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        (set-goal g-temp 53643)
        )

            (defrule
            (goal g-temp 53643)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (current-age == dark-age)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-filter-distance c: -1 c: 7)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: lumber-camp c: 1)
            (up-find-remote c: town-center c: 1)
            (up-filter-status c: status-pending c: list-active)
            (up-find-status-remote c: lumber-camp c: 1)
            (up-find-status-remote c: town-center-foundation c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-temp 53643)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (goal g-remote-total 0)
            (current-age == dark-age)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: town-center c: 1)
            (set-goal g-temp 53644)
            )

            (defrule
            (goal g-temp 53644)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (up-set-target-object search-remote c: 0)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-objects 1 action-garrison -1 -1)
            ; (chat-local-to-self "retask far lumberjacks")
            (up-jump-rule 1)
            )

            (defrule
            (goal g-temp 53643)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-compare-goal g-loop-counter < 40)
            (current-age == dark-age)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )
            
    ;----------------------------
    ;   Retask Far Gold Miners
    ;----------------------------

        (load "The General 1.2/Functions/Reset Mini")

        ;Retask gold miners when gathering gold away from a dropsite
        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (unit-type-count villager-gold > 0)
        (building-type-count town-center > 0)
        (building-type-count mining-camp > 0)
        (dropsite-min-distance gold < 7)
        (current-age == dark-age)
        =>
        (up-full-reset-search)
        (up-find-local c: male-gold-miner c: 20)
        (up-find-local c: female-gold-miner c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        (set-goal g-temp 53645)
        )

            (defrule
            (goal g-temp 53645)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (current-age == dark-age)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-filter-distance c: -1 c: 7)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: mining-camp c: 1)
            (up-find-remote c: town-center c: 1)
            (up-filter-status c: status-pending c: list-active)
            (up-find-status-remote c: mining-camp c: 1)
            (up-find-status-remote c: town-center-foundation c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-temp 53645)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (goal g-remote-total 0)
            (current-age == dark-age)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: town-center c: 1)
            (set-goal g-temp 53646)
            )

            (defrule
            (goal g-temp 53646)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (up-set-target-object search-remote c: 0)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-objects 1 action-garrison -1 -1)
            ; (chat-local-to-self "retask far gold miners")
            (up-jump-rule 1)
            )

            (defrule
            (goal g-temp 53645)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-compare-goal g-loop-counter < 40)
            (current-age == dark-age)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )
            
    ;-----------------------------
    ;   Retask Far Stone Miners
    ;-----------------------------

        (load "The General 1.2/Functions/Reset Mini")

        ;Retask stone miners when gathering stone away from a dropsite
        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (unit-type-count villager-stone > 0)
        (building-type-count town-center > 0)
        (building-type-count mining-camp > 0)
        (dropsite-min-distance stone < 7)
        (current-age == dark-age)
        =>
        (up-full-reset-search)
        (up-find-local c: male-stone-miner c: 20)
        (up-find-local c: female-stone-miner c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        (set-goal g-temp 53647)
        )

            (defrule
            (goal g-temp 53647)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (current-age == dark-age)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-filter-distance c: -1 c: 7)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: mining-camp c: 1)
            (up-find-remote c: town-center c: 1)
            (up-filter-status c: status-pending c: list-active)
            (up-find-status-remote c: mining-camp c: 1)
            (up-find-status-remote c: town-center-foundation c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-temp 53647)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (goal g-remote-total 0)
            (current-age == dark-age)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: town-center c: 1)
            (set-goal g-temp 53648)
            )

            (defrule
            (goal g-temp 53648)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (up-set-target-object search-remote c: 0)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-objects 1 action-garrison -1 -1)
            ; (chat-local-to-self "retask far stone miners")
            (up-jump-rule 1)
            )

            (defrule
            (goal g-temp 53647)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-compare-goal g-loop-counter < 40)
            (current-age == dark-age)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )

    ;----------------------------------
    ;   Task Villagers to Idle Farms
    ;----------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (timer-triggered t-5-sec)
        (up-compare-goal g-usable-farm-count > 0)
        (goal g-town-under-attack NO)
        (up-object-type-count c: villager-farmer g:< g-desired-num-food-vils)
        =>
        (up-full-reset-search)
        (up-modify-sn sn-focus-player-number c:= my-player-number)
        (up-find-remote c: farm c: 40)
        (up-remove-objects search-remote object-data-tasks-count > 0)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (timer-triggered t-5-sec)
        (up-compare-goal g-usable-farm-count > 0)
        (goal g-town-under-attack NO)
        (up-set-target-object search-remote c: 0)
        (up-object-type-count c: villager-farmer g:< g-desired-num-food-vils)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-filter-exclude -1 actionid-build orderid-explore -1)
        (up-filter-distance c: -1 c: 7)
        (up-find-local c: male-forager c: 3)
        (up-find-local c: female-forager c: 3)
        (up-find-local c: male-hunter c: 3)
        (up-find-local c: female-hunter c: 3)
        (up-find-local c: male-shepherd c: 3)
        (up-find-local c: female-shepherd c: 3)
        (up-find-local c: male-fisherman c: 3)
        (up-find-local c: female-fisherman c: 3)
        (up-clean-search search-local object-data-distance search-order-asc)
        (up-remove-objects search-local object-data-index > 0)
        )

        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (timer-triggered t-5-sec)
        (up-compare-goal g-usable-farm-count > 0)
        (goal g-town-under-attack NO)
        (up-set-target-object search-local c: 0)
        (up-set-target-object search-remote c: 0)
        (up-object-type-count c: villager-farmer g:< g-desired-num-food-vils)
        =>
        (up-target-objects 1 action-default -1 -1)
        ; (chat-local-to-self "task vils to farms")
        )


;=========================<>=========================
;				      DROPSITES
;=========================<>=========================

    ;-----------------------------
    ;   Delete Far Lumber Camps
    ;-----------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-flag g-flag == FIRST-ATTACK-LAUNCHED)
        (building-type-count lumber-camp > 1)
        (wood-amount >= 100)
        =>
        (up-full-reset-search)
        (up-find-local c: lumber-camp c: 20)
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-compare-flag g-flag == FIRST-ATTACK-LAUNCHED)
			(wood-amount >= 100)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count lumber-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 7)
			(set-strategic-number sn-focus-player-number my-player-number)
            (up-find-resource c: wood c: 1)
            (up-filter-status c: status-resource c: list-active)
            (up-find-resource c: wood c: 1)
            (up-get-search-state g-local-total)
            )
            
			;If no trees or dropsite within 7 tiles, only delete lumber camp if we can afford new lumber camp immediately
			;Otherwise, keep lumber camp around if we have several trees within 10 tiles
            (defrule
            (up-compare-flag g-flag == FIRST-ATTACK-LAUNCHED)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count lumber-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            (up-object-data object-data-type == lumber-camp)
            (goal g-remote-total 0)             ;no nearby trees found
			(wood-amount >= 100)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-point 0 action-delete -1 -1)
            (up-jump-rule 1)
            )

            (defrule
            (up-compare-flag g-flag == FIRST-ATTACK-LAUNCHED)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count lumber-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
			(up-compare-goal g-loop-counter < 40)
			=>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -3)
            )

    ;-----------------------------
    ;   Delete Far Mining Camps
    ;-----------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-flag g-flag == FIRST-ATTACK-LAUNCHED)
        (building-type-count mining-camp > 1)
        =>
        (up-full-reset-search)
        (up-find-local c: mining-camp c: 20)
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-compare-flag g-flag == FIRST-ATTACK-LAUNCHED)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count mining-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 7)
            (up-filter-status c: status-resource c: list-active)
            (up-find-resource c: gold c: 1)
            (up-filter-status c: status-resource c: list-active)
            (up-find-resource c: stone c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (up-compare-flag g-flag == FIRST-ATTACK-LAUNCHED)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count mining-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-goal g-remote-total > 0)             ;nearby mines found
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -2)
            )
            
            (defrule
            (up-compare-flag g-flag == FIRST-ATTACK-LAUNCHED)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count mining-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            (up-object-data object-data-type == mining-camp)
            (goal g-remote-total 0)             ;no nearby trees found
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-point 0 action-delete -1 -1)
            )

    ;-------------------------------------------
    ;   Dropsite Building Construction Assist
    ;-------------------------------------------

        ;If villager is close to carrying capacity and
        ;dropsite isn't constructed, help construct it

        (load "The General 1.2/Functions/Reset Mini")

        ;Mining Camps
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-pending-objects c: mining-camp > 0)
        (or
            (unit-type-count villager-gold > 0)
            (unit-type-count villager-stone > 0))
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-filter-status c: status-pending c: list-active)
        (up-find-status-remote c: mining-camp c: 1)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-pending-objects c: mining-camp > 0)
        (or
            (unit-type-count villager-gold > 0)
            (unit-type-count villager-stone > 0))
        (up-set-target-object search-remote c: 0)
        (building-type-count-total mining-camp <= 2)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-reset-filters)
        (up-filter-distance c: -1 c: 6)
        (up-find-local c: male-gold-miner c: 20)
        (up-find-local c: female-gold-miner c: 20)
        (up-find-local c: male-stone-miner c: 20)
        (up-find-local c: female-stone-miner c: 20)
        (up-remove-objects search-local object-data-carry < 8)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-pending-objects c: mining-camp > 0)
        (or
            (unit-type-count villager-gold > 0)
            (unit-type-count villager-stone > 0))
        (up-set-target-object search-remote c: 0)
        (building-type-count-total mining-camp <= 2)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-objects 0 action-default -1 -1)
        )

        (load "The General 1.2/Functions/Reset Mini")

        ;Lumber Camps
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-filter-status c: status-pending c: list-active)
        (up-find-status-remote c: lumber-camp c: 1)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        (up-set-target-object search-remote c: 0)
        (building-type-count-total lumber-camp <= 2)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-reset-filters)
        (up-filter-distance c: -1 c: 5)
        (up-find-local c: male-lumberjack c: 20)
        (up-find-local c: female-lumberjack c: 20)
        (up-remove-objects search-local object-data-carry < 8)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        (up-set-target-object search-remote c: 0)
        (building-type-count-total lumber-camp <= 2)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-objects 0 action-default -1 -1)
        )

        (load "The General 1.2/Functions/Reset Mini")

        ;First lumber camp
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count lumber-camp == 0)
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-filter-status c: status-pending c: list-active)
        (up-find-remote c: lumber-camp c: 1)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count lumber-camp == 0)
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        (up-set-target-object search-remote c: 0)
        (up-object-data object-data-tasks-count == 0)
        =>
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-find-local c: female-lumberjack c: 1)
        (up-find-local c: male-lumberjack c: 1)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (building-type-count lumber-camp == 0)
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        (up-set-target-object search-remote c: 0)
        (up-object-data object-data-tasks-count == 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-objects 1 action-default -1 -1)
        )

        (load "The General 1.2/Functions/Reset Mini")

        ;Mills
        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-pending-objects c: mill > 0)
        (unit-type-count villager-forager > 0)
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-filter-status c: status-pending c: list-active)
        (up-find-status-remote c: mill c: 1)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-pending-objects c: mill > 0)
        (unit-type-count villager-forager > 0)
        (up-set-target-object search-remote c: 0)
        (building-type-count-total mill <= 2)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-reset-filters)
        (up-filter-distance c: -1 c: 6)
        (up-find-local c: male-forager c: 20)
        (up-find-local c: female-forager c: 20)
        (up-remove-objects search-local object-data-carry < 8)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-compare-goal g-difficulty >= HARDEST)
        (up-pending-objects c: mill > 0)
        (unit-type-count villager-forager > 0)
        (up-set-target-object search-remote c: 0)
        (building-type-count-total mill <= 2)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-objects 0 action-default -1 -1)
        )

;=========================<>=========================
;				 SOLDIER COORDINATION
;=========================<>=========================

    ;--------------------------------------
    ;   Ally Assistance Without Full DUC
    ;--------------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        ;Temp goals:
        ;g-current-group-action
        ;g-current-group-action-goal-id

        ;Temp points:
        ;g-current-group-destination-x
        ;g-current-group-destination-y
        ;g-current-group-destination-x-goal-id
        ;g-current-group-destination-y-goal-id

        (defrule
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-attacking YES)
        (goal g-attack-objective HELP-ALLY-DEFEND)
        (timer-triggered t-15-sec)
        =>
        (up-full-reset-search)
        (up-modify-sn sn-focus-player-number s:= csn-ally-to-defend)
        (up-find-remote c: town-center c: 10)
        (up-find-remote c: house c: 10)
        (up-find-remote c: lumber-camp c: 5)
        (up-clean-search search-remote object-data-id search-order-asc)
        )

        (defrule
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-attacking YES)
        (goal g-attack-objective HELP-ALLY-DEFEND)
        (timer-triggered t-15-sec)
        (up-set-target-object search-remote c: 0)
        =>
        (set-goal g-temp 77777)
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-full-reset-search)
        (up-filter-distance c: -1 c: 40)
        (up-filter-include cmdid-military -1 -1 -1)
        (set-strategic-number sn-focus-player-number 1)
        )
        
            (defrule
            (up-compare-flag g-attack-method-flag != USE-DUC)
            (goal g-attacking YES)
            (goal g-attack-objective HELP-ALLY-DEFEND)
            (goal g-temp 77777)
            (up-compare-goal g-point-x >= 0)
            (nand
                (player-in-game focus-player)
                (stance-toward focus-player enemy))
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            =>
            (up-modify-sn sn-focus-player-number c:+ 1)
            (up-jump-rule -1)
            )
        
            (defrule
            (up-compare-flag g-attack-method-flag != USE-DUC)
            (goal g-attacking YES)
            (goal g-attack-objective HELP-ALLY-DEFEND)
            (goal g-temp 77777)
            (up-compare-goal g-point-x >= 0)
            =>
            (up-find-remote c: any-objects c: 40)
            (up-get-search-state g-local-total)
            )
        
            (defrule
            (up-compare-flag g-attack-method-flag != USE-DUC)
            (goal g-attacking YES)
            (goal g-attack-objective HELP-ALLY-DEFEND)
            (goal g-temp 77777)
            (up-compare-goal g-point-x >= 0)
            (up-compare-goal g-remote-total < 40)
            (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
            =>
            (up-modify-sn sn-focus-player-number c:+ 1)
            (up-jump-rule -3)
            )

        (defrule
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-attacking YES)
        (goal g-attack-objective HELP-ALLY-DEFEND)
        (goal g-temp 77777)
        (up-compare-goal g-point-x >= 0)
        (up-compare-goal g-remote-total > 0)
        =>
        (up-clean-search search-remote object-data-distance search-order-asc)
        )

        (defrule
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-attacking YES)
        (goal g-attack-objective HELP-ALLY-DEFEND)
        (goal g-temp 77777)
        (up-compare-goal g-point-x >= 0)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote c: 0)
        =>
        (up-get-point position-object g-point2-x)
        ; (up-lerp-tiles g-point2-x g-point-x c: 5)
        (up-bound-point g-point2-x g-point2-x)
        (set-goal g-temp 77778)
        (up-full-reset-search)
        (up-filter-include cmdid-military -1 -1 -1)
        (up-filter-exclude -1 actionid-attack orderid-attack warship-class)
        (up-filter-distance c: 5 c: -1)
        (up-find-local c: any-objects c: 240)
        (up-remove-objects search-local object-data-speed < 80)
        (up-remove-objects search-local object-data-attack-stance != stance-aggressive)
        (set-goal g-loop-counter 0)
        )

        (defrule
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-attacking YES)
        (goal g-attack-objective HELP-ALLY-DEFEND)
        (goal g-temp 77778)
        (up-set-target-object search-local c: 0)
        (up-path-distance g-point2-x 0 == 65535) ;used to be strict path distance (1)
        (up-compare-goal g-loop-counter < 10)
        =>
        (generate-random-number 7)
        (up-get-fact random-number 0 g-temp4)
        (up-modify-goal g-temp4 c:- 4)  ;random number will be between -3 and 3
        (up-modify-goal g-point2-x g:+ g-temp4)
        (generate-random-number 7)
        (up-get-fact random-number 0 g-temp4)
        (up-modify-goal g-temp4 c:- 4)  ;random number will be between -3 and 3
        (up-modify-goal g-point2-x g:+ g-temp4)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-jump-rule -1)
        )

        ;Set destination
        (defrule
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-attacking YES)
        (goal g-attack-objective HELP-ALLY-DEFEND)
        (goal g-temp 77778)
        (up-set-target-object search-local c: 0)
        =>
        (up-target-point g-point2-x custom-action-attack-move -1 -1)
        ; (up-send-flare g-point2-x)
        )

    ;----------------------
    ;   Enemy TC Retreat
    ;----------------------

        (load "The General 1.2/Functions/Reset Mini")
        
        (defrule
        (or
            (up-compare-flag g-attack-method-flag != USE-DUC)
            (goal g-attacking NO))
        (players-building-type-count target-player town-center > 0)
        =>
        (up-modify-flag g-flag c:- PROJECTILE-RETREAT)
        (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
        (up-full-reset-search)
        (up-find-remote c: town-center c: 20)
        (up-remove-objects search-remote object-data-hitpoints < 480)   ;remove town centers that can't be garrisoned
        (set-goal g-loop-counter 0)				;look at first building and track progress through loop
        (up-get-search-state g-local-total)
        )

            ;Retreat from TCs less on lower difficulties
            (defrule
            (or
                (and
                    (goal g-difficulty HARD)
                    (up-timer-status t-10-sec == timer-running))
                (or
                    (and
                        (goal g-difficulty MODERATE)
                        (up-timer-status t-15-sec == timer-running))
                    (up-compare-goal g-difficulty <= STANDARD)))
            =>
            (up-jump-rule 15)
            )
        
            ;Loop through all target player TCs to find nearby units that should retreat
            (defrule
                (or
                    (not
                        (up-set-target-object search-remote g: g-loop-counter))	;cannot find any more enemy defensive buildings
                    (or
                        (goal g-remote-total 0)
                        (or
                            (players-building-type-count target-player town-center == 0)
                            (and
                                (up-compare-flag g-attack-method-flag == USE-DUC)
                                (goal g-attacking YES)))))
            =>
            (up-jump-rule 14)
            )
            
            ;Search for our units and enemy units near TC
            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            ; (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            =>
            (up-get-object-data object-data-garrison-count g-temp)
            (up-modify-goal g-temp c:/ 2)               ;count the number of garrisoned units as half soldiers
            (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-reset-search 1 1 0 0)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 14)
            (up-filter-include cmdid-military -1 -1 -1)
            (up-find-remote c: any-objects c: 40)
            (up-find-local c: any-objects c: 40)
            (up-find-local c: battering-ram-line c: 5)
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )

            ;We have no units near TC, check next TC
            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (goal g-local-total 0)
            =>
            (up-jump-rule 12)
            )

            ;Calculate numbers of soldiers near TC
            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-local-total > 0)
            =>
            (up-modify-goal g-temp g:+ g-remote-last)   ;add the number of enemy military units near the TC
            (up-modify-goal g-temp2 g:= g-local-total)
            (up-modify-goal g-temp3 g:= g-local-last)  ;g-local-last is number of rams
            (up-modify-goal g-temp3 c:* 10)            ;nearby rams count as ten units
            (up-modify-goal g-temp2 g:+ g-temp3)      ;g-temp2 = our army strength near TC
            )

            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            ; (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-local-total > 0)
            (goal g-target-age-parity WE-ARE-AHEAD)
            =>
            (up-modify-goal g-temp c:/ 2)
            )

            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            ; (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-local-total > 0)
            (goal g-target-age-parity WE-ARE-BEHIND)
            =>
            (up-modify-goal g-temp c:* 2)
            )

            ;Check if we should retreat from TC
            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-temp2 g:< g-temp)      ;enemy strength near TC is stronger than ours
            =>
            (up-modify-flag g-flag c:+ PROJECTILE-RETREAT)
            )

            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-temp2 g:> g-temp)      ;enemy strength near TC is weaker than ours
            =>
            (up-remove-objects search-remote object-data-type != town-center)
            (up-get-search-state g-local-total)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -8)
            )

            ;Get extra projectile avoidance radius, based on width of building
            (defrule
            (up-compare-flag g-flag == PROJECTILE-RETREAT)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (or
                (up-object-data object-data-type == town-center)
                (up-object-data object-data-type == castle))
            =>
            (set-goal g-temp2 283)     ;extra distance from middle of building to corner of the building (sqrt(2) * 2 * 100 to convert to precise distance)
            )                           ;this must be added to the range of the building to get the danger radius of the enemy building

            (defrule
            (up-compare-flag g-flag == PROJECTILE-RETREAT)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-object-data object-data-type == krepost)
            =>
            (set-goal g-temp2 212)     ;extra distance from middle of building to corner of the building (sqrt(2) * 1.5 * 100 to convert to precise distance)
            )                           ;this must be added to the range of the building to get the danger radius of the enemy building

            (defrule
            (up-compare-flag g-flag == PROJECTILE-RETREAT)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-object-data object-data-class == tower-class)
            =>
            (set-goal g-temp2 71)      ;extra distance from middle of building to corner of the building (sqrt(2) * 0.5 * 100 to convert to precise distance)
            )                           ;this must be added to the range of the building to get the danger radius of the enemy building

            ;g-temp3 equals full projectile avoidance radius
            (defrule
            (up-compare-flag g-flag == PROJECTILE-RETREAT)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            =>
            (up-get-object-data object-data-range g-temp3)
            (up-modify-goal g-temp3 c:* 100)           ;change to precise distance
            (up-modify-goal g-temp3 g:+ g-temp2)      ;add distance from middle of building to corner of building, see rules above
            )
                
            (defrule
            (up-compare-flag g-flag == PROJECTILE-RETREAT)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-compare-goal g-remote-total > 0)
            (up-object-data object-data-type == town-center)
            =>
            (up-reset-search 1 1 0 0)
            (up-reset-filters)
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-find-local c: any-objects c: 240)
            (up-remove-objects search-local object-data-speed == 0)		;remove buildings
            (up-remove-objects search-local object-data-pierce-armor >= 20)	;remove rams
            (up-remove-objects search-local object-data-attack-stance == stance-no-attack)  ;units on no attack stance are already retreating from building
            (up-remove-objects search-local object-data-class == livestock-class)
            (up-remove-objects search-local object-data-precise-distance g:> g-temp3)		;remove all objects outside range of defensive building
            )
            
            (defrule
            (up-compare-flag g-flag == PROJECTILE-RETREAT)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-compare-goal g-remote-total > 0)
            (up-object-data object-data-type == town-center)
            (up-get-object-data object-data-range g-temp3)
            (up-modify-goal g-temp3 c:+ 6)
            (up-set-target-object search-local c: 0)	;find a unit close to the enemy building
            =>
            (up-copy-point g-point3-x g-point-x)		;store enemy defensive building location in g-point3-x
            (up-get-point position-object g-point2-x)
            (up-lerp-tiles g-point3-x g-point2-x g: g-temp3)	;find point g-temp3 tiles away from enemy building (building's range + 6)
            (up-cross-tiles g-point3-x g-point2-x c: 3)	;so that units don't always retreat to the same spot
            (up-bound-point g-point3-x g-point3-x)
            (up-target-point g-point3-x action-move -1 stance-no-attack)
            )

            (defrule
            (up-compare-goal g-remote-total > 0)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-compare-goal g-loop-counter < 40)
            =>
            (up-modify-flag g-flag c:- PROJECTILE-RETREAT)
            (up-get-search-state g-local-total)
            (up-jump-rule -15)
            )

        ;Reset attack stance for units that successfully retreated

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (goal g-attacking YES)
        (up-compare-flag g-attack-method-flag != USE-DUC)
        =>
        (up-full-reset-search)
        (up-filter-exclude cmdid-villager actionid-explore orderid-explore livestock-class)
        (up-find-local c: any-objects c: 240)
        (up-remove-objects search-local object-data-speed == 0)		;remove buildings
        (up-remove-objects search-local object-data-attack-stance != stance-no-attack)	;only change attack stances for units on No Attack Stance
        (set-strategic-number sn-focus-player-number target-player)
        (up-find-remote c: town-center c: 40)
        (up-find-remote c: castle c: 40)
        (up-find-remote c: krepost c: 40)
        (up-find-remote c: tower-class c: 40)
        (set-goal g-loop-counter 0)				;look at first defensive building and track progress through loop
        )

        ;Loop through all target player TCs, remove any units that are still too close to an enemy TC	
        (defrule
        (goal g-attacking YES)
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (up-set-target-object search-local c: 0)	;we still have units in search local set to No Attack Stance
        (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
        =>
        (up-get-point position-object g-point-x)	;get enemy defensive building location
        (up-set-target-point g-point-x)
        (up-get-object-data object-data-range g-temp3)
        (up-modify-goal g-temp3 c:+ 7)
        (up-remove-objects search-local object-data-distance g:> g-temp3)
        (up-remove-objects search-local object-data-id g:== g-scout-id)
        (up-remove-objects search-local object-data-group-flag == 8)
        (up-modify-goal g-loop-counter c:+ 1)
        (set-goal g-temp 439)
        (up-jump-rule -1)
        )

        ;Set remaining units to Aggressive stance
        (defrule
        (goal g-attacking YES)
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-temp 439)
        (up-set-target-object search-local c: 0)	;we still have units in search local set to No Attack Stance
        =>
        (up-target-point 0 action-none -1 stance-aggressive)
        )

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (goal g-attacking NO)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-exclude cmdid-villager actionid-explore orderid-explore livestock-class)
        (up-filter-distance c: -1 c: 40)
        (up-find-local c: any-objects c: 240)
        (up-remove-objects search-local object-data-speed == 0)		;remove buildings
        (up-remove-objects search-local object-data-attack-stance != stance-no-attack)	;only change attack stances for units on No Attack Stance
        (up-remove-objects search-local object-data-id g:== g-scout-id)
        (up-remove-objects search-local object-data-group-flag == 8)
        (set-goal g-temp 440)
        )

        ;Set remaining units to Aggressive stance
        (defrule
        (goal g-attacking NO)
        (goal g-temp 440)
        (up-set-target-object search-local c: 0)	;we still have units in search local set to No Attack Stance
        =>
        (up-target-point 0 action-none -1 stance-aggressive)
        )

        ;Failsafe, in case we have idle units set to No Attack Stance but are <= 11 tiles from an enemy TC

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (or
            (goal g-attacking NO)
            (up-compare-flag g-attack-method-flag != USE-DUC))
        =>
        (up-full-reset-search)
        (up-filter-exclude cmdid-villager actionid-explore orderid-explore livestock-class)
        (up-find-local c: any-objects c: 240)
        (up-remove-objects search-local object-data-idling != 1)
        (up-remove-objects search-local object-data-speed == 0)		;remove buildings
        (up-remove-objects search-local object-data-attack-stance != stance-no-attack)	;only change attack stances for units on No Attack Stance
        (up-remove-objects search-local object-data-id g:== g-scout-id)
        (up-remove-objects search-local object-data-group-flag == 8)
        (set-goal g-temp 441)
        )

        (defrule
        (or
            (goal g-attacking NO)
            (up-compare-flag g-attack-method-flag != USE-DUC))
        (goal g-temp 441)
        (up-set-target-object search-local c: 0)	;we still have units in search local set to No Attack Stance
        =>
        (up-target-point 0 action-none -1 stance-aggressive)
        )

    ;---------------------------
    ;   Soldiers Gather Point
    ;---------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (timer-triggered t-10-sec)
        (building-type-count town-center > 0)
        (up-compare-goal g-target-enemy-x > 0)
        (unit-type-count villager > 0)
        =>
        (up-copy-point g-gather-point-x g-position-self-x)
        (up-lerp-tiles g-gather-point-x g-target-enemy-x s: csn-peaceful-town-size)
        (up-bound-point g-gather-point-x g-gather-point-x)
        )

    ;---------------------------
    ;   End of Attack Retreat
    ;---------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (goal g-attack-coordination RETREAT)
        =>
        (set-goal g-loop-counter 900)
        )

            (defrule
            (goal g-attack-coordination RETREAT)
            (up-compare-goal g-loop-counter >= 900)
            (up-compare-goal g-loop-counter <= 960)
            =>
            (up-full-reset-search)
            (up-filter-exclude -1 actionid-explore orderid-explore -1)
            (up-filter-include cmdid-military -1 -1 monastery-class)
            (up-find-local g: g-loop-counter c: 240)
            (up-remove-objects search-local object-data-class == warship-class)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-attack-coordination RETREAT)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-loop-counter != cavalry-class)
            (up-set-target-object search-local c: 0)
            =>
            (up-target-point g-position-self-x action-move -1 -1)
            )

            (defrule
            (goal g-attack-coordination RETREAT)
            (up-compare-goal g-local-total > 0)
            (goal g-loop-counter cavalry-class)
            (up-set-target-object search-local c: 0)
            =>
            (up-target-point g-gather-point-x action-move -1 stance-no-attack)
            )

            (defrule
            (goal g-attack-coordination RETREAT)
            (up-compare-goal g-loop-counter >= 900)
            (up-compare-goal g-loop-counter < 960)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )

        (defrule
        (goal g-attack-coordination RETREAT)
        =>
        (set-goal g-attack-coordination OFF)
        )

    ;-------------------------------------
    ;   Villagers Target Battering Rams
    ;-------------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-goal g-difficulty >= EXTREME)
        (or
            (players-unit-type-count any-enemy battering-ram-line > 0)
            (players-unit-type-count any-enemy armored-elephant-line > 0))
        =>
        (up-modify-sn sn-focus-player-number c:= 1)
        (up-full-reset-search)
        (up-find-local c: town-center c: 5)
        (set-goal g-loop-counter 0)
        (set-goal g-temp NO)
        )

            (defrule
            (up-compare-goal g-difficulty >= EXTREME)
            (or
                (players-unit-type-count any-enemy battering-ram-line > 0)
                (players-unit-type-count any-enemy armored-elephant-line > 0))
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            (nand
                (player-in-game focus-player)
                (stance-toward focus-player enemy))
            =>
            (up-modify-sn sn-focus-player-number c:+ 1)
            (up-jump-rule -1)
            )

            (defrule
            (up-compare-goal g-difficulty >= EXTREME)
            (or
                (players-unit-type-count focus-player battering-ram-line > 0)
                (players-unit-type-count focus-player armored-elephant-line > 0))
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            (player-in-game focus-player)
            (stance-toward focus-player enemy)
            (up-set-target-object search-local g: g-loop-counter)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 5)
            (up-find-remote c: battering-ram-line c: 1)
            (up-find-remote c: armored-elephant-line c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (up-compare-goal g-difficulty >= EXTREME)
            (or
                (players-unit-type-count any-enemy battering-ram-line > 0)
                (players-unit-type-count any-enemy armored-elephant-line > 0))
            (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
            (player-in-game focus-player)
            (stance-toward focus-player enemy)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-goal g-remote-total == 0)
            =>
            (up-modify-sn sn-focus-player-number c:+ 1)
            (up-jump-rule -3)
            )

            (defrule
            (up-compare-goal g-difficulty >= EXTREME)
            (or
                (players-unit-type-count any-enemy battering-ram-line > 0)
                (players-unit-type-count any-enemy armored-elephant-line > 0))
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            (player-in-game focus-player)
            (stance-toward focus-player enemy)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote c: 0)
            =>
            (set-goal g-temp YES)
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-reset-search 1 1 0 0)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 5)
            (up-find-local c: villager-class c: 4)
            (up-remove-objects search-local object-data-action == actionid-attack)
            (up-get-search-state g-local-total)
            )

            (defrule
            (up-compare-goal g-difficulty >= EXTREME)
            (goal g-temp YES)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote c: 0)
            (up-compare-goal g-local-total > 0)
            =>
            (up-target-objects 0 action-default -1 -1)
            ; (chat-to-player my-player-number "Destroying enemy ram with vils")
            )

            (defrule
            (up-compare-goal g-difficulty >= EXTREME)
            (goal g-temp NO)
            (or
                (players-unit-type-count any-enemy battering-ram-line > 0)
                (players-unit-type-count any-enemy armored-elephant-line > 0))
            (up-compare-goal g-loop-counter < 4)
            =>
            (up-modify-sn sn-focus-player-number c:= 1)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -6)
            )

