;DUC.per

;=========================<>=========================
;				       SCOUTING
;=========================<>=========================

    ;------------------
    ;   Claim Sheep
    ;------------------

        (load "The General 1.2/Functions/Reset")

        ;If sheep visible but unclaimed, claim sheep
        (defrule
        (up-gaia-type-count c: livestock-class > 0)
        (goal g-claim-sheep NO)
        (building-type-count town-center > 0)
        (goal g-gaia-sheep-id -1)
        =>
        (up-set-target-point g-position-self-x)
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number 0)
        (up-filter-distance c: -1 c: 45)
        (up-find-remote c: livestock-class c: 40)
        (up-remove-objects search-remote object-data-player != 0)   ;seems like up-find-remote considers all livestock owned by gaia
        (up-remove-objects search-remote object-data-hitpoints < 5)
        (up-get-search-state g-local-total)
        )

        ;If we found sheep, tell scout to claim sheep
        (defrule
        (up-gaia-type-count c: livestock-class > 0)
        (goal g-claim-sheep NO)
        (building-type-count town-center > 0)
        (goal g-gaia-sheep-id -1)
        (up-set-target-object search-remote c: 0)
        (up-object-data object-data-class == livestock-class)
        =>
        (set-goal g-claim-sheep FOUND-SHEEP)
        (up-get-object-data object-data-id g-gaia-sheep-id)
        )
        
        ;Find scout to claim sheep
        (defrule
        (up-gaia-type-count c: livestock-class > 0)
        (goal g-claim-sheep FOUND-SHEEP)
        (building-type-count town-center > 0)
        (up-set-target-by-id g: g-gaia-sheep-id)	;we found livestock within a 45 point distance from TC
        =>
        (up-reset-search 1 1 0 0)   ;reset search-local but not search-remote
        (up-reset-filters)
        (up-add-object-by-id search-local g: g-scout1-id)
        (up-add-object-by-id search-local g: g-scout2-id)
        (up-add-object-by-id search-local g: g-scout3-id)
        (up-remove-objects search-local object-data-class == livestock-class)   ;don't use our own sheep to claim other sheep
        (up-get-point position-object g-point-x)                                ;get location of unclaimed sheep
        (up-set-target-point g-point-x)
        (up-remove-objects search-local object-data-distance > 20)              ;remove scouts too far away from sheep
        (up-clean-search search-local object-data-distance search-order-asc)    ;find closest scout
        (up-remove-objects search-local object-data-index > 0)                  ;keep only one unit in search-local
        (up-get-search-state g-local-total)
        )

        ;Find villager to claim sheep
        (defrule
        (up-gaia-type-count c: livestock-class > 0)
        (goal g-claim-sheep FOUND-SHEEP)
        (goal g-local-total 0)  ;we didn't find any scouts
        (building-type-count town-center > 0)
        (up-set-target-by-id g: g-gaia-sheep-id)	;we found livestock within 45 tiles from TC
        (not
            (up-set-target-by-id g: g-scout1-id))
        =>
        (up-reset-search 1 1 0 0)   ;reset search-local but not search-remote
        (up-reset-filters)
        (up-get-point position-object g-point-x)                                ;get location of unclaimed sheep
        (up-set-target-point g-point-x)
        (up-find-local c: villager-class c: 10)                                 ;find villagers in case we don't have a scout at the moment or scout is too far
        (up-clean-search search-local object-data-distance search-order-asc)    ;find closest villager
        (up-remove-objects search-local object-data-distance > 15)              ;remove villager too far away from sheep
        (up-remove-objects search-local object-data-index > 0)                  ;keep only one unit in search-local
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-gaia-type-count c: livestock-class > 0)
        (goal g-claim-sheep FOUND-SHEEP)
        (building-type-count town-center > 0)
        (up-set-target-by-id g: g-gaia-sheep-id)	;we found livestock within a 45 point distance from TC
        (goal g-local-total 0)                      ;no nearby scout or villager found
        =>
        (set-goal g-claim-sheep NO)
        )

        ;Task scout or villager to claim sheep
        ;Scout 1
        (defrule
        (up-gaia-type-count c: livestock-class > 0)
        (goal g-claim-sheep FOUND-SHEEP)
        (goal g-local-total 1)  ;found scout or villager
        (up-set-target-object search-local c: 0)
        (up-object-data object-data-id g:== g-scout1-id)    ;found scout 1
        (building-type-count town-center > 0)
        (up-set-target-by-id g: g-gaia-sheep-id)	;we found livestock within 20 tiles from TC
        =>
        (up-target-objects 1 action-move -1 -1)
        (set-goal g-claim-sheep SEND-SCOUT-1)
        )
        ;Scout 2
        (defrule
        (up-gaia-type-count c: livestock-class > 0)
        (goal g-claim-sheep FOUND-SHEEP)
        (goal g-local-total 2)  ;found scout or villager
        (up-set-target-object search-local c: 0)
        (up-object-data object-data-id g:== g-scout2-id)    ;found scout 2
        (building-type-count town-center > 0)
        (up-set-target-by-id g: g-gaia-sheep-id)	;we found livestock within 20 tiles from TC
        =>
        (up-target-objects 1 action-move -1 -1)
        (set-goal g-claim-sheep SEND-SCOUT-2)
        )
        ;Scout 3
        (defrule
        (up-gaia-type-count c: livestock-class > 0)
        (goal g-claim-sheep FOUND-SHEEP)
        (goal g-local-total 1)  ;found scout or villager
        (up-set-target-object search-local c: 0)
        (up-object-data object-data-id g:== g-scout3-id)    ;found scout 3
        (building-type-count town-center > 0)
        (up-set-target-by-id g: g-gaia-sheep-id)	;we found livestock within 20 tiles from TC
        =>
        (up-target-objects 1 action-move -1 -1)
        (set-goal g-claim-sheep SEND-SCOUT-3)
        )
        ;Villager
        (defrule
        (up-gaia-type-count c: livestock-class > 0)
        (goal g-claim-sheep FOUND-SHEEP)
        (goal g-local-total 1)  ;found scout or villager
        (up-set-target-object search-local c: 0)
        (up-object-data object-data-class == villager-class)
        (building-type-count town-center > 0)
        (up-set-target-by-id g: g-gaia-sheep-id)	;we found livestock within 15 tiles from TC
        =>
        (up-target-objects 1 action-move -1 -1)
        (set-goal g-claim-sheep SEND-VILLAGER)
        )

        ;Check to see if we have claimed sheep
        (defrule
        (building-type-count town-center > 0)
        (up-compare-goal g-gaia-sheep-id > -1)
        (up-set-target-by-id g: g-gaia-sheep-id)
        (up-object-data object-data-player != 0)
        =>
        (set-goal g-claim-sheep NO)
        (set-goal g-gaia-sheep-id -1)
        )

        (defrule
        (up-compare-goal g-claim-sheep != NO)
        (building-type-count town-center > 0)
        (up-compare-goal g-gaia-sheep-id <= -1)
        =>
        (set-goal g-claim-sheep NO)
        (set-goal g-gaia-sheep-id -1)
        )

    ;------------------------------------
    ;   Initial Scouting For Resources
    ;------------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
        (or
            (not
                (up-set-target-by-id g: g-scout1-id))
            (or
                (building-type-count-total town-center == 0)
                (or
                    (game-time s:>= sn-home-exploration-time)
                    (or
                        (up-compare-goal g-scouting-distance >= 30)
                        (goal g-scouting-status AUTO-SCOUT)))))
        (game-time >= 5)
        =>
        (set-goal g-duc-scouting STOP-DUC-SCOUTING)
        ; (chat-to-player my-player-number CHAT-SCOUTING-AUTO)
        )

        ;Send scout(s) to explore in circles around the town center
        ;This section allows for up to three units to explore with DUC simultaneously by looping through each scout

            ;Prepare for loop
            (defrule
            (or
                (up-set-target-by-id g: g-scout1-id)
                (or
                    (up-set-target-by-id g: g-scout2-id)
                    (up-set-target-by-id g: g-scout3-id)))
            (up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
            =>
            (set-goal g-loop-counter 1)                                          ;increments through each scout (1 = first scout, 2 = second scout, 3 = third scout)
            (set-goal g-current-scout-goal g-scout1-id)
            (up-modify-goal g-current-scout-id g:= g-scout1-id)
            )

        ;-------------------
        ;   LOOP SECTION!
        ;-------------------

            ;Skip rules if the current scout (1, 2, or 3) isn't set

            (defrule
            (or
                (not
                    (up-set-target-by-id g: g-current-scout-id))   ;either scout 1, 2, or 3 depending on the loop
                (or
                    (goal g-duc-scouting STOP-DUC-SCOUTING)
                    (and
                        (up-compare-goal g-scouting-status != FIND-RESOURCES)
                        (up-compare-goal g-scouting-status != SCOUT-TOWN))))
            =>
            (up-jump-rule 32)
            )

            ;Skip rules if current scout is claiming sheep

            (defrule
            (or
                (and
                    (goal g-loop-counter 1)  ;loop is looking at first scout
                    (goal g-claim-sheep SEND-SCOUT-1))
                (or
                    (and
                        (goal g-loop-counter 2)  ;loop is looking at second scout
                        (goal g-claim-sheep SEND-SCOUT-2))
                    (and
                        (goal g-loop-counter 3)  ;loop is looking at third scout
                        (goal g-claim-sheep SEND-SCOUT-3))))
            =>
            (up-jump-rule 31)
            )

            ;Reset g-duc-scouting
            (defrule
            (up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
            =>
            (set-goal g-duc-scouting RESET)
            (set-goal g-temp 0)
            (set-goal g-temp2 0)
            (set-goal g-temp3 0)
            (set-goal g-point-x -1)
            (set-goal g-point-y -1)
            (set-goal g-point2-x -1)
            (set-goal g-point2-y -1)
            )

            ;---------------------------------------------------------
            ;   Check if current scout is tasked to explore a point
            ;---------------------------------------------------------

                ;Check if scout 1 is targeting a point
                (defrule
                (goal g-duc-scouting RESET)
                (up-set-target-by-id g: g-current-scout-id)
                (goal g-loop-counter 1)
                (up-compare-flag g-flag == SCOUT-1-TARGET-SET)
                =>
                (set-goal g-duc-scouting TARGETING-POINT)
                (up-copy-point g-point-x g-scout1-target-x)     ;copy scout 1's target location into g-point-x
                )
                ;Check if scout 2 is targeting a point
                (defrule
                (goal g-duc-scouting RESET)
                (up-set-target-by-id g: g-current-scout-id)
                (goal g-loop-counter 2)
                (up-compare-flag g-flag == SCOUT-2-TARGET-SET)
                =>
                (set-goal g-duc-scouting TARGETING-POINT)
                (up-copy-point g-point-x g-scout2-target-x)     ;copy scout 2's target location into g-point-x
                )
                ;Check if scout 3 is targeting a point
                (defrule
                (goal g-duc-scouting RESET)
                (up-set-target-by-id g: g-current-scout-id)
                (goal g-loop-counter 3)
                (up-compare-flag g-flag == SCOUT-3-TARGET-SET)
                =>
                (set-goal g-duc-scouting TARGETING-POINT)
                (up-copy-point g-point-x g-scout3-target-x)     ;copy scout 3's target location into g-point-x
                )

            ;----------------------------
            ;   Get Next Explore Point
            ;----------------------------

                ;Set the scout's position and the up-cross-tiles distance and direction
                (defrule
                (goal g-duc-scouting RESET)
                (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                (building-type-count-total town-center > 0)
                =>
                (set-goal g-duc-scouting START)
                (up-get-point position-object g-point-x)            ;Store the scout's position, will be changed to the next point to be explored
                (set-goal g-temp 9)                                 ;distance for up-cross-tiles in next rule
                (up-modify-goal g-temp2 g:= g-loop-counter)                     ;make sure scout 2 goes in opposite direction from scout 1 and 3, g-loop-counter = current scout in loop
                (up-modify-goal g-temp2 c:mod 2)                   ;if g-loop-counter = 1 or 3, then result = 1; if g-loop-counter = 2, then result = 0
                (up-modify-goal g-temp2 c:* 2)                     ;if g-loop-counter = 1 or 3, then result = 2; if g-loop-counter = 2, then result = 0
                (up-modify-goal g-temp2 c:- 1)                     ;if g-loop-counter = 1 or 3, then result = 1, if g-loop-counter = 2, then result = -1
                (up-modify-goal g-temp g:* g-temp2)                ;if g-loop-counter = 2, then g-temp will be negated, which will switch the direction in next rule
                (up-modify-goal g-temp g:* g-scouting-direction)    ;clockwise = -1, counterclockwise = 1)
                (up-modify-goal g-temp3 g:= g-scouting-distance)
                )

                ;Set distance to explore from TC depending on scout
                ;Sheep scout around TC at set distances
                ;Scouts 1, 2, and 3 (if not sheep) are set at different radiuses and increase as g-scouting-distance increases
                (defrule
                (goal g-loop-counter 2) ;second scout
                (goal g-duc-scouting START)
                (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (up-object-data object-data-class == livestock-class)
                =>
                (set-goal g-temp3 13)     ;always keep first sheep scout at 13 tiles from TC
                )
                (defrule
                (goal g-loop-counter 3)  ;third scout
                (goal g-duc-scouting START)
                (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (up-object-data object-data-class == livestock-class)
                =>
                (set-goal g-temp3 17)     ;always keep second sheep scout at 17 tiles from TC
                )
                (defrule
                (or
                    (goal g-loop-counter 2)  ;second scout
                    (goal g-loop-counter 3)) ;third scout
                (goal g-duc-scouting START)
                (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                (building-type-count-total town-center > 0)
                =>
                (up-modify-goal g-temp3 c:+ 8)     ;increase scouting distance for scout 1 or 2 by 4 if we have a third scout
                )
                (defrule
                (goal g-loop-counter 3)  ;third scout
                (goal g-duc-scouting START)
                (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                (building-type-count-total town-center > 0)
                =>
                (up-modify-goal g-temp3 c:+ 8)     ;increase scouting distance for scout 1 by 4 if we have a second scout
                )

                ;Set next explore point
                (defrule
                (goal g-duc-scouting START)
                (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                (building-type-count-total town-center > 0)
                =>
                (up-get-point position-object g-point-x)
                (up-cross-tiles g-point-x g-position-self-x g: g-temp)              ;this gets a point 9 tiles away (value of g-temp) that is perpendicular to the line drawn between the scout and the TC
                (up-bound-point g-point-x g-point-x)                                ;make sure point is on the map
                (up-copy-point g-point2-x g-position-self-x)                        ;store the TC location in g-point2-x
                (up-lerp-tiles g-point2-x g-point-x g: g-temp3)                    ;get a point g-temp3 tiles (g-scouting-distance + extra distance for extra scouts) from g-point2-x (TC location) toward g-point-x (scouting target), store in g-point2-x
                (up-bound-point g-point2-x g-point2-x)                              ;bound the new point on the map and store it in g-point2-x
                (set-goal g-duc-scouting SET-POINT)
                (up-get-path-distance g-point2-x 0 g-temp2)                        ;store path distance from scout to the point in g-temp2
                )
                    
                (defrule
                (goal g-duc-scouting START)
                (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                (building-type-count-total town-center > 0)
                =>
                (set-goal g-temp3 1)   ;used to track iterations in the following loop, if it takes more than 10 tries to find an accessible point, switch to auto scouting
                )

                    ;Check if explore point is accessible
                    (defrule
                    (up-compare-goal g-temp3 < 10)
                    (goal g-duc-scouting SET-POINT)
                    (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                    (building-type-count-total town-center > 0)
                    (goal g-temp2 65535)   ;explore point is inaccessible
                    =>
                    ; (chat-local-to-self CHAT-SCOUTING-POINT-INACCESSIBLE)
                    (do-nothing)
                    )

                    (defrule
                    (up-compare-goal g-temp3 < 10)
                    (goal g-duc-scouting SET-POINT)
                    (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                    (building-type-count-total town-center > 0)
                    (goal g-temp2 65535)   ;explore point is inaccessible
                    =>
                    (up-cross-tiles g-point2-x g-position-self-x g: g-temp)             ;this gets a point 9 tiles away (value of g-temp) that is perpendicular to the line drawn between the scout and the TC
                    (up-bound-point g-point2-x g-point2-x)                              ;make sure point is on the map
                    (up-copy-point g-point-x g-position-self-x)                         ;store the TC location in g-point2-x
                    (up-lerp-tiles g-point2-x g-point-x g: g-temp3)                    ;get a point g-temp3 tiles (adjusted g-scouting-distance) from g-point2-x (TC location) toward g-point-x (scouting target) and store in g-point2-x
                    (up-bound-point g-point2-x g-point-x)                               ;bound the new point on the map and store it in g-point2-x
                    (up-get-path-distance g-point2-x 0 g-temp2)                        ;store path distance from scout to the point in g-temp2
                    (up-modify-goal g-temp3 c:+ 1)
                    (up-jump-rule -2)
                    )

                ;If accessible point can't be found, switch to auto scouting
                (defrule
                (goal g-temp3 10)  ;couldn't find accessible point
                (goal g-duc-scouting SET-POINT)
                (up-set-target-by-id g: g-current-scout-id)   ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (goal g-temp2 65535)   ;explore point is inaccessible
                =>
                (up-reset-scouts)
                (set-goal g-duc-scouting STOP-DUC-SCOUTING)
                ; (chat-local-to-self CHAT-SCOUTING-AUTO)
                )

                (defrule
                (goal g-duc-scouting SET-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (up-compare-goal g-point2-x >= 0)   ;point is valid
                =>
                (up-full-reset-search)
                )

                ;Send Scout 1 to the explore point
                (defrule
                (goal g-loop-counter 1)                                      ;first scout
                (goal g-duc-scouting SET-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (up-compare-goal g-point2-x >= 0)   ;point is valid
                (up-compare-goal g-point2-y >= 0)
                (up-add-object-by-id search-local g: g-current-scout-id)    ;add current scout to search-local
                (up-set-target-object search-local c: 0)
                =>
                (up-copy-point g-scout1-target-x g-point2-x)                ;copy explore point into g-scout1-target-x
                (up-target-point g-scout1-target-x action-move -1 -1)       ;send scout to the next explore point
                (up-modify-flag g-flag c:+ SCOUT-1-TARGET-SET)
                (set-goal g-duc-scouting TARGETING-POINT)
                )
                ;Send Scout 2 to the explore point
                ;Set point 8 tiles further than g-scouting-distance so that exploration doesn't overlap with scout 1
                (defrule
                (goal g-loop-counter 2)                                      ;second scout
                (goal g-duc-scouting SET-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (up-compare-goal g-point2-x >= 0)   ;point is valid
                (up-add-object-by-id search-local g: g-current-scout-id)    ;add current scout to search-local
                (up-set-target-object search-local c: 0)
                (up-object-data object-data-player == my-player-number)
                =>
                (up-copy-point g-scout2-target-x g-point2-x)                ;copy explore point into g-scout2-target-x
                (up-target-point g-scout2-target-x action-move -1 -1)       ;send scout to the next explore point
                (up-modify-flag g-flag c:+ SCOUT-2-TARGET-SET)
                (set-goal g-duc-scouting TARGETING-POINT)
                )
                ;Send Scout 3 to the explore point
                ;Set point 16 tiles further than g-scouting-distance so that exploration doesn't overlap with scout 1 or scout 2
                (defrule
                (goal g-loop-counter 3)                                      ;third scout
                (goal g-duc-scouting SET-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (up-compare-goal g-point2-x >= 0)   ;point is valid
                (up-add-object-by-id search-local g: g-current-scout-id)    ;add current scout to search-local
                (up-set-target-object search-local c: 0)
                (up-object-data object-data-player == my-player-number)
                =>
                (up-copy-point g-scout3-target-x g-point2-x)                ;copy explore point into g-scout3-target-x
                (up-target-point g-scout3-target-x action-move -1 -1)       ;send scout to the next explore point
                (up-modify-flag g-flag c:+ SCOUT-3-TARGET-SET)
                (set-goal g-duc-scouting TARGETING-POINT)
                )

            ;----------------------
            ;   Switch Direction
            ;----------------------

                ;If explore point is on the border, switch the scouting direction for the next explore point
                ;For convenience, only switch direction when scout 1 reaches the border

                ;If the explore point is near NW or SW border
                (defrule
                (goal g-loop-counter 1)                                      ;First scout in loop
                (game-time > 90)                                ;allow exploring along border if scouting reaches the border early, we likely started near the border of the map, so we want to guarantee that we explore it
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (or
                    (up-compare-goal g-scout1-target-x <= 2)
                    (up-compare-goal g-scout1-target-y <= 2))     ;the point is <= 2 tiles away from the NW or SW border
                (timer-triggered t-change-scouting-direction)
                =>
                (up-modify-goal g-scouting-direction c:* -1)    ;switch direction (clockwise = -1, counterclockwise = 1)
                (enable-timer t-change-scouting-direction 30)
                (up-modify-goal g-scouting-distance c:+ 4)
                )
                
                ;If the explore point is near NE or SE border
                (defrule
                (goal g-loop-counter 1)                                      ;First scout in loop
                (game-time > 90)                                ;allow exploring along border if scouting reaches the border early, we likely started near the border of the map, so we want to guarantee that we explore it
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (or
                    (up-compare-goal g-scout1-target-x >= HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE)
                    (up-compare-goal g-scout1-target-y >= HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE))    ;the point is <= 2 tiles away from the NE or SE border
                (timer-triggered t-change-scouting-direction)
                =>
                (up-modify-goal g-scouting-direction c:* -1)    ;switch direction (clockwise = -1, counterclockwise = 1)
                (enable-timer t-change-scouting-direction 30)
                )

            ;-------------------------------------
            ;   Check Distance To Explore Point
            ;-------------------------------------

                (defrule
                (goal g-duc-scouting TARGETING-POINT)
                =>
                (set-goal g-point-x -1)
                (set-goal g-point-y -1)
                (set-goal g-temp 0)
                (set-goal g-temp2 0)
                )

                ;Store explore point in g-point-x
                (defrule
                (goal g-loop-counter 1)
                (goal g-duc-scouting TARGETING-POINT)
                (up-compare-goal g-scout1-target-x >= 0)
                (up-compare-goal g-scout1-target-y >= 0)
                =>
                (up-copy-point g-point-x g-scout1-target-x)
                )
                (defrule
                (goal g-loop-counter 2)
                (goal g-duc-scouting TARGETING-POINT)
                (up-compare-goal g-scout2-target-x >= 0)
                (up-compare-goal g-scout2-target-y >= 0)
                =>
                (up-copy-point g-point-x g-scout2-target-x)
                )
                (defrule
                (goal g-loop-counter 3)
                (goal g-duc-scouting TARGETING-POINT)
                (up-compare-goal g-scout3-target-x >= 0)
                (up-compare-goal g-scout3-target-y >= 0)
                =>
                (up-copy-point g-point-x g-scout3-target-x)
                )
                
                ;Check to see if scout is idle and get distance to target point
                (defrule
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (up-compare-goal g-point-x >= 0)
                (up-compare-goal g-point-y >= 0)
                =>
                (up-get-object-data object-data-idling g-temp2)
                (up-get-path-distance g-point-x 0 g-temp)                        ;store path distance from scout to the point in g-temp2
                )

                ;Reset scouting if current scout is idle
                ;Scout 1
                (defrule
                (goal g-loop-counter 1)
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;scout is alive
                (building-type-count-total town-center > 0)
                (goal g-temp2 1)                               ;scout is idle
                =>
                (set-goal g-duc-scouting RESET)
                (up-modify-flag g-flag c:- SCOUT-1-TARGET-SET)
                )
                ;Scout 2
                (defrule
                (goal g-loop-counter 2)
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;scout is alive
                (building-type-count-total town-center > 0)
                (goal g-temp2 1)                               ;scout is idle
                =>
                (set-goal g-duc-scouting RESET)
                (up-modify-flag g-flag c:- SCOUT-2-TARGET-SET)
                )
                ;Scout 3
                (defrule
                (goal g-loop-counter 3)
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;scout is alive
                (building-type-count-total town-center > 0)
                (goal g-temp2 1)                               ;scout is idle
                =>
                (set-goal g-duc-scouting RESET)
                (up-modify-flag g-flag c:- SCOUT-3-TARGET-SET)
                )

                ;If scout has a distance of <= 2 from g-scout-position-x, get new point

                ;Scout 1
                (defrule
                (goal g-loop-counter 1)
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (goal g-temp2 0)                               ;scout isn't idle
                (up-compare-goal g-temp <= 2)                   ;scout is close to the explore point
                =>
                (set-goal g-duc-scouting RESET)
                (up-modify-flag g-flag c:- SCOUT-1-TARGET-SET)
                )
                ;Scout 2
                (defrule
                (goal g-loop-counter 2)
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (goal g-temp2 0)                               ;scout isn't idle
                (up-compare-goal g-temp <= 2)                   ;scout is close to the explore point
                =>
                (set-goal g-duc-scouting RESET)
                (up-modify-flag g-flag c:- SCOUT-2-TARGET-SET)
                )
                ;Scout 3
                (defrule
                (goal g-loop-counter 3)
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (goal g-temp2 0)                               ;scout isn't idle
                (up-compare-goal g-temp <= 2)                   ;scout is close to the explore point
                =>
                (set-goal g-duc-scouting RESET)
                (up-modify-flag g-flag c:- SCOUT-3-TARGET-SET)
                )

                ;If point is reachable but far away, assume DUC scouting is no longer efficient
                (defrule
                (goal g-duc-scouting TARGETING-POINT)
                (up-set-target-by-id g: g-current-scout-id)     ;current scout found and is alive
                (building-type-count-total town-center > 0)
                (up-compare-goal g-temp != 65535)   ;path-distance is != 65535, point is reachable
                (up-compare-goal g-temp >= 80)      ;path-distance is far away, stop DUC scouting
                (up-compare-goal g-scouting-distance >= 18)
                =>
                ; (up-chat-data-to-player my-player-number CHAT-SCOUTING-POINT-FAR-AWAY g: g-temp)
                (up-reset-scouts)
                (set-goal g-duc-scouting STOP-DUC-SCOUTING)
                )

            ;------------------------
            ;   Next Scout in Loop
            ;------------------------

                (defrule
                (up-compare-goal g-loop-counter < 3)
                (up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
                =>
                (up-modify-goal g-loop-counter c:+ 1)
                (up-modify-goal g-current-scout-goal c:+ 1)
                (up-get-indirect-goal g: g-current-scout-goal g-current-scout-id)
                (set-goal g-temp -1)
                (set-goal g-temp2 -1)
                (set-goal g-temp3 -1)
                (set-goal g-point-x -1)
                (set-goal g-point-y -1)
                (up-jump-rule -34)
                )

    ;---------------
    ;   Sheep DUC
    ;---------------

        (load "The General 1.2/Functions/Reset Mini")

        ;This section controls the movement of sheep and how villagers gather the sheep

        (defrule
        (building-type-count town-center == 1)
        (or
            (up-set-target-by-id g: g-current-sheep-id)
            (up-set-target-by-id g: g-next-sheep-id))
        =>
        (up-get-point position-self g-point-x)
        (up-modify-goal g-point-x c:- 1)			;Get point a little bit away from the TC center
        (up-modify-goal g-point-y c:- 1)			;Get point a little bit away from the TC center
        (up-bound-point g-point-x g-point-x)
        (up-set-target-point g-point-x)
        (up-full-reset-search)
        )
        
        ;Move current sheep to TC
        (defrule
        (building-type-count town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-object-data object-data-idling == 1)	;current sheep is idle
        (up-object-data object-data-distance >= 3)	;current sheep too far away from TC
        (up-object-data object-data-hitpoints > 0)
        (up-object-data object-data-player == my-player-number)
        (up-add-object-by-id search-local g: g-current-sheep-id)
        (up-set-target-object search-local c: 0)
        (up-compare-goal g-point-x >= 0)
        (up-compare-goal g-point-y >= 0)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-target-point g-point-x action-move -1 -1)
        )

        ;Detect how many sheep we have, only send sheep if we have < 2 dead sheep
        (defrule
        (building-type-count town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-status c: status-gather c: list-active)
        (up-filter-distance c: -1 c: 10)
        (set-strategic-number sn-focus-player-number 0)
        (up-find-status-remote c: livestock-class c: 2)
        (up-get-search-state g-local-total)
        (up-filter-status c: status-ready c: list-active)
        )

        ;Pick a point to send sheep to
        (defrule
        (building-type-count town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-object-data object-data-hitpoints == 0)	;current sheep is dead
        (up-object-data object-data-carry < 30)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-hitpoints > 0)
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        (up-object-data object-data-player == my-player-number)
        (up-compare-goal g-remote-total < 2)        ;we have less than two dead sheep
        =>
        (up-set-target-point g-position-self-x)
        (set-goal g-temp2 865)
        )

        (defrule
        (goal g-temp2 865)
        (building-type-count town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        =>
        (up-get-point position-self g-point-x)
        (up-modify-goal g-point-x c:- 1)			;Get point a little bit away from the TC center
        (up-modify-goal g-point-y c:- 1)			;Get point a little bit away from the TC center
        (up-bound-point g-point-x g-point-x)
        (up-full-reset-search)
        (up-set-target-point g-point-x)
        )

        (defrule
        (goal g-temp2 865)
        (building-type-count town-center == 1)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        (up-set-target-by-id g: g-current-sheep-id)
        =>
        (up-get-object-data object-data-precise-distance g-temp3)
        (set-goal g-loop-counter 0)
        )

            ;Pick point away from current sheep location, if necessary
            (defrule
            (goal g-temp2 865)
            (building-type-count town-center == 1)
            (up-set-target-by-id g: g-next-sheep-id)
            (up-object-data object-data-idling == 1)	;next sheep is idle
            (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
            (up-set-target-by-id g: g-current-sheep-id)
            (up-compare-goal g-temp3 < 75)
            (up-compare-goal g-loop-counter < 3)
            =>
            (up-modify-goal g-point-y c:+ 1)
            (up-bound-point g-point-x g-point-x)
            (up-set-target-point g-point-x)
            (up-get-object-data object-data-precise-distance g-temp3)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (goal g-temp2 865)
        (building-type-count town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        (goal g-loop-counter 5)
        =>
        (up-get-point position-self g-point-x)
        (up-modify-goal g-point-x c:- 1)			;Get point a little bit away from the TC center
        (up-modify-goal g-point-y c:- 1)			;Get point a little bit away from the TC center
        )

        (defrule
        (goal g-temp2 865)
        (building-type-count town-center == 1)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-set-target-by-id g: g-next-sheep-id)
        (up-object-data object-data-idling == 1)	;next sheep is idle
        (up-object-data object-data-distance >= 2)	;next sheep too far away from TC
        (up-compare-goal g-point-x >= 0)
        (up-add-object-by-id search-local g: g-next-sheep-id)
        (up-set-target-object search-local c: 0)
        (up-object-data object-data-player == my-player-number)
        =>
        (up-target-point g-point-x action-default -1 -1)
        )

        (load "The General 1.2/Functions/Reset Mini")

        ;Get sheep to send to sheep gather point (exclude the current sheep to gather)
        (defrule
        (building-type-count town-center == 1)
        (up-compare-goal g-current-sheep-count > 0)
        (timer-triggered t-5-sec)
        =>
        (up-set-target-point g-sheep-gather-x)
        (up-full-reset-search)
        (up-filter-distance c: 3 c: -1)
        (up-find-local c: livestock-class c: 10)
        (up-remove-objects search-local object-data-id g:== g-current-sheep-id)
        (up-remove-objects search-local object-data-id g:== g-scout1-id)
        (up-remove-objects search-local object-data-id g:== g-scout2-id)
        (up-remove-objects search-local object-data-id g:== g-scout3-id)
        (up-remove-objects search-local object-data-player != my-player-number)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        ;Exclude the next sheep to gather if the current sheep is almost completely gathered
        (defrule
        (building-type-count town-center == 1)
        (up-compare-goal g-current-sheep-count > 0)
        (timer-triggered t-5-sec)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-object-data object-data-carry < 30)
        =>
        (up-remove-objects search-local object-data-id g:== g-next-sheep-id)
        (up-get-search-state g-local-total)
        )

        ;Send sheep to sheep gather point
        (defrule
        (building-type-count town-center == 1)
        (up-compare-goal g-current-sheep-count > 0)
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-point g-sheep-gather-x action-move -1 -1)
        )

        ;Retask shepherds if they target a sheep too far from town center

        (load "The General 1.2/Functions/Reset Mini")

        ;First, determine if any sheep are incorrectly being targeted
        (defrule
        (building-type-count town-center == 1)
        (unit-type-count livestock-class > 0)
        (up-set-target-by-id g: g-current-sheep-id)
        ; (or
        ;     (up-object-data object-data-tasks-count <= 6)
        ;     (unit-type-count villager-shepherd <= 6))
        =>
        (up-set-target-point g-position-self-x)
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-find-remote c: livestock-class c: 20)
        (up-remove-objects search-remote object-data-tasks-count == 0)          ;remove sheep not being targeted by anything
        (up-remove-objects search-remote object-data-player != my-player-number);sometimes the search can find sheep not owned by us
        (up-remove-objects search-remote object-data-id g:== g-current-sheep-id)
        (set-goal g-temp 9431)
        )

        ;If so, get villagers that are targeting the sheep
        (defrule
        (goal g-temp 9431)
        (building-type-count town-center == 1)
        (unit-type-count livestock-class > 0)
        (up-set-target-by-id g: g-current-sheep-id)
        ; (or
        ;     (up-object-data object-data-tasks-count <= 6)
        ;     (unit-type-count villager-shepherd <= 6))
        (up-set-target-object search-remote c: 0)
        (up-get-object-data object-data-id g-temp2)  ;store sheep ID that is incorrectly being targeted
        =>
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-find-local c: villager-class c: 40)
        (up-remove-objects search-local object-data-target-id g:!= g-temp2)  ;remove villagers not targeting the sheep
        (set-goal g-temp 9432)
        (up-set-target-point g-position-self-x)
        )

        (defrule
        (goal g-temp 9432)
        (up-set-target-by-id g: g-current-sheep-id)
        (up-object-data object-data-distance <= 3)
        (building-type-count town-center == 1)
        (unit-type-count livestock-class > 0)
        ; (or
        ;     (up-object-data object-data-tasks-count <= 6)
        ;     (unit-type-count villager-shepherd <= 6))
        (up-set-target-object search-remote c: 0)               ;we found sheep being incorrectly targeted
        (up-set-target-object search-local c: 0)                ;we found villagers targeting incorrect sheep
        (up-set-target-by-id g: g-current-sheep-id)             ;we have a sheep we want to gather
        =>
        (up-target-objects 1 action-default -1 -1)
        )

        ;If sheep isn't close, garrison shepherds in TC to send them toward the TC and/or retask them
        (defrule
        (goal g-temp 9432)
        (building-type-count town-center == 1)
        (unit-type-count livestock-class > 0)
        (up-set-target-object search-remote c: 0)               ;we found sheep being incorrectly targeted
        (up-set-target-object search-local c: 0)                ;we found villagers targeting incorrect sheep
        (up-set-target-by-id g: g-current-sheep-id)             ;we have a sheep we want to gather
        (up-object-data object-data-distance > 3)
        (up-object-data object-data-distance < 7)
        (up-object-data object-data-hitpoints > 0)
        ; (or
        ;     (up-object-data object-data-tasks-count <= 6)
        ;     (unit-type-count villager-shepherd <= 6))
        =>
        (up-reset-search 0 0 1 1)
        (up-reset-filters)
        (up-find-remote c: town-center c: 1)
        (up-target-objects 0 action-garrison -1 -1)
        )

    ;-------------------
    ;   TC Ungarrison
    ;-------------------

        ;This forces a speedy ungarrison for when villagers are tasked to garrison in the TC to be retasked
        (defrule
        (building-type-count town-center > 0)
        (goal g-town-under-attack NO)
        (up-enemy-units-in-town == 0)
        (up-enemy-buildings-in-town == 0)
        =>
        (up-ungarrison c: town-center)
        )

;=========================<>=========================
;				HUNTING AND GATHERING
;=========================<>=========================

    ;---------------
    ;   Push Deer
    ;---------------

        (load "The General 1.2/Functions/Reset Mini")
        
        (defrule
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout1-id)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-current-deer-id PENDING)
        (goal g-claim-sheep NO)
        =>
        (set-goal g-loop-counter 0)
        (up-set-target-point g-position-self-x)
        (up-full-reset-search)
        )

            (defrule
            (goal g-scouting-status PUSH-DEER)
            (building-type-count-total town-center > 0)
            (up-set-target-by-id g: g-scout1-id)
            (up-compare-goal g-current-deer-count > 0)
            (goal g-current-deer-id PENDING)
            (goal g-claim-sheep NO)
            (up-set-target-by-id g: g-loop-counter)
            (up-object-data object-data-class == deer-class)
            (up-object-data object-data-carry > 0)
            (up-object-data object-data-hitpoints > 0)
            (up-object-data object-data-distance <= 45)
            (up-get-object-data object-data-point-x g-point-x)
            (up-get-object-data object-data-point-y g-point-y)
            (up-point-explored g-point-x != explored-no)
            =>
            (up-add-object-by-id search-remote g: g-loop-counter)
            )

            (defrule
            (goal g-scouting-status PUSH-DEER)
            (building-type-count-total town-center > 0)
            (up-set-target-by-id g: g-scout1-id)
            (up-compare-goal g-current-deer-count > 0)
            (goal g-current-deer-id PENDING)
            (goal g-claim-sheep NO)
            (up-compare-goal g-loop-counter g:< g-id-loop-max-objects)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -2)
            )

        (defrule
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout1-id)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-current-deer-id PENDING)
        (goal g-claim-sheep NO)
        (up-set-target-object search-remote c: 0)
        =>
        (up-clean-search search-remote object-data-distance search-order-asc)
        (set-goal g-deer-pushing-status SEARCHED-FOR-DEER)
        )

        ;Get ID of deer to push
        (defrule
        (goal g-deer-pushing-status SEARCHED-FOR-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout1-id)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-current-deer-id PENDING)
        (up-set-target-object search-remote c: 0)
        (goal g-claim-sheep NO)
        =>
        (up-get-object-data object-data-id g-current-deer-id)
        (set-goal g-deer-pushing-status FOUND-DEER)
        )

        ;Send Scout to point behind deer to push deer to TC
        (defrule
        (goal g-deer-pushing-status FOUND-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout1-id)
        (up-set-target-by-id g: g-current-deer-id)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-claim-sheep NO)
        =>
        (up-get-object-data object-data-precise-x g-point-x)
        (up-get-object-data object-data-precise-y g-point-y)
        (up-copy-point g-point2-x g-position-self-x)
        (up-modify-goal g-point2-x c:* 100)
        (up-modify-goal g-point2-y c:* 100)
        (up-lerp-tiles g-point-x g-point2-x c: -75)       ;send scout one tile away from deer
        (up-bound-precise-point g-point-x 1 c: 0)
        )

        (defrule
        (goal g-deer-pushing-status FOUND-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout1-id)
        (up-set-target-by-id g: g-current-deer-id)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-claim-sheep NO)
        (up-add-object-by-id search-local g: g-scout1-id)
        (up-set-target-object search-local c: 0)
        =>
        (up-set-precise-target-point g-point-x)
        (set-strategic-number sn-target-point-adjustment 6) ;allow targeting a precise point
        (up-target-point 0 action-move -1 -1)
        (set-strategic-number sn-target-point-adjustment 0)
        (set-goal g-deer-pushing-status CHECK-DEER-DISTANCE)
        (up-set-target-point g-position-self-x)
        )

        ;Check if deer is close to TC, if so, find villager to hunt deer
        (defrule
        (goal g-deer-pushing-status CHECK-DEER-DISTANCE)
        (goal g-scouting-status PUSH-DEER)
        (up-set-target-by-id g: g-current-deer-id)
        (up-get-object-data object-data-distance g-temp2)
        (up-compare-goal g-temp2 <= 4)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-claim-sheep NO)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-distance c: -1 c: 10)
        (up-find-local c: female-shepherd c: 2)		;prioritize hunting deer with a shepherd instead of a hunter
        (up-find-local c: male-shepherd c: 2)
        (up-find-local c: villager-class c: 2)
        (set-goal g-deer-pushing-status FOUND-DEER-HUNTER)
        (up-get-search-state g-local-total)
        )

        ;If deer is close, hunt deer with villager
        (defrule
        (goal g-deer-pushing-status FOUND-DEER-HUNTER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-current-deer-id)
        (up-compare-goal g-current-deer-count > 0)
        (up-compare-goal g-local-total > 0)
        (goal g-claim-sheep NO)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-clean-search search-local object-data-distance search-order-asc)
        (up-remove-objects search-local object-data-index > 3)  ;hunt deer with 4 vils max
        (up-target-objects 1 action-default -1 -1)
        (set-goal g-deer-pushing-status SHOOT-DEER)
        )

        ;If deer too far from TC, stop hunters
        (defrule
        (goal g-deer-pushing-status SHOOT-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-current-deer-id)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-claim-sheep NO)
        =>
        (up-set-target-point g-position-self-x)
        )

        (defrule
        (goal g-deer-pushing-status SHOOT-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-current-deer-id)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-claim-sheep NO)
        (up-object-data object-data-distance > 5)
        =>
        (up-full-reset-search)
        (up-find-local c: male-hunter c: 10)
        (up-find-local c: female-hunter c: 10)
        (up-remove-objects search-local object-data-target-id g:!= g-current-deer-id)
        )

        (defrule
        (goal g-deer-pushing-status SHOOT-DEER)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-current-deer-id)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-claim-sheep NO)
        (up-object-data object-data-distance > 5)
        (up-set-target-object search-local c: 0)
        =>
        (up-target-point 0 action-stop -1 -1)
        (set-goal g-deer-pushing-status CHECK-DEER-DISTANCE)
        )

        ;If deer is not close, tell scout to nudge the deer again
        (defrule
        (up-compare-goal g-deer-pushing-status >= CHECK-DEER-DISTANCE)
        (goal g-scouting-status PUSH-DEER)
        (building-type-count-total town-center > 0)
        (up-set-target-by-id g: g-scout1-id)
        (up-set-target-by-id g: g-current-deer-id)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-current-deer-count > 0)
        (goal g-claim-sheep NO)
        =>
        (set-goal g-deer-pushing-status FOUND-DEER)
        )

        ;Once deer is hunted, reset the deer ID again so we can push another deer
        (defrule
        (up-set-target-by-id g: g-current-deer-id)
        (up-object-data object-data-hitpoints == 0)
        =>
        (set-goal g-current-deer-id PENDING)
        )

        (defrule
        (up-compare-goal g-current-deer-id > 0)
        (not
            (up-set-target-by-id g: g-current-deer-id))
        =>
        (set-goal g-current-deer-id PENDING)
        )

    ;------------------
    ;   Boar Hunting
    ;------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (not
            (up-set-target-by-id g: g-current-boar-id))
        (or
            (up-compare-goal g-boar-hunt-status != PENDING)
            (up-compare-goal g-current-boar-id != PENDING))
        =>
        (set-goal g-current-boar-id PENDING)
        (set-goal g-boar-hunt-status PENDING)
        (set-goal g-boar-lurer-id PENDING)
        ; (chat-local-to-self CHAT-BOAR-RESET)
        )

        (defrule
        (goal g-boar-hunt-status TARGET-BOAR)
        (or
            (not
                (up-set-target-by-id g: g-boar-lurer-id))
            (and
                (up-set-target-by-id g: g-boar-lurer-id)
                (up-object-data object-data-target-id g:!= g-current-boar-id)))
        =>
        (set-goal g-current-boar-id PENDING)
        (set-goal g-boar-hunt-status PENDING)
        (set-goal g-boar-lurer-id PENDING)
        ; (chat-local-to-self CHAT-BOAR-RESEND-LURER)
        )

        (defrule
        (up-compare-goal g-boar-hunt-status < READY-TO-LURE)
        (goal g-boar-hunting-conditions-met YES)
        (up-compare-goal g-total-decaying-hunt-food < FAR-BOAR-FOOD-AMOUNT-LEFT)        ;total decaying hunt food includes all decaying boar and deer
        (or
            (goal g-far-boar YES)
            (up-compare-goal g-total-decaying-hunt-food < NEAR-BOAR-FOOD-AMOUNT-LEFT))
        ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
        (up-compare-goal g-current-boar-count > 0)
        =>
        (set-goal g-boar-hunt-status READY-TO-LURE)
        ; (chat-local-to-self CHAT-BOAR-READY-TO-LURE)
        )

        (defrule
        (goal g-boar-hunt-status READY-TO-LURE)
        ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
        (up-compare-goal g-current-boar-count > 0)
        =>
        (set-goal g-current-boar-id PENDING)
        (set-goal g-loop-counter 0)
        (up-set-target-point g-position-self-x)
        (up-full-reset-search)
        )

            (defrule
            (goal g-boar-hunt-status READY-TO-LURE)
            ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
            (up-compare-goal g-current-boar-count > 0)
            (goal g-current-boar-id PENDING)
            (up-set-target-by-id g: g-loop-counter)
            (up-object-data object-data-class == boar-class)
            (up-object-data object-data-carry > 0)
            (up-object-data object-data-hitpoints > 0)
            (up-object-data object-data-distance <= MAX-BOAR-HUNT-DISTANCE)
            (up-get-object-data object-data-point-x g-point-x)
            (up-get-object-data object-data-point-y g-point-y)
            (up-point-explored g-point-x != explored-no)
            =>
            (up-add-object-by-id search-remote g: g-loop-counter)
            )

            (defrule
            (goal g-boar-hunt-status READY-TO-LURE)
            ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
            (up-compare-goal g-current-boar-count > 0)
            (goal g-current-boar-id PENDING)
            (up-compare-goal g-loop-counter g:< g-id-loop-max-objects)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -2)
            )

        (defrule
        (goal g-boar-hunt-status READY-TO-LURE)
        ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
        (up-compare-goal g-current-boar-count > 0)
        (goal g-current-boar-id PENDING)
        (up-set-target-object search-remote c: 0)
        =>
        (up-get-point position-center g-point-x)
        (up-set-target-point g-point-x)
        (up-clean-search search-remote object-data-distance search-order-desc)
        ; (chat-local-to-self CHAT-BOAR-SEARCH-FOR-BOAR)
        )

        ;Get ID of boar to lure
        (defrule
        (goal g-boar-hunt-status READY-TO-LURE)
        ; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
        (up-compare-goal g-current-boar-count > 0)
        (goal g-current-boar-id PENDING)
        (up-set-target-object search-remote c: 0)
        =>
        (up-get-object-data object-data-id g-current-boar-id)
        (set-goal g-boar-hunt-status SET-BOAR-ID)
        ; (chat-local-to-self CHAT-BOAR-SET-BOAR)
        )

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (goal g-boar-hunt-status SET-BOAR-ID)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (up-research-status c: ri-loom < research-complete)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-exclude -1 actionid-explore orderid-build -1)
        (up-find-local c: villager-class c: 20)
        (up-remove-objects search-local object-data-hitpoints < 25)
        (up-clean-search search-local object-data-distance search-order-asc)
        )

        (defrule
        (goal g-boar-hunt-status SET-BOAR-ID)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (research-completed ri-loom)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-exclude -1 actionid-explore orderid-build -1)
        (up-find-local c: villager-class c: 20)
        (up-remove-objects search-local object-data-hitpoints < 40)
        (up-clean-search search-local object-data-distance search-order-asc)
        )
            
        (defrule
        (goal g-boar-hunt-status SET-BOAR-ID)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (up-set-target-object search-local c: 0)
        (up-object-data object-data-class == villager-class)
        =>
        (up-get-object-data object-data-id g-boar-lurer-id)
        (set-goal g-boar-hunt-status DROP-LURER-RESOURCES)
        ; (chat-local-to-self CHAT-BOAR-FIND-LURER)
        )

        (defrule
        (goal g-boar-hunt-status DROP-LURER-RESOURCES)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (up-set-target-by-id g: g-boar-lurer-id)
        (up-object-data object-data-carry > 5)	;lurer is carrying more than 5 resources
        (building-type-count town-center > 0)
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-find-remote c: town-center c: 1)
        (up-set-target-object search-remote c: 0)
        (up-add-object-by-id search-local g: g-boar-lurer-id)
        (up-target-objects 1 action-default -1 -1)
        ; (chat-local-to-self CHAT-BOAR-DROP-RESOURCES)
        )

        (defrule
        (goal g-boar-hunt-status DROP-LURER-RESOURCES)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action != actionid-attack)
        (up-object-data object-data-hitpoints > 0)
        (up-set-target-by-id g: g-boar-lurer-id)
        (or
            (up-object-data object-data-carry <= 5)
            (building-type-count town-center == 0))
        =>
        (up-full-reset-search)
        (up-set-target-by-id g: g-current-boar-id)
        (up-add-object-by-id search-local g: g-boar-lurer-id)
        (up-target-objects 1 action-default -1 -1)	;right-click the boar with the villager, villager will auto-retreat to TC once boar attacks
        (set-goal g-boar-hunt-status TARGET-BOAR)
        ; (chat-local-to-self CHAT-BOAR-TARGET-BOAR)
        )

        (defrule
        (goal g-boar-hunt-status TARGET-BOAR)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-action == actionid-attack)
        =>
        (set-goal g-boar-hunt-status LURE-BOAR)
        ; (chat-local-to-self CHAT-BOAR-RETREAT-LURER)
        )

        (defrule
        (goal g-boar-hunt-status LURE-BOAR)
        (dropsite-min-distance live-boar <= 6)
        (up-set-target-by-id g: g-current-boar-id)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-exclude -1 actionid-build orderid-build -1)
        (up-find-local c: villager-class c: 40)
        (up-remove-objects search-local object-data-hitpoints < 25)
        (up-clean-search search-local object-data-distance search-order-asc)
        (up-remove-objects search-local object-data-index > 5)
        (set-goal g-boar-hunt-status ASSIST-HUNTING-BOAR)
        (up-get-search-state g-local-total)
        ; (chat-local-to-self CHAT-BOAR-GET-ASSISTANT-HUNTERS)
        )

        (defrule
        (goal g-boar-hunt-status ASSIST-HUNTING-BOAR)
        (dropsite-min-distance live-boar <= 6)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints > 0)
        (up-compare-goal g-local-total >= 4)
        =>
        (up-drop-resources food c: 3)
        (up-target-objects 1 action-default -1 -1)
        ; (chat-local-to-self CHAT-BOAR-ASSIST)
        )

        (defrule
        (goal g-boar-hunt-status ASSIST-HUNTING-BOAR)
        (dropsite-min-distance live-boar > 6)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints > 0)
        =>
        (set-goal g-boar-hunt-status PENDING)
        (up-full-reset-search)
        (up-find-local c: female-hunter c: 10)
        (up-find-local c: male-hunter c: 10)
        )

        (defrule
        (goal g-boar-hunt-status ASSIST-HUNTING-BOAR)
        (dropsite-min-distance live-boar > 6)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints > 0)
        (up-set-target-object search-local c: 0)
        =>
        (up-target-point 0 action-stop -1 -1)
        ; (chat-local-to-self CHAT-BOAR-RUNNING-AWAY)
        )

        (defrule
        (goal g-boar-hunt-status ASSIST-HUNTING-BOAR)
        (up-set-target-by-id g: g-current-boar-id)
        (up-object-data object-data-hitpoints == 0)
        =>
        (set-goal g-boar-hunt-status PENDING)
        ; (chat-local-to-self CHAT-BOAR-HUNTED)
        )

    ;---------------------
    ;   Llama Gathering
    ;---------------------

        ;Incan llama won't be gathered automatically without DUC code:
        #load-if-defined INCAN-CIV

            ;Target llama
            (defrule
            (timer-triggered t-10-sec)
            (unit-type-count llama > 0)
            =>
            (up-full-reset-search)
            (up-set-target-point g-position-self-x)
            (up-filter-distance c: 2 c: -1)
            (up-find-local c: llama c: 20)
            )

            (defrule
            (timer-triggered t-10-sec)
            (unit-type-count llama > 0)
            (up-set-target-object search-local c: 0)
            (up-object-data object-data-player == my-player-number)
            =>
            (set-strategic-number sn-target-point-adjustment 4)
            (up-target-point g-position-self-x action-default -1 -1)
            (set-strategic-number sn-target-point-adjustment 0)
            )

            (defrule
            (unit-type-count llama > 0)
            (game-time >= 30)
            (unit-type-count villager-shepherd == 0)
            (unit-type-count villager-hunter == 0)
            (building-type-count house >= 2)
            =>
            (up-full-reset-search)
            (up-set-target-point g-position-self-x)
            (up-modify-goal g-temp2 s:= sn-focus-player-number)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-filter-distance c: -1 c: 2)
            (up-find-remote c: llama c: 1)
            (set-goal g-temp 1118)
            )

            (defrule
            (goal g-temp 1118)
            (unit-type-count llama > 0)
            (up-set-target-object search-remote c: 0)
            =>
            (up-reset-search 1 1 0 0)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 8)
            (up-find-local c: villager-class c: 1)
            (up-target-objects 1 action-default -1 -1) ;kill llama
            )
            
        #end-if

;=========================<>=========================
;			       RETASK VILLAGERS
;=========================<>=========================

    ;----------------------------
    ;   Ensure Enough Foragers
    ;----------------------------

        ; (load "The General 1.2/Functions/Reset Mini")

        ; (defrule
        ; (current-age == dark-age)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (unit-type-count villager >= 16)
        ; =>
        ; (up-get-fact unit-type-count villager g-temp)
        ; (up-modify-goal g-temp c:- 15)
        ; (up-modify-goal g-temp c:min 4)
        ; (up-get-fact unit-type-count villager-builder g-temp2)
        ; (up-modify-goal g-temp g:- g-temp2)
        ; )

        ; (defrule
        ; (current-age == dark-age)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (unit-type-count villager >= 16)
        ; (unit-type-count villager-forager g:< g-temp)
        ; =>
        ; (up-full-reset-search)
        ; (up-set-target-point g-position-self-x)
        ; (up-filter-distance c: -1 c: 20)
        ; (up-find-local c: mill c: 1)
        ; (up-filter-status c: status-pending c: list-active)
        ; (up-find-status-local c: mill c: 1)
        ; (set-goal g-temp2 23947)
        ; )

        ; (defrule
        ; (goal g-temp2 23947)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (up-set-target-object search-local c: 0)
        ; =>
        ; (up-get-point position-object g-point-x)
        ; (up-set-target-point g-point-x)
        ; (up-full-reset-search)
        ; (up-filter-status c: status-resource c: list-active)
        ; (up-filter-distance c: -1 c: 5)
        ; (up-find-resource c: forage-class c: 6)
        ; (up-clean-search search-remote object-data-distance search-order-asc)
        ; (up-remove-objects search-remote object-data-index == 0) ;remove closest bush because it often is blocked by the mill
        ; (up-get-search-state g-local-total)
        ; (set-goal g-temp2 23948)
        ; )        

        ; (defrule
        ; (goal g-temp2 23948)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (up-compare-goal g-remote-total > 0)
        ; (up-set-target-object search-remote c: 0)
        ; =>
        ; (up-reset-search 1 1 0 0)
        ; (up-reset-filters)
        ; (up-find-local c: female-shepherd c: 1)
        ; (up-find-local c: male-shepherd c: 1)
        ; (up-find-local c: female-hunter c: 1)
        ; (up-find-local c: male-hunter c: 1)
        ; (up-remove-objects search-local object-data-index > 0)
        ; (up-get-search-state g-local-total)
        ; (set-goal g-temp2 23949)
        ; )

        ; (defrule
        ; (goal g-temp2 23949)
        ; (building-type-count-total mill > 0)
        ; (up-gaia-type-count c: forage-class > 0)
        ; (up-compare-goal g-local-total == 1)
        ; (up-compare-goal g-remote-total > 0)
        ; (up-set-target-object search-remote c: 0)
        ; =>
        ; (up-target-objects 0 action-default -1 -1)
        ; )

    ;---------------------------
    ;   Retask Early Foragers
    ;---------------------------

        ;Retask when gathering from forage bushes without mill
        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (unit-type-count villager-forager > 0)
        (building-type-count town-center > 0)
        (building-type-count mill == 0)
        (up-compare-goal g-sheep-found-count > 0)
        (unit-type-count villager-shepherd <= 5)
        (current-age == dark-age)
        (unit-type-count villager < 13)
        =>
        (up-full-reset-search)
        (up-find-local c: male-forager c: 20)
        (up-find-local c: female-forager c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-find-remote c: town-center c: 1)
        (up-get-search-state g-local-total)
        (set-goal g-temp 53640)
        )

        (defrule
        (goal g-temp 53640)
        (up-compare-goal g-local-total > 0)
        (up-set-target-object search-remote c: 0)
        =>
        (up-target-objects 1 action-garrison -1 -1)
        ; (chat-local-to-self "retask early foragers")
        )

    ;-------------------------
    ;   Retask Far Foragers
    ;-------------------------

        ;Retask when gathering from forage bushes away from mill
        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (unit-type-count villager-forager > 0)
        (building-type-count town-center > 0)
        (building-type-count mill > 0)
        (up-compare-goal g-sheep-found-count > 0)
        (unit-type-count villager-shepherd <= 5)
        (current-age == dark-age)
        (unit-type-count villager < 13)
        =>
        (up-full-reset-search)
        (up-find-local c: male-forager c: 20)
        (up-find-local c: female-forager c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        (set-goal g-temp 53641)
        )

            (defrule
            (goal g-temp 53641)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (current-age == dark-age)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-filter-distance c: -1 c: 6)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: mill c: 1)
            (up-find-remote c: town-center c: 1)
            (up-filter-status c: status-pending c: list-active)
            (up-find-status-remote c: mill c: 1)
            (up-find-status-remote c: town-center-foundation c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-temp 53641)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (goal g-remote-total 0)
            (current-age == dark-age)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: town-center c: 1)
            (set-goal g-temp 53642)
            )

            (defrule
            (goal g-temp 53642)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (up-set-target-object search-remote c: 0)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-objects 1 action-garrison -1 -1)
            ; (chat-local-to-self "retask far foragers")
            (up-jump-rule 1)
            )

            (defrule
            (goal g-temp 53641)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-compare-goal g-loop-counter < 40)
            (current-age == dark-age)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )

    ;---------------------------
    ;   Ensure Enough Hunters
    ;---------------------------

        ; (load "The General 1.2/Functions/Reset Mini")

        ; (defrule
        ; (unit-type-count villager-forager > 4)
        ; (unit-type-count villager-hunter < 4)
        ; (dropsite-min-distance hunting < 5)
        ; =>
        ; (up-full-reset-search)
        ; (up-find-local c: male-forager c: 20)
        ; (up-find-local c: female-forager c: 20)
        ; (up-remove-objects search-local object-data-carry >= 3)
        ; (up-set-target-point g-position-self-x)
        ; (up-filter-distance c: -3 c: 8)
        ; (up-filter-status c: status-gather c: list-inactive)
        ; (up-find-resource c: boar-class c: 1)
        ; (up-find-resource c: deer-class c: 1)
        ; (up-remove-objects search-local object-data-index > 0)
        ; (up-remove-objects search-remote object-data-carry < 10)
        ; (up-clean-search search-remote object-data-distance search-order-asc)
        ; (up-get-search-state g-local-total)
        ; )

        ; (defrule
        ; (unit-type-count villager-forager > 4)
        ; (unit-type-count villager-hunter < 4)
        ; (dropsite-min-distance hunting < 6)
        ; (up-compare-goal g-local-total > 0)
        ; (up-set-target-object search-remote c: 0)
        ; =>
        ; (up-target-objects 1 action-default -1 -1)
        ; )

    ;------------------------------
    ;   Retask Early Lumberjacks
    ;------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (building-type-count town-center > 0)
        (unit-type-count villager-wood > 0)
        (current-age == dark-age)
        (unit-type-count villager <= VILS-FOR-LUMBER-CAMP)
        (strategic-number sn-wood-gatherer-percentage == 0)
        (or
            (dropsite-min-distance food < 4)
            (or
                (dropsite-min-distance hunting < 4)
                (up-compare-goal g-usable-farm-count > 0)))
        =>
        (up-find-local c: male-lumberjack c: 20)
        (up-find-local c: female-lumberjack c: 20)
        (up-get-search-state g-local-total)
        )

        (defrule
        (building-type-count town-center > 0)
        (unit-type-count villager-wood > 0)
        (current-age == dark-age)
        (unit-type-count villager <= VILS-FOR-LUMBER-CAMP)
        (strategic-number sn-wood-gatherer-percentage == 0)
        (or
            (dropsite-min-distance food < 4)
            (or
                (dropsite-min-distance hunting < 4)
                (up-compare-goal g-usable-farm-count > 0)))
        (up-compare-goal g-local-total > 0)
        =>
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-reset-search 0 0 1 1)
        (up-reset-filters)
        (up-find-remote c: town-center c: 1)
        )

        (defrule
        (building-type-count town-center > 0)
        (unit-type-count villager-wood > 0)
        (current-age == dark-age)
        (unit-type-count villager <= VILS-FOR-LUMBER-CAMP)
        (strategic-number sn-wood-gatherer-percentage == 0)
        (or
            (dropsite-min-distance food < 4)
            (or
                (dropsite-min-distance hunting < 4)
                (up-compare-goal g-usable-farm-count > 0)))
        (up-compare-goal g-local-total > 0)
        (up-set-target-object search-remote c: 0)
        =>
        (up-target-objects 1 action-garrison -1 -1)
        ; (chat-local-to-self "retask early lumberjacks")
        )

    ;-----------------
    ;   Retask Far Lumberjacks
    ;-----------------

        (load "The General 1.2/Functions/Reset Mini")

        ;Retask lumberjacks when gathering wood away from a dropsite
        (defrule
        (unit-type-count villager-wood > 0)
        (building-type-count town-center > 0)
        (building-type-count lumber-camp > 0)
        (dropsite-min-distance wood < 7)
        (current-age == dark-age)
        =>
        (up-full-reset-search)
        (up-find-local c: male-lumberjack c: 20)
        (up-find-local c: female-lumberjack c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        (set-goal g-temp 53643)
        )

            (defrule
            (goal g-temp 53643)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (current-age == dark-age)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-filter-distance c: -1 c: 7)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: lumber-camp c: 1)
            (up-find-remote c: town-center c: 1)
            (up-filter-status c: status-pending c: list-active)
            (up-find-status-remote c: lumber-camp c: 1)
            (up-find-status-remote c: town-center-foundation c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-temp 53643)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (goal g-remote-total 0)
            (current-age == dark-age)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: town-center c: 1)
            (set-goal g-temp 53644)
            )

            (defrule
            (goal g-temp 53644)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (up-set-target-object search-remote c: 0)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-objects 1 action-garrison -1 -1)
            ; (chat-local-to-self "retask far lumberjacks")
            (up-jump-rule 1)
            )

            (defrule
            (goal g-temp 53643)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-compare-goal g-loop-counter < 40)
            (current-age == dark-age)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )
            
    ;----------------------------
    ;   Retask Far Gold Miners
    ;----------------------------

        (load "The General 1.2/Functions/Reset Mini")

        ;Retask gold miners when gathering gold away from a dropsite
        (defrule
        (unit-type-count villager-gold > 0)
        (building-type-count town-center > 0)
        (building-type-count mining-camp > 0)
        (dropsite-min-distance gold < 7)
        (current-age == dark-age)
        =>
        (up-full-reset-search)
        (up-find-local c: male-gold-miner c: 20)
        (up-find-local c: female-gold-miner c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        (set-goal g-temp 53645)
        )

            (defrule
            (goal g-temp 53645)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (current-age == dark-age)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-filter-distance c: -1 c: 7)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: mining-camp c: 1)
            (up-find-remote c: town-center c: 1)
            (up-filter-status c: status-pending c: list-active)
            (up-find-status-remote c: mining-camp c: 1)
            (up-find-status-remote c: town-center-foundation c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-temp 53645)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (goal g-remote-total 0)
            (current-age == dark-age)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: town-center c: 1)
            (set-goal g-temp 53646)
            )

            (defrule
            (goal g-temp 53646)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (up-set-target-object search-remote c: 0)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-objects 1 action-garrison -1 -1)
            ; (chat-local-to-self "retask far gold miners")
            (up-jump-rule 1)
            )

            (defrule
            (goal g-temp 53645)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-compare-goal g-loop-counter < 40)
            (current-age == dark-age)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )
            
    ;-----------------------------
    ;   Retask Far Stone Miners
    ;-----------------------------

        (load "The General 1.2/Functions/Reset Mini")

        ;Retask stone miners when gathering stone away from a dropsite
        (defrule
        (unit-type-count villager-stone > 0)
        (building-type-count town-center > 0)
        (building-type-count mining-camp > 0)
        (dropsite-min-distance stone < 7)
        (current-age == dark-age)
        =>
        (up-full-reset-search)
        (up-find-local c: male-stone-miner c: 20)
        (up-find-local c: female-stone-miner c: 20)
        (up-remove-objects search-local object-data-carry < 5)      ;only retask when villagers are close to their capacity
        (up-remove-objects search-local object-data-carry >= 10)    ;don't retask villager that are dropping off resources
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        (set-goal g-temp 53647)
        )

            (defrule
            (goal g-temp 53647)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (current-age == dark-age)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-filter-distance c: -1 c: 7)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: mining-camp c: 1)
            (up-find-remote c: town-center c: 1)
            (up-filter-status c: status-pending c: list-active)
            (up-find-status-remote c: mining-camp c: 1)
            (up-find-status-remote c: town-center-foundation c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-temp 53647)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (goal g-remote-total 0)
            (current-age == dark-age)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: town-center c: 1)
            (set-goal g-temp 53648)
            )

            (defrule
            (goal g-temp 53648)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-set-target-object search-local g: g-loop-counter)
            (up-set-target-object search-remote c: 0)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-objects 1 action-garrison -1 -1)
            ; (chat-local-to-self "retask far stone miners")
            (up-jump-rule 1)
            )

            (defrule
            (goal g-temp 53647)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-compare-goal g-loop-counter < 40)
            (current-age == dark-age)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )

    ;----------------------------------
    ;   Task Villagers to Idle Farms
    ;----------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-usable-farm-count > 0)
        (goal g-town-under-attack NO)
        (up-object-type-count c: villager-farmer g:< g-desired-num-food-vils)
        =>
        (up-full-reset-search)
        (up-modify-sn sn-focus-player-number c:= my-player-number)
        (up-find-remote c: farm c: 40)
        (up-remove-objects search-remote object-data-tasks-count > 0)
        (up-get-search-state g-local-total)
        )

        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-usable-farm-count > 0)
        (goal g-town-under-attack NO)
        (up-set-target-object search-remote c: 0)
        (up-object-type-count c: villager-farmer g:< g-desired-num-food-vils)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-filter-exclude -1 actionid-build orderid-explore -1)
        (up-filter-distance c: -1 c: 7)
        (up-find-local c: male-forager c: 3)
        (up-find-local c: female-forager c: 3)
        (up-find-local c: male-hunter c: 3)
        (up-find-local c: female-hunter c: 3)
        (up-find-local c: male-shepherd c: 3)
        (up-find-local c: female-shepherd c: 3)
        (up-find-local c: male-fisherman c: 3)
        (up-find-local c: female-fisherman c: 3)
        (up-clean-search search-local object-data-distance search-order-asc)
        (up-remove-objects search-local object-data-index > 0)
        )

        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-usable-farm-count > 0)
        (goal g-town-under-attack NO)
        (up-set-target-object search-local c: 0)
        (up-set-target-object search-remote c: 0)
        (up-object-type-count c: villager-farmer g:< g-desired-num-food-vils)
        =>
        (up-target-objects 1 action-default -1 -1)
        ; (chat-local-to-self "task vils to farms")
        )


;=========================<>=========================
;				      DROPSITES
;=========================<>=========================

    ;-----------------------------
    ;   Delete Far Lumber Camps
    ;-----------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (goal g-first-attack-launched YES)
        (building-type-count lumber-camp > 1)
        (wood-amount >= 100)
        =>
        (up-full-reset-search)
        (up-find-local c: lumber-camp c: 20)
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (goal g-first-attack-launched YES)
			(wood-amount >= 100)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count lumber-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 7)
			(set-strategic-number sn-focus-player-number my-player-number)
            (up-find-resource c: wood c: 1)
            (up-filter-status c: status-resource c: list-active)
            (up-find-resource c: wood c: 1)
            (up-get-search-state g-local-total)
            )
            
			;If no trees or dropsite within 7 tiles, only delete lumber camp if we can afford new lumber camp immediately
			;Otherwise, keep lumber camp around if we have several trees within 10 tiles
            (defrule
            (goal g-first-attack-launched YES)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count lumber-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            (up-object-data object-data-type == lumber-camp)
            (goal g-remote-total 0)             ;no nearby trees found
			(wood-amount >= 100)
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-point 0 action-delete -1 -1)
            (up-jump-rule 1)
            )

            (defrule
            (goal g-first-attack-launched YES)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count lumber-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
			(up-compare-goal g-loop-counter < 40)
			=>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -3)
            )

    ;-----------------------------
    ;   Delete Far Mining Camps
    ;-----------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (goal g-first-attack-launched YES)
        (building-type-count mining-camp > 1)
        =>
        (up-full-reset-search)
        (up-find-local c: mining-camp c: 20)
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (goal g-first-attack-launched YES)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count mining-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 7)
            (up-filter-status c: status-resource c: list-active)
            (up-find-resource c: gold c: 1)
            (up-filter-status c: status-resource c: list-active)
            (up-find-resource c: stone c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-first-attack-launched YES)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count mining-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-goal g-remote-total > 0)             ;nearby mines found
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -2)
            )
            
            (defrule
            (goal g-first-attack-launched YES)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (building-type-count mining-camp > 1)
            (up-set-target-object search-local g: g-loop-counter)
            (up-object-data object-data-type == mining-camp)
            (goal g-remote-total 0)             ;no nearby trees found
            =>
            (up-remove-objects search-local object-data-index g:!= g-loop-counter)
            (up-target-point 0 action-delete -1 -1)
            )

    ;-------------------------------------------
    ;   Dropsite Building Construction Assist
    ;-------------------------------------------

        ;If villager is close to carrying capacity and
        ;dropsite isn't constructed, help construct it

        (load "The General 1.2/Functions/Reset Mini")

        ;Mining Camps
        (defrule
        (up-pending-objects c: mining-camp > 0)
        (or
            (unit-type-count villager-gold > 0)
            (unit-type-count villager-stone > 0))
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-filter-status c: status-pending c: list-active)
        (up-find-status-remote c: mining-camp c: 1)
        )

        (defrule
        (up-pending-objects c: mining-camp > 0)
        (or
            (unit-type-count villager-gold > 0)
            (unit-type-count villager-stone > 0))
        (up-set-target-object search-remote c: 0)
        (building-type-count-total mining-camp <= 2)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-reset-filters)
        (up-filter-distance c: -1 c: 6)
        (up-find-local c: male-gold-miner c: 20)
        (up-find-local c: female-gold-miner c: 20)
        (up-find-local c: male-stone-miner c: 20)
        (up-find-local c: female-stone-miner c: 20)
        (up-remove-objects search-local object-data-carry < 8)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-pending-objects c: mining-camp > 0)
        (or
            (unit-type-count villager-gold > 0)
            (unit-type-count villager-stone > 0))
        (up-set-target-object search-remote c: 0)
        (building-type-count-total mining-camp <= 2)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-objects 0 action-default -1 -1)
        )

        (load "The General 1.2/Functions/Reset Mini")

        ;Lumber Camps
        (defrule
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-filter-status c: status-pending c: list-active)
        (up-find-status-remote c: lumber-camp c: 1)
        )

        (defrule
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        (up-set-target-object search-remote c: 0)
        (building-type-count-total lumber-camp <= 2)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-reset-filters)
        (up-filter-distance c: -1 c: 5)
        (up-find-local c: male-lumberjack c: 20)
        (up-find-local c: female-lumberjack c: 20)
        (up-remove-objects search-local object-data-carry < 8)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        (up-set-target-object search-remote c: 0)
        (building-type-count-total lumber-camp <= 2)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-objects 0 action-default -1 -1)
        )

        (load "The General 1.2/Functions/Reset Mini")

        ;First lumber camp
        (defrule
        (building-type-count lumber-camp == 0)
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-filter-status c: status-pending c: list-active)
        (up-find-remote c: lumber-camp c: 1)
        )

        (defrule
        (building-type-count lumber-camp == 0)
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        (up-set-target-object search-remote c: 0)
        (up-object-data object-data-tasks-count == 0)
        =>
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-find-local c: female-lumberjack c: 1)
        (up-find-local c: male-lumberjack c: 1)
        (up-get-search-state g-local-total)
        )

        (defrule
        (building-type-count lumber-camp == 0)
        (up-pending-objects c: lumber-camp > 0)
        (unit-type-count villager-wood > 0)
        (up-set-target-object search-remote c: 0)
        (up-object-data object-data-tasks-count == 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-objects 1 action-default -1 -1)
        )

        (load "The General 1.2/Functions/Reset Mini")

        ;Mills
        (defrule
        (up-pending-objects c: mill > 0)
        (unit-type-count villager-forager > 0)
        =>
        (up-full-reset-search)
        (set-strategic-number sn-focus-player-number my-player-number)
        (up-filter-status c: status-pending c: list-active)
        (up-find-status-remote c: mill c: 1)
        )

        (defrule
        (up-pending-objects c: mill > 0)
        (unit-type-count villager-forager > 0)
        (up-set-target-object search-remote c: 0)
        (building-type-count-total mill <= 2)
        =>
        (up-get-point position-object g-point-x)
        (up-set-target-point g-point-x)
        (up-reset-filters)
        (up-filter-distance c: -1 c: 6)
        (up-find-local c: male-forager c: 20)
        (up-find-local c: female-forager c: 20)
        (up-remove-objects search-local object-data-carry < 8)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-pending-objects c: mill > 0)
        (unit-type-count villager-forager > 0)
        (up-set-target-object search-remote c: 0)
        (building-type-count-total mill <= 2)
        (up-compare-goal g-local-total > 0)
        =>
        (up-target-objects 0 action-default -1 -1)
        )

;=========================<>=========================
;				 SOLDIER COORDINATION
;=========================<>=========================

    ;----------------------
    ;   Enemy TC Retreat
    ;----------------------

        (load "The General 1.2/Functions/Reset Mini")
        
        (defrule
        (or
            (up-compare-flag g-attack-method-flag != USE-DUC)
            (goal g-attacking NO))
        (players-building-type-count target-player town-center > 0)
        =>
        (set-goal g-projectile-retreat NO)
        (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
        (up-full-reset-search)
        (up-find-remote c: town-center c: 20)
        (up-remove-objects search-remote object-data-hitpoints < 480)   ;remove town centers that can't be garrisoned
        (set-goal g-loop-counter 0)				;look at first building and track progress through loop
        (up-get-search-state g-local-total)
        )
        
            ;Loop through all target player TCs to find nearby units that should retreat
            (defrule
            (or
                (not
                    (up-set-target-object search-remote g: g-loop-counter))	;cannot find any more enemy defensive buildings
                (or
                    (goal g-remote-total 0)
                    (or
                        (players-building-type-count target-player town-center == 0)
                        (and
                            (up-compare-flag g-attack-method-flag == USE-DUC)
                            (goal g-attacking YES)))))
            =>
            (up-jump-rule 14)
            )
            
            ;Search for our units and enemy units near TC
            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            ; (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            =>
            (up-get-object-data object-data-garrison-count g-temp)
            (up-modify-goal g-temp c:/ 2)               ;count the number of garrisoned units as half soldiers
            (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-reset-search 1 1 0 0)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 14)
            (up-filter-include cmdid-military -1 -1 -1)
            (up-find-remote c: all-units-class c: 40)
            (up-find-local c: all-units-class c: 40)
            (up-find-local c: battering-ram-line c: 5)
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )

            ;We have no units near TC, check next TC
            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (goal g-local-total 0)
            =>
            (up-jump-rule 12)
            )

            ;Calculate numbers of soldiers near TC
            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-local-total > 0)
            =>
            (up-modify-goal g-temp g:+ g-remote-last)   ;add the number of enemy military units near the TC
            (up-modify-goal g-temp2 g:= g-local-total)
            (up-modify-goal g-temp3 g:= g-local-last)  ;g-local-last is number of rams
            (up-modify-goal g-temp3 c:* 10)            ;nearby rams count as ten units
            (up-modify-goal g-temp2 g:+ g-temp3)      ;g-temp2 = our army strength near TC
            )

            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            ; (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-local-total > 0)
            (goal g-target-age-parity WE-ARE-AHEAD)
            =>
            (up-modify-goal g-temp c:/ 2)
            )

            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            ; (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-local-total > 0)
            (goal g-target-age-parity WE-ARE-BEHIND)
            =>
            (up-modify-goal g-temp c:* 2)
            )

            ;Check if we should retreat from TC
            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-temp2 g:< g-temp)      ;enemy strength near TC is stronger than ours
            =>
            (set-goal g-projectile-retreat YES)
            )

            (defrule
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-temp2 g:> g-temp)      ;enemy strength near TC is weaker than ours
            =>
            (up-remove-objects search-remote object-data-type != town-center)
            (up-get-search-state g-local-total)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -8)
            )

            ;Get extra projectile avoidance radius, based on width of building
            (defrule
            (goal g-projectile-retreat YES)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (or
                (up-object-data object-data-type == town-center)
                (up-object-data object-data-type == castle))
            =>
            (set-goal g-temp2 283)     ;extra distance from middle of building to corner of the building (sqrt(2) * 2 * 100 to convert to precise distance)
            )                           ;this must be added to the range of the building to get the danger radius of the enemy building

            (defrule
            (goal g-projectile-retreat YES)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-object-data object-data-type == krepost)
            =>
            (set-goal g-temp2 212)     ;extra distance from middle of building to corner of the building (sqrt(2) * 1.5 * 100 to convert to precise distance)
            )                           ;this must be added to the range of the building to get the danger radius of the enemy building

            (defrule
            (goal g-projectile-retreat YES)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            (up-object-data object-data-class == tower-class)
            =>
            (set-goal g-temp2 71)      ;extra distance from middle of building to corner of the building (sqrt(2) * 0.5 * 100 to convert to precise distance)
            )                           ;this must be added to the range of the building to get the danger radius of the enemy building

            ;g-temp3 equals full projectile avoidance radius
            (defrule
            (goal g-projectile-retreat YES)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-object-data object-data-type == town-center)
            (up-compare-goal g-remote-total > 0)
            =>
            (up-get-object-data object-data-range g-temp3)
            (up-modify-goal g-temp3 c:* 100)           ;change to precise distance
            (up-modify-goal g-temp3 g:+ g-temp2)      ;add distance from middle of building to corner of building, see rules above
            )
                
            (defrule
            (goal g-projectile-retreat YES)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-compare-goal g-remote-total > 0)
            (up-object-data object-data-type == town-center)
            =>
            (up-reset-search 1 1 0 0)
            (up-reset-filters)
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-find-local c: all-units-class c: 240)
            (up-remove-objects search-local object-data-speed == 0)		;remove buildings
            (up-remove-objects search-local object-data-pierce-armor >= 20)	;remove rams
            (up-remove-objects search-local object-data-attack-stance == stance-no-attack)  ;units on no attack stance are already retreating from building
            (up-remove-objects search-local object-data-class == livestock-class)
            (up-remove-objects search-local object-data-precise-distance g:> g-temp3)		;remove all objects outside range of defensive building
            )
            
            (defrule
            (goal g-projectile-retreat YES)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-compare-goal g-remote-total > 0)
            (up-object-data object-data-type == town-center)
            (up-get-object-data object-data-range g-temp3)
            (up-modify-goal g-temp3 c:+ 6)
            (up-set-target-object search-local c: 0)	;find a unit close to the enemy building
            =>
            (up-copy-point g-point3-x g-point-x)		;store enemy defensive building location in g-point3-x
            (up-get-point position-object g-point2-x)
            (up-lerp-tiles g-point3-x g-point2-x g: g-temp3)	;find point g-temp3 tiles away from enemy building (building's range + 6)
            (up-cross-tiles g-point3-x g-point2-x c: 3)	;so that units don't always retreat to the same spot
            (up-bound-point g-point3-x g-point3-x)
            (up-target-point g-point3-x action-move -1 stance-no-attack)
            )

            (defrule
            (up-compare-goal g-remote-total > 0)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
            (up-compare-goal g-loop-counter < 40)
            =>
            (set-goal g-projectile-retreat NO)
            (up-get-search-state g-local-total)
            (up-jump-rule -15)
            )

        ;Reset attack stance for units that successfully retreated

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (goal g-attacking YES)
        (up-compare-flag g-attack-method-flag != USE-DUC)
        =>
        (up-full-reset-search)
        (up-filter-exclude cmdid-villager actionid-explore orderid-explore livestock-class)
        (up-find-local c: all-units-class c: 240)
        (up-remove-objects search-local object-data-speed == 0)		;remove buildings
        (up-remove-objects search-local object-data-attack-stance != stance-no-attack)	;only change attack stances for units on No Attack Stance
        (set-strategic-number sn-focus-player-number target-player)
        (up-find-remote c: town-center c: 40)
        (up-find-remote c: castle c: 40)
        (up-find-remote c: krepost c: 40)
        (up-find-remote c: tower-class c: 40)
        (set-goal g-loop-counter 0)				;look at first defensive building and track progress through loop
        )

        ;Loop through all target player TCs, remove any units that are still too close to an enemy TC	
        (defrule
        (goal g-attacking YES)
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (up-set-target-object search-local c: 0)	;we still have units in search local set to No Attack Stance
        (up-set-target-object search-remote g: g-loop-counter)	;found enemy defensive building
        =>
        (up-get-point position-object g-point-x)	;get enemy defensive building location
        (up-set-target-point g-point-x)
        (up-get-object-data object-data-range g-temp3)
        (up-modify-goal g-temp3 c:+ 7)
        (up-remove-objects search-local object-data-distance g:> g-temp3)
        (up-remove-objects search-local object-data-id g:== g-scout1-id)
        (up-remove-objects search-local object-data-id g:== g-scout2-id)
        (up-remove-objects search-local object-data-id g:== g-scout3-id)
        (up-modify-goal g-loop-counter c:+ 1)
        (set-goal g-temp 439)
        (up-jump-rule -1)
        )

        ;Set remaining units to Aggressive stance
        (defrule
        (goal g-attacking YES)
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-temp 439)
        (up-set-target-object search-local c: 0)	;we still have units in search local set to No Attack Stance
        =>
        (up-target-point 0 action-none -1 stance-aggressive)
        )

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (goal g-attacking NO)
        =>
        (up-full-reset-search)
        (up-set-target-point g-position-self-x)
        (up-filter-exclude cmdid-villager actionid-explore orderid-explore livestock-class)
        (up-filter-distance c: -1 c: 40)
        (up-find-local c: all-units-class c: 240)
        (up-remove-objects search-local object-data-speed == 0)		;remove buildings
        (up-remove-objects search-local object-data-attack-stance != stance-no-attack)	;only change attack stances for units on No Attack Stance
        (up-remove-objects search-local object-data-id g:== g-scout1-id)
        (up-remove-objects search-local object-data-id g:== g-scout2-id)
        (up-remove-objects search-local object-data-id g:== g-scout3-id)
        (set-goal g-temp 440)
        )

        ;Set remaining units to Aggressive stance
        (defrule
        (goal g-attacking NO)
        (goal g-temp 440)
        (up-set-target-object search-local c: 0)	;we still have units in search local set to No Attack Stance
        =>
        (up-target-point 0 action-none -1 stance-aggressive)
        )

        ;Failsafe, in case we have idle units set to No Attack Stance but are <= 11 tiles from an enemy TC

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (or
            (goal g-attacking NO)
            (up-compare-flag g-attack-method-flag != USE-DUC))
        =>
        (up-full-reset-search)
        (up-filter-exclude cmdid-villager actionid-explore orderid-explore livestock-class)
        (up-find-local c: all-units-class c: 240)
        (up-remove-objects search-local object-data-idling != 1)
        (up-remove-objects search-local object-data-speed == 0)		;remove buildings
        (up-remove-objects search-local object-data-attack-stance != stance-no-attack)	;only change attack stances for units on No Attack Stance
        (up-remove-objects search-local object-data-id g:== g-scout1-id)
        (up-remove-objects search-local object-data-id g:== g-scout2-id)
        (up-remove-objects search-local object-data-id g:== g-scout3-id)
        (set-goal g-temp 441)
        )

        (defrule
        (or
            (goal g-attacking NO)
            (up-compare-flag g-attack-method-flag != USE-DUC))
        (goal g-temp 441)
        (up-set-target-object search-local c: 0)	;we still have units in search local set to No Attack Stance
        =>
        (up-target-point 0 action-none -1 stance-aggressive)
        )

    ;---------------------------
    ;   Soldiers Gather Point
    ;---------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (timer-triggered t-10-sec)
        (building-type-count town-center > 0)
        (up-compare-goal g-target-enemy-x > 0)
        (unit-type-count villager > 0)
        =>
        (up-copy-point g-gather-point-x g-position-self-x)
        (up-lerp-tiles g-gather-point-x g-target-enemy-x s: custom-sn-peaceful-town-size)
        (up-bound-point g-gather-point-x g-gather-point-x)
        )

    ;---------------------------
    ;   End of Attack Retreat
    ;---------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (goal g-attack-coordination RETREAT)
        =>
        (set-goal g-loop-counter 900)
        )

            (defrule
            (goal g-attack-coordination RETREAT)
            (up-compare-goal g-loop-counter >= 900)
            (up-compare-goal g-loop-counter <= 960)
            =>
            (up-full-reset-search)
            (up-filter-exclude -1 actionid-explore orderid-explore -1)
            (up-filter-include cmdid-military -1 -1 monastery-class)
            (up-find-local g: g-loop-counter c: 240)
            (up-remove-objects search-local object-data-class == warship-class)
            (up-get-search-state g-local-total)
            )

            (defrule
            (goal g-attack-coordination RETREAT)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-loop-counter != cavalry-class)
            (up-set-target-object search-local c: 0)
            =>
            (up-target-point g-position-self-x action-move -1 -1)
            )

            (defrule
            (goal g-attack-coordination RETREAT)
            (up-compare-goal g-local-total > 0)
            (goal g-loop-counter cavalry-class)
            (up-set-target-object search-local c: 0)
            =>
            (up-target-point g-gather-point-x action-move -1 stance-no-attack)
            )

            (defrule
            (goal g-attack-coordination RETREAT)
            (up-compare-goal g-loop-counter >= 900)
            (up-compare-goal g-loop-counter < 960)
            =>
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -4)
            )

        (defrule
        (goal g-attack-coordination RETREAT)
        =>
        (set-goal g-attack-coordination OFF)
        )

    ;-------------------------------------
    ;   Villagers Target Battering Rams
    ;-------------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (or
            (players-unit-type-count any-enemy battering-ram-line > 0)
            (players-unit-type-count any-enemy armored-elephant-line > 0))
        =>
        (up-modify-sn sn-focus-player-number c:= 1)
        )

            (defrule
            (or
                (players-unit-type-count any-enemy battering-ram-line > 0)
                (players-unit-type-count any-enemy armored-elephant-line > 0))
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            (nand
                (player-in-game focus-player)
                (stance-toward focus-player enemy))
            =>
            (up-modify-sn sn-focus-player-number c:+ 1)
            (up-jump-rule -1)
            )

            (defrule
            (or
                (players-unit-type-count any-enemy battering-ram-line > 0)
                (players-unit-type-count any-enemy armored-elephant-line > 0))
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            (player-in-game focus-player)
            (stance-toward focus-player enemy)
            =>
            (up-set-target-point g-position-self-x)
            (up-full-reset-search)
            (up-filter-distance c: -1 c: 5)
            (up-find-remote c: battering-ram-line c: 1)
            (up-find-remote c: armored-elephant-line c: 1)
            (up-get-search-state g-local-total)
            )

            (defrule
            (or
                (players-unit-type-count any-enemy battering-ram-line > 0)
                (players-unit-type-count any-enemy armored-elephant-line > 0))
            (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
            (player-in-game focus-player)
            (stance-toward focus-player enemy)
            (up-compare-goal g-remote-total == 0)
            =>
            (up-modify-sn sn-focus-player-number c:+ 1)
            (up-jump-rule -3)
            )

            (defrule
            (or
                (players-unit-type-count any-enemy battering-ram-line > 0)
                (players-unit-type-count any-enemy armored-elephant-line > 0))
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            (player-in-game focus-player)
            (stance-toward focus-player enemy)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote c: 0)
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-reset-search 1 1 0 0)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 5)
            (up-find-local c: villager-class c: 4)
            (up-remove-objects search-local object-data-action == actionid-attack)
            (up-get-search-state g-local-total)
            )

            (defrule
            (or
                (players-unit-type-count any-enemy battering-ram-line > 0)
                (players-unit-type-count any-enemy armored-elephant-line > 0))
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            (player-in-game focus-player)
            (stance-toward focus-player enemy)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote c: 0)
            (up-compare-goal g-local-total > 0)
            =>
            (up-target-objects 0 action-default -1 -1)
            ; (chat-to-player my-player-number CHAT-TARGET-RAM-WITH-VILLAGERS)
            )
