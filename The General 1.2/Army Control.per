;------------------
;   Skip All DUC
;------------------

    (defrule
    (or
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-attacking NO))
    (up-compare-goal g-duc-micro-end-rule-id > 0)
    (up-group-size c: 1 == 0)
    (up-group-size c: 2 == 0)
    (up-group-size c: 3 == 0)
    (up-group-size c: 4 == 0)
    (up-group-size c: 5 == 0)
    (up-group-size c: 6 == 0)
    =>
    (up-jump-rule 3)
    )

        (defrule
        (or
            (up-compare-flag g-attack-method-flag != USE-DUC)
            (goal g-attacking NO))
        (up-compare-goal g-duc-micro-end-rule-id > 0)
        =>
        (up-reset-cost-data g-group1-flag)
        (up-reset-cost-data g-group5-flag)
        (up-reset-cost-data g-group3-type-flag)
        (set-goal g-group1-action PENDING)
        (set-goal g-group2-action PENDING)
        (up-copy-point g-group3-action g-group1-action)
        (up-copy-point g-group5-action g-group1-action)
        (up-copy-point g-group1-target-object-id g-group1-action)
        (up-copy-point g-group3-target-object-id g-group1-action)
        (up-copy-point g-group5-target-object-id g-group1-action)
        )
        (defrule
        (or
            (up-compare-flag g-attack-method-flag != USE-DUC)
            (goal g-attacking NO))
        (up-compare-goal g-duc-micro-end-rule-id > 0)
        =>
        (up-copy-point g-group1-location-x g-group1-action)
        (up-copy-point g-group3-location-x g-group1-action)
        (up-copy-point g-group5-location-x g-group1-action)
        (up-copy-point g-group1-destination-x g-group1-action)
        (up-copy-point g-group3-destination-x g-group1-action)
        (up-copy-point g-group5-destination-x g-group1-action)
        (up-copy-point g-group1-destination-time g-group1-action)
        (up-copy-point g-group3-destination-time g-group1-action)
        (up-copy-point g-group5-destination-time g-group1-action)
        (up-copy-point g-group1-avoidance-counter g-group1-action)
        (up-copy-point g-group3-avoidance-counter g-group1-action)
        (up-copy-point g-group5-avoidance-counter g-group1-action)
        )
        (defrule
        (or
            (up-compare-flag g-attack-method-flag != USE-DUC)
            (goal g-attacking NO))
        (up-compare-goal g-duc-micro-end-rule-id > 0)
        =>
        (up-modify-group-flag 0 c: 1)
        (up-reset-group c: 1)
        (up-modify-group-flag 0 c: 2)
        (up-reset-group c: 2)
        (up-modify-group-flag 0 c: 3)
        (up-reset-group c: 3)
        (up-modify-group-flag 0 c: 4)
        (up-reset-group c: 4)
        (up-modify-group-flag 0 c: 5)
        (up-reset-group c: 5)
        (up-modify-group-flag 0 c: 6)
        (up-reset-group c: 6)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Reset all DUC groups" c: 0)
        ; (chat-to-all "Reset all DUC groups")
        )

    (defrule
    (or
        (up-compare-flag g-attack-method-flag != USE-DUC)
        (goal g-attacking NO))
    (up-compare-goal g-duc-micro-end-rule-id > 0)
    =>
    (up-jump-direct g: g-duc-micro-end-rule-id)
    )

;---------------------------
;   Global Group Settings
;---------------------------

    (defrule
    (or
        (up-compare-goal g-min-group-size < 4)
        (up-compare-goal g-max-group-size < 15))
    =>
    (set-goal g-min-group-size 4)
    (set-goal g-max-group-size 15)
    )

    (defrule
    (up-group-size c: 1 == 0)
    (up-group-size c: 2 == 0)
    (up-group-size c: 3 == 0)
    (up-group-size c: 4 == 0)
    (up-group-size c: 5 == 0)
    (up-group-size c: 6 == 0)
    (up-get-target-fact military-population 0 g-temp)
    (up-modify-goal g-temp c:/ 3)
    (up-modify-goal g-temp c:min 10)
    (up-compare-goal g-temp > 4)
    (up-compare-goal g-min-group-size g:< g-temp)
    =>
    (up-modify-goal g-temp c:min 40)
    (up-modify-goal g-temp g:min g-max-group-size)
    (up-modify-goal g-min-group-size g:= g-temp)
    )    

    ;Increase g-max-group-size if we have a large military, set it to at least 1/3 of total military pop
    (defrule
    (up-group-size c: 1 > 0)
    (up-group-size c: 2 > 0)
    (up-group-size c: 3 > 0)
    (up-group-size c: 4 > 0)
    (up-group-size c: 5 > 0)
    (up-group-size c: 6 > 0)
    (up-get-fact military-population 0 g-temp)
    (up-modify-goal g-temp c:/ 2)
    (up-compare-goal g-temp > 15)
    =>
    (up-modify-goal g-temp c:min 40)
    (up-modify-goal g-temp c:max 15)
    (up-modify-goal g-max-group-size g:min g-temp)
    (up-modify-goal g-min-group-size g:min g-max-group-size)
    ; (up-chat-data-to-all "Increase max %d" g: g-max-group-size)
    )

;----------------
;   Set Groups
;----------------

    ;--------------
    ;   Infantry
    ;--------------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (up-compare-goal g-duc-micro-start-rule-id > 0)
        (up-compare-goal g-duc-micro-end-rule-id > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-temp PENDING)
        )

            ;Search for soldiers not included in a group
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            =>
            (up-full-reset-search)
            (up-filter-exclude -1 actionid-explore orderid-explore -1)
            (up-find-local c: infantry-class c: 60)
            (up-remove-objects search-local object-data-range > 2)
            (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
            (up-remove-objects search-local object-data-index g:>= g-max-group-size)
            (up-remove-objects search-local object-data-hitpoints <= 0)
            (up-remove-objects search-local object-data-player != my-player-number)
            (up-remove-objects search-local object-data-garrisoned == 1)
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )

            ;If at least g-min-group-size ungrouped soldiers are found, create a new group for them.
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            (up-compare-goal g-local-total g:>= g-min-group-size)   ;CHANGE CONDITIONS TO FORM GROUP
            =>
            (set-goal g-temp 9)
            (up-modify-group-flag 0 g: g-current-group)
            (up-reset-group g: g-current-group)
            (up-create-group 0 0 g: g-current-group)
            (up-modify-group-flag 1 g: g-current-group)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
            (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
            (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
            (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
            (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
            (up-get-group-size g: g-current-group g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
            (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
            (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
            (up-log-data 0 CHAT-ACTION g: g-current-group-action)
            (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
            (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
            (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
            (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
            (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
            (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
            (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
            (up-jump-direct g: g-duc-micro-end-rule-id)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (set-goal g-temp PENDING)
            (up-jump-rule -6)
            )

    ;---------------------
    ;   Ranged Infantry
    ;---------------------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (up-compare-goal g-duc-micro-start-rule-id > 0)
        (up-compare-goal g-duc-micro-end-rule-id > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-temp PENDING)
        )

            ;Search for soldiers not included in a group
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            =>
            (up-full-reset-search)
            (up-filter-exclude -1 actionid-explore orderid-explore -1)
            (up-find-local c: throwing-axeman-line c: 60)
            (up-find-local c: gbeto c: 60)
            (up-find-local c: elite-gbeto c: 60)
            (up-find-local c: chakram-thrower-line c: 60)
            (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
            (up-remove-objects search-local object-data-index g:>= g-max-group-size)
            (up-remove-objects search-local object-data-hitpoints <= 0)
            (up-remove-objects search-local object-data-player != my-player-number)
            (up-remove-objects search-local object-data-garrisoned == 1)
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )

            ;If at least g-min-group-size ungrouped soldiers are found, create a new group for them.
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            (up-compare-goal g-local-total g:>= g-min-group-size)   ;CHANGE CONDITIONS TO FORM GROUP
            =>
            (set-goal g-temp 9)
            (up-modify-group-flag 0 g: g-current-group)
            (up-reset-group g: g-current-group)
            (up-create-group 0 0 g: g-current-group)
            (up-modify-group-flag 1 g: g-current-group)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
            (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
            (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
            (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
            (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
            (up-get-group-size g: g-current-group g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
            (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
            (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
            (up-log-data 0 CHAT-ACTION g: g-current-group-action)
            (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
            (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
            (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
            (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
            (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
            (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
            (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
            (up-jump-direct g: g-duc-micro-end-rule-id)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (set-goal g-temp PENDING)
            (up-jump-rule -6)
            )

    ;------------------
    ;   Foot Archers
    ;------------------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (up-compare-goal g-duc-micro-start-rule-id > 0)
        (up-compare-goal g-duc-micro-end-rule-id > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-temp PENDING)
        )

            ;Search for soldiers not included in a group
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            =>
            (up-full-reset-search)
            (up-filter-exclude -1 actionid-explore orderid-explore -1)
            (up-find-local c: archery-class c: 60)
            (up-find-local c: archery-cannon-class c: 60)
            (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
            (up-remove-objects search-local object-data-index g:>= g-max-group-size)
            (up-remove-objects search-local object-data-hitpoints <= 0)
            (up-remove-objects search-local object-data-player != my-player-number)
            (up-remove-objects search-local object-data-garrisoned == 1)
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )

            ;If at least g-min-group-size ungrouped soldiers are found, create a new group for them.
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            (up-compare-goal g-local-total g:>= g-min-group-size)   ;CHANGE CONDITIONS TO FORM GROUP
            =>
            (set-goal g-temp 9)
            (up-modify-group-flag 0 g: g-current-group)
            (up-reset-group g: g-current-group)
            (up-create-group 0 0 g: g-current-group)
            (up-modify-group-flag 1 g: g-current-group)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
            (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
            (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
            (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
            (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
            (up-get-group-size g: g-current-group g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
            (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
            (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
            (up-log-data 0 CHAT-ACTION g: g-current-group-action)
            (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
            (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
            (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
            (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
            (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
            (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
            (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
            (up-jump-direct g: g-duc-micro-end-rule-id)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (set-goal g-temp PENDING)
            (up-jump-rule -6)
            )

    ;---------------------
    ;   Cavalry Archers
    ;---------------------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (up-compare-goal g-duc-micro-start-rule-id > 0)
        (up-compare-goal g-duc-micro-end-rule-id > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-temp PENDING)
        )

            ;Search for soldiers not included in a group
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            =>
            (up-full-reset-search)
            (up-filter-exclude -1 actionid-explore orderid-explore -1)
            (up-find-local c: cavalry-archer-class c: 60)
            (up-find-local c: cavalry-cannon-class c: 60)
            (up-find-local c: mameluke-line c: 60)
            (up-find-local c: ballista-elephant c: 60)
            (up-find-local c: elite-ballista-elephant c: 60)
            (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
            (up-remove-objects search-local object-data-index g:>= g-max-group-size)
            (up-remove-objects search-local object-data-hitpoints <= 0)
            (up-remove-objects search-local object-data-player != my-player-number)
            (up-remove-objects search-local object-data-garrisoned == 1)
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )

            ;If at least g-min-group-size ungrouped soldiers are found, create a new group for them.
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            (up-compare-goal g-local-total g:>= g-min-group-size)   ;CHANGE CONDITIONS TO FORM GROUP
            =>
            (set-goal g-temp 9)
            (up-modify-group-flag 0 g: g-current-group)
            (up-reset-group g: g-current-group)
            (up-create-group 0 0 g: g-current-group)
            (up-modify-group-flag 1 g: g-current-group)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
            (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
            (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
            (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
            (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
            (up-get-group-size g: g-current-group g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
            (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
            (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
            (up-log-data 0 CHAT-ACTION g: g-current-group-action)
            (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
            (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
            (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
            (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
            (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
            (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
            (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
            (up-jump-direct g: g-duc-micro-end-rule-id)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (set-goal g-temp PENDING)
            (up-jump-rule -6)
            )

    ;-------------
    ;   Cavalry
    ;-------------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (up-compare-goal g-duc-micro-start-rule-id > 0)
        (up-compare-goal g-duc-micro-end-rule-id > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-temp PENDING)
        )

            ;Search for soldiers not included in a group
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            =>
            (up-full-reset-search)
            (up-filter-exclude -1 actionid-explore orderid-explore -1)
            (up-find-local c: cavalry-class c: 60)
            (up-find-local c: scout-cavalry-class c: 60)
            (up-remove-objects search-local object-data-range > 2)
            (up-remove-objects search-local object-data-base-type == armored-elephant)
            (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
            (up-remove-objects search-local object-data-index g:>= g-max-group-size)
            (up-remove-objects search-local object-data-hitpoints <= 0)
            (up-remove-objects search-local object-data-player != my-player-number)
            (up-remove-objects search-local object-data-garrisoned == 1)
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )

            ;If at least g-min-group-size ungrouped soldiers are found, create a new group for them.
            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-group-size g: g-current-group == 0)
            (up-compare-goal g-local-total g:>= g-min-group-size)   ;CHANGE CONDITIONS TO FORM GROUP
            =>
            (set-goal g-temp 9)
            (up-modify-group-flag 0 g: g-current-group)
            (up-reset-group g: g-current-group)
            (up-create-group 0 0 g: g-current-group)
            (up-modify-group-flag 1 g: g-current-group)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
            (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
            (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
            (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
            (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
            (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
            (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (goal g-temp 9)
            (up-group-size g: g-current-group > 0)
            =>
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
            (up-get-group-size g: g-current-group g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
            (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
            (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
            (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
            (up-log-data 0 CHAT-ACTION g: g-current-group-action)
            (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
            (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
            (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
            (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
            (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
            (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
            (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
            (up-jump-direct g: g-duc-micro-end-rule-id)
            )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (set-goal g-temp PENDING)
            (up-jump-rule -6)
            )

    ;-----------
    ;   Monks
    ;-----------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        ; (or
        ;     (up-compare-flag g-group1-type-flag == MONK-GROUP)
        ;     (or
        ;         (up-compare-flag g-group2-type-flag == MONK-GROUP)
        ;         (or
        ;             (up-compare-flag g-group3-type-flag == MONK-GROUP)
        ;             (or
        ;                 (up-compare-flag g-group4-type-flag == MONK-GROUP)
        ;                 (or
        ;                     (up-compare-flag g-group5-type-flag == MONK-GROUP)
        ;                     (up-compare-flag g-group6-type-flag == MONK-GROUP))))))
        (true)  ;temporarily don't use monk groups
        =>
        (up-jump-rule 5)
        )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            =>
            (set-goal g-current-group 1)
            (set-goal g-temp PENDING)
            )

                ;Search for monks not included in a group
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                =>
                (up-full-reset-search)
                (up-filter-exclude -1 actionid-relic orderid-relic -1)
                (up-find-local c: monastery-class c: 60)
                (up-find-local c: monk-with-relic-class c: 60)
                (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
                (up-remove-objects search-local object-data-index g:>= g-max-group-size)
                (up-remove-objects search-local object-data-hitpoints <= 0)
                (up-remove-objects search-local object-data-player != my-player-number)
                (up-remove-objects search-local object-data-garrisoned == 1)
                (up-clean-search search-local -1 search-order-asc)
                (up-get-search-state g-local-total)
                )

                ;If at least 2 ungrouped monks are found, create a new group for them.
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                (up-compare-goal g-local-total >= 2)   ;CHANGE CONDITIONS TO FORM GROUP
                =>
                (set-goal g-temp 9)
                (up-modify-group-flag 0 g: g-current-group)
                (up-reset-group g: g-current-group)
                (up-create-group 0 0 g: g-current-group)
                (up-modify-group-flag 1 g: g-current-group)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
                (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
                (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
                (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
                (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
                (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
                (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
                (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
                (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
                (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-fact game-time 0 g-temp5)
                (up-get-fact player-number 0 g-temp6)
                (up-log-data 0 CHAT-LOG-ENTRY c: 0)
                (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
                (up-get-group-size g: g-current-group g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
                (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
                (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
                (up-log-data 0 CHAT-ACTION g: g-current-group-action)
                (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
                (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
                (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
                (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
                (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
                (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
                (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
                (up-jump-direct g: g-duc-micro-end-rule-id)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-compare-goal g-current-group < 6)
                =>
                (up-modify-goal g-current-group c:+ 1)
                (set-goal g-temp PENDING)
                (up-jump-rule -6)
                )

    ;----------
    ;   Rams
    ;----------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (or
            (up-compare-flag g-group1-type-flag == RAM-GROUP)
            (or
                (up-compare-flag g-group2-type-flag == RAM-GROUP)
                (or
                    (up-compare-flag g-group3-type-flag == RAM-GROUP)
                    (or
                        (up-compare-flag g-group4-type-flag == RAM-GROUP)
                        (or
                            (up-compare-flag g-group5-type-flag == RAM-GROUP)
                            (up-compare-flag g-group6-type-flag == RAM-GROUP))))))
        =>
        (up-jump-rule 5)
        )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            =>
            (set-goal g-current-group 1)
            (set-goal g-temp PENDING)
            )

                ;Search for rams not included in a group
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                =>
                (up-full-reset-search)
                (up-filter-exclude -1 actionid-explore orderid-explore -1)
                (up-find-local c: battering-ram-line c: 60)
                (up-find-local c: armored-elephant-line c: 60)
                (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
                (up-remove-objects search-local object-data-hitpoints <= 0)
                (up-remove-objects search-local object-data-player != my-player-number)
                (up-remove-objects search-local object-data-garrisoned == 1)
                (up-clean-search search-local -1 search-order-asc)
                (up-get-search-state g-local-total)
                )

                ;If at least 1 ungrouped rams are found, create a new group for them.
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                (up-compare-goal g-local-total >= 1)   ;CHANGE CONDITIONS TO FORM GROUP
                =>
                (set-goal g-temp 9)
                (up-modify-group-flag 0 g: g-current-group)
                (up-reset-group g: g-current-group)
                (up-create-group 0 0 g: g-current-group)
                (up-modify-group-flag 1 g: g-current-group)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
                (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
                (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
                (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
                (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
                (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
                (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
                (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
                (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
                (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-fact game-time 0 g-temp5)
                (up-get-fact player-number 0 g-temp6)
                (up-log-data 0 CHAT-LOG-ENTRY c: 0)
                (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
                (up-get-group-size g: g-current-group g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
                (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
                (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
                (up-log-data 0 CHAT-ACTION g: g-current-group-action)
                (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
                (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
                (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
                (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
                (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
                (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
                (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
                (up-jump-direct g: g-duc-micro-end-rule-id)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-compare-goal g-current-group < 6)
                =>
                (up-modify-goal g-current-group c:+ 1)
                (set-goal g-temp PENDING)
                (up-jump-rule -6)
                )

    ;---------------
    ;   Scorpions
    ;---------------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (or
            (up-compare-flag g-group1-type-flag == SCORPION-GROUP)
            (or
                (up-compare-flag g-group2-type-flag == SCORPION-GROUP)
                (or
                    (up-compare-flag g-group3-type-flag == SCORPION-GROUP)
                    (or
                        (up-compare-flag g-group4-type-flag == SCORPION-GROUP)
                        (or
                            (up-compare-flag g-group5-type-flag == SCORPION-GROUP)
                            (up-compare-flag g-group6-type-flag == SCORPION-GROUP))))))
        =>
        (up-jump-rule 5)
        )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            =>
            (set-goal g-current-group 1)
            (set-goal g-temp PENDING)
            )

                ;Search for scorpions not included in a group
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                =>
                (up-full-reset-search)
                (up-filter-exclude -1 actionid-explore orderid-explore -1)
                (up-find-local c: scorpion-class c: 60)
                (up-find-local c: organ-gun c: 60)
                (up-find-local c: elite-organ-gun c: 60)
                (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
                (up-remove-objects search-local object-data-hitpoints <= 0)
                (up-remove-objects search-local object-data-player != my-player-number)
                (up-remove-objects search-local object-data-garrisoned == 1)
                (up-clean-search search-local -1 search-order-asc)
                (up-get-search-state g-local-total)
                )

                ;If at least g-min-group-size ungrouped scorpions are found, create a new group for them.
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                (up-compare-goal g-local-total >= 1)   ;CHANGE CONDITIONS TO FORM GROUP
                =>
                (set-goal g-temp 9)
                (up-modify-group-flag 0 g: g-current-group)
                (up-reset-group g: g-current-group)
                (up-create-group 0 0 g: g-current-group)
                (up-modify-group-flag 1 g: g-current-group)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
                (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
                (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
                (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
                (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
                (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
                (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
                (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
                (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
                (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-fact game-time 0 g-temp5)
                (up-get-fact player-number 0 g-temp6)
                (up-log-data 0 CHAT-LOG-ENTRY c: 0)
                (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
                (up-get-group-size g: g-current-group g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
                (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
                (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
                (up-log-data 0 CHAT-ACTION g: g-current-group-action)
                (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
                (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
                (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
                (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
                (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
                (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
                (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
                (up-jump-direct g: g-duc-micro-end-rule-id)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-compare-goal g-current-group < 6)
                =>
                (up-modify-goal g-current-group c:+ 1)
                (set-goal g-temp PENDING)
                (up-jump-rule -6)
                )
            
    ;----------------
    ;   Mangonels
    ;----------------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (or
            (up-compare-flag g-group1-type-flag == MANGONEL-GROUP)
            (or
                (up-compare-flag g-group2-type-flag == MANGONEL-GROUP)
                (or
                    (up-compare-flag g-group3-type-flag == MANGONEL-GROUP)
                    (or
                        (up-compare-flag g-group4-type-flag == MANGONEL-GROUP)
                        (or
                            (up-compare-flag g-group5-type-flag == MANGONEL-GROUP)
                            (up-compare-flag g-group6-type-flag == MANGONEL-GROUP))))))
        =>
        (up-jump-rule 5)
        )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            =>
            (set-goal g-current-group 1)
            (set-goal g-temp PENDING)
            )

                ;Search for mangonels not included in a group
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                =>
                (up-full-reset-search)
                (up-filter-exclude -1 actionid-explore orderid-explore -1)
                (up-find-local c: mangonel-line c: 60)
                (up-find-local c: wk-onager c: 60)
                (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
                (up-remove-objects search-local object-data-hitpoints <= 0)
                (up-remove-objects search-local object-data-player != my-player-number)
                (up-remove-objects search-local object-data-garrisoned == 1)
                (up-clean-search search-local -1 search-order-asc)
                (up-get-search-state g-local-total)
                )

                ;If at least 1 mangonels are found, create a new group for them.
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                (up-compare-goal g-local-total >= 1)   ;CHANGE CONDITIONS TO FORM GROUP
                =>
                (set-goal g-temp 9)
                (up-modify-group-flag 0 g: g-current-group)
                (up-reset-group g: g-current-group)
                (up-create-group 0 0 g: g-current-group)
                (up-modify-group-flag 1 g: g-current-group)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
                (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
                (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
                (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
                (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
                (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
                (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
                (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
                (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
                (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-fact game-time 0 g-temp5)
                (up-get-fact player-number 0 g-temp6)
                (up-log-data 0 CHAT-LOG-ENTRY c: 0)
                (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
                (up-get-group-size g: g-current-group g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
                (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
                (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
                (up-log-data 0 CHAT-ACTION g: g-current-group-action)
                (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
                (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
                (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
                (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
                (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
                (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
                (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
                (up-jump-direct g: g-duc-micro-end-rule-id)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-compare-goal g-current-group < 6)
                =>
                (up-modify-goal g-current-group c:+ 1)
                (set-goal g-temp PENDING)
                (up-jump-rule -6)
                )

    ;----------------
    ;   Trebuchets
    ;----------------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (or
            (up-compare-flag g-group1-type-flag == TREBUCHET-GROUP)
            (or
                (up-compare-flag g-group2-type-flag == TREBUCHET-GROUP)
                (or
                    (up-compare-flag g-group3-type-flag == TREBUCHET-GROUP)
                    (or
                        (up-compare-flag g-group4-type-flag == TREBUCHET-GROUP)
                        (or
                            (up-compare-flag g-group5-type-flag == TREBUCHET-GROUP)
                            (up-compare-flag g-group6-type-flag == TREBUCHET-GROUP))))))
        =>
        (up-jump-rule 5)
        )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            =>
            (set-goal g-current-group 1)
            (set-goal g-temp PENDING)
            )

                ;Search for trebs not included in a group
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                =>
                (up-full-reset-search)
                (up-filter-exclude -1 actionid-explore orderid-explore -1)
                (up-find-local c: packed-trebuchet-class c: 60)
                (up-find-local c: unpacked-trebuchet-class c: 60)
                (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
                (up-remove-objects search-local object-data-hitpoints <= 0)
                (up-remove-objects search-local object-data-player != my-player-number)
                (up-remove-objects search-local object-data-garrisoned == 1)
                (up-clean-search search-local -1 search-order-asc)
                (up-get-search-state g-local-total)
                )

                ;If at least 1 trebs are found, create a new group for them.
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                (up-compare-goal g-local-total >= 1)   ;CHANGE CONDITIONS TO FORM GROUP
                =>
                (set-goal g-temp 9)
                (up-modify-group-flag 0 g: g-current-group)
                (up-reset-group g: g-current-group)
                (up-create-group 0 0 g: g-current-group)
                (up-modify-group-flag 1 g: g-current-group)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
                (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
                (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
                (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
                (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
                (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
                (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
                (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
                (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
                (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-fact game-time 0 g-temp5)
                (up-get-fact player-number 0 g-temp6)
                (up-log-data 0 CHAT-LOG-ENTRY c: 0)
                (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
                (up-get-group-size g: g-current-group g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
                (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
                (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
                (up-log-data 0 CHAT-ACTION g: g-current-group-action)
                (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
                (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
                (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
                (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
                (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
                (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
                (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
                (up-jump-direct g: g-duc-micro-end-rule-id)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-compare-goal g-current-group < 6)
                =>
                (up-modify-goal g-current-group c:+ 1)
                (set-goal g-temp PENDING)
                (up-jump-rule -6)
                )

    ;-------------
    ;   Cannons
    ;-------------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        (defrule
        (or
            (up-compare-flag g-group1-type-flag == CANNON-GROUP)
            (or
                (up-compare-flag g-group2-type-flag == CANNON-GROUP)
                (or
                    (up-compare-flag g-group3-type-flag == CANNON-GROUP)
                    (or
                        (up-compare-flag g-group4-type-flag == CANNON-GROUP)
                        (or
                            (up-compare-flag g-group5-type-flag == CANNON-GROUP)
                            (up-compare-flag g-group6-type-flag == CANNON-GROUP))))))
        =>
        (up-jump-rule 5)
        )

            (defrule
            (up-compare-goal g-duc-micro-start-rule-id > 0)
            (up-compare-goal g-duc-micro-end-rule-id > 0)
            =>
            (set-goal g-current-group 1)
            (set-goal g-temp PENDING)
            )

                ;Search for cannons not included in a group
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                =>
                (up-full-reset-search)
                (up-filter-exclude -1 actionid-explore orderid-explore -1)
                (up-find-local c: bombard-cannon c: 60)
                (up-find-local c: houfnice c: 60)
                (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
                (up-remove-objects search-local object-data-hitpoints <= 0)
                (up-remove-objects search-local object-data-player != my-player-number)
                (up-remove-objects search-local object-data-garrisoned == 1)
                (up-clean-search search-local -1 search-order-asc)
                (up-get-search-state g-local-total)
                )

                ;If at least 1 cannons are found, create a new group for them.
                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-group-size g: g-current-group == 0)
                (up-compare-goal g-local-total >= 1)   ;CHANGE CONDITIONS TO FORM GROUP
                =>
                (set-goal g-temp 9)
                (up-modify-group-flag 0 g: g-current-group)
                (up-reset-group g: g-current-group)
                (up-create-group 0 0 g: g-current-group)
                (up-modify-group-flag 1 g: g-current-group)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
                (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
                (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
                (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
                (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
                (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
                (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
                (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
                (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
                (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
                (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
                (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (goal g-temp 9)
                (up-group-size g: g-current-group > 0)
                =>
                (up-get-fact game-time 0 g-temp5)
                (up-get-fact player-number 0 g-temp6)
                (up-log-data 0 CHAT-LOG-ENTRY c: 0)
                (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                (up-log-data 0 CHAT-CREATE-GROUP g: g-current-group)
                (up-get-group-size g: g-current-group g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
                (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
                (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
                (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
                (up-log-data 0 CHAT-ACTION g: g-current-group-action)
                (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
                (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
                (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
                (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
                (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
                (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
                (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
                (up-jump-direct g: g-duc-micro-end-rule-id)
                )

                (defrule
                (up-compare-goal g-duc-micro-start-rule-id > 0)
                (up-compare-goal g-duc-micro-end-rule-id > 0)
                (up-compare-goal g-current-group < 6)
                =>
                (up-modify-goal g-current-group c:+ 1)
                (set-goal g-temp PENDING)
                (up-jump-rule -6)
                )

;-----------------------------
;   Loop through each group
;-----------------------------

    (defrule
    (true)
    =>
    (set-goal g-current-group 1)
    )

    (defrule
    (true)
    =>
    (up-get-rule-id g-duc-micro-start-rule-id)
    (disable-self)
    )
    
;------------------------
;   Get Group Location
;------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")
    (load "The General 1.2/Functions/DUC Group Location")

;-----------------------
;   Remove from Group
;-----------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    (defrule
    (up-compare-goal g-current-group > 0)
    (up-compare-goal g-current-group <= 6)
    =>
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
    (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
    (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
    (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
    (up-get-group-size g: g-current-group g-temp)
    (up-set-group search-local g: g-current-group)
    (up-get-search-state g-local-total)
    (up-log-data 0 "Group %d settings at start of pass:" g: g-current-group)
    )

    (defrule
    (up-group-size g: g-current-group <= 0)
    (up-compare-goal g-local-total <= 0)
    (up-compare-goal g-current-group-action == PENDING)
    (up-compare-goal g-current-group-target-object-goal-id == PENDING)
    (up-compare-goal g-current-group-location-x < 0)
    (up-compare-goal g-current-group-location-y < 0)
    (up-compare-goal g-current-group-destination-x < 0)
    (up-compare-goal g-current-group-destination-y < 0)
    =>
    (up-jump-rule 1)
    )
        (defrule
        (up-compare-goal g-current-group > 0)
        (up-compare-goal g-current-group <= 6)
        =>
        (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
        (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
        (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
        (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
        (up-log-data 0 CHAT-ACTION g: g-current-group-action)
        (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
        (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
        (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
        (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
        (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
        (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
        (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
        )

    ;Remove dead units, explorers, monks picking up relics, or converted objects
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-set-group search-local g: g-current-group)
    (up-get-search-state g-local-total)
    (up-modify-goal g-temp g:= g-local-total)
    (up-remove-objects search-local object-data-action == actionid-explore)
    (up-remove-objects search-local object-data-order == orderid-explore)
    (up-remove-objects search-local object-data-action == actionid-relic)
    (up-remove-objects search-local object-data-order == orderid-relic)
    (up-remove-objects search-local object-data-class == monk-with-relic-class)
    (up-remove-objects search-local object-data-player != my-player-number)
    (up-remove-objects search-local object-data-hitpoints <= 0)
    (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-get-search-state g-local-total)
    )

    ;Reset Group
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-temp g:!= g-local-total)
    =>
    (up-clean-search search-local -1 search-order-asc)
    (up-modify-group-flag 0 g: g-current-group)
    (up-reset-group g: g-current-group)
    (up-create-group 0 0 g: g-current-group)
    (up-modify-group-flag 1 g: g-current-group)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Remove unit from group %d" g: g-current-group)
    ; (up-chat-data-to-self "Remove unit from group %d" g: g-current-group)
    )

;------------------
;   Add to Group
;------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-type-flag-goal-id
    ;g-current-group-type-flag

    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-group-location-x-goal-id
    ;g-current-group-location-y-goal-id

    ;Setup goals to loop through each group number, this code will search for any ungrouped units that match the class of units in a nearby group
    ;If any are found, they will be added to the group.

    ;More setup. Also, store the current group in search-local and prepare search-remote to search for nearby ungrouped soldiers.
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    =>
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-get-search-state g-local-total)
    (up-modify-goal g-temp6 g:= g-local-total)
    (up-clean-search search-local -1 search-order-asc)
    (up-remove-objects search-local object-data-hitpoints <= 0)
    (up-remove-objects search-local object-data-point-x < 0)
    (up-remove-objects search-local object-data-status != status-ready)
    (up-get-search-state g-local-total)
    (set-strategic-number sn-focus-player-number my-player-number)
    (up-set-target-point g-current-group-location-x)
    (up-filter-distance c: -1 c: 4)
    (up-filter-exclude -1 actionid-explore orderid-relic -1)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-goal g-current-group-location-x > PENDING)
    (up-compare-goal g-local-total g:!= g-temp6)
    =>
    (up-get-fact game-time 0 g-loop-counter)
    (up-get-fact player-number 0 g-loop-counter2)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-loop-counter)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-loop-counter2)
    (up-log-data 0 "Group %d size not matching g-local-total" g: g-current-group)
    ; (up-chat-data-to-self "Group %d size not matching g-local-total" g: g-current-group)
    ; (up-chat-data-to-all "Not matching Group: %d" g: g-temp5)
    ; (up-chat-data-to-all "Not matching Local: %d" g: g-temp6)
    ; (up-chat-data-to-all "Not matching Clean: %d" g: g-local-total)
    )

    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (up-group-size g: g-current-group < 40)
    ; (up-group-size g: g-current-group g:< g-max-group-size)
    ; (up-compare-goal g-current-group-action != GROUP-GATHER)
    ; (up-compare-goal g-current-group-location-x > PENDING)
    ; (up-compare-goal g-temp5 g:!= g-temp6)
    ; =>
    ; (set-goal g-loop-counter 0)
    ; ; (up-clean-search search-local -1 search-order-asc)
    ; )

        ; (defrule
        ; (up-compare-goal g-temp5 g:!= g-temp6)
        ; (up-group-size g: g-current-group > 0)
        ; (up-group-size g: g-current-group < 40)
        ; (up-group-size g: g-current-group g:< g-max-group-size)
        ; (up-compare-goal g-current-group-action != GROUP-GATHER)
        ; (up-compare-goal g-current-group-location-x > PENDING)
        ; (up-set-target-object search-local g: g-loop-counter)
        ; =>
        ; (up-get-object-data object-data-id g-temp)
        ; (up-chat-data-to-all "ID %d" g: g-temp)
        ; )

        ; (defrule
        ; (up-compare-goal g-temp5 g:!= g-temp6)
        ; (up-group-size g: g-current-group > 0)
        ; (up-group-size g: g-current-group < 40)
        ; (up-group-size g: g-current-group g:< g-max-group-size)
        ; (up-compare-goal g-current-group-action != GROUP-GATHER)
        ; (up-compare-goal g-current-group-location-x > PENDING)
        ; (up-compare-goal g-loop-counter < 40)
        ; =>
        ; (up-modify-goal g-loop-counter c:+ 1)
        ; (up-jump-rule -2)
        ; )

    ;Search for trebs if current group has them
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: packed-trebuchet-class c: 40)
    (up-find-remote c: unpacked-trebuchet-class c: 40) 
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-remove-objects search-remote object-data-point-x < 0)
    (up-remove-objects search-remote object-data-status != status-ready)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        ;If any trebs are found, move them from search-remote to search-local
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Cannons
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: bombard-cannon c: 40)
    (up-find-remote c: houfnice c: 40)
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-remove-objects search-remote object-data-point-x < 0)
    (up-remove-objects search-remote object-data-status != status-ready)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Mangonels
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: mangonel-line c: 40)
    (up-find-remote c: wk-onager c: 40)
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-remove-objects search-remote object-data-point-x < 0)
    (up-remove-objects search-remote object-data-status != status-ready)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        ;If any monks are found, move them from search-remote to search-local
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Scorpions
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: scorpion-class c: 40)
    (up-find-remote c: organ-gun c: 40)
    (up-find-remote c: elite-organ-gun c: 40)
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-remove-objects search-remote object-data-point-x < 0)
    (up-remove-objects search-remote object-data-status != status-ready)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        ;If any monks are found, move them from search-remote to search-local
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Rams
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == RAM-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: battering-ram-line c: 40)
    (up-find-remote c: armored-elephant-line c: 40)
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-remove-objects search-remote object-data-point-x < 0)
    (up-remove-objects search-remote object-data-status != status-ready)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == RAM-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == RAM-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Monks
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == MONK-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: monastery-class c: 40)  
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-remove-objects search-remote object-data-point-x < 0)
    (up-remove-objects search-remote object-data-status != status-ready)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        ;If any monks are found, move them from search-remote to search-local
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == MONK-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == MONK-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Cavalry
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: cavalry-class c: 40)
    (up-find-remote c: scout-cavalry-class c: 40)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-remove-objects search-remote object-data-base-type == armored-elephant)
    (up-remove-objects search-remote object-data-range > 2)
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-remove-objects search-remote object-data-point-x < 0)
    (up-remove-objects search-remote object-data-status != status-ready)
    (up-clean-search search-local -1 search-order-asc)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Cavalry Archers
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: cavalry-archer-class c: 40)
    (up-find-remote c: cavalry-cannon-class c: 40)
    (up-find-remote c: mameluke-line c: 40)
    (up-find-remote c: ballista-elephant c: 40)
    (up-find-remote c: elite-ballista-elephant c: 40)
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Foot Archers
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: archery-class c: 40)
    (up-find-remote c: archery-cannon-class c: 40)
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Ranged Infantry
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: throwing-axeman-line c: 40)
    (up-find-remote c: gbeto c: 40)
    (up-find-remote c: chakram-thrower-line c: 40)
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-remove-objects search-remote object-data-point-x < 0)
    (up-remove-objects search-remote object-data-status != status-ready)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Melee Infantry
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
    (up-compare-goal g-current-group-location-x > PENDING)
    =>
    (up-reset-search 0 0 1 1)
    (up-find-remote c: infantry-class c: 40)
    (up-remove-objects search-remote object-data-range > 2)
    (up-remove-objects search-remote object-data-group-flag >= 0)
    (up-remove-objects search-remote object-data-hitpoints <= 0)
    (up-remove-objects search-remote object-data-point-x < 0)
    (up-remove-objects search-remote object-data-status != status-ready)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-object-data object-data-id g-temp)
        (up-add-object-by-id search-local g: g-temp)
        (up-clean-search search-local -1 search-order-asc)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-group < 40)
        (up-group-size g: g-current-group g:< g-max-group-size)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
        (up-compare-goal g-current-group-location-x > PENDING)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-local-total g:< g-max-group-size)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-get-search-state g-local-total)
        (up-jump-rule -2)
        )

    ;Add Objects to Group
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group < 40)
    (up-group-size g: g-current-group g:< g-max-group-size)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-goal g-current-group-location-x > PENDING)
    (up-compare-goal g-temp6 g:!= g-local-total)
    =>
    (up-clean-search search-local -1 search-order-asc)
    (up-modify-group-flag 0 g: g-current-group)
    (up-reset-group g: g-current-group)
    (up-create-group 0 0 g: g-current-group)
    (up-modify-group-flag 1 g: g-current-group)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Add objects to group %d" g: g-current-group)
    ; (up-chat-data-to-self "Add objects to group %d" g: g-current-group)
    )

;-----------------
;   Split Group
;-----------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    )

    ;Split group if larger than max group size
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group g:> g-max-group-size)
    =>
    (up-get-group-size g: g-current-group g-temp)
    (up-modify-goal g-temp c:z/ 2)
    (up-modify-goal g-temp g:max g-min-group-size)
    (up-set-group search-local g: g-current-group)
    (up-remove-objects search-local object-data-index g:>= g-temp)
    (up-clean-search search-local -1 search-order-asc)
    (up-modify-group-flag 0 g: g-current-group)
    (up-reset-group g: g-current-group)
    (up-create-group 0 0 g: g-current-group)
    (up-modify-group-flag 1 g: g-current-group)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Split Group %d" g: g-current-group)
    ; (up-chat-data-to-all "Split Group %d" g: g-current-group)
    )

    ;Split group if scouting and larger than 5, reduce scouting group to 4 units
    (defrule
    (up-group-size g: g-current-group > 5)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    =>
    (up-set-group search-local g: g-current-group)
    (up-remove-objects search-local object-data-index >= 4)
    (up-clean-search search-local -1 search-order-asc)
    (up-modify-group-flag 0 g: g-current-group)
    (up-reset-group g: g-current-group)
    (up-create-group 0 0 g: g-current-group)
    (up-modify-group-flag 1 g: g-current-group)
    (up-modify-flag g-current-group-flag c:- ALLOW-COMBINED-GROUPS)
    (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Split Scouting Group %d" g: g-current-group)
    ; (up-chat-data-to-self "Split Scouting Group %d" g: g-current-group)
    )

;--------------------------------
;   Get Group Location (Again)
;--------------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")
    (load "The General 1.2/Functions/DUC Group Location")

;--------------------
;   Get Group Type
;--------------------

    ;-----------
    ;   Setup
    ;-----------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        ;Temp goals:
        ;g-current-group-type-flag
        ;g-current-group-type-flag-goal-id
        ;g-current-group-flag
        ;g-current-group-flag-goal-id

        ;Check the unit composition of each group and set the group flags to store this
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
        (set-goal g-current-group-type-flag 0)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
        )

    ;--------------------
    ;   Melee Infantry
    ;--------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: infantry-class c: 240)
        (up-remove-objects search-local object-data-range > 2)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ MELEE-INFANTRY-GROUP)
        (up-modify-goal g-current-group-type-flag c:+ MELEE-SOLDIER-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )
        
    ;---------------------
    ;   Ranged Infantry
    ;---------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: throwing-axeman-line c: 240)
        (up-find-local c: gbeto c: 240)
        (up-find-local c: elite-gbeto c: 240)
        (up-find-local c: chakram-thrower-line c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ RANGED-INFANTRY-GROUP)
        (up-modify-goal g-current-group-type-flag c:+ RANGED-SOLDIER-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )    
    
    ;------------------
    ;   Foot Archers
    ;------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: archery-class c: 240)
        (up-find-local c: archery-cannon-class c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ FOOT-ARCHER-GROUP)
        (up-modify-goal g-current-group-type-flag c:+ RANGED-SOLDIER-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;---------------------
    ;   Cavalry Archers
    ;---------------------
        
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: cavalry-archer-class c: 240)
        (up-find-local c: cavalry-cannon-class c: 240)
        (up-find-local c: mameluke-line c: 240)
        (up-find-local c: ballista-elephant c: 240)
        (up-find-local c: elite-ballista-elephant c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ CAVALRY-ARCHER-GROUP)
        (up-modify-goal g-current-group-type-flag c:+ RANGED-SOLDIER-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-------------
    ;   Cavalry
    ;-------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: cavalry-class c: 240)
        (up-find-local c: scout-cavalry-class c: 240)
        (up-remove-objects search-local object-data-base-type == armored-elephant)
        (up-remove-objects search-local object-data-range > 2)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ CAVALRY-GROUP)
        (up-modify-goal g-current-group-type-flag c:+ MELEE-SOLDIER-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-----------
    ;   Monks
    ;-----------
        
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-relic orderid-relic -1)
        (up-find-local c: monastery-class c: 240)
        (up-find-local c: monk-with-relic-class c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ MONK-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;----------
    ;   Rams
    ;----------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: battering-ram-line c: 240)
        (up-find-local c: armored-elephant-line c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ RAM-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;---------------
    ;   Scorpions
    ;---------------
        
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: scorpion-class c: 240)
        (up-find-local c: organ-gun c: 240)
        (up-find-local c: elite-organ-gun c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ SCORPION-GROUP)
        (up-modify-flag g-current-group-type-flag c:+ RANGED-SIEGE-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;---------------
    ;   Mangonels
    ;---------------
        
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: mangonel-line c: 240)
        (up-find-local c: wk-onager c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ MANGONEL-GROUP)
        (up-modify-flag g-current-group-type-flag c:+ RANGED-SIEGE-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-------------
    ;   Cannons
    ;-------------
        
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: bombard-cannon c: 240)
        (up-find-local c: houfnice c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ CANNON-GROUP)
        (up-modify-flag g-current-group-type-flag c:+ RANGED-SIEGE-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;----------------
    ;   Trebuchets
    ;----------------
        
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: packed-trebuchet-class c: 240)
        (up-find-local c: unpacked-trebuchet-class c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ TREBUCHET-GROUP)
        (up-modify-flag g-current-group-type-flag c:+ RANGED-SIEGE-GROUP)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;------------------------------------
    ;   Anti-Infantry Subgroup (32768)
    ;------------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: cavalry-archer-line c: 240)
        (up-find-local c: hand-cannoneer c: 240)
        (up-find-local c: slinger c: 240)
        (up-find-local c: jaguar-warrior-line c: 240)
        (up-find-local c: urumi-swordsman-line c: 240)
        (up-find-local c: chakram-thrower-line c: 240)
        (up-find-local c: gbeto c: 240)
        (up-find-local c: elite-gbeto c: 240)
        (up-find-local c: teutonic-knight-line c: 240)
        (up-find-local c: camel-archer c: 240)
        (up-find-local c: elite-camel-archer c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: kipchak-line c: 240)
        (up-find-local c: plumed-archer-line c: 240)
        (up-find-local c: mangudai-line c: 240)
        (up-find-local c: arambai c: 240)
        (up-find-local c: elite-arambai c: 240)
        (up-find-local c: conquistador-line c: 240)
        (up-find-local c: cataphract-line c: 240)
        (up-find-local c: mameluke-line c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 32768)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-----------------------------------
    ;   Anti-Pikemen Subgroup (65536)
    ;-----------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: militiaman-line c: 240)
        (up-find-local c: condottiero c: 240)
        (up-find-local c: archer-line c: 240)
        (up-find-local c: skirmisher-line c: 240)
        (up-find-local c: imperial-skirmisher c: 240)
        (up-find-local c: cavalry-archer-line c: 240)
        (up-find-local c: hand-cannoneer c: 240)
        (up-find-local c: slinger c: 240)
        (up-find-local c: foot-konnik-line c: 240)
        (up-find-local c: jaguar-warrior-line c: 240)
        (up-find-local c: woad-raider-line c: 240)
        (up-find-local c: urumi-swordsman-line c: 240)
        (up-find-local c: shotel-warrior c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: elite-shotel-warrior c: 240)
        (up-find-local c: throwing-axeman-line c: 240)
        (up-find-local c: huskarl-line c: 240)
        (up-find-local c: barracks-huskarl c: 240)
        (up-find-local c: barracks-elite-huskarl c: 240)
        (up-find-local c: chakram-thrower-line c: 240)
        (up-find-local c: kamayuk c: 240)
        (up-find-local c: elite-kamayuk c: 240)
        (up-find-local c: samurai-line c: 240)
        (up-find-local c: karambit-warrior c: 240)
        (up-find-local c: elite-karambit-warrior c: 240)
        (up-find-local c: gbeto c: 240)
        (up-find-local c: elite-gbeto c: 240)
        (up-find-local c: obuch-line c: 240)
        (up-find-local c: serjeant-line c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: donjon-serjeant-line c: 240)
        (up-find-local c: teutonic-knight-line c: 240)
        (up-find-local c: berserk-line c: 240)
        (up-find-local c: flemish-militia-female c: 240)
        (up-find-local c: flemish-militia-male c: 240)
        (up-find-local c: flemish-militia-trained c: 240)
        (up-find-local c: longbowman-line c: 240)
        (up-find-local c: chu-ko-nu-line c: 240)
        (up-find-local c: genoese-crossbowman c: 240)
        (up-find-local c: elite-genoese-crossbowman c: 240)
        (up-find-local c: plumed-archer-line c: 240)
        (up-find-local c: rattan-archer c: 240)
        (up-find-local c: elite-rattan-archer c: 240)
        (up-find-local c: camel-archer c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: elite-camel-archer c: 240)
        (up-find-local c: kipchak-line c: 240)
        (up-find-local c: mangudai-line c: 240)
        (up-find-local c: arambai c: 240)
        (up-find-local c: elite-arambai c: 240)
        (up-find-local c: conquistador-line c: 240)
        (up-find-local c: ratha-melee-line c: 240)
        (up-find-local c: ratha-ranged-line c: 240)
        (up-find-local c: cataphract-line c: 240)
        (up-find-local c: mameluke-line c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 65536)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-----------------------------------
    ;   Anti-Eagles Subgroup (131072)
    ;-----------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: militiaman-line c: 240)
        (up-find-local c: hand-cannoneer c: 240)
        (up-find-local c: slinger c: 240)
        (up-find-local c: scorpion-line c: 240)
        (up-find-local c: jaguar-warrior-line c: 240)
        (up-find-local c: woad-raider-line c: 240)
        (up-find-local c: urumi-swordsman-line c: 240)
        (up-find-local c: shotel-warrior c: 240)
        (up-find-local c: elite-shotel-warrior c: 240)
        (up-find-local c: throwing-axeman-line c: 240)
        (up-find-local c: huskarl-line c: 240)
        (up-find-local c: barracks-huskarl c: 240)
        (up-find-local c: barracks-elite-huskarl c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: chakram-thrower-line c: 240)
        (up-find-local c: samurai-line c: 240)
        (up-find-local c: karambit-warrior c: 240)
        (up-find-local c: elite-karambit-warrior c: 240)
        (up-find-local c: obuch-line c: 240)
        (up-find-local c: serjeant-line c: 240)
        (up-find-local c: donjon-serjeant-line c: 240)
        (up-find-local c: teutonic-knight-line c: 240)
        (up-find-local c: berserk-line c: 240)
        (up-find-local c: flemish-militia-female c: 240)
        (up-find-local c: flemish-militia-male c: 240)
        (up-find-local c: flemish-militia-trained c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: hussite-wagon-line c: 240)
        (up-find-local c: cataphract-line c: 240)
        (up-find-local c: organ-gun c: 240)
        (up-find-local c: elite-organ-gun c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 131072)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-----------------------------------------
    ;   Anti-Foot-Archers Subgroup (262144)
    ;-----------------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: skirmisher-line c: 240)
        (up-find-local c: imperial-skirmisher c: 240)
        (up-find-local c: genitour c: 240)
        (up-find-local c: elite-genitour c: 240)
        (up-find-local c: steppe-lancer-line c: 240)
        (up-find-local c: shrivamsha-rider-line c: 240)
        (up-find-local c: mangonel-line c: 240)
        (up-find-local c: wk-onager c: 240)
        (up-find-local c: huskarl-line c: 240)
        (up-find-local c: barracks-huskarl c: 240)
        (up-find-local c: barracks-elite-huskarl c: 240)
        (up-find-local c: ghulam-line c: 240)
        (up-find-local c: hussite-wagon-line c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: tarkan-line c: 240)
        (up-find-local c: stable-tarkan c: 240)
        (up-find-local c: stable-elite-tarkan c: 240)
        (up-find-local c: ballista-elephant c: 240)
        (up-find-local c: elite-ballista-elephant c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 262144)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-----------------------------------
    ;   Anti-Skirms Subgroup (524288)
    ;-----------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: eagle-warrior-line c: 240)
        (up-find-local c: heavy-eagle-warrior c: 240)
        (up-find-local c: skirmisher-line c: 240)
        (up-find-local c: imperial-skirmisher c: 240)
        (up-find-local c: genitour c: 240)
        (up-find-local c: elite-genitour c: 240)
        (up-find-local c: scout-cavalry-line c: 240)
        (up-find-local c: xolotl-warrior c: 240)
        (up-find-local c: steppe-lancer-line c: 240)
        (up-find-local c: shrivamsha-rider-line c: 240)
        (up-find-local c: mangonel-line c: 240)
        (up-find-local c: wk-onager c: 240)
        (up-find-local c: chakram-thrower-line c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: huskarl-line c: 240)
        (up-find-local c: barracks-huskarl c: 240)
        (up-find-local c: barracks-elite-huskarl c: 240)
        (up-find-local c: ghulam-line c: 240)
        (up-find-local c: berserk-line c: 240)
        (up-find-local c: hussite-wagon-line c: 240)
        (up-find-local c: ratha-melee-line c: 240)
        (up-find-local c: ratha-ranged-line c: 240)
        (up-find-local c: konnik-line c: 240)
        (up-find-local c: magyar-huszar c: 240)
        (up-find-local c: elite-magyar-huszar c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 524288)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-----------------------------------------
    ;   Anti-Cav-Archers Subgroup (1048576)
    ;-----------------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: skirmisher-line c: 240)
        (up-find-local c: imperial-skirmisher c: 240)
        (up-find-local c: genitour c: 240)
        (up-find-local c: elite-genitour c: 240)
        (up-find-local c: scout-cavalry-line c: 240)
        (up-find-local c: camel-line c: 240)
        (up-find-local c: steppe-lancer-line c: 240)
        (up-find-local c: shrivamsha-rider-line c: 240)
        (up-find-local c: huskarl-line c: 240)
        (up-find-local c: barracks-huskarl c: 240)
        (up-find-local c: barracks-elite-huskarl c: 240)
        (up-find-local c: ghulam-line c: 240)
        (up-find-local c: genoese-crossbowman c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: elite-genoese-crossbowman c: 240)
        (up-find-local c: camel-archer c: 240)
        (up-find-local c: elite-camel-archer c: 240)
        (up-find-local c: tarkan-line c: 240)
        (up-find-local c: stable-tarkan c: 240)
        (up-find-local c: stable-elite-tarkan c: 240)
        (up-find-local c: mameluke-line c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 1048576)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    

    ;-------------------------------------
    ;   Anti-Cavalry Subgroup (2097152)
    ;-------------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: spearman-line c: 240)
        (up-find-local c: camel-line c: 240)
        (up-find-local c: scorpion-line c: 240)
        (up-find-local c: urumi-swordsman-line c: 240)
        (up-find-local c: kamayuk c: 240)
        (up-find-local c: elite-kamayuk c: 240)
        (up-find-local c: teutonic-knight-line c: 240)
        (up-find-local c: flemish-militia-female c: 240)
        (up-find-local c: flemish-militia-male c: 240)
        (up-find-local c: flemish-militia-trained c: 240)
        (up-find-local c: genoese-crossbowman c: 240)
        (up-find-local c: elite-genoese-crossbowman c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: mameluke-line c: 240)
        (up-find-local c: boyar c: 240)
        (up-find-local c: elite-boyar c: 240)
        (up-find-local c: organ-gun c: 240)
        (up-find-local c: elite-organ-gun c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 2097152)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;------------------------------------
    ;   Anti-Camels Subgroup (4194304)
    ;------------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: spearman-line c: 240)
        (up-find-local c: archer-line c: 240)
        (up-find-local c: hand-cannoneer c: 240)
        (up-find-local c: scorpion-line c: 240)
        (up-find-local c: urumi-swordsman-line c: 240)
        (up-find-local c: kamayuk c: 240)
        (up-find-local c: elite-kamayuk c: 240)
        (up-find-local c: gbeto c: 240)
        (up-find-local c: elite-gbeto c: 240)
        (up-find-local c: serjeant-line c: 240)
        (up-find-local c: donjon-serjeant-line c: 240)
        (up-find-local c: teutonic-knight-line c: 240)
        (up-find-local c: berserk-line c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: flemish-militia-female c: 240)
        (up-find-local c: flemish-militia-male c: 240)
        (up-find-local c: flemish-militia-trained c: 240)
        (up-find-local c: longbowman-line c: 240)
        (up-find-local c: chu-ko-nu-line c: 240)
        (up-find-local c: genoese-crossbowman c: 240)
        (up-find-local c: elite-genoese-crossbowman c: 240)
        (up-find-local c: rattan-archer c: 240)
        (up-find-local c: elite-rattan-archer c: 240)
        (up-find-local c: organ-gun c: 240)
        (up-find-local c: elite-organ-gun c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 4194304)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;---------------------------------------
    ;   Anti-Elephants Subgroup (8388608)
    ;---------------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: spearman-line c: 240)
        (up-find-local c: camel-line c: 240)
        (up-find-local c: scorpion-line c: 240)
        (up-find-local c: kamayuk c: 240)
        (up-find-local c: elite-kamayuk c: 240)
        (up-find-local c: teutonic-knight-line c: 240)
        (up-find-local c: flemish-militia-female c: 240)
        (up-find-local c: flemish-militia-male c: 240)
        (up-find-local c: flemish-militia-trained c: 240)
        (up-find-local c: genoese-crossbowman c: 240)
        (up-find-local c: elite-genoese-crossbowman c: 240)
        (up-find-local c: mameluke-line c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 8388608)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;------------------------------------
    ;   Anti-Siege Subgroup (16777216)
    ;------------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: eagle-warrior-line c: 240)
        (up-find-local c: heavy-eagle-warrior c: 240)
        (up-find-local c: condottiero c: 240)
        (up-find-local c: scout-cavalry-line c: 240)
        (up-find-local c: knight-line c: 240)
        (up-find-local c: camel-line c: 240)
        (up-find-local c: steppe-lancer-line c: 240)
        (up-find-local c: shrivamsha-rider-line c: 240)
        (up-find-local c: xolotl-warrior c: 240)
        (up-find-local c: mangonel-line c: 240)
        (up-find-local c: wk-onager c: 240)
        (up-find-local c: bombard-cannon c: 240)
        (up-find-local c: houfnice c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: armored-elephant-line c: 240)
        (up-find-local c: woad-raider-line c: 240)
        (up-find-local c: throwing-axeman-line c: 240)
        (up-find-local c: huskarl-line c: 240)
        (up-find-local c: barracks-huskarl c: 240)
        (up-find-local c: barracks-elite-huskarl c: 240)
        (up-find-local c: chakram-thrower-line c: 240)
        (up-find-local c: ghulam-line c: 240)
        (up-find-local c: karambit-warrior c: 240)
        (up-find-local c: elite-karambit-warrior c: 240)
        (up-find-local c: gbeto c: 240)
        (up-find-local c: elite-gbeto c: 240)
        (up-find-local c: berserk-line c: 240)
        (up-find-local c: longbowman-line c: 240)
        (up-find-local c: chu-ko-nu-line c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: kipchak-line c: 240)
        (up-find-local c: mangudai-line c: 240)
        (up-find-local c: ratha-melee-line c: 240)
        (up-find-local c: ratha-ranged-line c: 240)
        (up-find-local c: konnik-line c: 240)
        (up-find-local c: coustillier-line c: 240)
        (up-find-local c: cataphract-line c: 240)
        (up-find-local c: tarkan-line c: 240)
        (up-find-local c: stable-tarkan c: 240)
        (up-find-local c: stable-elite-tarkan c: 240)
        (up-find-local c: leitis-line c: 240)
        (up-find-local c: magyar-huszar c: 240)
        (up-find-local c: elite-magyar-huszar c: 240)
        (up-find-local c: mameluke-line c: 240)
        (up-find-local c: boyar c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: elite-boyar c: 240)
        (up-find-local c: keshik-line c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 16777216)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-----------------------------------
    ;   Anti-Monks Subgroup (33554432)
    ;-----------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: eagle-warrior-line c: 240)
        (up-find-local c: heavy-eagle-warrior c: 240)
        (up-find-local c: condottiero c: 240)
        (up-find-local c: archer-line c: 240)
        (up-find-local c: cavalry-archer-line c: 240)
        (up-find-local c: hand-cannoneer c: 240)
        (up-find-local c: scout-cavalry-line c: 240)
        (up-find-local c: knight-line c: 240)
        (up-find-local c: steppe-lancer-line c: 240)
        (up-find-local c: shrivamsha-rider-line c: 240)
        (up-find-local c: xolotl-warrior c: 240)
        (up-find-local c: woad-raider-line c: 240)
        (up-find-local c: chakram-thrower-line c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: ghulam-line c: 240)
        (up-find-local c: berserk-line c: 240)
        (up-find-local c: longbowman-line c: 240)
        (up-find-local c: chu-ko-nu-line c: 240)
        (up-find-local c: genoese-crossbowman c: 240)
        (up-find-local c: elite-genoese-crossbowman c: 240)
        (up-find-local c: rattan-archer c: 240)
        (up-find-local c: elite-rattan-archer c: 240)
        (up-find-local c: janissary-line c: 240)
        (up-find-local c: camel-archer c: 240)
        (up-find-local c: elite-camel-archer c: 240)
        (up-find-local c: kipchak-line c: 240)
        (up-find-local c: war-wagon-line c: 240)
        (up-find-local c: mangudai-line c: 240)
        (up-find-local c: arambai c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: elite-arambai c: 240)
        (up-find-local c: conquistador-line c: 240)
        (up-find-local c: ratha-melee-line c: 240)
        (up-find-local c: ratha-ranged-line c: 240)
        (up-find-local c: konnik-line c: 240)
        (up-find-local c: coustillier-line c: 240)
        (up-find-local c: cataphract-line c: 240)
        (up-find-local c: tarkan-line c: 240)
        (up-find-local c: stable-tarkan c: 240)
        (up-find-local c: stable-elite-tarkan c: 240)
        (up-find-local c: ballista-elephant c: 240)
        (up-find-local c: elite-ballista-elephant c: 240)
        (up-find-local c: leitis-line c: 240)
        (up-find-local c: magyar-huszar c: 240)
        (up-find-local c: elite-magyar-huszar c: 240)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-find-local c: mameluke-line c: 240)
        (up-find-local c: boyar c: 240)
        (up-find-local c: elite-boyar c: 240)
        (up-find-local c: keshik-line c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 33554432)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;-----------------------------------
    ;   Anti-Gunpowder Subgroup (67108864)
    ;-----------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: condottiero c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 67108864)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

    ;--------------------------------------------
    ;   Anti-Unique-Units Subgroup (134217728)
    ;--------------------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: samurai-line c: 240)
        (up-remove-objects search-local object-data-group-flag g:!= g-current-group)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-type-flag c:+ 134217728)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id g: g-current-group-type-flag)
        )

;--------------------
;   Group Settings
;--------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals
    ;g-current-group-flag
    ;g-current-group-flag-goal-id
    ;g-current-group-type-flag
    ;g-current-group-type-flag-goal-id

    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
    (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
    (up-modify-flag g-current-group-flag c:- ALLOW-COMBINED-GROUPS)
    (up-modify-flag g-current-group-flag c:- FOCUS-SINGLE-TARGET)
    (up-modify-flag g-current-group-flag c:- FOCUS-MULTIPLE-TARGETS)
    ; (up-modify-flag g-current-group-flag c:- FOCUS-SEPARATE-TARGETS)
    (up-modify-flag g-current-group-flag c:- ASSAULT-MODE)
    )

    ;ALLOW-COMBINED-GROUPS
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-flag != ALLOW-COMBINED-GROUPS)
    (up-compare-flag g-current-group-flag != SCOUT-MODE)
    =>
    (up-modify-flag g-current-group-flag c:+ ALLOW-COMBINED-GROUPS)
    )

    ;FOCUS-SINGLE-TARGET, FOCUS-MULTIPLE-TARGETS, FOCUS-SEPARATE-TARGETS
    (defrule
    (up-group-size g: g-current-group > 0)
    (or
        (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP)
        (or
            (up-compare-flag g-current-group-type-flag == RAM-GROUP)
            (or
                (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
                (or
                    (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                    (up-compare-flag g-current-group-type-flag == MONK-GROUP)))))
    =>
    (up-modify-flag g-current-group-flag c:+ FOCUS-SINGLE-TARGET)
    (up-modify-flag g-current-group-flag c:- FOCUS-MULTIPLE-TARGETS)
    ; (up-modify-flag g-current-group-flag c:- FOCUS-SEPARATE-TARGETS)
    )

    (defrule
    (up-group-size g: g-current-group > 3)
    (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
    =>
    (up-modify-flag g-current-group-flag c:- FOCUS-SINGLE-TARGET)
    (up-modify-flag g-current-group-flag c:+ FOCUS-MULTIPLE-TARGETS)
    )

    (defrule
    (up-group-size g: g-current-group <= 3)
    (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
    =>
    (up-modify-flag g-current-group-flag c:+ FOCUS-SINGLE-TARGET)
    (up-modify-flag g-current-group-flag c:- FOCUS-MULTIPLE-TARGETS)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (or
        (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
        (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP))
    =>
    (up-modify-flag g-current-group-flag c:- FOCUS-SINGLE-TARGET)    ;Temporary
    (up-modify-flag g-current-group-flag c:+ FOCUS-MULTIPLE-TARGETS) ;Eventually code better multiple targets code
    ; (up-modify-flag g-current-group-flag c:- FOCUS-SEPARATE-TARGETS)
    )

    ;ASSAULT-MODE
    (defrule
    (up-group-size g: g-current-group > 0)
    (or
        (military-population >= 20)
        (players-population target-player < 30))
    (or
        (military-population >= 30)
        (up-compare-goal g-siege-class >= 2))
    =>
    (up-modify-flag g-current-group-flag c:+ ASSAULT-MODE)
    )

    ;Store Flag Settings From Above
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
    )

    

    ;MAIN-GROUP
    (defrule
    (up-group-size g: g-current-group > 0)
    (or
        (up-compare-flag g-group1-flag == MAIN-GROUP)
        (or
            (up-compare-flag g-group2-flag == MAIN-GROUP)
            (or
                (up-compare-flag g-group3-flag == MAIN-GROUP)
                (or
                    (up-compare-flag g-group4-flag == MAIN-GROUP)
                    (or
                        (up-compare-flag g-group5-flag == MAIN-GROUP)
                        (up-compare-flag g-group6-flag == MAIN-GROUP))))))
    =>
    (up-jump-rule 2)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-full-reset-search)
        (up-set-group search-local g: g-current-group)
        (up-remove-objects search-local object-data-base-type g:!= g-primary-unit)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-flag c:+ MAIN-GROUP)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Set main group: %d" g: g-current-group)
        ; (up-chat-data-to-self "Set main group: %d" g: g-current-group)
        )

    ;SCOUT-MODE
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-type-flag != MELEE-SOLDIER-GROUP) 
    (up-compare-flag g-current-group-type-flag != RANGED-SOLDIER-GROUP)
    =>
    (up-jump-rule 13)
    )

        ;Check for explored target player buildings and nearby enemy units
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
        (up-full-reset-search)
        (up-find-remote c: building-class c: 10)
        (up-get-search-state g-local-total)
        (up-modify-goal g-temp g:= g-remote-total)
        (up-set-target-point g-current-group-location-x)
        (set-strategic-number sn-focus-player-number 1)
        )

            ;If current focus player isn't an enemy in the game, check next player
            (defrule
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            (up-group-size g: g-current-group > 0)
            (nand
                (player-in-game focus-player)
                (stance-toward focus-player enemy))
            =>
            (up-modify-sn sn-focus-player-number c:+ 1)
            (up-jump-rule -1)
            )

            ;Check for nearby enemy units
            (defrule
            (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
            (up-group-size g: g-current-group > 0)
            =>
            (up-set-target-point g-current-group-location-x)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 12)
            (up-filter-include cmdid-military -1 -1 -1)
            (up-filter-exclude -1 actionid-explore orderid-explore -1)
            (up-find-remote c: any-objects c: 40)
            (up-get-search-state g-local-total)
            (up-modify-goal g-temp2 g:= g-remote-total)
            )

            ;Check next player
            (defrule
            (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
            (up-group-size g: g-current-group > 0)
            =>
            (up-modify-sn sn-focus-player-number c:+ 1)
            (up-jump-rule -3)
            )

        ;Only allow one group to scout, and don't allow a new group to scout if we already have six groups
        (defrule
        (or
            (up-compare-flag g-group1-flag == SCOUT-MODE)
            (or
                (up-compare-flag g-group2-flag == SCOUT-MODE)
                (or
                    (up-compare-flag g-group3-flag == SCOUT-MODE)
                    (or
                        (up-compare-flag g-group4-flag == SCOUT-MODE)
                        (or
                            (up-compare-flag g-group5-flag == SCOUT-MODE)
                            (up-compare-flag g-group6-flag == SCOUT-MODE))))))
        =>
        (up-jump-rule 2)
        )
        (defrule
        (or
            (up-group-size c: 1 == 0)
            (or
                (up-group-size c: 2 == 0)
                (or
                    (up-group-size c: 3 == 0)
                    (or
                        (up-group-size c: 4 == 0)
                        (or
                            (up-group-size c: 5 == 0)
                            (up-group-size c: 6 == 0))))))
        =>
        (up-jump-rule 1)
        )

            ;If we've avoided buildings at least 5 times, start scouting instead
            (defrule
            (false)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-flag != SCOUT-MODE)
            ; (or
            ;     (up-compare-goal g-temp < 10)   ;target enemy buildings found
                (up-compare-goal g-current-group-avoidance-counter >= 5);)
            (or
                (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
                (or
                    (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
                    (up-compare-goal g-temp2 < 3))) ;nearby enemy military units
            (players-population target-player >= 30)
            =>
            (up-modify-flag g-current-group-flag c:+ SCOUT-MODE)
            (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 "Group %d start scouting" g: g-current-group)
            ; (up-chat-data-to-self "Group %d start scouting" g: g-current-group)
            )

        ;Stop scouting if we've recently avoided ranged buildings < 3 times or the target player has < 20 pop
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == SCOUT-MODE)
        (or
            ; (and
                ; (up-compare-goal g-temp >= 10)   ;target enemy buildings found
                (up-compare-goal g-current-group-avoidance-counter < 3);)
            (players-population target-player < 20))
        =>
        (up-modify-flag g-current-group-flag c:- SCOUT-MODE)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Group %d stop scouting1" g: g-current-group)
        ; (up-chat-data-to-all "Group %d stop scouting1" g: g-current-group)
        )
        ;Stop scouting if there are >= 3 nearby enemy military units and the group isn't mounted
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == SCOUT-MODE)
        (up-compare-flag g-current-group-type-flag != CAVALRY-ARCHER-GROUP)
        (up-compare-flag g-current-group-type-flag != CAVALRY-GROUP)
        (up-compare-goal g-temp2 >= 3) ;nearby enemy military units
        =>
        (up-modify-flag g-current-group-flag c:- SCOUT-MODE)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Group %d stop scouting2" g: g-current-group)
        ; (up-chat-data-to-all "Group %d stop scouting2" g: g-current-group)
        )
        ; (defrule
        ; (up-group-size g: g-current-group > 0)
        ; (up-compare-flag g-current-group-flag == SCOUT-MODE)
        ; ; (up-compare-goal g-temp >= 10)   ;target enemy buildings found
        ; (up-compare-goal g-current-group-avoidance-counter < 3)
        ; =>
        ; (up-modify-flag g-current-group-flag c:- SCOUT-MODE)
        ; (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        ; (up-get-fact game-time 0 g-temp5)
        ; (up-get-fact player-number 0 g-temp6)
        ; (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        ; (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        ; (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        ; (up-log-data 0 "Group %d stop scouting2" g: g-current-group)
        ; ; (up-chat-data-to-all "Group %d stop scouting2" g: g-current-group)
        ; )

        ;Switch from scouting clockwise to counter-clockwise or vice-versa
        (defrule
        (timer-triggered t-10-sec)
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == SCOUT-MODE)
        (up-compare-flag g-current-group-flag == CLOCKWISE)
        (up-compare-goal g-current-group-destination-x >= 0)
        (up-compare-goal g-current-group-destination-y >= 0)
        (up-point-distance g-current-group-location-x g-current-group-destination-x < 6)
        (or
            (up-compare-goal g-current-group-destination-x <= 4)
            (up-compare-goal g-current-group-destination-y <= 4))
        =>
        (up-modify-flag g-current-group-flag c:- CLOCKWISE)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Group %d switch to scouting counter clockwise1" g: g-current-group)
        ; (up-chat-data-to-all "Group %d switch to scouting counter clockwise1" g: g-current-group)
        (up-jump-rule 3)
        )
        (defrule
        (timer-triggered t-10-sec)
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == SCOUT-MODE)
        (up-compare-flag g-current-group-flag == CLOCKWISE)
        (up-modify-goal g-temp c:= HUNDRED-PERCENT-MAP-SIZE)
        (up-modify-goal g-temp c:- 4)
        (up-compare-goal g-current-group-destination-x >= 0)
        (up-compare-goal g-current-group-destination-y >= 0)
        (up-point-distance g-current-group-location-x g-current-group-destination-x < 6)
        (or
            (up-compare-goal g-current-group-destination-x g:>= g-temp)
            (up-compare-goal g-current-group-destination-y g:>= g-temp))
        =>
        (up-modify-flag g-current-group-flag c:- CLOCKWISE)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Group %d switch to scouting counter clockwise2" g: g-current-group)
        ; (up-chat-data-to-all "Group %d switch to scouting counter clockwise2" g: g-current-group)
        (up-jump-rule 2)
        )
        (defrule
        (timer-triggered t-10-sec)
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == SCOUT-MODE)
        (up-compare-flag g-current-group-flag != CLOCKWISE)
        (up-compare-goal g-current-group-destination-x >= 0)
        (up-compare-goal g-current-group-destination-y >= 0)
        (up-point-distance g-current-group-location-x g-current-group-destination-x < 6)
        (or
            (up-compare-goal g-current-group-destination-x <= 4)
            (up-compare-goal g-current-group-destination-y <= 4))
        =>
        (up-modify-flag g-current-group-flag c:+ CLOCKWISE)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Group %d switch to scouting clockwise1" g: g-current-group)
        ; (up-chat-data-to-all "Group %d switch to scouting clockwise1" g: g-current-group)
        (up-jump-rule 1)
        )
        (defrule
        (timer-triggered t-10-sec)
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == SCOUT-MODE)
        (up-compare-flag g-current-group-flag != CLOCKWISE)
        (up-modify-goal g-temp c:= HUNDRED-PERCENT-MAP-SIZE)
        (up-modify-goal g-temp c:- 4)
        (up-compare-goal g-current-group-destination-x >= 0)
        (up-compare-goal g-current-group-destination-y >= 0)
        (up-point-distance g-current-group-location-x g-current-group-destination-x < 6)
        (or
            (up-compare-goal g-current-group-destination-x g:>= g-temp)
            (up-compare-goal g-current-group-destination-y g:>= g-temp))
        =>
        (up-modify-flag g-current-group-flag c:+ CLOCKWISE)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Group %d switch to scouting clockwise2" g: g-current-group)
        ; (up-chat-data-to-all "Group %d switch to scouting clockwise2" g: g-current-group)
        )

    ;If not a soldier group and the group is scouting, tell the group to stop scouting
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-type-flag != MELEE-SOLDIER-GROUP)
    (up-compare-flag g-current-group-type-flag != RANGED-SOLDIER-GROUP)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    =>
    (up-modify-flag g-current-group-flag c:- SCOUT-MODE)
    (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Group %d disable scouting" g: g-current-group)
    ; (up-chat-data-to-all "Group %d disable scouting" g: g-current-group)
    )



;--------------------
;   Combine Groups
;--------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-type-flag
    ;g-current-group-type-flag-goal-id
    ;g-current-nearby-group
    ;g-current-nearby-group-flag
    ;g-current-nearby-group-flag-goal-id
    ;g-current-nearby-group-type-flag
    ;g-current-nearby-group-type-flag-goal-id
    ;g-loop-counter

    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-nearby-group-location-x
    ;g-current-nearby-group-location-y

    ;If similar groups are nearby, combine into a single group
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group < 6)
    =>
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group < 6)
    =>
    (up-modify-goal g-current-nearby-group g:= g-current-group)
    (up-modify-goal g-current-nearby-group c:+ 1)
    (set-goal g-current-nearby-group-flag-goal-id g-before-group-flags-goal-id)
    (up-modify-goal g-current-nearby-group-flag-goal-id g:+ g-current-nearby-group)
    (set-goal g-current-nearby-group-type-flag-goal-id g-before-group-type-flags-goal-id)
    (up-modify-goal g-current-nearby-group-type-flag-goal-id g:+ g-current-nearby-group)
    (set-goal g-current-nearby-group-location-x-goal-id g-before-group-locations-goal-id)
    (up-modify-goal g-current-nearby-group-location-x-goal-id g:+ g-current-nearby-group)
    (up-modify-goal g-current-nearby-group-location-x-goal-id g:+ g-current-nearby-group)
    (up-modify-goal g-current-nearby-group-location-y-goal-id g:= g-current-nearby-group-location-x-goal-id)
    (up-modify-goal g-current-nearby-group-location-y-goal-id c:+ 1)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group < 6)
    (up-group-size g: g-current-nearby-group > 0)
    =>
    (up-get-indirect-goal g: g-current-nearby-group-flag-goal-id g-current-nearby-group-flag)
    (up-get-indirect-goal g: g-current-nearby-group-type-flag-goal-id g-current-nearby-group-type-flag)
    (up-get-indirect-goal g: g-current-nearby-group-location-x-goal-id g-current-nearby-group-location-x)
    (up-get-indirect-goal g: g-current-nearby-group-location-y-goal-id g-current-nearby-group-location-y)
    (up-get-group-size g: g-current-group g-temp)
    (up-get-group-size g: g-current-nearby-group g-temp2)
    (up-set-group search-local g: g-current-group)
    )

    (defrule
    (or
        (up-compare-goal g-current-group >= 6)
        (or
            (up-compare-goal g-current-nearby-group-location-x <= 0)   ;nearby group's location not set yet
            (or
                (up-compare-flag g-current-group-flag != ALLOW-COMBINED-GROUPS)
                (up-compare-flag g-current-nearby-group-flag != ALLOW-COMBINED-GROUPS))))
    =>
    (up-jump-rule 36)
    )

    ;If the two groups aren't nearby, skip next few rules
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-nearby-group > 0)
    (up-set-target-object search-local c: 0)
    (up-modify-goal g-temp g:+ g-temp2)
    (or
        (up-path-distance g-current-nearby-group-location-x 0 >= 8) ;used to be strict path distance (1)
        (or
            (up-group-size g: g-current-group >= 40)
            (or
                (up-compare-goal g-temp > 40)  ;total size of both groups combined is more than 40
                (or
                    (up-group-size g: g-current-group g:>= g-max-group-size)
                    (up-compare-goal g-temp g:> g-max-group-size)))))  ;total size of both groups combined is more than g-max-group-size
    =>
    (up-jump-rule 35)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == MELEE-INFANTRY-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == MELEE-INFANTRY-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == MELEE-INFANTRY-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 31)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == RANGED-INFANTRY-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == RANGED-INFANTRY-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == RANGED-INFANTRY-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 28)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == FOOT-ARCHER-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == FOOT-ARCHER-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == FOOT-ARCHER-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 25)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == CAVALRY-ARCHER-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == CAVALRY-ARCHER-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == CAVALRY-ARCHER-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 22)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == CAVALRY-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == CAVALRY-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == CAVALRY-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 19)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == MONK-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == MONK-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == MONK-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == MONK-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == MONK-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 16)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == RAM-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == RAM-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == RAM-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == RAM-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == RAM-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == RAM-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 13)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == SCORPION-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == SCORPION-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == SCORPION-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 10)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == MANGONEL-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == MANGONEL-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == MANGONEL-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 7)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == CANNON-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == CANNON-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == CANNON-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 4)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == TREBUCHET-GROUP)
        =>
        (up-set-group search-local g: g-current-group)
        (up-set-group search-remote g: g-current-nearby-group)
        (set-goal g-loop-counter 0)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size g: g-current-nearby-group > 0)
            (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
            (up-compare-flag g-current-nearby-group-type-flag == TREBUCHET-GROUP)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter <= 40)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-add-object-by-id search-local g: g-temp)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-group-size g: g-current-nearby-group > 0)
        (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
        (up-compare-flag g-current-nearby-group-type-flag == TREBUCHET-GROUP)
        =>
        (up-clean-search search-local -1 search-order-asc)
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-modify-group-flag 0 g: g-current-nearby-group)
        (up-reset-group g: g-current-nearby-group)
        (up-create-group 0 0 g: g-current-group)
        (up-modify-group-flag 1 g: g-current-group)
        (set-goal g-temp3 24331)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-COMBINE-GROUPS g: g-current-group)
        ; (up-chat-data-to-all CHAT-COMBINE-GROUPS g: g-current-group)
        (up-jump-rule 1)
        )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-nearby-group < 5)
    =>
    (up-modify-goal g-current-nearby-group c:+ 1)
    (up-modify-goal g-current-nearby-group-flag-goal-id c:+ 1)
    (up-modify-goal g-current-nearby-group-type-flag-goal-id c:+ 1)
    (up-modify-goal g-current-nearby-group-location-x-goal-id c:+ 2)
    (up-jump-rule -37)
    )
    
    ;Reset settings for nearby group
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp3 24331)
    =>
    (up-set-indirect-goal g: g-current-nearby-group-flag-goal-id c: 0)
    (up-set-indirect-goal g: g-current-nearby-group-type-flag-goal-id c: 0)
    (set-goal g-temp4 g-before-group-actions-goal-id)                          ;group action goal
    (up-modify-goal g-temp4 g:+ g-current-nearby-group)
    (up-set-indirect-goal g: g-temp4 c: PENDING)
    (set-goal g-temp4 g-before-group-target-objects-goal-id)                          ;group target object goal
    (up-modify-goal g-temp4 g:+ g-current-group)
    (up-set-indirect-goal g: g-temp4 c: PENDING)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp3 24331)
    =>
    (up-set-indirect-goal g: g-current-nearby-group-location-x-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-nearby-group-location-y-goal-id c: PENDING)
    (up-modify-goal g-temp4 g:= g-current-nearby-group-location-x-goal-id)
    (up-modify-goal g-temp4 c:+ 12)
    (up-set-indirect-goal g: g-temp4 c: PENDING)        ;group destination-x
    (up-modify-goal g-temp4 c:+ 1)
    (up-set-indirect-goal g: g-temp4 c: PENDING)        ;group destination-y
    )



;------------------------------------
;   Set Group Destination - Normal
;------------------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-action
    ;g-current-group-action-goal-id
    ;g-current-group-destination-time
    ;g-current-group-destination-time-goal-id
    ;g-current-group-destination-score
    ;g-current-group-best-destination-score
    ;g-current-group-destination-split-goal
    ;g-current-group-smallest-range

    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-group-location-x-goal-id
    ;g-current-group-location-y-goal-id
    ;g-current-group-destination-x
    ;g-current-group-destination-y
    ;g-current-group-destination-x-goal-id
    ;g-current-group-destination-y-goal-id

    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
    (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (set-goal g-current-group-destination-object-id PENDING)
    (set-goal g-current-group-best-destination-score 0)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local object-data-range search-order-asc)
    (up-set-target-object search-local c: 0)
    (up-get-object-data object-data-range g-current-group-smallest-range)
    (set-strategic-number sn-focus-player-number 1)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-time >= MAX-DESTINATION-TIME)
    (or
        (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP)
        (up-compare-flag g-current-group-type-flag == MONK-GROUP))
    (up-compare-flag g-current-group-flag != SCOUT-MODE)
    =>
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (set-goal g-current-group-destination-split-goal 77777)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Find new destination1, group %d, ranged group max dest time reached" g: g-current-group)
    ; (up-chat-data-to-all "Find new destination1, group %d, ranged group max dest time reached" g: g-current-group)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-time >= MAX-DESTINATION-TIME)
    (not
        (up-set-target-by-id g: g-current-group-target-object-id))
    (or
        (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
        (up-compare-flag g-current-group-type-flag == RANGED-SIEGE-GROUP))
    (up-compare-flag g-current-group-flag != SCOUT-MODE)
    =>
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (set-goal g-current-group-destination-split-goal 77777)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Find new destination2, group %d, no target object" g: g-current-group)
    ; (up-chat-data-to-all "Find new destination2, group %d, no target object" g: g-current-group)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-time >= MAX-DESTINATION-TIME)
    (up-compare-flag g-current-group-flag != ASSAULT-MODE)
    (or
        (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
        (or
            (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
            (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)))
    (up-compare-flag g-current-group-flag != SCOUT-MODE)
    =>
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (set-goal g-current-group-destination-split-goal 77777)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Find new destination3, group %d, group max dest time reached, no assault" g: g-current-group)
    ; (up-chat-data-to-all "Find new destination3, group %d, group max dest time reached, no assault" g: g-current-group)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (or
        (goal g-current-group-destination-x PENDING)
        (goal g-current-group-destination-y PENDING))
    (up-compare-flag g-current-group-flag != SCOUT-MODE)
    =>
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (set-goal g-current-group-destination-split-goal 77777)
    (up-copy-point g-current-group-destination-x g-position-self-x)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Find new destination4, group %d, no current destination" g: g-current-group)
    ; (up-chat-data-to-all "Find new destination4, group %d, no current destination" g: g-current-group)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-x >= 0)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-set-target-object search-local c: 0)
    (up-path-distance g-current-group-destination-x 0 == 65535)
    =>
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (set-goal g-current-group-destination-split-goal 77777)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Find new destination5, group %d, destination unreachable" g: g-current-group)
    ; (up-chat-data-to-all "Find new destination5, group %d, destination unreachable" g: g-current-group)
    )

    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (up-compare-goal g-current-group-destination-x >= 0)
    ; (up-compare-flag g-current-group-flag != ASSAULT-MODE)
    ; (goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    ; (up-point-distance g-current-group-location-x g-current-group-destination-x <= 5)
    ; (up-compare-flag g-current-group-flag != SCOUT-MODE)
    ; =>
    ; (set-goal g-current-group-destination-time 0)
    ; (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    ; (set-goal g-current-group-destination-split-goal 77777)
    ; (up-get-fact game-time 0 g-temp5)
    ; (up-get-fact player-number 0 g-temp6)
    ; (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    ; (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    ; (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    ; (up-log-data 0 "Find new destination6, group %d, destination dangerous" g: g-current-group)
    ; ; (up-chat-data-to-all "Find new destination6, group %d, destination dangerous" g: g-current-group)
    ; )
    
    ;Look for enemy buildings or units to use as new destination, start with target-player
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77777)
    (player-in-game target-player)
    (stance-toward target-player enemy)
    =>
    (up-full-reset-search)
    (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
    (up-set-target-point g-current-group-destination-x)
    (up-modify-goal g-temp g:= g-current-group-smallest-range)
    (up-modify-goal g-temp c:+ 5)
    (up-modify-goal g-temp c:max 10)
    (up-filter-distance g: g-temp c: -1)
    (up-find-remote c: lumber-camp c: 10)
    (up-find-remote c: mining-camp c: 10)
    (up-find-remote c: building-class c: 40)
    (up-find-remote c: tower-class c: 40)
    (up-get-search-state g-local-total)
    )

    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-destination-split-goal 77777)
    ; (player-in-game target-player)
    ; (stance-toward target-player enemy)
    ; (up-compare-goal g-remote-total == 0)
    ; =>
    ; (chat-to-player my-player-number "No target player buildings found for destination")
    ; )

    ;If target player buildings found, don't search for other player buildings
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-destination-split-goal 77777)
    ; (player-in-game target-player)
    ; (stance-toward target-player enemy)
    ; (up-compare-goal g-remote-total > 0)
    ; =>
    ; (up-jump-rule 4)
    ; )

    ;     ;If no target player buildings found, search for target player walls and towers and search for other players
    ;     (defrule
    ;     (up-group-size g: g-current-group > 0)
    ;     (goal g-current-group-destination-split-goal 77777)
    ;     (player-in-game target-player)
    ;     (stance-toward target-player enemy)
    ;     =>
    ;     (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
    ;     (up-set-target-point g-current-group-destination-x)
    ;     (up-modify-goal g-temp g:= g-current-group-smallest-range)
    ;     (up-modify-goal g-temp c:+ 5)
    ;     (up-modify-goal g-temp c:max 10)
    ;     (up-filter-distance g: g-temp c: -1)
    ;     (up-find-remote c: gate-class c: 10)
    ;     (up-find-remote c: wall-class c: 40)
    ;     (up-get-search-state g-local-total)
    ;     (set-strategic-number sn-focus-player-number 1)
    ;     (chat-to-all "no target player building for destination found")
    ;     )

    ;         ;Search for other enemy objects if we found < 40 objects
    ;         (defrule
    ;         (up-group-size g: g-current-group > 0)
    ;         (goal g-current-group-destination-split-goal 77777)
    ;         (up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
    ;         (player-in-game focus-player)
    ;         (stance-toward focus-player enemy)
    ;         (up-compare-goal g-remote-total < 40)
    ;         =>
    ;         (up-set-target-point g-current-group-destination-x)
    ;         (up-filter-distance c: 20 c: -1)
    ;         (up-find-remote c: lumber-camp c: 10)
    ;         (up-find-remote c: mining-camp c: 10)
    ;         (up-find-remote c: building-class c: 40)
    ;         (up-find-remote c: tower-class c: 40)
    ;         (up-find-remote c: gate-class c: 10)
    ;         (up-find-remote c: wall-class c: 40)
    ;         (up-get-search-state g-local-total)
    ;         )

    ;         (defrule
    ;         (up-group-size g: g-current-group > 0)
    ;         (goal g-current-group-destination-split-goal 77777)
    ;         (player-in-game focus-player)
    ;         (stance-toward focus-player enemy)
    ;         (or
    ;             (up-compare-flag g-current-group-flag == RAID-MODE)
    ;             (or
    ;                 (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP)
    ;                 (up-compare-flag g-current-group-type-flag == MONK-GROUP)))
    ;         =>
    ;         (up-remove-objects search-remote object-data-language-id == lang-id-town-center)    ;removes TC and all TC annex pieces
    ;         (up-remove-objects search-remote object-data-type == castle)
    ;         (up-remove-objects search-remote object-data-type == krepost)
    ;         (up-remove-objects search-remote object-data-class == tower-class)
    ;         (up-get-search-state g-local-total)
    ;         )

    ;         (defrule
    ;         (up-group-size g: g-current-group > 0)
    ;         (goal g-current-group-destination-split-goal 77777)
    ;         (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
    ;         (up-compare-goal g-remote-total < 40)
    ;         =>
    ;         (up-modify-sn sn-focus-player-number c:+ 1)
    ;         (up-jump-rule -3)
    ;         )

    ;Loop #1
    ;Remove unreachable objects
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77777)
    (up-compare-goal g-remote-total > 0)
    =>
    (up-set-group search-local g: g-current-group)
    (set-goal g-loop-counter 0)
    (up-log-data 0 CHAT-LOOP-ID c: 1)
    )

        ;Remove TC annex objects
        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-current-group-destination-split-goal 77777)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-object-data object-data-type != town-center)
        (up-object-data object-data-language-id == lang-id-town-center)
        (up-compare-goal g-loop-counter < 39)
        =>
        (up-remove-objects search-remote object-data-index g:== g-loop-counter)
        (up-get-search-state g-local-total)
        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
        (up-jump-rule -1)
        )

        ;Check if destination is reachable or isn't a valid building
        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-current-group-destination-split-goal 77777)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-get-point position-object g-point-x)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-current-group-destination-split-goal 77777)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-set-target-object search-local c: 0)
        (up-path-distance g-point-x 0 == 65535) ;used to be strict path distance (1)
        (up-compare-goal g-loop-counter < 39)
        =>
        (up-remove-objects search-remote object-data-index g:== g-loop-counter)
        (up-get-search-state g-local-total)
        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
        (up-jump-rule -3)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-current-group-destination-split-goal 77777)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
        (up-jump-rule -4)
        )

    (defrule
    (true)
    =>
    (up-reset-search 1 1 0 0)
    )

    ;Find best new target
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77777)
    (up-compare-goal g-remote-total > 0)
    =>
    (set-goal g-current-group-destination-split-goal 77778)
    (set-goal g-loop-counter 0)
    (set-goal g-current-group-best-destination-score -99999)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Found new destinations, group %d" g: g-current-group)
    ; (up-chat-data-to-all "Found new destinations, group %d" g: g-current-group)
    )

    ;Find best new target if no objects found
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77777)
    (goal g-remote-total 0)
    =>
    (set-goal g-current-group-destination-split-goal 77779)
    (set-goal g-loop-counter 0)
    (set-goal g-current-group-best-destination-score -99999)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Explore around town, group %d" g: g-current-group)
    ; (up-chat-data-to-all "Explore around town, group %d" g: g-current-group)
    )

    ;Put remote objects in local list
    (defrule
    (up-compare-goal g-current-group-destination-split-goal != 77778)
    =>
    (up-jump-rule 5)
    )

        (load "The General 1.2/Functions/StoreRemoteList")  ;5 rules

    ;Loop #2
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77778)
    (up-group-size c: 0 > 0)
    =>
    (up-full-reset-search)
    (up-set-group search-local c: 0)
    (up-get-search-state g-local-total)
    (set-goal g-loop-counter 0)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Calculate destination scores" c: 0)
    (up-log-data 0 CHAT-LOOP-ID c: 2)
    )

        ;---------------------------------------
        ;   Calculate score for each building
        ;---------------------------------------

            ;Get distance score
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            =>
            (up-set-target-point g-position-self-x)
            (up-get-object-data object-data-distance g-current-group-destination-score)
            (up-modify-goal g-current-group-destination-score c:* -1) ;make distance score negative, so that smallest distance has highest score
            )

            ;Get attack score (siege only)
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (or
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (or
                    (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                    (up-compare-flag g-current-group-type-flag == CANNON-GROUP)))
            (up-set-target-object search-local g: g-loop-counter)
            =>
            (up-get-object-data object-data-base-attack g-temp)
            (up-modify-goal g-temp c:min 15)    ;don't overemphasize bombard towers
            (up-modify-goal g-temp c:* 4)
            (up-modify-goal g-current-group-destination-score g:+ g-temp)
            )

            ;Prioritize castles and TCs (siege only)
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (or
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (or
                    (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                    (up-compare-flag g-current-group-type-flag == CANNON-GROUP)))
            (up-set-target-object search-local g: g-loop-counter)
            (up-object-data object-data-class == building-class)
            (up-object-data object-data-range > 0)
            =>
            (up-modify-goal g-current-group-destination-score c:+ 15)
            )

            ;Prefer lumber and mining camps
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (up-compare-flag g-current-group-type-flag != RAM-GROUP)
            (up-compare-flag g-current-group-type-flag != RANGED-SIEGE-GROUP)
            (or
                (up-object-data object-data-type == lumber-camp)
                (up-object-data object-data-type == mining-camp))
            =>
            (up-modify-goal g-current-group-destination-score c:+ 100)
            )

            ;Prefer mills
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (up-compare-flag g-current-group-type-flag != RAM-GROUP)
            (up-compare-flag g-current-group-type-flag != RANGED-SIEGE-GROUP)
            (up-object-data object-data-type == mill)
            =>
            (up-modify-goal g-current-group-destination-score c:+ 50)
            )

            ;Don't prefer houses
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (up-compare-flag g-current-group-type-flag != RAM-GROUP)
            (up-compare-flag g-current-group-type-flag != RANGED-SIEGE-GROUP)
            (up-object-data object-data-type == house)
            =>
            (up-modify-goal g-current-group-destination-score c:- 20)
            )

            ;Don't prioritize gates
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (up-compare-flag g-current-group-type-flag != RAM-GROUP)
            (up-compare-flag g-current-group-type-flag != RANGED-SIEGE-GROUP)
            (up-object-data object-data-class == gate-class)
            =>
            (up-modify-goal g-current-group-destination-score c:- 50)
            )

            ;Don't prioritize walls
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (up-compare-flag g-current-group-type-flag != RAM-GROUP)
            (up-compare-flag g-current-group-type-flag != RANGED-SIEGE-GROUP)
            (up-object-data object-data-class == wall-class)
            =>
            (up-modify-goal g-current-group-destination-score c:- 300)
            )

            ;Avoid ranged buildings if ranged units are in the group
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (or
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == MONK-GROUP))
            (up-object-data object-data-range > 0)
            =>
            (up-modify-goal g-current-group-destination-score c:- 500)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (or
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (or
                    (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                    (up-compare-flag g-current-group-type-flag == CANNON-GROUP)))
            =>
            (up-jump-rule 7)
            )

                ;Avoid destinations near defenses
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-destination-split-goal 77778)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-flag != ASSAULT-MODE)
                =>
                (up-get-point position-object g-point-x)
                (up-set-target-point g-point-x)
                (up-reset-search 0 0 1 1)
                (set-strategic-number sn-focus-player-number 1)
                )

                    ;If current focus player isn't an enemy in the game, check next player
                    (defrule
                    (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
                    (up-group-size g: g-current-group > 0)
                    (nand
                        (player-in-game focus-player)
                        (stance-toward focus-player enemy))
                    =>
                    (up-modify-sn sn-focus-player-number c:+ 1)
                    (up-jump-rule -1)
                    )

                    ;Loop #3
                    ;Check if defense is nearby
                    (defrule
                    (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-destination-split-goal 77778)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-compare-flag g-current-group-flag != ASSAULT-MODE)
                    =>
                    (up-find-remote c: town-center c: 8)
                    (up-find-remote c: tower-class c: 20)
                    (up-find-remote c: castle c: 6)
                    (up-find-remote c: krepost c: 6)
                    (up-remove-objects search-remote object-data-type == outpost)
                    (up-remove-objects search-remote object-data-hitpoints <= 0)
                    (set-goal g-loop-counter2 0)
                    (up-log-data 0 CHAT-LOOP-ID c: 3)
                    )

                        ;If defense is nearby, give huge penalty
                        (defrule
                        (up-group-size g: g-current-group > 0)
                        (goal g-current-group-destination-split-goal 77778)
                        (up-set-target-object search-local g: g-loop-counter)
                        (up-compare-flag g-current-group-flag != ASSAULT-MODE)
                        (up-set-target-object search-remote g: g-loop-counter2)
                        (up-object-data object-data-distance < 12)
                        =>
                        (up-modify-goal g-current-group-destination-score c:- 500)
                        )

                        ;Give smaller penalty for all defenses
                        (defrule
                        (up-group-size g: g-current-group > 0)
                        (goal g-current-group-destination-split-goal 77778)
                        (up-set-target-object search-local g: g-loop-counter)
                        (up-compare-flag g-current-group-flag != ASSAULT-MODE)
                        (up-set-target-object search-remote g: g-loop-counter2)
                        =>
                        (up-get-object-data object-data-distance g-temp)
                        (up-modify-goal g-temp c:* 5)
                        (up-modify-goal g-temp c:- 100)  ;penalty will range between -80 and 0
                        (up-modify-goal g-current-group-destination-score g:+ g-temp)
                        )

                        (defrule
                        (up-group-size g: g-current-group > 0)
                        (goal g-current-group-destination-split-goal 77778)
                        (up-set-target-object search-local g: g-loop-counter)
                        (up-compare-flag g-current-group-flag != ASSAULT-MODE)
                        (up-modify-goal g-loop-counter2 c:+ 1)
                        (up-set-target-object search-remote g: g-loop-counter2)
                        (up-compare-goal g-loop-counter2 < 40)
                        =>
                        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                        (up-jump-rule -3)
                        )

                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-destination-split-goal 77778)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-compare-flag g-current-group-flag != ASSAULT-MODE)
                    (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
                    =>
                    (up-modify-sn sn-focus-player-number c:+ 1)
                    (up-reset-search 0 0 1 1)
                    (up-jump-rule -6)
                    )
            
            ;Avoid recent locations
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (or
                (up-object-data object-data-id g:== g-recent-target1)
                (or
                    (up-object-data object-data-id g:== g-recent-target2)
                    (or
                        (up-object-data object-data-id g:== g-recent-target3)
                        (or
                            (up-object-data object-data-id g:== g-recent-target4)
                            (up-object-data object-data-id g:== g-recent-target5)))))
            =>
            (up-modify-goal g-current-group-destination-score c:- 250)
            )

            ;Avoid locations near other group destinations
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP))
            =>
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            )
            
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP))
            (up-point-distance g-point-x g-group1-destination-x < 15)
            (up-compare-goal g-current-group != 1)
            (up-group-size c: 1 > 0)
            =>
            (up-get-point-distance g-point-x g-group1-destination-x g-temp)
            (up-modify-goal g-temp c:* 2)
            (up-modify-goal g-current-group-destination-score g:+ g-temp)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP))
            (up-point-distance g-point-x g-group2-destination-x < 15)
            (up-compare-goal g-current-group != 2)
            (up-group-size c: 2 > 0)
            =>
            (up-get-point-distance g-point-x g-group2-destination-x g-temp)
            (up-modify-goal g-temp c:* 2)
            (up-modify-goal g-current-group-destination-score g:+ g-temp)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP))
            (up-point-distance g-point-x g-group3-destination-x < 15)
            (up-compare-goal g-current-group != 3)
            (up-group-size c: 3 > 0)
            =>
            (up-get-point-distance g-point-x g-group3-destination-x g-temp)
            (up-modify-goal g-temp c:* 2)
            (up-modify-goal g-current-group-destination-score g:+ g-temp)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP))
            (up-point-distance g-point-x g-group4-destination-x < 15)
            (up-compare-goal g-current-group != 4)
            (up-group-size c: 4 > 0)
            =>
            (up-get-point-distance g-point-x g-group4-destination-x g-temp)
            (up-modify-goal g-temp c:* 2)
            (up-modify-goal g-current-group-destination-score g:+ g-temp)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP))
            (up-point-distance g-point-x g-group5-destination-x < 15)
            (up-compare-goal g-current-group != 5)
            (up-group-size c: 5 > 0)
            =>
            (up-get-point-distance g-point-x g-group5-destination-x g-temp)
            (up-modify-goal g-temp c:* 2)
            (up-modify-goal g-current-group-destination-score g:+ g-temp)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP))
            (up-point-distance g-point-x g-group6-destination-x < 15)
            (up-compare-goal g-current-group != 6)
            (up-group-size c: 6 > 0)
            =>
            (up-get-point-distance g-point-x g-group6-destination-x g-temp)
            (up-modify-goal g-temp c:* 2)
            (up-modify-goal g-current-group-destination-score g:+ g-temp)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            =>
            (up-get-object-data object-data-id g-temp)
            (up-log-data 0 "Destination Object ID: %d" g: g-temp)
            (up-get-object-data object-data-type g-temp)
            (up-log-data 0 "Destination Object Type: %d" g: g-temp)
            (up-get-object-data object-data-class g-temp)
            (up-log-data 0 "Destination Object Class: %d" g: g-temp)
            (up-log-data 0 "Destination Object Score: %d" g: g-current-group-destination-score)
            )

            ;Compare scores between current destination and best destination so far
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-goal g-current-group-destination-score g:> g-current-group-best-destination-score)    ;score of current destination is better than the score of the best destination so far
            =>
            (up-modify-goal g-current-group-best-destination-score g:= g-current-group-destination-score)
            (up-get-object-data object-data-id g-current-group-destination-object-id)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-destination-split-goal 77778)
            (up-compare-goal g-loop-counter g:< g-local-total)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-set-target-object search-local g: g-loop-counter)
            (up-compare-goal g-loop-counter < 40)
            =>
            (set-goal g-current-group-destination-score -99999)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -28)
            )

    ;Reset group 0 from code above
    (defrule
    (up-group-size c: 0 > 0)
    =>
    ; (up-modify-group-flag 0 c: 0)
    (up-reset-group c: 0)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-RESET-GROUP-0 c: 0)
    )

    ;Check if destination is reachable
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77778)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    =>
    (up-get-point position-object g-current-group-destination-x)
    (up-full-reset-search)
    (set-goal g-loop-counter 0)
    (up-set-group search-local g: g-current-group)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-current-group-destination-split-goal 77778)
        (up-set-target-by-id g: g-current-group-destination-object-id)
        (up-set-target-object search-local c: 0)
        (up-path-distance g-current-group-destination-x 0 == 65535) ;used to be strict path distance (1)
        (up-compare-goal g-loop-counter < 10)
        =>
        (generate-random-number 7)
        (up-get-fact random-number 0 g-temp4)
        (up-modify-goal g-temp4 c:- 4)  ;random number will be between -3 and 3
        (up-modify-goal g-current-group-destination-x g:+ g-temp4)
        (generate-random-number 7)
        (up-get-fact random-number 0 g-temp4)
        (up-modify-goal g-temp4 c:- 4)  ;random number will be between -3 and 3
        (up-modify-goal g-current-group-destination-y g:+ g-temp4)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-jump-rule -1)
        )

    ;Set destination
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77778)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-set-target-object search-local c: 0)
    (up-path-distance g-current-group-destination-x 0 != 65535) ;used to be strict path distance (1)
    =>
    (set-goal g-current-group-action PENDING)
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-x-goal-id g: g-current-group-destination-x)
    (up-set-indirect-goal g: g-current-group-destination-y-goal-id g: g-current-group-destination-y)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-SET-NEW-DESTINATION c: 1)
    (up-log-data 0 CHAT-SET-NEW-DESTINATION-X g: g-current-group-destination-x)
    (up-log-data 0 CHAT-SET-NEW-DESTINATION-Y g: g-current-group-destination-y)
    ; (up-send-flare g-current-group-destination-x)
    ; (up-chat-data-to-all "set new destination, ver %d" c: 1)
    )

    ;Update recent destination targets list
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77778)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-set-target-object search-local c: 0)
    (up-path-distance g-current-group-destination-x 0 != 65535) ;used to be strict path distance (1)
    (up-object-data object-data-id g:!= g-recent-target1)
    (up-object-data object-data-id g:!= g-recent-target2)
    (up-object-data object-data-id g:!= g-recent-target3)
    (up-object-data object-data-id g:!= g-recent-target4)
    (up-object-data object-data-id g:!= g-recent-target5)
    =>
    (up-modify-goal g-recent-target5 g:= g-recent-target4)
    (up-modify-goal g-recent-target4 g:= g-recent-target3)
    (up-modify-goal g-recent-target3 g:= g-recent-target2)
    (up-modify-goal g-recent-target2 g:= g-recent-target1)
    (up-modify-goal g-recent-target1 g:= g-current-group-destination-object-id)
    )

    ;Failed to find a building as a destination, try to circle around enemy TC
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77779)
    (player-in-game target-player)
    (players-building-type-count target-player town-center > 0)
    =>
    (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
    (up-set-target-point g-current-group-destination-x)
    (up-full-reset-search)
    (up-filter-distance c: -1 c: 25)
    (up-find-remote c: town-center c: 1)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77779)
    (or
        (not
            (player-in-game target-player))
        (or
            (players-building-type-count target-player town-center == 0)
            (not
                (up-set-target-object search-remote c: 0))))
    =>
    (up-jump-rule 2)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-current-group-destination-split-goal 77779)
        (player-in-game target-player)
        (players-building-type-count target-player town-center > 0)
        (up-set-target-object search-remote c: 0)
        =>
        (up-get-point position-object g-point-x)
        (up-cross-tiles g-current-group-destination-x g-point-x c: 16)
        (up-copy-point g-point2-x g-current-group-destination-x)
        (up-lerp-tiles g-point-x g-point2-x c: 25)
        (up-copy-point g-current-group-destination-x g-point-x)
        (up-bound-precise-point g-current-group-destination-x 0 c: 1)
        (set-goal g-current-group-destination-split-goal 77780)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-current-group-destination-split-goal 77780)
        =>
        (set-goal g-current-group-action PENDING)
        (set-goal g-current-group-destination-time 0)
        (up-set-indirect-goal g: g-current-group-destination-x-goal-id g: g-current-group-destination-x)
        (up-set-indirect-goal g: g-current-group-destination-y-goal-id g: g-current-group-destination-y)
        (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
        (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-SET-NEW-DESTINATION c: 2)
        (up-log-data 0 CHAT-SET-NEW-DESTINATION-X g: g-current-group-destination-x)
        (up-log-data 0 CHAT-SET-NEW-DESTINATION-Y g: g-current-group-destination-y)
        ; (up-send-flare g-current-group-destination-x)
        (up-chat-data-to-all "set new destination, ver %d" c: 2)
        )

    ;No enemy TC, find random point +/- 10 tiles away
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 77779)
    =>
    (generate-random-number 2)      ;random number is 1 or 2
    (up-get-fact random-number 0 g-temp3)
    (up-modify-goal g-temp3 c:* 2)  ;random number is now 2 or 4
    (up-modify-goal g-temp3 c:- 3)  ;random number is now -1 or 1
    (up-modify-goal g-temp3 c:* 10) ;random number is now -10 or 10
    (up-modify-goal g-current-group-destination-x g:+ g-temp3)
    (up-modify-goal g-current-group-destination-y g:- g-temp3)
    (up-bound-precise-point g-current-group-destination-x 0 c: 1)
    (up-set-indirect-goal g: g-current-group-destination-x-goal-id g: g-current-group-destination-x)
    (up-set-indirect-goal g: g-current-group-destination-y-goal-id g: g-current-group-destination-y)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-SET-NEW-DESTINATION c: 3)
    (up-log-data 0 CHAT-SET-NEW-DESTINATION-X g: g-current-group-destination-x)
    (up-log-data 0 CHAT-SET-NEW-DESTINATION-Y g: g-current-group-destination-y)
    ; (up-send-flare g-current-group-destination-x)
    ; (up-chat-data-to-all "set new destination, ver %d" c: 3)
    )

;----------------------------------------
;   Set Group Destination - Scout Mode
;----------------------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-destination-split-goal

    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-group-location-x-goal-id
    ;g-current-group-location-y-goal-id
    ;g-current-group-destination-x
    ;g-current-group-destination-y
    ;g-current-group-destination-x-goal-id
    ;g-current-group-destination-y-goal-id

    (defrule
    (up-group-size g: g-current-group > 0)
    (player-in-game target-player)
    (stance-toward target-player enemy)
    =>
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    (player-in-game target-player)
    (stance-toward target-player enemy)
    =>
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
    (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
    (set-goal g-current-group-destination-object-id PENDING)
    (set-goal g-current-group-destination-split-goal 111)
    )

    ;Search for enemy town center to scout around
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 111)
    (players-building-count target-player > 0)
    =>
    (up-full-reset-search)
    (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
    (up-set-target-point g-current-group-location-x)
    (up-find-remote c: town-center c: 10)
    (up-clean-search search-remote object-data-distance search-order-asc) ;older TCs usually have lower object ID
    )
    
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 111)
    (players-building-count target-player > 0)
    (up-set-target-object search-remote c: 0)
    =>
    (set-goal g-current-group-destination-split-goal 112)
    (up-get-object-data object-data-id g-current-group-destination-object-id)
    )

    ;Search for enemy dropsite to scout around
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 111)
    (players-building-count target-player > 0)
    =>
    (up-full-reset-search)
    (up-set-target-point g-current-group-location-x)
    (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
    (up-find-remote c: lumber-camp c: 10)
    (up-find-remote c: mining-camp c: 10)
    (up-find-remote c: mill c: 10)
    (up-clean-search search-remote object-data-distance search-order-asc)
    )
    
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 111)
    (players-building-count target-player > 0)
    (up-set-target-object search-remote c: 0)
    =>
    (set-goal g-current-group-destination-split-goal 113)
    (up-get-object-data object-data-id g-current-group-destination-object-id)
    )

    ;Search for enemy non-ranged building to scout around
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 111)
    (players-building-count target-player > 0)
    =>
    (up-full-reset-search)
    (up-set-target-point g-current-group-location-x)
    (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
    (up-find-remote c: building-class c: 40)
    (up-remove-objects search-remote object-data-range > 0)
    (up-clean-search search-remote object-data-distance search-order-asc)
    )
    
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 111)
    (players-building-count target-player > 0)
    (up-set-target-object search-remote c: 0)
    =>
    (set-goal g-current-group-destination-split-goal 114)
    (up-get-object-data object-data-id g-current-group-destination-object-id)
    )

    ;Search for enemy walls to scout around if no other buildings found
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 111)
    (players-building-count target-player > 0)
    =>
    (up-full-reset-search)
    (up-set-target-point g-current-group-location-x)
    (up-modify-sn sn-focus-player-number s:= sn-target-player-number)
    (up-find-remote c: gate-class c: 40)
    (up-find-remote c: wall-class c: 40)
    (up-remove-objects search-remote object-data-range > 0)
    (up-clean-search search-remote object-data-distance search-order-asc)
    )
    
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 111)
    (players-building-count target-player > 0)
    (up-set-target-object search-remote c: 0)
    =>
    (set-goal g-current-group-destination-split-goal 114)
    (up-get-object-data object-data-id g-current-group-destination-object-id)
    )

    ;Debug
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 111)
    (players-building-count target-player > 0)
    =>
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Group %d didn't find a building to scout around" g: g-current-group)
    ; (up-chat-data-to-all "Group %d didn't find a building to scout around" g: g-current-group)
    )
    
    ;Adjust destination point if exploring around TC
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 112)   ;exploring around town center
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    =>
    (up-get-point position-object g-point-x)
    (up-lerp-tiles g-point-x g-current-group-destination-x c: 25)
    (up-bound-precise-point g-point-x 0 c: 1)
    )
    
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 112)   ;exploring around town center
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x < 0) ;no destination set
    =>
    (up-get-point position-object g-point-x)
    (up-lerp-tiles g-point-x g-position-self-x c: 25)
    (up-bound-precise-point g-point-x 0 c: 1)
    )
    
    ;Adjust destination point if not exploring around TC
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-split-goal >= 113)   ;exploring around other building
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    =>
    (up-get-point position-object g-point-x)
    (up-lerp-tiles g-point-x g-current-group-destination-x c: 18)
    (up-bound-precise-point g-point-x 0 c: 1)
    )
    
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-split-goal >= 113)   ;exploring around other building
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x < 0) ;no destination set
    =>
    (up-get-point position-object g-point-x)
    (up-lerp-tiles g-point-x g-position-self-x c: 18)
    (up-bound-precise-point g-point-x 0 c: 1)
    )

    ; ;If adjusted destination is different, reset destination
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (up-compare-goal g-current-group-destination-split-goal >= 112)
    ; (players-building-count target-player > 0)
    ; (up-set-target-by-id g: g-current-group-destination-object-id)
    ; =>
    ; (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-point-x)
    ; )

    ;Check if destination is reachable
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-split-goal >= 112)
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    =>
    (set-goal g-loop-counter 0)
    (up-set-group search-local g: g-current-group)
    (set-goal g-temp5 234)
    (up-get-point-distance g-current-group-location-x g-point-x g-temp6)
    (up-modify-goal g-temp6 c:* 2)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-temp5 234)
        (up-set-target-object search-local c: 0)
        (or
            (up-path-distance g-point-x 0 == 65535) ;used to be strict path distance (1)
            (up-path-distance g-point-x 0 g:> g-temp6)) ;used to be strict path distance (1)
        (up-compare-goal g-loop-counter < 10)
        =>
        (set-goal g-temp5 235)
        (generate-random-number 7)
        (up-get-fact random-number 0 g-temp4)
        (up-modify-goal g-temp4 c:- 4)  ;random number will be between -3 and 3
        (up-modify-goal g-point-x g:+ g-temp4)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-temp5 235)
        (up-compare-goal g-loop-counter < 10)
        =>
        (generate-random-number 7)
        (up-get-fact random-number 0 g-temp4)
        (up-modify-goal g-temp4 c:- 4)  ;random number will be between -3 and 3
        (up-modify-goal g-point-y g:+ g-temp4)
        (up-bound-precise-point g-point-x 0 c: 1)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-get-fact game-time 0 g-point2-x)
        (up-get-fact player-number 0 g-point2-y)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-point2-x)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-point2-y)
        (up-log-data 0 "Destination unreachable, attempt %d" g: g-loop-counter)
        ; (up-chat-data-to-all "Destination unreachable, attempt %d" g: g-loop-counter)
        (set-goal g-temp5 234)
        (up-get-point-distance g-current-group-location-x g-point-x g-temp6)
        (up-modify-goal g-temp6 c:* 2)
        (up-jump-rule -2)
        )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-split-goal >= 112)
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-point-distance g-point-x g-current-group-destination-x >= 2)
    (up-compare-goal g-point-x >= 0)
    (up-compare-goal g-point-y >= 0)
    =>
    (up-copy-point g-current-group-destination-x g-point-x)
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-x-goal-id g: g-current-group-destination-x)
    (up-set-indirect-goal g: g-current-group-destination-y-goal-id g: g-current-group-destination-y)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Group %d reset scouting destination" g: g-current-group)
    ; (up-chat-data-to-all "Group %d reset scouting destination" g: g-current-group)
    )

    ;If group close enough to destination, pick new destination point
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 112)   ;exploring around town center
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    (up-compare-flag g-current-group-flag != CLOCKWISE)
    (up-point-distance g-current-group-location-x g-current-group-destination-x <= 7)
    =>
    (up-get-point position-object g-point-x)
    (up-cross-tiles g-current-group-destination-x g-point-x c: 8)
    (up-lerp-tiles g-point-x g-current-group-destination-x c: 25)
    (up-bound-precise-point g-point-x 0 c: 1)
    (up-copy-point g-current-group-destination-x g-point-x)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 112)   ;exploring around town center
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    (up-compare-flag g-current-group-flag != CLOCKWISE)
    (up-point-distance g-current-group-location-x g-current-group-destination-x <= 7)
    =>
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-x-goal-id g: g-current-group-destination-x)
    (up-set-indirect-goal g: g-current-group-destination-y-goal-id g: g-current-group-destination-y)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-NEW-SCOUT-POINT g: g-current-group)
    (up-log-data 0 CHAT-NEW-SCOUT-POINT-X g: g-current-group-destination-x)
    (up-log-data 0 CHAT-NEW-SCOUT-POINT-Y g: g-current-group-destination-y)
    ; (up-chat-data-to-all CHAT-NEW-SCOUT-POINT g: g-current-group)
    ; (up-send-flare g-current-group-destination-x)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 112)   ;exploring around town center
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    (up-compare-flag g-current-group-flag == CLOCKWISE)
    (up-point-distance g-current-group-location-x g-current-group-destination-x <= 7)
    =>
    (up-get-point position-object g-point-x)
    (up-cross-tiles g-current-group-destination-x g-point-x c: -8)
    (up-lerp-tiles g-point-x g-current-group-destination-x c: 25)
    (up-bound-precise-point g-point-x 0 c: 1)
    (up-copy-point g-current-group-destination-x g-point-x)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-destination-split-goal 112)   ;exploring around town center
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    (up-compare-flag g-current-group-flag == CLOCKWISE)
    (up-point-distance g-current-group-location-x g-current-group-destination-x <= 7)
    =>
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-x-goal-id g: g-current-group-destination-x)
    (up-set-indirect-goal g: g-current-group-destination-y-goal-id g: g-current-group-destination-y)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-NEW-SCOUT-POINT g: g-current-group)
    ; (up-chat-data-to-all CHAT-NEW-SCOUT-POINT g: g-current-group)
    ; (up-send-flare g-current-group-destination-x)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-split-goal >= 113)   ;exploring around other building
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    (up-compare-flag g-current-group-flag != CLOCKWISE)
    (up-point-distance g-current-group-location-x g-current-group-destination-x <= 7)
    =>
    (up-get-point position-object g-point-x)
    (up-cross-tiles g-current-group-destination-x g-point-x c: 6)
    (up-lerp-tiles g-point-x g-current-group-destination-x c: 15)
    (up-bound-precise-point g-point-x 0 c: 1)
    (up-copy-point g-current-group-destination-x g-point-x)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-split-goal >= 113)   ;exploring around other building
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    (up-compare-flag g-current-group-flag != CLOCKWISE)
    (up-point-distance g-current-group-location-x g-current-group-destination-x <= 7)
    =>
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-x-goal-id g: g-current-group-destination-x)
    (up-set-indirect-goal g: g-current-group-destination-y-goal-id g: g-current-group-destination-y)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-NEW-SCOUT-POINT g: g-current-group)
    ; (up-chat-data-to-all CHAT-NEW-SCOUT-POINT g: g-current-group)
    ; (up-send-flare g-current-group-destination-x)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-split-goal >= 113)   ;exploring around other building
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    (up-compare-flag g-current-group-flag == CLOCKWISE)
    (up-point-distance g-current-group-location-x g-current-group-destination-x <= 7)
    =>
    (up-get-point position-object g-point-x)
    (up-cross-tiles g-current-group-destination-x g-point-x c: -6)
    (up-lerp-tiles g-point-x g-current-group-destination-x c: 15)
    (up-bound-precise-point g-point-x 0 c: 1)
    (up-copy-point g-current-group-destination-x g-point-x)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-destination-split-goal >= 113)   ;exploring around other building
    (players-building-count target-player > 0)
    (up-set-target-by-id g: g-current-group-destination-object-id)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    (up-compare-flag g-current-group-flag == CLOCKWISE)
    (up-point-distance g-current-group-location-x g-current-group-destination-x <= 7)
    =>
    (set-goal g-current-group-destination-time 0)
    (up-set-indirect-goal g: g-current-group-destination-x-goal-id g: g-current-group-destination-x)
    (up-set-indirect-goal g: g-current-group-destination-y-goal-id g: g-current-group-destination-y)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-NEW-SCOUT-POINT g: g-current-group)
    ; (up-chat-data-to-all CHAT-NEW-SCOUT-POINT g: g-current-group)
    ; (up-send-flare g-current-group-destination-x)
    )

;--------------------------------------
;   Check if Dangerous Object Nearby
;--------------------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-flag-goal-id
    ;g-current-group-flag

    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y

    ;If approaching a dangerous object like a castle, TC, or tower, go around it

    ;Setup
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-modify-flag g-current-group-flag c:- DANGEROUS-OBJECT-NEARBY)
    (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
    (up-set-target-point g-current-group-location-x)
    (set-strategic-number sn-focus-player-number 0)
    )

        ;If current focus player isn't an enemy in the game, check next player
        (defrule
        (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
        (up-group-size g: g-current-group > 0)
        (nand
            (player-in-game focus-player)
            (stance-toward focus-player enemy))
        =>
        (up-modify-sn sn-focus-player-number c:+ 1)
        (up-jump-rule -1)
        )

        ;Check for nearby objects to avoid
        (defrule
        (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
        (up-group-size g: g-current-group > 0)
        =>
        (up-set-target-point g-current-group-location-x)
        (up-reset-filters)
        (up-filter-distance c: -1 c: 20)
        (up-filter-exclude -1 actionid-explore orderid-explore livestock-class)
        (up-find-remote c: castle c: 40)
        (up-find-remote c: town-center c: 40)
        (up-find-remote c: tower-class c: 40)
        (up-remove-objects search-remote object-data-type == outpost)
        (up-get-search-state g-local-total)
        )

        ;Check next player
        (defrule
        (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
        (up-group-size g: g-current-group > 0)
        (goal g-remote-total 0)
        =>
        (up-modify-sn sn-focus-player-number c:+ 1)
        (up-jump-rule -3)
        )

    ;Loop #4
    ;Remove TCs that can't garrison because they're damaged
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-remote-total > 0)
    =>
    (set-goal g-loop-counter 0)
    (up-log-data 0 CHAT-LOOP-ID c: 4)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-object-data object-data-type == town-center)
        (up-get-object-data object-data-hitpoints g-temp)
        (up-get-object-data object-data-maxhp g-temp2)
        (up-modify-goal g-temp g:%/ g-temp2)
        (up-compare-goal g-temp < 20)   ;TC too damaged to garrison
        =>
        (up-remove-objects search-remote object-data-index g:== g-loop-counter)
        (up-get-search-state g-local-total)
        (up-jump-rule -1)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
        (up-jump-rule -2)
        )

    ;If dangerous object found, set flag
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-remote-total > 0)
    =>
    (up-modify-flag g-current-group-flag c:+ DANGEROUS-OBJECT-NEARBY)
    (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
    )

;-------------------------------------------
;   Check if in range of dangerous object
;-------------------------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-flag-goal-id
    ;g-current-group-flag
    ;g-dangerous-object-range

    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-group-location-x-goal-id
    ;g-current-group-location-y-goal-id
    ;g-current-group-destination-x
    ;g-current-group-destination-y
    ;g-current-group-destination-x-goal-id
    ;g-current-group-destination-y-goal-id
    ;g-dangerous-object-x
    ;g-dangerous-object-y

    ;Setup
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-modify-flag g-current-group-flag c:- WITHIN-RANGE-OF-DANGEROUS-BUILDING)
    (up-modify-flag g-current-group-flag c:- WITHIN-RETREAT-RANGE-OF-DANGEROUS-BUILDING)
    (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
    (up-set-target-point g-current-group-location-x)
    (set-strategic-number sn-focus-player-number 1)
    )

        ;If current focus player isn't an enemy in the game, check next player
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
        (nand
            (player-in-game focus-player)
            (stance-toward focus-player enemy))
        =>
        (up-modify-sn sn-focus-player-number c:+ 1)
        (up-jump-rule -1)
        )

        ;Check for nearby objects to avoid
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
        =>
        (up-set-target-point g-current-group-location-x)
        (up-reset-filters)
        (up-filter-distance c: -1 c: 20)
        (up-filter-exclude -1 actionid-explore orderid-explore livestock-class)
        (up-find-remote c: castle c: 40)
        (up-find-remote c: town-center c: 40)
        (up-find-remote c: tower-class c: 40)
        (up-remove-objects search-remote object-data-type == outpost)
        (up-get-search-state g-local-total)
        )

        ; ;If object found, only keep closest object in remote list
        ; (defrule
        ; (up-group-size g: g-current-group > 0)
        ; (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        ; (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
        ; (up-compare-goal g-remote-total > 0)
        ; =>
        ; (up-clean-search search-remote object-data-distance search-order-asc)
        ; (up-remove-objects search-remote object-data-index > 0)     ;leave only one object in list
        ; )

        ;Check next player
        (defrule
        (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        =>
        (up-modify-sn sn-focus-player-number c:+ 1)
        (up-jump-rule -3)
        )

    ;Loop #5
    ;If group is in range of dangerous object, set flag
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
    (up-compare-goal g-remote-total > 0)
    =>
    (set-goal g-loop-counter 0)
    (up-set-target-point g-current-group-location-x)
    (up-log-data 0 CHAT-LOOP-ID c: 5)
    )

        ;If unit is within building's range +3 (+1 for towers), consider group to be within range of building
        ;The additional range accounts for the radius of the building
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-object-data object-data-class == tower-class)
        (up-get-object-data object-data-range g-dangerous-object-range)
        (up-get-object-data object-data-point-x g-dangerous-object-x)
        (up-get-object-data object-data-point-y g-dangerous-object-y)
        (up-modify-goal g-dangerous-object-range c:+ 1) ;increase range to account for building size
        =>
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-set-group search-local g: g-current-group)
        (up-set-target-point g-dangerous-object-x)
        (up-remove-objects search-local object-data-distance g:> g-dangerous-object-range)
        (up-get-search-state g-local-total)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-object-data object-data-class != tower-class)
        (up-get-object-data object-data-range g-dangerous-object-range)
        (up-get-object-data object-data-point-x g-dangerous-object-x)
        (up-get-object-data object-data-point-y g-dangerous-object-y)
        (up-modify-goal g-dangerous-object-range c:+ 3) ;increase range to account for building size
        =>
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-set-group search-local g: g-current-group)
        (up-set-target-point g-dangerous-object-x)
        (up-remove-objects search-local object-data-distance g:> g-dangerous-object-range)
        (up-get-search-state g-local-total)
        )
        
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-flag c:+ WITHIN-RANGE-OF-DANGEROUS-BUILDING)
        (up-modify-flag g-current-group-flag c:+ WITHIN-RETREAT-RANGE-OF-DANGEROUS-BUILDING)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-GROUP-IN-RANGE g: g-current-group)
        ; (up-chat-data-to-all CHAT-GROUP-IN-RANGE g: g-current-group)
        (up-jump-rule 6)
        )

        ;If unit is within building's range +7 (+5 for towers), consider group to still be within retreat range
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-object-data object-data-class == tower-class)
        (up-get-object-data object-data-range g-dangerous-object-range)
        (up-get-object-data object-data-point-x g-dangerous-object-x)
        (up-get-object-data object-data-point-y g-dangerous-object-y)
        (up-modify-goal g-dangerous-object-range c:+ 5) ;increase range to account for building size
        =>
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-set-group search-local g: g-current-group)
        (up-set-target-point g-dangerous-object-x)
        (up-remove-objects search-local object-data-distance g:> g-dangerous-object-range)
        (up-get-search-state g-local-total)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-object-data object-data-class != tower-class)
        (up-get-object-data object-data-range g-dangerous-object-range)
        (up-get-object-data object-data-point-x g-dangerous-object-x)
        (up-get-object-data object-data-point-y g-dangerous-object-y)
        (up-modify-goal g-dangerous-object-range c:+ 7) ;increase range to account for building size
        =>
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-set-group search-local g: g-current-group)
        (up-set-target-point g-dangerous-object-x)
        (up-remove-objects search-local object-data-distance g:> g-dangerous-object-range)
        (up-get-search-state g-local-total)
        )
        
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-flag c:+ WITHIN-RETREAT-RANGE-OF-DANGEROUS-BUILDING)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-GROUP-IN-RANGE g: g-current-group)
        ; (up-chat-data-to-all CHAT-GROUP-IN-RANGE g: g-current-group)
        (up-jump-rule 3)
        )

        ;If object is attacking a unit in the group, consider group within range
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-get-object-data object-data-id g-temp)
        =>
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-set-group search-local g: g-current-group)
        (up-remove-objects search-local object-data-attacker-id g:!= g-temp)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-local-total > 0)
        =>
        (up-modify-flag g-current-group-flag c:+ WITHIN-RANGE-OF-DANGEROUS-BUILDING)
        (up-modify-flag g-current-group-flag c:+ WITHIN-RETREAT-RANGE-OF-DANGEROUS-BUILDING)
        (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-GROUP-IN-RANGE g: g-current-group)
        ; (up-chat-data-to-all CHAT-GROUP-IN-RANGE g: g-current-group)
        (up-jump-rule 1)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        =>
        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
        (up-jump-rule -9)
        )

;----------------
;   Reset group
;----------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-action
    ;g-current-group-action-goal-id
    ;g-current-group-flag
    ;g-current-group-flag-goal-id
    ;g-current-group-target-object-id
    ;g-current-group-target-object-goal-id
    ;g-current-group-avoidance-counter
    ;g-current-group-avoidance-counter-goal-id

    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-group-location-x-goal-id
    ;g-current-group-location-y-goal-id

    ;Reset if idle
    (defrule
    (true)
    =>
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
    )

    ;Reset all group info if group dies
    (defrule
    (game-time > 5)
    (up-group-size g: g-current-group == 0)
    (up-compare-goal g-current-group-action != PENDING)
    =>
    (up-modify-group-flag 0 g: g-current-group)
    (up-reset-group g: g-current-group)
    (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
    (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-GROUP-DIED g: g-current-group)
    ; (up-chat-data-to-all CHAT-GROUP-DIED g: g-current-group)
    (up-jump-rule 1)
    )
        (defrule
        (game-time > 5)
        (up-group-size g: g-current-group == 0)
        (up-compare-goal g-current-group-target-object-id != PENDING)
        =>
        (up-modify-group-flag 0 g: g-current-group)
        (up-reset-group g: g-current-group)
        (up-set-indirect-goal g: g-current-group-flag-goal-id c: 0)
        (up-set-indirect-goal g: g-current-group-type-flag-goal-id c: 0)
        (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
        (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
        (up-set-indirect-goal g: g-current-group-location-x-goal-id c: PENDING)
        (up-set-indirect-goal g: g-current-group-location-y-goal-id c: PENDING)
        (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
        (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
        (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
        (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id c: 0)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 CHAT-GROUP-DIED g: g-current-group)
        ; (up-chat-data-to-all CHAT-GROUP-DIED g: g-current-group)
        )

    ;Search for idle units that are supposed to be moving
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-action != PENDING)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    ; (up-compare-goal g-current-group-action != GROUP-ATTACK)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-remove-objects search-local object-data-idling != 1)
    (up-get-search-state g-local-total)
    )

    ;Reset group if group has idle units
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-action != PENDING)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (or
        (and
            (up-compare-goal g-current-group-action != GROUP-ATTACK)
            (up-compare-goal g-local-total > 0))
        (goal g-current-group-target-object-goal-id PENDING))
    =>
    (set-goal g-current-group-action PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Reset group task" c: 0)
    ; (chat-to-player my-player-number "Reset group task")
    )

    ;If dangerous object nearby and scouting around, make sure group isn't attacking
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-action == GROUP-ATTACK)
    (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
    (up-compare-flag g-current-group-flag == SCOUT-MODE)
    =>
    (set-goal g-current-group-action PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-modify-goal g-current-group-avoidance-counter c:+ 1)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Return to scouting, counter %d" g: g-current-group-avoidance-counter)
    ; (up-chat-data-to-all "Return to scouting, counter %d" g: g-current-group-avoidance-counter)
    (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id g: g-current-group-avoidance-counter)
    )

    ;If group is safely away from dangerous object, stop retreating
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (up-compare-flag g-current-group-flag != WITHIN-RETREAT-RANGE-OF-DANGEROUS-BUILDING)
    =>
    (set-goal g-current-group-action PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-get-point-distance g-current-group-location-x g-dangerous-object-x g-temp)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Successfully avoided object" c: 0)
    ; (chat-to-player my-player-number "Successfully avoided object")
    )

    ;Reset group every 10 seconds if moving
    (defrule
    (timer-triggered t-10-sec)
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-action GROUP-MOVE)
    =>
    (set-goal g-current-group-action PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    )

    ;Reset gathering group if under attack
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-action GROUP-GATHER)
    =>
    (up-set-group search-local g: g-current-group)
    (up-remove-objects search-local object-data-attacker-id < 0)
    (up-get-search-state g-local-total)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-action GROUP-GATHER)
    (up-compare-goal g-local-total > 0)
    =>
    (set-goal g-current-group-action PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    )

    ;If group objects lost group flag, reset flag
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-set-group search-local g: g-current-group)
    (up-remove-objects search-local object-data-group-flag >= 0)
    (up-get-search-state g-local-total)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-local-total > 0)
    =>
    (up-set-group search-local g: g-current-group)
    (up-modify-group-flag 0 g: g-current-group)
    (up-reset-group g: g-current-group)
    (up-create-group 0 0 g: g-current-group)
    (up-modify-group-flag 1 g: g-current-group)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Group %d, add missing group flags" g: g-current-group)
    ; (up-chat-data-to-player my-player-number "Group %d, add missing group flags" g: g-current-group)
    )

;------------------------------------------------
;   Make Sure All Units In Group Are Attacking
;------------------------------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-action
    ;g-current-group-action-goal-id
    ;g-current-group-type-flag
    ;g-current-group-type-flag-goal-id
    ;g-current-group-target-object-id
    ;g-current-group-target-object-goal-id

    ;Reset if idle
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    )

    ;Search for idle units that are supposed to be attacking
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-action == GROUP-ATTACK)
    (up-compare-flag g-current-group-type-flag != TREBUCHET-GROUP)
    (up-compare-goal g-current-group-target-object-id > PENDING)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    ; (up-remove-objects search-local object-data-target-id g:== g-current-group-target-object-id)
    (up-remove-objects search-local object-data-next-attack > 0)
    (up-remove-objects search-local object-data-target-id >= 0)
    (up-remove-objects search-local object-data-idling == 0)
    (up-get-search-state g-local-total)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-action == GROUP-ATTACK)
    (up-compare-flag g-current-group-type-flag == MONK-GROUP)
    (up-compare-goal g-current-group-target-object-id > PENDING)
    =>
    (up-remove-objects search-local object-data-carry < 100)
    (up-get-search-state g-local-total)
    )

    ;Reset group if group has idle units
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-action == GROUP-ATTACK)
    (up-compare-flag g-current-group-type-flag != TREBUCHET-GROUP)
    (up-compare-goal g-local-total > 0)
    (up-set-target-by-id g: g-current-group-target-object-id)
    (up-object-data object-data-hitpoints > 0)
    =>
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "order group %d idle soldiers to attack target" g: g-current-group)
    ; (up-chat-data-to-all "order group %d idle soldiers to attack target" g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-objects 1 action-default -1 -1)
    )

    ;Loop #6
    ;Reset idle trebuchets
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
    (up-set-target-by-id g: g-current-group-target-object-id)
    =>
    (up-set-group search-local g: g-current-group)
    (set-goal g-loop-counter 0)
    (up-log-data 0 CHAT-LOOP-ID c: 6)
    )

        ; (defrule
        ; (up-group-size g: g-current-group > 0)
        ; (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
        ; (up-set-target-by-id g: g-current-group-target-object-id)
        ; (up-set-target-object search-local g: g-loop-counter)
        ; (up-object-data object-data-class == packed-trebuchet-class)
        ; (goal g-current-group-action GROUP-ATTACK)
        ; =>
        ; (up-get-object-data object-data-action g-temp)
        ; (up-chat-data-to-all "Packed Action %d" g: g-temp)
        ; (up-get-object-data object-data-idling g-temp)
        ; (up-chat-data-to-all "Packed Idling %d" g: g-temp)
        ; (up-get-object-data object-data-target-time g-temp)
        ; (up-chat-data-to-all "Packed Target Time %d" g: g-temp)
        ; (up-get-object-data object-data-target-id g-temp)
        ; (up-chat-data-to-all "Packed Target ID %d" g: g-temp)
        ; )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
        (up-set-target-object search-local g: g-loop-counter)
        ; (up-object-data object-data-class == packed-trebuchet-class)
        (up-object-data object-data-idling == 1)
        ; (up-object-data object-data-attack-stance == stance-no-attack)
        (up-object-data object-data-target-id < 0)
        (up-set-target-by-id g: g-current-group-target-object-id)
        =>
        (up-remove-objects search-local object-data-index g:!= g-loop-counter)
        (up-target-objects 1 action-default -1 stance-aggressive)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Order treb to attack, group %d" g: g-current-group)
        ; (up-chat-data-to-all "Order treb to attack, group %d" g: g-current-group)
        (up-jump-rule 1)
        )

        ; (defrule
        ; (up-group-size g: g-current-group > 0)
        ; (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
        ; (up-set-target-by-id g: g-current-group-target-object-id)
        ; (up-set-target-object search-local g: g-loop-counter)
        ; (or
        ;     (and
        ;         (up-object-data object-data-class == packed-trebuchet-class)
        ;         (goal g-current-group-action GROUP-ATTACK))
        ;     (up-object-data object-data-class == unpacked-trebuchet-class))
        ; (up-object-data object-data-idling == 0)
        ; (up-object-data object-data-target-time == -2)
        ; =>
        ; (up-target-point 0 action-stop -1 -1)
        ; (up-chat-data-to-all "Reset treb, group %d" g: g-current-group)
        ; (up-jump-rule 1)
        ; )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
        (up-set-target-by-id g: g-current-group-target-object-id)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-local g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
        (up-jump-rule -2)
        )

    ; ;Order monks who can't convert to stop moving
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (up-compare-flag g-current-group-type-flag == MONK-GROUP)
    ; (goal g-current-group-action GROUP-ATTACK)
    ; =>
    ; (up-full-reset-search)
    ; (up-set-group search-local g: g-current-group)
    ; (up-remove-objects search-local object-data-carry >= 100)   ;remove monks that have enough faith to convert
    ; (up-remove-objects search-local object-data-action != actionid-move)
    ; (up-target-point 0 action-stop -1 -1)
    ; (up-chat-data-to-all "Stop moving group %d monks" g: g-current-group)
    ; )

    ;Loop #7
    ;Order monks to heal if can't convert
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-type-flag == MONK-GROUP)
    (goal g-current-group-action GROUP-ATTACK)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-remove-objects search-local object-data-carry >= 100)   ;remove monks that have enough faith to convert
    (up-remove-objects search-local object-data-action == actionid-heal)
    (up-remove-objects search-local object-data-index > 0)      ;only allow one monk to heal at a time
    (up-set-group search-remote g: g-current-group)
    (set-goal g-loop-counter 0)
    (up-log-data 0 CHAT-LOOP-ID c: 7)
    )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-type-flag == MONK-GROUP)
        (goal g-current-group-action GROUP-ATTACK)
        (up-set-target-object search-local c: 0)
        (up-get-object-data object-data-id g-temp)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-object-data object-data-id g:== g-temp) ;monk in local and remote list is identical
        (up-compare-goal g-loop-counter < 39)
        =>
        (up-modify-goal g-loop-counter c:+ 1)
        (up-jump-rule -1)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-type-flag == MONK-GROUP)
        (goal g-current-group-action GROUP-ATTACK)
        (up-set-target-object search-local c: 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-get-object-data object-data-maxhp g-temp2)
        (up-object-data object-data-hitpoints g:< g-temp2)   ;other monk in group is hurt
        =>
        (up-remove-objects search-local object-data-index > 0)
        (up-remove-objects search-remote object-data-index g:!= g-loop-counter)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-type-flag == MONK-GROUP)
        (goal g-current-group-action GROUP-ATTACK)
        (up-set-target-object search-local c: 0)
        (up-set-target-object search-remote c: 0)
        (up-get-object-data object-data-maxhp g-temp2)
        (up-object-data object-data-hitpoints g:< g-temp2)   ;other monk in group is hurt
        =>
        (up-target-objects 1 action-default -1 -1)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Heal unit in group %d" g: g-current-group)
        ; (up-chat-data-to-all "Heal unit in group %d" g: g-current-group)
        (up-jump-rule 1)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-type-flag == MONK-GROUP)
        (goal g-current-group-action GROUP-ATTACK)
        (up-set-target-object search-local c: 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
        (up-jump-rule -4)
        )

;-----------------------------------
;   Retreat From Dangerous Object
;-----------------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-flag-goal-id
    ;g-current-group-flag
    ;g-current-group-type-flag-goal-id
    ;g-current-group-type-flag
    ;g-current-group-action
    ;g-current-group-action-goal-id
    ;g-current-group-target-object-id
    ;g-current-group-target-object-goal-id
    ;g-dangerous-object-id
    ;g-dangerous-object-range
    ;g-current-group-avoidance-location-flag

    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-group-location-x-goal-id
    ;g-current-group-location-y-goal-id
    ;g-current-group-destination-x
    ;g-current-group-destination-y
    ;g-current-group-destination-x-goal-id
    ;g-current-group-destination-y-goal-id
    ;g-dangerous-object-x
    ;g-dangerous-object-y
    ;g-dangerous-object-avoidance-location1-x
    ;g-dangerous-object-avoidance-location1-y
    ;g-dangerous-object-avoidance-location2-x
    ;g-dangerous-object-avoidance-location2-y

    ;Setup
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
    (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
    (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
    (set-goal g-current-group-avoidance-location-flag 0)
    (set-strategic-number sn-focus-player-number 1)
    (up-full-reset-search)
    (up-set-target-point g-current-group-location-x)
    (up-filter-distance c: -1 c: 20)
    )

    ;Decrease avoidance counter every 15 seconds
    (defrule
    (up-group-size g: g-current-group > 0)
    (timer-triggered t-30-sec)
    (up-compare-goal g-current-group-avoidance-counter > 0)
    =>
    (up-modify-goal g-current-group-avoidance-counter c:- 1)
    (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id g: g-current-group-avoidance-counter)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Reduce counter %d" g: g-current-group-avoidance-counter)
    ; (up-chat-data-to-all "Reduce counter %d" g: g-current-group-avoidance-counter)
    )

        ;Don't avoid dangerous objects if we are scouting
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == SCOUT-MODE)
        =>
        (up-get-search-state g-local-total)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Group %d is scouting, don't avoid dangerous object" g: g-current-group)
        ; (up-chat-data-to-all "Group %d is scouting, don't avoid dangerous object" g: g-current-group)
        (up-jump-rule 4)
        )

        ;Don't avoid dangerous objects if we are attacking a target unit
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-current-group-action == GROUP-ATTACK)
        (up-set-target-by-id g: g-current-group-target-object-id)
        (or
            (up-object-data object-data-speed > 0)
            (up-object-data object-data-class == unpacked-trebuchet-class))
        (up-object-data object-data-hitpoints < 8)
        (up-object-data object-data-distance < 3)
        (up-object-data object-data-range < 3)
        (false)
        =>
        (up-get-search-state g-local-total)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Group %d don't avoid dangerous object" g: g-current-group)
        ; (up-chat-data-to-all "Group %d don't avoid dangerous object" g: g-current-group)
        (up-jump-rule 3)
        )

        ;Don't avoid dangerous objects if we are targeting a monk or mangonel
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-current-group-action == GROUP-ATTACK)
        (up-set-target-by-id g: g-current-group-target-object-id)
        (or
            (or
                (up-object-data object-data-class == monastery-class)
                (up-object-data object-data-class == monk-with-relic-class))
            (and
                (up-object-data object-data-class == siege-weapon-class)
                (up-object-data object-data-base-attack >= 25)))
        (up-object-data object-data-range > 3)
        =>
        (up-get-search-state g-local-total)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Group %d don't avoid monk or mangonel" g: g-current-group)
        ; (up-chat-data-to-all "Group %d don't avoid monk or mangonel" g: g-current-group)
        (up-jump-rule 2)
        )

        ;Search for dangerous objects nearby that we must retreat from
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
        (player-in-game focus-player)
        (stance-toward focus-player enemy)
        (up-compare-flag g-current-group-flag == WITHIN-RANGE-OF-DANGEROUS-BUILDING)
        (up-compare-flag g-current-group-type-flag != RAM-GROUP)
        (up-compare-goal g-current-group-action != GROUP-RETREAT-FROM-OBJECT)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        =>
        (up-find-remote c: town-center c: 5)
        (up-find-remote c: castle c: 5)
        (up-find-remote c: krepost c: 5)
        (up-find-remote c: tower-class c: 25)
        (up-remove-objects search-remote object-data-type == outpost)
        (up-remove-objects search-remote object-data-hitpoints <= 0)
        (up-remove-objects search-remote object-data-status != status-ready)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
        (up-compare-flag g-current-group-flag == WITHIN-RANGE-OF-DANGEROUS-BUILDING)
        (up-compare-flag g-current-group-type-flag != RAM-GROUP)
        (up-compare-goal g-current-group-action != GROUP-RETREAT-FROM-OBJECT)
        (up-compare-goal g-current-group-action != GROUP-GATHER)
        =>
        (up-modify-sn sn-focus-player-number c:+ 1)
        (up-jump-rule -2)
        )

    ;Loop #8
    ;Remove buildings that aren't attacking the group if trebuchet or cannon group
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-type-flag == RANGED-SIEGE-GROUP)
    (up-compare-goal g-remote-total > 0)
    =>
    (set-goal g-loop-counter 0)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local object-data-range search-order-asc)
    (up-set-target-object search-local c: 0)
    (up-get-object-data object-data-range g-current-group-smallest-range)
    (up-log-data 0 CHAT-LOOP-ID c: 8)
    )

        ; (defrule
        ; (up-group-size g: g-current-group > 0)
        ; (up-compare-flag g-current-group-type-flag == RANGED-SIEGE-GROUP)
        ; (up-compare-goal g-remote-total > 0)
        ; (up-set-target-object search-remote g: g-loop-counter)
        ; (up-object-data object-data-range g:< g-current-group-smallest-range)
        ; (up-object-data object-data-next-attack <= 0)
        ; =>
        ; (up-remove-objects search-remote object-data-index g:== g-loop-counter)
        ; (up-get-search-state g-local-total)
        ; (up-jump-rule -1)
        ; )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-type-flag == RANGED-SIEGE-GROUP)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-object-data object-data-range g:< g-current-group-smallest-range)
        (up-object-data object-data-target != siege-weapon-class)
        (up-object-data object-data-target != scorpion-class)
        (up-object-data object-data-target != packed-trebuchet-class)
        (up-object-data object-data-target != unpacked-trebuchet-class)
        =>
        (up-remove-objects search-remote object-data-index g:== g-loop-counter)
        (up-get-search-state g-local-total)
        (up-jump-rule -1)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-type-flag == RANGED-SIEGE-GROUP)
        (up-compare-goal g-remote-total > 0)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-log-data 0 CHAT-LOOP-ID g: g-loop-counter)
        (up-jump-rule -2)
        )

    ;Remove buildings that we don't need to retreat from
    (defrule
    (or
        (up-group-size g: g-current-group <= 0)
        (or
            (up-compare-goal g-remote-total == 0)
            (up-compare-flag g-current-group-flag == RAID-MODE)))
    =>
    (up-jump-rule 15)
    )

        ;Loop #9
        ;Remove defensive buildings that we don't have to retreat from
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-remote-total > 0)
        =>
        (set-goal g-loop-counter 0)
        (up-set-target-point g-current-group-location-x)
        (up-reset-search 1 1 0 0)
        (up-reset-filters)
        (up-filter-distance c: -1 c: 12)
        (up-filter-include cmdid-military -1 -1 -1)
        (up-find-local c: any-objects c: 50)
        (up-get-search-state g-local-total)
        (up-log-data 0 CHAT-LOOP-ID c: 9)
        )
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-goal g-remote-total > 0)
        (up-compare-goal g-local-total > 0)
        (up-compare-flag g-current-group-flag == ASSAULT-MODE)
        =>
        (up-modify-goal g-local-total c:+ 5)    ;If assault mode, act as if we have 5 more soldiers nearby
        )

            ;Remove TC annex objects (until patch fixes this)
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-object-data object-data-type != town-center)
            (up-object-data object-data-language-id == lang-id-town-center)
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -1)
            )

            ;Remove towers if they shouldn't be retreated from
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (or
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP))
            (up-object-data object-data-class == tower-class)
            (up-object-data object-data-range g:< g-current-group-smallest-range)
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -2)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP))
            (up-object-data object-data-class == tower-class)
            (up-get-object-data object-data-garrison-count g-temp5)
            (up-modify-goal g-temp5 c:* 2)
            (up-get-fact current-age 0 g-temp6)
            (up-modify-goal g-temp5 g:- g-temp6)
            (or
                (up-compare-goal g-local-total g:> g-temp5)
                (up-compare-goal g-local-total > 7))
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -3)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
            (up-object-data object-data-class == tower-class)
            (up-get-object-data object-data-garrison-count g-temp5)
            (up-modify-goal g-temp5 c:* 2)
            (up-modify-goal g-temp5 c:- 4)
            (or
                (up-compare-goal g-local-total g:> g-temp5)
                (up-compare-goal g-local-total > 5))
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -4)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
            (up-object-data object-data-class == tower-class)
            (up-get-object-data object-data-garrison-count g-temp5)
            (up-modify-goal g-temp5 c:+ 4)
            (up-group-size g: g-current-group g:> g-temp5)
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -5)
            )

            ;Remove town centers if they shouldn't be retreated from
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (or
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-SIEGE-GROUP))
            (or
                (up-object-data object-data-language-id == lang-id-town-center)
                (or
                    (up-object-data object-data-type == castle)
                    (up-object-data object-data-type == krepost)))
            (up-object-data object-data-range g:< g-current-group-smallest-range)
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -6)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
            (up-object-data object-data-language-id == lang-id-town-center)
            ; (up-get-object-data object-data-garrison-count g-temp5)
            ; (up-modify-goal g-temp5 c:/ 2)
            ; (up-modify-goal g-temp5 c:+ 8)
            ; (up-compare-goal g-local-total g:> g-temp5)
            (up-compare-goal g-local-total > 7) ;was 12
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -7)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-object-data object-data-language-id == lang-id-town-center)
            (up-get-object-data object-data-hitpoints g-temp5)
            (up-get-object-data object-data-maxhp g-temp6)
            (up-modify-goal g-temp5 g:%/ g-temp6)
            (up-compare-goal g-temp5 < 20)   ;TC too damaged to garrison
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -8)
            )

            ;Remove castles if they should not be attacked
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
            (up-object-data object-data-type == castle)
            (or
                (up-object-data object-data-range g:< g-current-group-smallest-range)
                (and
                    (up-group-size g: g-current-group >= 5)
                    (up-research-status c: ri-onager >= research-complete)))
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -9)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
            (up-object-data object-data-type == krepost)
            (or
                (up-object-data object-data-range g:< g-current-group-smallest-range)
                (and
                    (up-group-size g: g-current-group >= 4)
                    (up-research-status c: ri-onager >= research-complete)))
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -10)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP))
            (or
                (up-object-data object-data-type == castle)
                (up-object-data object-data-type == krepost))
            (up-get-object-data object-data-garrison-count g-temp5)
            (up-modify-goal g-temp5 c:+ 18)
            (up-compare-goal g-local-total g:> g-temp5)
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -11)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
            (or
                (up-object-data object-data-type == castle)
                (up-object-data object-data-type == krepost))
            (up-get-object-data object-data-garrison-count g-temp5)
            (up-modify-goal g-temp5 c:+ 22)
            (up-compare-goal g-local-total g:> g-temp5)
            (up-compare-goal g-loop-counter <= 39)
            =>
            (up-remove-objects search-remote object-data-index g:== g-loop-counter)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -12)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-set-target-object search-remote g: g-loop-counter)
            (up-compare-goal g-loop-counter < 40)
            =>
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
            (up-jump-rule -13)
            )

    ;Get nearest dangerous object that we must retreat from
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-flag == WITHIN-RANGE-OF-DANGEROUS-BUILDING)
    (up-compare-goal g-current-group-action != GROUP-RETREAT-FROM-OBJECT)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-goal g-remote-total > 0)
    =>
    (up-set-target-point g-current-group-location-x)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Bldgs to avoid: %d" g: g-remote-total)
    ; (up-chat-data-to-all "Bldgs to avoid: %d" g: g-remote-total)
    (up-clean-search search-remote object-data-distance search-order-asc)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-flag g-current-group-flag == WITHIN-RANGE-OF-DANGEROUS-BUILDING)
    (up-compare-goal g-current-group-action != GROUP-RETREAT-FROM-OBJECT)
    (up-compare-goal g-current-group-action != GROUP-GATHER)
    (up-compare-goal g-remote-total > 0)
    (up-set-target-object search-remote c: 0)
    ; (or
    ;     (up-compare-goal g-current-group-action != GROUP-ATTACK)
    ;     (up-object-data object-data-distance <= 5))
    =>
    (up-get-object-data object-data-id g-dangerous-object-id)
    (up-get-object-data object-data-range g-dangerous-object-range)
    (up-get-point position-object g-dangerous-object-x)
    (set-goal g-temp2 74394)
    )

    ;Find ideal location to run away to
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    =>
    (up-modify-goal g-temp3 g:= g-dangerous-object-range)
    (up-modify-goal g-temp3 c:+ 6)  ;lerp distance
    (set-goal g-temp4 12)            ;cross distance
    (up-set-group search-local g: g-current-group)
    (set-goal g-current-group-avoidance-location-flag 0)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-object-data object-data-class != tower-class)
    =>
    (up-modify-goal g-temp3 c:+ 2)  ;lerp distance
    )

    ;Location 1 = move away from dangerous object and move counterclockwise with up-cross-tiles
    ;Location 2 = move away from dangerous object and move clockwise with up-cross-tiles
    ;Location 3 = move toward destination (may pass by dangerous object)
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    =>
    (up-copy-point g-dangerous-object-avoidance-location1-x g-dangerous-object-x)
    (up-lerp-tiles g-dangerous-object-avoidance-location1-x g-current-group-location-x g: g-temp3)
    (up-copy-point g-dangerous-object-avoidance-location2-x g-dangerous-object-avoidance-location1-x)
    (up-cross-tiles g-dangerous-object-avoidance-location1-x g-current-group-location-x g: g-temp4)
    (up-modify-goal g-temp4 c:* -1)
    (up-cross-tiles g-dangerous-object-avoidance-location2-x g-current-group-location-x g: g-temp4)
    (up-bound-precise-point g-dangerous-object-avoidance-location1-x 0 c: 1)
    (up-bound-precise-point g-dangerous-object-avoidance-location2-x 0 c: 1)
    )

    ;Check if retreat locations are accessible
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-set-target-object search-local c: 0)
    (up-path-distance g-dangerous-object-avoidance-location1-x 0 < 20)
    (up-path-distance g-dangerous-object-avoidance-location1-x 0 >= 2)
    =>
    (up-modify-flag g-current-group-avoidance-location-flag c:+ LOC1-REACHABLE)
    (up-modify-flag g-current-group-avoidance-location-flag c:+ LOC1-SAFE) ;set safe for now, if not safe this flag will be removed later
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-set-target-object search-local c: 0)
    (up-path-distance g-dangerous-object-avoidance-location2-x 0 < 20)
    (up-path-distance g-dangerous-object-avoidance-location2-x 0 >= 2)
    =>
    (up-modify-flag g-current-group-avoidance-location-flag c:+ LOC2-REACHABLE)
    (up-modify-flag g-current-group-avoidance-location-flag c:+ LOC2-SAFE) ;set safe for now, if not safe this flag will be removed later
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-flag g-current-group-avoidance-location-flag != LOC1-REACHABLE)
    (up-compare-flag g-current-group-avoidance-location-flag != LOC2-REACHABLE)
    =>
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "all locations unreachable" c: 0)
    ; (chat-to-all "all locations unreachable")
    )

    ;Loop 10
    ;Search for nearby defensive buildings where we should not retreat toward
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    =>
    (set-strategic-number sn-focus-player-number 1)
    (up-full-reset-search)
    (up-set-target-point g-current-group-location-x)
    (up-filter-distance c: -1 c: 20)
    (set-goal g-temp3 PENDING)
    (up-get-point-distance g-dangerous-object-avoidance-location1-x g-current-group-destination-x g-temp4)
    )
    
        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-temp2 74394)
        (up-set-target-by-id g: g-dangerous-object-id)
        (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
        (player-in-game focus-player)
        (stance-toward focus-player enemy)
        ;RAID-MODE
        =>
        (up-find-remote c: town-center c: 5)
        (up-find-remote c: castle c: 5)
        (up-find-remote c: krepost c: 5)
        (up-find-remote c: tower-class c: 25)
        (up-remove-objects search-remote object-data-type == outpost)
        (up-remove-objects search-remote object-data-hitpoints <= 0)
        (up-get-search-state g-local-total)
        )

        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-temp2 74394)
        (up-set-target-by-id g: g-dangerous-object-id)
        (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
        =>
        (up-modify-sn sn-focus-player-number c:+ 1)
        (up-jump-rule -2)
        )
        
    ;Loop #10
    ;Check if any dangerous buildings are near retreat location 1
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-goal g-remote-total > 0)
    =>
    (up-set-target-point g-dangerous-object-avoidance-location1-x)
    (set-goal g-loop-counter 0)
    (up-log-data 0 CHAT-LOOP-ID c: 10)
    )
        
        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-temp2 74394)
        (up-set-target-by-id g: g-dangerous-object-id)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-get-object-data object-data-range g-temp3)
        (up-modify-goal g-temp3 c:+ 3)
        (up-object-data object-data-distance g:<= g-temp3)  ;dangerous building is in range of retreat point
        =>
        (up-modify-flag g-current-group-avoidance-location-flag c:- LOC1-SAFE)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Loc 1 not safe for group %d" g: g-current-group)
        ; (up-chat-data-to-all "Loc 1 not safe for group %d" g: g-current-group)
        )
    
        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-temp2 74394)
        (up-set-target-by-id g: g-dangerous-object-id)
        (up-compare-goal g-remote-total > 0)
        (up-compare-flag g-current-group-avoidance-location-flag == LOC1-SAFE)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
        (up-jump-rule -2)
        )
        
    ;Loop #11
    ;Check if any dangerous buildings are near retreat location 2
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-goal g-remote-total > 0)
    =>
    (up-set-target-point g-dangerous-object-avoidance-location2-x)
    (set-goal g-loop-counter 0)
    (up-log-data 0 CHAT-LOOP-ID c: 11)
    )
        
        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-temp2 74394)
        (up-set-target-by-id g: g-dangerous-object-id)
        (up-compare-goal g-remote-total > 0)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-get-object-data object-data-range g-temp3)
        (up-modify-goal g-temp3 c:+ 3)
        (up-object-data object-data-distance g:<= g-temp3)  ;dangerous building is in range of retreat point
        =>
        (up-modify-flag g-current-group-avoidance-location-flag c:- LOC2-SAFE)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "Loc 2 not safe for group %d" g: g-current-group)
        ; (up-chat-data-to-all "Loc 2 not safe for group %d" g: g-current-group)
        )
    
        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-temp2 74394)
        (up-set-target-by-id g: g-dangerous-object-id)
        (up-compare-goal g-remote-total > 0)
        (up-compare-flag g-current-group-avoidance-location-flag == LOC2-SAFE)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-set-target-object search-remote g: g-loop-counter)
        (up-compare-goal g-loop-counter < 40)
        =>
        (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
        (up-jump-rule -2)
        )

    ;Location 3 is fallback location, so always consider location 3 safe
        
    ;If location 1 is safe, reachable, and it is closer to the destination than location 2, send group to location 1
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-REACHABLE)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-SAFE)
    (up-point-distance g-dangerous-object-avoidance-location2-x g-current-group-destination-x g:>= g-temp4)   ;location 1 is closer to destination
    (up-compare-goal g-current-group-avoidance-counter <= 3) ;avoided dangerous buildings only once in the last 15 seconds
    ; (up-compare-flag g-current-group-flag != RETREATED-RECENTLY) ;avoided dangerous buildings only once in the last 15 seconds
    =>
    (set-goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-RETREAT-FROM-OBJECT)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-dangerous-object-avoidance-location1-x action-move -1 stance-no-attack)
    (set-goal g-temp2 74395)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-AVOID-OBJECT g: g-current-group)
    ; (up-chat-data-to-all CHAT-AVOID-OBJECT g: g-current-group)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-REACHABLE)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-SAFE)
    (up-point-distance g-dangerous-object-avoidance-location2-x g-current-group-destination-x g:>= g-temp4)   ;location 1 is closer to destination
    (up-compare-flag g-current-group-type-flag == MONK-GROUP)
    (up-compare-goal g-current-group-avoidance-counter <= 5) ;avoided dangerous buildings only thrice in the last 15 seconds
    =>
    (set-goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-RETREAT-FROM-OBJECT)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-dangerous-object-avoidance-location1-x action-move -1 stance-no-attack)
    (set-goal g-temp2 74395)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-AVOID-OBJECT g: g-current-group)
    ; (up-chat-data-to-all CHAT-AVOID-OBJECT g: g-current-group)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-REACHABLE)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-SAFE)
    (or
        (up-compare-flag g-current-group-avoidance-location-flag != LOC2-REACHABLE)
        (up-compare-flag g-current-group-avoidance-location-flag != LOC2-SAFE))
    (up-compare-goal g-current-group-avoidance-counter <= 3) ;avoided dangerous buildings only once in the last 15 seconds
    =>
    (set-goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-RETREAT-FROM-OBJECT)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-dangerous-object-avoidance-location1-x action-move -1 stance-no-attack)
    (set-goal g-temp2 74395)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-AVOID-OBJECT g: g-current-group)
    ; (up-chat-data-to-all CHAT-AVOID-OBJECT g: g-current-group)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-REACHABLE)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-SAFE)
    (up-compare-flag g-current-group-avoidance-location-flag != LOC2-REACHABLE)
    (up-compare-flag g-current-group-type-flag == MONK-GROUP)
    (up-compare-goal g-current-group-avoidance-counter <= 5) ;avoided dangerous buildings only thrice in the last 15 seconds
    =>
    (set-goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-RETREAT-FROM-OBJECT)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-dangerous-object-avoidance-location1-x action-move -1 stance-no-attack)
    (set-goal g-temp2 74395)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-AVOID-OBJECT g: g-current-group)
    ; (up-chat-data-to-all CHAT-AVOID-OBJECT g: g-current-group)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-REACHABLE)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC1-SAFE)
    (up-compare-flag g-current-group-avoidance-location-flag != LOC2-SAFE)
    (up-compare-flag g-current-group-type-flag == MONK-GROUP)
    (up-compare-goal g-current-group-avoidance-counter <= 5) ;avoided dangerous buildings only thrice in the last 15 seconds
    =>
    (set-goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-RETREAT-FROM-OBJECT)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-dangerous-object-avoidance-location1-x action-move -1 stance-no-attack)
    (set-goal g-temp2 74395)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-AVOID-OBJECT g: g-current-group)
    ; (up-chat-data-to-all CHAT-AVOID-OBJECT g: g-current-group)
    )

    ;If location 2 is safe, reachable, and location 1 isn't the best location, send group to location 2
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)    ;group not sent to location 1
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC2-REACHABLE)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC2-SAFE)
    (up-compare-goal g-current-group-avoidance-counter <= 3) ;avoided dangerous buildings only once in the last 15 seconds
    =>
    (set-goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-RETREAT-FROM-OBJECT)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-dangerous-object-avoidance-location2-x action-move -1 stance-no-attack)
    (set-goal g-temp2 74395)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-AVOID-OBJECT g: g-current-group)
    ; (up-chat-data-to-all CHAT-AVOID-OBJECT g: g-current-group)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)    ;group not sent to location 1
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC2-REACHABLE)
    (up-compare-flag g-current-group-avoidance-location-flag == LOC2-SAFE)
    (up-compare-flag g-current-group-type-flag == MONK-GROUP)
    (up-compare-goal g-current-group-avoidance-counter <= 5) ;avoided dangerous buildings only thrice in the last 15 seconds
    =>
    (set-goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-RETREAT-FROM-OBJECT)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-dangerous-object-avoidance-location2-x action-move -1 stance-no-attack)
    (set-goal g-temp2 74395)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-AVOID-OBJECT g: g-current-group)
    ; (up-chat-data-to-all CHAT-AVOID-OBJECT g: g-current-group)
    )

    ;Increase group avoidance counter
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74395)    ;group sent to location 1 or 2
    (up-set-target-by-id g: g-dangerous-object-id)
    =>
    (up-modify-goal g-current-group-avoidance-counter c:+ 1)
    (up-set-indirect-goal g: g-current-group-avoidance-counter-goal-id g: g-current-group-avoidance-counter)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
    ; (up-chat-data-to-all CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
    )

    ;If locations 1 and 2 are not safe or reachable, send group to destination
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)    ;group not sent to location 1 or 2
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-get-object-data object-data-point-x g-point-x)
    (up-get-object-data object-data-point-y g-point-y)
    (up-point-distance g-point-x g-current-group-destination-x >= 12)
    ; (up-compare-flag g-current-group-avoidance-location-flag == LOC3-REACHABLE)
    ; (up-compare-flag g-current-group-avoidance-location-flag == LOC3-SAFE)
    =>
    (set-goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-RETREAT-FROM-OBJECT)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-current-group-destination-x action-move -1 stance-no-attack)
    (set-goal g-temp2 74395)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-AVOID-OBJECT g: g-current-group)
    ; (up-chat-data-to-all CHAT-AVOID-OBJECT g: g-current-group)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)    ;group not sent to location 1 or 2
    (up-set-target-by-id g: g-dangerous-object-id)
    (up-get-object-data object-data-point-x g-point-x)
    (up-get-object-data object-data-point-y g-point-y)
    (up-point-distance g-point-x g-current-group-destination-x < 12)
    ; (up-compare-flag g-current-group-avoidance-location-flag == LOC3-REACHABLE)
    ; (up-compare-flag g-current-group-avoidance-location-flag == LOC3-SAFE)
    =>
    (set-goal g-current-group-action GROUP-RETREAT-FROM-OBJECT)
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-RETREAT-FROM-OBJECT)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-destination-x-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-destination-y-goal-id c: PENDING)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-position-self-x action-move -1 stance-no-attack)
    (set-goal g-temp2 74395)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Group %d destination too close to dangerous building, pick new one" g: g-current-group)
    ; (up-chat-data-to-all "Group %d destination too close to dangerous building, pick new one" g: g-current-group)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-temp2 74394)    ;group not sent to location 1 or 2
    (up-set-target-by-id g: g-dangerous-object-id)
    =>
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "No retreat locations available for group %d" g: g-current-group)
    (up-log-data 0 "Avoid flag %d" g: g-current-group-avoidance-location-flag)
    ; (up-chat-data-to-all CHAT-NO-RETREAT-LOCATIONS-AVAILABLE g: g-current-group)
    ; (up-chat-data-to-all CHAT-AVOIDANCE-FLAG g: g-current-group-avoidance-location-flag)
    )

;-------------------------------------
;   Reset Group Local Attack Target
;-------------------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-action
    ;g-current-group-action-goal-id
    ;g-current-group-target-object-id
    ;g-current-group-target-object-goal-id


    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-group-location-x-goal-id
    ;g-current-group-location-y-goal-id

    ;If the group is currently attacking but the attack target is killed or destroyed, reset target so a new one can be selected

    ;Setup
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    )

    ;If group's action isn't attacking, reset target ID
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-target-object-id > PENDING)          ;group has a attack target
    (up-compare-goal g-current-group-action != GROUP-ATTACK)
    =>
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "reset target" c: 0)
    ; (chat-to-all "reset target")
    )

    ;If target is garrisoned, reset target ID
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-target-object-id > PENDING)          ;group has a attack target
    (up-set-target-by-id g: g-current-group-target-object-id)
    (up-object-data object-data-garrisoned == 1)
    =>
    (set-goal g-current-group-target-object-id PENDING)
    (set-goal g-current-group-action PENDING)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "target garrisoned, reset target" c: 0)
    ; (chat-to-all "target garrisoned, reset target")
    )

    ;If target is no longer visible, reset target ID
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-target-object-id > PENDING)          ;group has a attack target
    (up-set-target-by-id g: g-current-group-target-object-id)
    (up-object-data object-data-hitpoints > 0)
    (up-get-object-data object-data-point-x g-point-x)
    (up-get-object-data object-data-point-y g-point-y)
    (up-point-explored g-point-x != explored-active)
    =>
    (up-get-object-data object-data-player g-temp)
    (up-get-object-data object-data-base-type g-temp2)
    (up-modify-sn sn-focus-player-number g:= g-temp)
    (up-full-reset-search)
    (up-find-remote g: object-data-base-type c: 40)
    (up-remove-objects search-remote object-data-id g:!= g-current-group-target-object-id)
    (up-get-search-state g-local-total)
    )
    
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-target-object-id > PENDING)          ;group has a attack target
    (up-set-target-by-id g: g-current-group-target-object-id)
    (up-object-data object-data-hitpoints > 0)
    (up-get-object-data object-data-point-x g-point-x)
    (up-get-object-data object-data-point-y g-point-y)
    (up-point-explored g-point-x != explored-active)
    (up-compare-goal g-remote-total > 0)
    =>
    (set-goal g-current-group-target-object-id PENDING)
    (set-goal g-current-group-action PENDING)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "target not visible, reset target" c: 0)
    ; (chat-to-all "target not visible, reset target")
    )

    ; ;If target is inside mangonel's min range, reset target ID
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
    ; (up-compare-goal g-current-group-target-object-id > PENDING)          ;group has a attack target
    ; (up-set-target-by-id g: g-current-group-target-object-id)
    ; (up-get-object-data object-data-point-x g-point-x)
    ; (up-get-object-data object-data-point-y g-point-y)
    ; (up-point-distance g-point-x g-current-group-location-x <= 3)
    ; =>
    ; (set-goal g-current-group-target-object-id PENDING)
    ; (set-goal g-current-group-action PENDING)
    ; (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    ; (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    ; (chat-to-all "target too close to mangonel, reset target")
    ; )

    ;If group's attack target is too far away, reset target ID
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-target-object-id > PENDING)          ;group has a attack target
    (up-set-target-by-id g: g-current-group-target-object-id)
    (up-get-object-data object-data-point-x g-point-x)
    (up-get-object-data object-data-point-y g-point-y)
    (up-point-distance g-current-group-location-x g-point-x > 20)     ;distance from attack target to group is greater than 20
    =>
    (set-goal g-current-group-target-object-id PENDING)
    (set-goal g-current-group-action PENDING)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "target too far away, group %d" g: g-current-group)
    ; (up-chat-data-to-all "target too far away, group %d" g: g-current-group)
    )

    ;If group's attack target is dead, reset the target
    (defrule
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-target-object-id > PENDING)          ;group has a attack target
    (or
        (not
            (up-set-target-by-id g: g-current-group-target-object-id))        ;group target is dead
        (and
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-object-data object-data-hitpoints <= 0)))
    =>
    (set-goal g-current-group-target-object-id PENDING)
    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "group %d killed target" g: g-current-group)
    ; (up-chat-data-to-all "group %d killed target" g: g-current-group)
    )

;----------------------------------------
;   Set and Attack Local Attack Target
;----------------------------------------

    ;-----------
    ;   Setup
    ;-----------

        (load "The General 1.2/Functions/Reset")
        (load "The General 1.2/Functions/Reset DUC")

        ;Temp goals:
        ;g-current-group-action
        ;g-current-group-action-goal-id
        ;g-current-group-flag
        ;g-current-group-flag-goal-id
        ;g-current-group-type-flag
        ;g-current-group-type-flag-goal-id
        ;g-current-group-target-object-id
        ;g-current-group-target-object-goal-id
        ;g-current-group-smallest-range
        ;g-current-group-target-selection-status

        ;Temp points:
        ;g-current-group-location-x
        ;g-current-group-location-y
        ;g-current-group-location-x-goal-id
        ;g-current-group-location-y-goal-id
        ;g-current-group-destination-x
        ;g-current-group-destination-y
        ;g-current-group-destination-x-goal-id
        ;g-current-group-destination-y-goal-id

        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
        (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
        (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
        (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
        (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
        (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
        )
        
        (defrule
        (up-group-size g: g-current-group > 0)
        =>
        (up-set-group search-local g: g-current-group)
        (up-clean-search search-local object-data-range search-order-asc)
        (up-set-target-object search-local c: 0)
        (up-get-object-data object-data-range g-current-group-smallest-range)    ;get actual max range of group, instead of a minimum of 11
        ; (up-modify-goal g-current-group-smallest-range c:+ 1)         ;increase to account for object radiuses, which artificially increase the unit's range
        (up-full-reset-search)
        (up-get-search-state g-local-total)
        )

        ;Don't look for attack targets if avoiding scary objects or gathering group
        (defrule
        (up-group-size g: g-current-group > 0)
        (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
        (or
            (goal g-current-group-action GROUP-GATHER)
            (goal g-current-group-action GROUP-RETREAT-FROM-OBJECT))
        =>
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "dangerous object nearby, don't attack" c: 0)
        ; (chat-to-all "dangerous object nearby, don't attack")
        (set-goal g-current-group-target-selection-status SKIP)
        )

    ;----------------------------------
    ;   Search For Potential Targets
    ;----------------------------------

        ;--------------------------------------
        ;   DUC Search For Potential Targets
        ;--------------------------------------

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status != SKIP)
            =>
            (set-goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (set-strategic-number sn-focus-player-number 0)
            (up-set-target-point g-current-group-location-x)
            (set-goal g-loop-counter 0)
            (up-full-reset-search)
            (up-get-search-state g-local-total)
            )

                (defrule
                (timer-triggered t-5-sec)
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-current-group-target-selection-status == SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag != TREBUCHET-GROUP)
                (up-compare-flag g-current-group-type-flag != RAM-GROUP)
                (up-set-target-by-id g: g-loop-counter)
                (up-object-data object-data-class == boar-class)
                (up-object-data object-data-carry <= 0)
                (up-object-data object-data-hitpoints > 0)
                (up-object-data object-data-distance <= 8)
                (up-get-object-data object-data-point-x g-point-x)
                (up-get-object-data object-data-point-y g-point-y)
                (up-point-explored g-point-x != explored-no)
                =>
                (up-add-object-by-id search-remote g: g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 "Group found wolf %d" g: g-current-group)
                )

                (defrule
                (timer-triggered t-5-sec)
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-current-group-target-selection-status == SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag != TREBUCHET-GROUP)
                (up-compare-flag g-current-group-type-flag != RAM-GROUP)
                (up-compare-goal g-loop-counter g:< g-id-loop-max-objects)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-by-id g: g-loop-counter)
                =>
                (up-jump-rule -2)
                )

            ;Search objects within 18 (or 30) tiles
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag != TREBUCHET-GROUP)
            (up-compare-flag g-current-group-type-flag != CANNON-GROUP)
            =>
            (set-strategic-number sn-focus-player-number 1)
            (up-get-search-state g-local-total)
            (up-filter-distance c: -1 c: 18)
            (up-filter-exclude -1 actionid-explore orderid-explore livestock-class)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 1)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (or
                (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                (up-compare-flag g-current-group-type-flag == CANNON-GROUP))
            =>
            (set-strategic-number sn-focus-player-number 1)
            (up-set-target-point g-current-group-location-x)
            (up-filter-distance c: -1 c: 30)
            (up-filter-exclude -1 actionid-explore orderid-explore livestock-class)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 1)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            )

                ;If current focus player isn't gaia or an enemy in the game, check next player
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
                (nand
                    (player-in-game focus-player)
                    (stance-toward focus-player enemy))
                =>
                (up-modify-sn sn-focus-player-number c:+ 1)
                (up-jump-rule -1)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total < 240)
                =>
                (up-find-remote c: any-objects c: 40)
                (up-clean-search search-remote -1 search-order-asc)
                (up-get-search-state g-local-total)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (or
                    (up-compare-goal g-remote-total < 40)
                    (up-compare-goal g-local-total >= 240))
                =>
                (up-jump-rule 4)
                )

                    ;If we found 40 objects, move objects to local list and search again
                    ;Store Remote List in Local List
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                    =>
                    (set-goal g-loop-counter2 0)
                    (up-get-search-state g-local-total)
                    )

                        ;Move unit into local list
                        (defrule
                        (up-group-size g: g-current-group > 0)
                        (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                        (up-set-target-object search-remote g: g-loop-counter2)
                        (up-get-object-data object-data-id g-temp4)
                        =>
                        (up-add-object-by-id search-local g: g-temp4)
                        (up-get-search-state g-local-total)
                        )

                        (defrule
                        (up-group-size g: g-current-group > 0)
                        (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                        (up-modify-goal g-loop-counter2 c:+ 1)
                        (up-set-target-object search-remote g: g-loop-counter2)
                        (up-compare-goal g-loop-counter2 < 40)
                        =>
                        (up-jump-rule -2)
                        )

                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                    =>
                    (up-reset-search 0 0 0 1)
                    (up-get-search-state g-local-total)
                    ; (chat-to-all "Found more than 40 objects within distance")
                    ; (up-chat-data-to-all "Local list has %d objects" g: g-local-total)
                    (up-jump-rule -6)
                    )

                ;Check next enemy player
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
                (up-compare-goal g-local-total < 240)
                =>
                (up-modify-sn sn-focus-player-number c:+ 1)
                (up-jump-rule -8)
                )

            ;Store Remote List in Local List
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-goal g-remote-total > 0)
            =>
            (set-goal g-loop-counter2 0)
            (up-get-search-state g-local-total)
            )

                ;Move unit into local list
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-set-target-object search-remote g: g-loop-counter2)
                (up-get-object-data object-data-id g-temp4)
                =>
                (up-add-object-by-id search-local g: g-temp4)
                (up-get-search-state g-local-total)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-modify-goal g-loop-counter2 c:+ 1)
                (up-set-target-object search-remote g: g-loop-counter2)
                (up-compare-goal g-loop-counter2 < 40)
                =>
                (up-jump-rule -2)
                )

            ;Loop #12
            ;Check for attackers not found by DUC search
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-goal g-local-total < 240)
            =>
            (up-set-group search-remote g: g-current-group)
            (up-set-target-point g-current-group-location-x)
            (set-goal g-loop-counter 0)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 2)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            (up-log-data 0 CHAT-LOOP-ID c: 12)
            )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total < 240)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-attacker-id >= 0)
                (up-get-object-data object-data-attacker-id g-temp)
                (up-set-target-by-id g: g-temp)
                (up-object-data object-data-player != my-player-number)
                (up-object-data object-data-distance <= 18)
                (up-get-object-data object-data-point-x g-point-x)
                (up-get-object-data object-data-point-y g-point-y)
                (up-point-explored g-point-x == explored-active)
                =>
                (up-add-object-by-id search-local g: g-temp)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total < 240)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-compare-goal g-loop-counter < 40)
                =>
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -2)
                )
                
            ;Loop #13
            ;Remove TC annex objects (until patch fixes this)
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-goal g-local-total > 0)
            =>
            (set-goal g-loop-counter 0)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 3)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            (up-log-data 0 CHAT-LOOP-ID c: 13)
            )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-base-type != town-center)
                (up-object-data object-data-language-id == lang-id-town-center)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -1)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-goal g-loop-counter < 240)
                =>
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -2)
                )

            ;Remove duplicates in case they were added during the code to add attackers
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            =>
            (up-remove-objects search-local object-data-player == my-player-number)
            (up-clean-search search-local -1 search-order-asc)
            (up-reset-search 0 0 1 1)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 4)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            )

            ;Chat enemy objects found
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-goal g-local-total > 0)
            =>
            (set-goal g-loop-counter 0)
            (up-get-fact game-time 0 g-loop-counter)
            (up-get-fact player-number 0 g-loop-counter2)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-loop-counter)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-loop-counter2)
            (up-log-data 0 "Nearby targets found" c: 0)
            )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                =>
                (up-get-object-data object-data-id g-temp)
                (up-log-data 0 "Target ID: %d" g: g-temp)
                (up-get-object-data object-data-type g-temp)
                (up-log-data 0 "Target Type: %d" g: g-temp)
                (up-get-object-data object-data-class g-temp)
                (up-log-data 0 "Target Class: %d" g: g-temp)
                (up-get-object-data object-data-player g-temp)
                (up-log-data 0 "Target Player: %d" g: g-temp)
                (up-set-target-point g-current-group-location-x)
                (up-get-object-data object-data-distance g-temp)
                (up-log-data 0 "Target Distance: %d" g: g-temp)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-goal g-loop-counter < 239)
                =>
                (up-jump-rule -2)
                )

            ;If we found no objects, skip
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (goal g-local-total 0)
            =>
            (set-goal g-current-group-target-selection-status SKIP)
            )

        ;---------------------------------------------------------
        ;   Remove Potential Targets Based on Group Type/Action
        ;---------------------------------------------------------

            ;If scouting, remove all non-monk objects
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-local c: 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (or
                (up-compare-flag g-current-group-flag == DANGEROUS-OBJECT-NEARBY)
                (up-compare-goal g-current-group-avoidance-counter >= 3))
            (up-compare-flag g-current-group-flag == SCOUT-MODE)
            =>
            (up-remove-objects search-local object-data-train-site != monastery)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 5)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            )
            
            ;Remove buildings if scouting or raiding and not near destination
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-goal g-local-total > 0)
            (or
                (up-compare-flag g-current-group-flag == SCOUT-MODE)
                (and
                    (up-point-distance g-current-group-location-x g-current-group-destination-x >= 6)
                    (up-compare-flag g-current-group-flag == RAID-MODE)))
            =>
            (up-remove-objects search-local object-data-cmdid == cmdid-civilian-building)
            (up-remove-objects search-local object-data-cmdid == cmdid-military-building)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 6)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            )

            ;Remove ranged buildings if not in assault mode
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-goal g-local-total > 0)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP))
            (up-compare-flag g-current-group-flag != ASSAULT-MODE)
            =>
            (up-remove-objects search-local object-data-class == tower-class)
            (up-remove-objects search-local object-data-language-id == lang-id-town-center)
            (up-remove-objects search-local object-data-base-type == castle)
            (up-remove-objects search-local object-data-base-type == krepost)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 7)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            )

            ;If Monk group, remove objects that can't be converted
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-local c: 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            =>
            (up-remove-objects search-local object-data-language-id == lang-id-town-center)
            (up-remove-objects search-local object-data-type == castle)
            (up-remove-objects search-local object-data-type == krepost)
            (up-remove-objects search-local object-data-type == monastery)
            (up-remove-objects search-local object-data-type == wonder)
            (up-remove-objects search-local object-data-class == wall-class)
            (up-remove-objects search-local object-data-class == gate-class)
            (up-remove-objects search-local object-data-class == farm-class)
            (up-remove-objects search-local object-data-player < 1)
            (up-get-search-state g-local-total)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-local c: 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            (up-research-status c: ri-redemption < research-complete)
            =>
            (up-remove-objects search-local object-data-cmdid == cmdid-civilian-building)
            (up-remove-objects search-local object-data-cmdid == cmdid-military-building)
            (up-remove-objects search-local object-data-class == siege-weapon-class)
            (up-remove-objects search-local object-data-class == scorpion-class)
            (up-remove-objects search-local object-data-class == packed-trebuchet-class)
            (up-remove-objects search-local object-data-class == unpacked-trebuchet-class)
            (up-get-search-state g-local-total)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-local c: 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            (up-research-status c: ri-atonement < research-complete)
            =>
            (up-remove-objects search-local object-data-class == monastery-class)
            (up-remove-objects search-local object-data-class == monk-with-relic-class)
            (up-get-search-state g-local-total)
            )

            ;If Monk group, remove objects currently being converted
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-local c: 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            (up-research-status c: ri-theocracy < research-complete)
            =>
            (up-remove-objects search-local object-data-target == monastery-class)
            (up-get-search-state g-local-total)
            )

            ;Loop #16
            ;If Ram group (but not armored elephant group), remove non-building, non-siege units
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-local c: 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag == RAM-GROUP)
            (up-compare-const ARMORED-ELEPHANT-AVAILABLE == NO)
            =>
            (set-goal g-loop-counter 0)
            (up-log-data 0 CHAT-LOOP-ID c: 16)
            )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (up-compare-const ARMORED-ELEPHANT-AVAILABLE == NO)
                (up-object-data object-data-speed != 0) ;not a building or unpacked trebuchet
                (up-object-data object-data-class != siege-weapon-class)
                (up-object-data object-data-class != scorpion-class)
                (up-object-data object-data-class != packed-trebuchet-class)
                (up-object-data object-data-base-type != ballista-elephant)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-jump-rule -1)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (up-compare-const ARMORED-ELEPHANT-AVAILABLE == NO)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-goal g-loop-counter < 240)
                =>
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -2)
                )

            ;Loop #18
            ;If Trebuchet group, remove non-building, non-trebuchet units
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-local c: 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
            =>
            (set-goal g-loop-counter 0)
            (up-log-data 0 CHAT-LOOP-ID c: 18)
            )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                (up-object-data object-data-speed != 0) ;not a building or unpacked trebuchet
                (or
                    (up-object-data object-data-class != packed-trebuchet-class)
                    (up-object-data object-data-action == actionid-move))
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-jump-rule -1)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-goal g-loop-counter < 240)
                =>
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -2)
                )

            ;Loop #19
            ;If Mangonel group, remove objects near our own units that aren't siege
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-set-target-object search-local c: 0)
            (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
            =>
            (set-goal g-loop-counter 0)
            (up-log-data 0 CHAT-LOOP-ID c: 19)
            )
            
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-class != siege-weapon-class)
                (up-object-data object-data-class != scorpion-class)
                =>
                (up-get-point position-object g-point-x)
                (up-set-target-point g-point-x)
                (up-reset-search 0 0 1 1)
                (up-reset-filters)
                (set-strategic-number sn-focus-player-number my-player-number)
                (up-filter-distance c: -1 c: 2)
                (up-find-remote c: any-objects c: 10)
                (up-remove-objects search-remote object-data-hitpoints >= 200)
                (up-get-search-state g-local-total)
                )
            
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-class != siege-weapon-class)
                (up-object-data object-data-class != scorpion-class)
                (up-compare-goal g-remote-total > 0)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-jump-rule -2)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-goal g-loop-counter < 240)
                =>
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -3)
                )

            ;Loop #15
            ;Remove buildings that are too far away
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-local c: 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            =>
            (up-set-target-point g-current-group-location-x)
            (set-goal g-loop-counter 0)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 8)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            (up-log-data 0 CHAT-LOOP-ID c: 15)
            )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-speed == 0)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                (up-object-data object-data-distance > 18)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-jump-rule -1)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-speed == 0)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                (up-object-data object-data-distance > 10)
                (up-compare-flag g-current-group-type-flag != RAM-GROUP)
                (up-compare-flag g-current-group-type-flag != TREBUCHET-GROUP)
                (up-compare-flag g-current-group-type-flag != CANNON-GROUP)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-jump-rule -1)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-goal g-loop-counter < 240)
                =>
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -3)
                )

            ;Loop #14
            ;Remove objects behind walls
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-local c: 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (or
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP))
            =>
            (up-set-group search-remote g: g-current-group)
            (set-goal g-loop-counter 0)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 9)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            (up-log-data 0 CHAT-LOOP-ID c: 14)
            )

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-set-target-object search-local c: 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (or
                    (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                    (up-compare-flag g-current-group-type-flag == RAM-GROUP))
                (up-set-target-object search-local g: g-loop-counter)
                =>
                (up-get-point position-object g-point-x)    ;get location of enemy object
                (up-get-point-distance g-current-group-location-x g-point-x g-temp)
                (up-modify-goal g-temp c:* 2)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-set-target-object search-local c: 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (or
                    (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                    (up-compare-flag g-current-group-type-flag == RAM-GROUP))
                (up-set-target-object search-local g: g-loop-counter)
                (up-set-target-object search-remote c: 0)
                (up-path-distance g-point-x 0 g:>= g-temp)  ;object at least twice as far by path distance than point distance
                (up-path-distance g-point-x 0 > 12)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-get-fact game-time 0 g-temp5)
                (up-get-fact player-number 0 g-temp6)
                (up-log-data 0 CHAT-LOG-ENTRY c: 0)
                (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                (up-log-data 0 "Group %d found objects behind walls" g: g-current-group)
                ; (up-chat-data-to-all "Group %d found objects behind walls" g: g-current-group)
                (up-jump-rule -2)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-set-target-object search-local c: 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (or
                    (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                    (up-compare-flag g-current-group-type-flag == RAM-GROUP))
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-goal g-loop-counter < 240)
                =>
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -3)
                )

        ;-----------------------------------------------------------
        ;   Remove Dangerous Buildings That Shouldn't Be Targeted
        ;-----------------------------------------------------------

            ;Loop #20
            ;Remove defensive buildings if they shouldn't be targeted
            ;Get number of units nearby
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag != RAM-GROUP)
            (up-compare-flag g-current-group-type-flag != TREBUCHET-GROUP)
            (up-compare-flag g-current-group-type-flag != CANNON-GROUP)
            (up-compare-goal g-local-total > 0)
            =>
            (set-goal g-loop-counter 0)
            (up-set-target-point g-current-group-location-x)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 12)
            (up-filter-include cmdid-military -1 -1 -1)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: any-objects c: 50)
            (up-get-search-state g-local-total)
            (up-modify-goal g-temp g:= g-remote-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 10)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            (up-log-data 0 CHAT-LOOP-ID c: 20)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag != RAM-GROUP)
            (up-compare-flag g-current-group-type-flag != TREBUCHET-GROUP)
            (up-compare-flag g-current-group-type-flag != CANNON-GROUP)
            (up-compare-goal g-local-total > 0)
            =>
            (set-goal g-loop-counter 0)
            (up-set-target-point g-current-group-location-x)
            (up-reset-search 0 0 1 1)
            (up-reset-filters)
            (up-filter-distance c: -1 c: 8)
            (set-strategic-number sn-focus-player-number my-player-number)
            (up-find-remote c: battering-ram-line c: 5)
            (up-find-remote c: armored-elephant-line c: 5)
            (up-get-search-state g-local-total)
            (up-modify-goal g-remote-total c:* 5)
            (up-modify-goal g-temp g:+ g-remote-total)
            )
            ;Get number of rams nearby
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            (or
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (or
                    (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                    (up-compare-flag g-current-group-type-flag == CANNON-GROUP)))
            (up-compare-goal g-local-total > 0)
            =>
            (set-goal g-loop-counter 0)
            (up-set-target-point g-current-group-location-x)
            (up-get-search-state g-local-total)
            (set-goal g-temp 0)
            (up-log-data 0 CHAT-LOOP-ID c: 20)
            )

                ;Remove non-ranged buildings if not near destination
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag != CANNON-GROUP)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-point-distance g-current-group-location-x g-current-group-destination-x >= 6)
                (up-object-data object-data-speed == 0)
                (or
                    (up-object-data object-data-range == 0)
                    (up-compare-flag g-current-group-type-flag == MONK-GROUP))
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -1)
                )

                ;Remove non-convertible buildings if monk group
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == MONK-GROUP)
                (up-object-data object-data-no-convert == 1)
                (up-object-data object-data-speed == 0)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -2)
                )

                ;Remove towers if they shouldn't be attacked
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (or
                    (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP)
                    (up-compare-flag g-current-group-type-flag == SCORPION-GROUP))
                (up-object-data object-data-status != status-pending)
                (up-object-data object-data-class == tower-class)
                (up-object-data object-data-range g:>= g-current-group-smallest-range)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -3)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
                (up-object-data object-data-status != status-pending)
                (up-object-data object-data-class == tower-class)
                (up-get-object-data object-data-garrison-count g-temp5)
                (up-modify-goal g-temp5 c:* 2)
                (up-get-fact current-age 0 g-temp6)
                (up-modify-goal g-temp5 g:- g-temp6)
                (up-compare-goal g-temp g:<= g-temp5)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -4)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
                (up-object-data object-data-status != status-pending)
                (up-object-data object-data-class == tower-class)
                (up-get-object-data object-data-garrison-count g-temp5)
                (up-modify-goal g-temp5 c:* 2)
                (up-get-fact current-age 0 g-temp6)
                (up-modify-goal g-temp5 g:- g-temp6)
                (up-compare-goal g-temp g:<= g-temp5)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -5)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
                (up-object-data object-data-status != status-pending)
                (up-object-data object-data-class == tower-class)
                (up-get-object-data object-data-garrison-count g-temp5)
                (up-modify-goal g-temp5 c:* 2)
                (up-modify-goal g-temp5 c:- 4)
                (up-compare-goal g-temp g:<= g-temp5)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -6)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-object-data object-data-status != status-pending)
                (up-object-data object-data-class == tower-class)
                (up-get-object-data object-data-garrison-count g-temp5)
                (up-modify-goal g-temp5 c:+ 4)
                (up-group-size g: g-current-group g:<= g-temp5)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -7)
                )

                ;Remove town centers if they shouldn't be attacked
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP)
                (up-object-data object-data-status != status-pending)
                (up-object-data object-data-language-id == lang-id-town-center)
                (up-object-data object-data-range g:>= g-current-group-smallest-range)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -8)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-object-data object-data-status != status-pending)
                (up-object-data object-data-language-id == lang-id-town-center)
                ; (up-get-object-data object-data-garrison-count g-temp5)
                ; (up-modify-goal g-temp5 c:/ 2)
                ; (up-modify-goal g-temp5 c:+ 11)
                ; (up-compare-goal g-temp g:<= g-temp5)
                (or
                    (up-compare-goal g-temp <= 16)
                    (up-compare-flag g-current-group-type-flag != ASSAULT-MODE))
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -9)
                )

                ;Remove castles if they should not be attacked
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == RANGED-SOLDIER-GROUP)
                (up-object-data object-data-status != status-pending)
                (or
                    (up-object-data object-data-type == castle)
                    (up-object-data object-data-type == krepost))
                (up-object-data object-data-range g:>= g-current-group-smallest-range)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -10)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
                (up-object-data object-data-status != status-pending)
                (or
                    (up-object-data object-data-type == castle)
                    (up-object-data object-data-type == krepost))
                (up-object-data object-data-range g:>= g-current-group-smallest-range)
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -11)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-object-data object-data-status != status-pending)
                (up-object-data object-data-type == castle)
                (up-object-data object-data-range g:>= g-current-group-smallest-range)
                (or
                    (up-group-size g: g-current-group < 5)
                    (up-research-status c: ri-onager < research-complete))
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -12)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-object-data object-data-status != status-pending)
                (up-object-data object-data-type == krepost)
                (up-object-data object-data-range g:>= g-current-group-smallest-range)
                (or
                    (up-group-size g: g-current-group < 4)
                    (up-research-status c: ri-onager < research-complete))
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -13)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                (up-object-data object-data-status != status-pending)
                (or
                    (up-object-data object-data-type == castle)
                    (up-object-data object-data-type == krepost))
                ; (up-get-object-data object-data-garrison-count g-temp5)
                ; (up-modify-goal g-temp5 c:+ 16)
                ; (up-compare-goal g-temp g:<= g-temp5)
                (or
                    (up-compare-goal g-temp <= 24)
                    (up-compare-flag g-current-group-flag != ASSAULT-MODE))
                (up-compare-goal g-loop-counter <= 239)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -14)
                )
                ; (defrule
                ; (up-group-size g: g-current-group > 0)
                ; (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                ; (up-compare-goal g-local-total > 0)
                ; (up-set-target-object search-local g: g-loop-counter)
                ; (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
                ; (up-object-data object-data-status != status-pending)
                ; (or
                ;     (up-object-data object-data-type == castle)
                ;     (up-object-data object-data-type == krepost))
                ; ; (up-get-object-data object-data-garrison-count g-temp5)
                ; ; (up-modify-goal g-temp5 c:+ 16)
                ; ; (up-compare-goal g-temp g:<= g-temp5)
                ; (up-compare-goal g-temp <= 24)
                ; (up-compare-goal g-loop-counter <= 239)
                ; =>
                ; (up-remove-objects search-local object-data-index g:== g-loop-counter)
                ; (up-get-search-state g-local-total)
                ; (up-jump-rule -16)
                ; )
                ; (defrule
                ; (up-group-size g: g-current-group > 0)
                ; (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                ; (up-compare-goal g-local-total > 0)
                ; (up-set-target-object search-local g: g-loop-counter)
                ; (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
                ; (up-object-data object-data-status != status-pending)
                ; (or
                ;     (up-object-data object-data-type == castle)
                ;     (up-object-data object-data-type == krepost))
                ; ; (up-get-object-data object-data-garrison-count g-temp5)
                ; ; (up-modify-goal g-temp5 c:+ 16)
                ; ; (up-compare-goal g-temp g:<= g-temp5)
                ; (up-compare-goal g-temp <= 24)
                ; (up-compare-goal g-loop-counter <= 239)
                ; =>
                ; (up-remove-objects search-local object-data-index g:== g-loop-counter)
                ; (up-get-search-state g-local-total)
                ; (up-jump-rule -17)
                ; )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-goal g-loop-counter < 240)
                =>
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -15)
                )

        ;-------------------------
        ;   Setup for Next Step
        ;-------------------------

            ;If units found, prepare to remove units that are in range of enemy defensive buildings
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-local-total > 0)
            (goal g-current-group-target-selection-status SEARCH-FOR-POTENTIAL-TARGETS)
            =>
            (set-goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
            (up-reset-search 0 0 1 1)
            ; (up-modify-group-flag 0 c: 0)
            ; (up-reset-group c: 0)
            (up-get-search-state g-local-total)
            )

    ;-----------------------------------------
    ;   Check if objects are safe to attack
    ;-----------------------------------------

        ;--------------------------------
        ;   Move objects to local list
        ;--------------------------------

            ; (defrule
            ; (or
            ;     (up-group-size g: g-current-group == 0)
            ;     (or
            ;         (up-compare-goal g-current-group-target-selection-status < FOUND-POTENTIAL-TARGETS)
            ;         (up-compare-goal g-remote-total == 0)))
            ; =>
            ; (up-jump-rule 5)
            ; )

            ;     (load "The General 1.2/Functions/StoreRemoteList")  ;5 rules

        ;-------------------------------------------------
        ;   Search for enemy defensive buildings nearby
        ;-------------------------------------------------

            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
            ; (up-group-size c: 0 > 0)
            =>
            ; (up-full-reset-search)
            ; (up-set-group search-local c: 0)
            (set-strategic-number sn-focus-player-number 1)
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 11)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            )

                ;If current focus player isn't an enemy in the game, check next player
                (defrule
                (up-compare-sn sn-focus-player-number > 0)
                (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
                (up-group-size g: g-current-group > 0)
                (nand
                    (player-in-game focus-player)
                    (stance-toward focus-player enemy))
                (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag != RAM-GROUP)
                =>
                (up-modify-sn sn-focus-player-number c:+ 1)
                (up-jump-rule -1)
                )

                ;Search for enemy defensive buildings nearby
                (defrule
                (up-compare-sn sn-focus-player-number > 0)
                (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag != RAM-GROUP)
                =>
                (up-set-target-point g-current-group-location-x)
                (up-reset-filters)
                (up-filter-distance c: -1 c: 20)
                (up-find-remote c: castle c: 5)
                (up-find-remote c: krepost c: 5)
                (up-find-remote c: town-center c: 5)
                (up-find-remote c: tower-class c: 30)
                (up-remove-objects search-remote object-data-type == outpost)
                (up-remove-objects search-remote object-data-id g:== g-current-group-target-object-id)
                (up-get-search-state g-local-total)
                )

                ;Check next enemy player
                (defrule
                (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                (up-compare-flag g-current-group-type-flag != RAM-GROUP)
                =>
                (up-modify-sn sn-focus-player-number c:+ 1)
                (up-jump-rule -3)
                )

        ;---------------------------------------------------------------------------------
        ;   Remove defensive buildings that we can ignore based on military superiority
        ;---------------------------------------------------------------------------------

            ;Loop #21
            ;Remove defensive buildings that we don't worry about being within range of
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
            ; (up-group-size c: 0 > 0)
            (up-compare-goal g-remote-total > 0)
            =>
            (set-goal g-loop-counter 0)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 12)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            (up-log-data 0 CHAT-LOOP-ID c: 21)
            )

                ;Remove buildings if it is safe to retreat and get in range of them
                (defrule
                (or
                    (up-group-size g: g-current-group <= 0)
                    (or
                        (up-compare-goal g-current-group-target-selection-status != FOUND-POTENTIAL-TARGETS)
                        ; (or
                        ;     (up-group-size c: 0 <= 0)
                            (or
                                (up-compare-goal g-remote-total == 0)
                                (or
                                    (up-compare-flag g-current-group-flag == RAID-MODE)
                                    (up-compare-goal g-loop-counter > 39)))));)
                =>
                (up-jump-rule 3)
                )

                    ;Towers
                    (defrule
                    (up-set-target-object search-remote g: g-loop-counter)
                    (up-object-data object-data-class == tower-class)
                    (up-compare-flag g-current-group-type-flag != MONK-GROUP)
                    (or
                        (up-group-size g: g-current-group >= 10)
                        (or
                            (and
                                (up-group-size g: g-current-group >= 5)
                                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP))
                            (and
                                (up-compare-flag g-current-group-type-flag == RANGED-SIEGE-GROUP)
                                (up-group-size g: g-current-group >= 2))))
                    =>
                    (up-remove-objects search-remote object-data-index g:== g-loop-counter)
                    (up-get-search-state g-local-total)
                    (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                    (up-jump-rule -1)
                    )

                    ;Town Centers
                    (defrule
                    (up-set-target-object search-remote g: g-loop-counter)
                    (up-object-data object-data-type == town-center)
                    (up-compare-flag g-current-group-type-flag != MONK-GROUP)
                    (or
                        (up-group-size g: g-current-group >= 12)
                        (or
                            (and
                                (up-group-size g: g-current-group >= 7)
                                (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP))
                            (and
                                (up-compare-flag g-current-group-type-flag == RANGED-SIEGE-GROUP)
                                (up-group-size g: g-current-group >= 4))))
                    =>
                    (up-remove-objects search-remote object-data-index g:== g-loop-counter)
                    (up-get-search-state g-local-total)
                    (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                    (up-jump-rule -2)
                    )

                    ;Castles/Kreposts
                    (defrule
                    (up-set-target-object search-remote g: g-loop-counter)
                    (or
                        (up-object-data object-data-type == castle)
                        (up-object-data object-data-type == krepost))
                    (up-compare-flag g-current-group-type-flag != MONK-GROUP)
                    (or
                        (up-group-size g: g-current-group >= 25)
                        (and
                            (up-compare-flag g-current-group-type-flag == RANGED-SIEGE-GROUP)
                            (up-group-size g: g-current-group >= 6)))
                    =>
                    (up-remove-objects search-remote object-data-index g:== g-loop-counter)
                    (up-get-search-state g-local-total)
                    (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                    (up-jump-rule -3)
                    )

                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                (up-group-size c: 0 > 0)
                (up-compare-goal g-remote-total > 0)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-compare-goal g-loop-counter < 40)
                =>
                (up-get-search-state g-local-total)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -5)
                )

        ;----------------------------------------------------------------------------------------------
        ;   Remove potential targets that would put group in range of dangerous building if attacked
        ;----------------------------------------------------------------------------------------------

            ;If enemy defensive buildings nearby, remove any enemy units from the local list that would put group in range of dangerous object
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-type-flag == RAM-GROUP)
            =>
            (up-get-search-state g-local-total)
            (up-jump-rule 12)
            )
            
                ;Loop #22
                (defrule
                (up-group-size g: g-current-group > 0)
                (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                (up-set-target-object search-local c: 0)
                (up-get-object-data object-data-id g-temp4)
                (up-set-target-object search-remote c: 0)
                =>
                (set-goal g-loop-counter 0)
                (set-goal g-loop-counter2 0)
                (set-goal g-temp2 999)
                (set-goal g-temp3 999)
                (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 13)
                (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
                (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
                (up-log-data 0 CHAT-LOOP-ID c: 22)
                )

                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-get-object-data object-data-id g-temp4)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-object-data object-data-id g:== g-temp4)   ;local and remote objects are the same object
                    =>
                    (up-modify-goal g-loop-counter2 c:+ 1)
                    )

                    ;Get location where current group would attack enemy unit from (g-point-x) and location of dangerous enemy building (g-point2-x)
                    ;Also, get range of dangerous enemy building (g-temp2)
                    ;Also, get distance between g-point-x and the group's location (g-temp3)
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-compare-flag g-current-group-flag != SCOUT-MODE)
                    =>
                    (up-get-point position-object g-point-x)
                    (up-get-point-distance g-point-x g-current-group-location-x g-temp)
                    (up-modify-goal g-temp g:min g-current-group-smallest-range)
                    (up-lerp-tiles g-point-x g-current-group-location-x g: g-temp)   ;get location where group would attack enemy units at
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-get-point position-object g-point2-x)       ;g-point2-x = location of dangerous enemy building
                    (up-get-object-data object-data-range g-temp2)
                    (up-get-point-distance g-point-x g-current-group-location-x g-temp3)
                    )

                    ;If scouting, use radius of DANGEROUS-OBJECT-NEARBY instead (currently 20)
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-compare-flag g-current-group-flag == SCOUT-MODE)
                    =>
                    (up-get-point position-object g-point-x)
                    (up-get-point-distance g-point-x g-current-group-location-x g-temp)
                    (up-modify-goal g-temp g:min g-current-group-smallest-range)
                    (up-lerp-tiles g-point-x g-current-group-location-x g: g-temp)   ;get location where group would attack enemy units at
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-get-point position-object g-point2-x)       ;g-point2-x = location of dangerous enemy building
                    (set-goal g-temp2 20)
                    (up-get-point-distance g-point-x g-current-group-location-x g-temp3)
                    )

                    ;Increase g-temp2 to adjust for building size
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-compare-goal g-temp2 > 0)
                    (up-object-data object-data-class == tower-class) ;TC, castle, or krepost
                    =>
                    (up-modify-goal g-temp2 c:+ 1)  ;increase range because these buildings are larger
                    ; (up-chat-data-to-all "TC range %d" g: g-temp2)
                    )
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-compare-goal g-temp2 > 0)
                    (up-object-data object-data-class != tower-class) ;TC, castle, or krepost
                    =>
                    (up-modify-goal g-temp2 c:+ 3)  ;increase range because these buildings are larger
                    ; (up-chat-data-to-all "TC range %d" g: g-temp2)
                    )

                    ;If the group is not ranged and potential target is a villager,
                    ;add 5 to the range of the defensive building to account for
                    ;time to chase villager back to TC
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-object-data object-data-class == villager-class)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                    =>
                    (up-modify-goal g-temp2 c:+ 5)
                    (up-jump-rule 1)
                    )
                    ;If the group is not ranged and potential target isn't a villager, 
                    ;add 2 to the range of the defensive building to account for
                    ;melee units moving around to surround units they are attacking
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-object-data object-data-class != villager-class)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-compare-flag g-current-group-type-flag == MELEE-SOLDIER-GROUP)
                    =>
                    (up-modify-goal g-temp2 c:+ 2)
                    )

                    ;If removed object is the current target, reset target
                    (defrule
                    (false)
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-set-target-object search-local g: g-loop-counter)
                    (or
                        (up-point-distance g-point-x g-point2-x g:<= g-temp2)   ;group would get within enemy defensive building range to attack unit
                        (up-point-distance g-point-x g-point2-x g:<= g-temp3))  ;dangerous enemy building is closer to unit than distance between group and location group can attack unit from
                    (up-object-data object-data-id g:== g-current-group-target-object-id)
                    =>
                    (set-goal g-current-group-target-object-id PENDING)
                    (set-goal g-current-group-action PENDING)
                    (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
                    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
                    (up-get-fact game-time 0 g-temp5)
                    (up-get-fact player-number 0 g-temp6)
                    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
                    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                    (up-log-data 0 "Target protected by building, group %d" g: g-current-group)
                    ; (up-chat-data-to-all "Target protected by building, group %d" g: g-current-group)
                    )
                    
                    ;If attacking unit would put group in range of dangerous enemy building, remove enemy unit from list of potential targets
                    ;Unit must not be siege or a monk
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-set-target-object search-local g: g-loop-counter)
                    (up-object-data object-data-base-attack < 25)               ;target is not siege 
                    (up-object-data object-data-class != monastery-class)       ;or a monk
                    (up-object-data object-data-class != monk-with-relic-class)
                    (or
                        (up-point-distance g-point-x g-point2-x g:<= g-temp2)   ;group would get within enemy defensive building range to attack unit
                        (up-point-distance g-point-x g-point2-x g:<= g-temp3))  ;dangerous enemy building is closer to unit than distance between group and location group can attack unit from
                    =>
                    (up-remove-objects search-local object-data-index g:== g-loop-counter)
                    (up-get-search-state g-local-total)
                    (set-goal g-loop-counter2 0)
                    (set-goal g-temp2 999)
                    (set-goal g-temp3 999)
                    (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                    (up-jump-rule -9)
                    )
                    
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (up-set-target-object search-remote g: g-loop-counter2)
                    (up-set-target-object search-local g: g-loop-counter)
                    ; (up-point-distance g-point-x g-point2-x g:> g-temp2)    ;group would not get within enemy defensive building range to attack unit
                    ; (up-point-distance g-point-x g-point2-x g:> g-temp3)    ;group is closer to unit than enemy defensive building
                    =>
                    (up-modify-goal g-loop-counter2 c:+ 1)
                    (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                    (up-jump-rule -10)
                    )
                    
                    (defrule
                    (up-group-size g: g-current-group > 0)
                    (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
                    (or
                        (not
                            (up-set-target-object search-remote g: g-loop-counter2))
                        (or
                            (not
                                (up-set-target-object search-local g: g-loop-counter))
                            (up-compare-goal g-loop-counter2 >= 40)))
                    (up-compare-goal g-loop-counter < 239)
                    ; (up-point-distance g-point-x g-point2-x g:> g-temp2)    ;group would get within enemy defensive building range to attack unit
                    ; (up-point-distance g-point-x g-point2-x g:> g-temp3)    ;group is closer to unit than enemy defensive building
                    (up-modify-goal g-loop-counter c:+ 1)
                    (up-set-target-object search-local g: g-loop-counter)
                    =>
                    (set-goal g-loop-counter2 0)
                    (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                    (up-jump-rule -11)
                    )

    ;-------------------
    ;   Choose Target
    ;-------------------

        ;----------
        ;   Prep
        ;----------

            (defrule
            (or
                (up-group-size g: g-current-group == 0)
                (or
                    (up-compare-goal g-current-group-target-selection-status < FOUND-POTENTIAL-TARGETS)
                    (up-compare-goal g-local-total == 0)))
            =>
            ; (up-modify-group-flag 0 c: 0)
            (up-reset-group c: 0)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-RESET-GROUP-0 c: 0)
            (up-jump-rule 1)
            )

                (load "The General 1.2/Functions/StoreLocalList")  ;1 rule, store potential targets in DUC group #0

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-group-size c: 0 > 0)
            (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
            =>
            (up-full-reset-search)
            (up-set-group search-remote c: 0)   ;put potential targets in remote list from DUC group #0
            (up-get-search-state g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-CHECKPOINT c: 14)
            (up-log-data 0 CHAT-OBJECTS-FOUND-LOCAL g: g-local-total)
            (up-log-data 0 CHAT-OBJECTS-FOUND-REMOTE g: g-remote-total)
            )

            ;Order list by speed, if fastest speed is 0, that means that we only found building targets
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-set-target-object search-remote c: 0)
            (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
            =>
            (up-clean-search search-remote object-data-speed search-order-desc)
            )

            ;If units found, get rid of found buildings
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag != CANNON-GROUP)
            (up-set-target-object search-remote c: 0)
            (or
                (up-object-data object-data-speed >= 50)
                (up-object-data object-data-class == unpacked-trebuchet-class))
            =>
            (set-goal g-current-group-target-selection-status FOUND-UNITS-TO-TARGET)
            (up-remove-objects search-remote object-data-class == building-class)
            (up-remove-objects search-remote object-data-class == tower-class)
            (up-remove-objects search-remote object-data-class == farm-class)
            (up-remove-objects search-remote object-data-class == wall-class)
            (up-remove-objects search-remote object-data-class == gate-class)
            (up-get-search-state g-local-total)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-UNITS-FOUND g: g-remote-total)
            (up-log-data 0 CHAT-UNITS-FOUND-BY-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-UNITS-FOUND g: g-remote-total)
            ; (up-chat-data-to-all CHAT-UNITS-FOUND-BY-GROUP g: g-current-group)
            )

            ;If units found, get rid of found buildings
            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
            (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
            (up-set-target-object search-remote c: 0)
            (or
                (up-object-data object-data-speed >= 50)
                (up-object-data object-data-class == unpacked-trebuchet-class))
            =>
            (set-goal g-current-group-target-selection-status FOUND-UNITS-TO-TARGET)
            (up-get-search-state g-local-total)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-UNITS-FOUND g: g-remote-total)
            (up-log-data 0 CHAT-UNITS-FOUND-BY-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-UNITS-FOUND g: g-remote-total)
            ; (up-chat-data-to-all CHAT-UNITS-FOUND-BY-GROUP g: g-current-group)
            )
            
            ;If buildings found (fastest speed of object found is < 50), building will be attack target
            (defrule
            (up-group-size g: g-current-group > 0)
            (or
                (not                                            ;group doesn't have a valid attack target
                    (up-set-target-by-id g: g-current-group-target-object-id))
                (and
                    (up-set-target-by-id g: g-current-group-target-object-id)
                    (up-object-data object-data-hitpoints <= 0)))
            (goal g-current-group-target-selection-status FOUND-POTENTIAL-TARGETS)
            (up-set-target-object search-remote c: 0)
            (up-object-data object-data-speed < 50)
            (up-object-data object-data-class != unpacked-trebuchet-class)
            =>
            (set-goal g-current-group-target-selection-status FOUND-BUILDINGS-TO-TARGET)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 "Buildings found: %d" g: g-remote-total)
            (up-log-data 0 "Buildings found by Group: %d" g: g-current-group)
            ; (up-chat-data-to-all "Buildings found: %d" g: g-remote-total)
            ; (up-chat-data-to-all "Buildings found by Group: %d" g: g-current-group)
            )

            ; ;Add current target to list of potential targets
            ; (defrule
            ; (up-group-size g: g-current-group > 0)
            ; (up-compare-goal g-remote-total > 0)
            ; (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            ; (up-set-target-by-id g: g-current-group-target-object-id)
            ; (up-compare-flag g-current-group-flag != WITHIN-RANGE-OF-DANGEROUS-BUILDING)
            ; =>
            ; (up-remove-objects search-remote object-data-id g:== g-current-group-target-object-id)
            ; (up-add-object-by-id search-remote g: g-current-group-target-object-id)
            ; (up-clean-search search-remote -1 search-order-asc)
            ; )

            ;Loop #23
            ;Get ready to calculate priority score for each potential object
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            =>
            (up-set-target-point g-current-group-location-x)
            (set-goal g-loop-counter 0)
            (set-goal g-current-group-potential-target-score 0)
            (set-goal g-current-group-best-potential-target-score -999999)
            (set-goal g-current-group-potential-target-id PENDING)
            (set-goal g-temp2 PENDING)
            (up-log-data 0 CHAT-LOOP-ID c: 23)
            )

        ;--------------------
        ;   Set Priorities
        ;--------------------

            ;------------------------
            ;   General Priorities
            ;------------------------

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-fact game-time 0 g-temp5)
                (up-get-fact player-number 0 g-temp6)
                (up-log-data 0 "---Loop Log Entry---" c: 0)
                (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                (up-get-object-data object-data-id g-temp2)
                (up-log-data 0 "New Potential Target ID: %d" g: g-temp2)
                ; (up-chat-data-to-all "New Potential Target ID: %d" g: g-temp2)
                (up-get-object-data object-data-base-type g-temp2)
                (up-log-data 0 "New Potential Target Type: %d" g: g-temp2)
                ; (up-chat-data-to-all "New Potential Target Type: %d" g: g-temp2)
                (up-get-object-data object-data-class g-temp2)
                (up-log-data 0 "New Potential Target Class: %d" g: g-temp2)
                ; (up-chat-data-to-all "New Potential Target Class: %d" g: g-temp2)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-flag == ASSAULT-MODE)
                (up-compare-flag g-current-group-type-flag != RANGED-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag != MONK-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-speed == 0)
                (up-object-data object-data-range > 0)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 25)
                (up-log-data 0 "Any: ranged building +25" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-get-object-data object-data-target-id g-temp)
                =>
                (up-set-group search-local g: g-current-group)
                (up-remove-objects search-local object-data-id g:!= g-temp)
                (up-get-search-state g-local-total)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-get-object-data object-data-target-id g-temp)
                (up-compare-goal g-local-total > 0)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: attacking our group +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-flag == ASSAULT-MODE)
                (up-compare-flag g-current-group-type-flag != RANGED-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag != MONK-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-class == building-class)
                (up-object-data object-data-range == 0)
                (up-object-data object-data-maxhp >= 1500)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 10)
                (up-log-data 0 "Any: high HP non-ranged building +10" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-flag == ASSAULT-MODE)
                (up-compare-flag g-current-group-type-flag != RANGED-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag != MONK-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-class == gate-class)
                =>
                (up-modify-goal g-current-group-potential-target-score c:- 50)
                (up-log-data 0 "Any: gate -50" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-flag == ASSAULT-MODE)
                (up-compare-flag g-current-group-type-flag != RANGED-SOLDIER-GROUP)
                (up-compare-flag g-current-group-type-flag != MONK-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-class == wall-class)
                =>
                (up-modify-goal g-current-group-potential-target-score c:- 200)
                (up-log-data 0 "Any: wall -200" c: 0)
                )
                
                ;Prioritize current target slightly if focusing single targets
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-flag == FOCUS-SINGLE-TARGET)
                (up-set-target-by-id g: g-current-group-target-object-id)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-id g:== g-current-group-target-object-id)
                (or
                    (up-object-data object-data-speed > 0)
                    (up-object-data object-data-class == unpacked-trebuchet-class))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 0)   ;+5
                )
                ;Prioritize current target heavily if focusing multiple targets
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-flag != FOCUS-SINGLE-TARGET)
                (up-set-target-by-id g: g-current-group-target-object-id)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-id g:== g-current-group-target-object-id)
                (or
                    (up-object-data object-data-speed > 0)
                    (up-object-data object-data-class == unpacked-trebuchet-class))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 0)  ;+10
                )

            ;--------------------
            ;   Melee Infantry
            ;--------------------

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:* 4)
                (up-log-data 0 "Melee Infantry: distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Melee Infantry: attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                (up-get-object-data object-data-strike-armor g-temp2)
                (up-log-data 0 "Melee Infantry: armor -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger melee armor = lower priority
                (up-get-object-data object-data-range g-temp2)
                (up-modify-goal g-temp2 c:/ 2)
                (up-log-data 0 "Melee Infantry: range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority, but distance more important
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-hitpoints g-temp2)
                (up-modify-goal g-temp2 c:/ 15)
                (up-log-data 0 "Melee Infantry: HP -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger HP = lower priority
                (up-get-object-data object-data-speed g-temp2)
                (up-modify-goal g-temp2 c:/ 10)
                (up-log-data 0 "Melee Infantry: speed -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger speed = lower priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == feudal-battering-ram)
                    (or
                        (up-object-data object-data-class == packed-trebuchet-class)
                        (or
                            (or
                                (up-object-data object-data-class == monastery-class)
                                (up-object-data object-data-class == monk-with-relic-class))
                            (up-object-data object-data-action-time < 5))))  ;recently was attacking
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Melee Infantry: ram, treb, monk, or recent +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == cataphract)
                    (or
                        (up-object-data object-data-base-type == jaguar-warrior)
                        (or
                            (up-object-data object-data-base-type == hand-cannoneer)
                            (up-object-data object-data-base-type == slinger))))
                (up-object-data object-data-distance <= 4)  ;try to kill cataphracts or jaguar warriors if they are close
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 10)
                (up-log-data 0 "Melee Infantry: anti-infantry +10" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-speed == 0)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                (up-compare-flag g-current-group-flag != ASSAULT-MODE)
                =>
                (up-modify-goal g-current-group-potential-target-score c:- 20)
                (up-log-data 0 "Melee Infantry: building -20" c: 0)
                )

            ;---------------------
            ;   Ranged Infantry
            ;---------------------

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:* 4)
                (up-log-data 0 "Ranged Infantry: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                (up-log-data 0 "Ranged Infantry: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                (up-get-object-data object-data-strike-armor g-temp2)
                (up-log-data 0 "Ranged Infantry: Armor -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger melee armor = lower priority
                (up-get-object-data object-data-range g-temp2)
                (up-modify-goal g-temp2 c:/ 2)
                (up-log-data 0 "Ranged Infantry: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority, but distance more important
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-hitpoints g-temp2)
                (up-modify-goal g-temp2 c:/ 8)
                (up-log-data 0 "Ranged Infantry: HP -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger HP = lower priority
                (up-get-object-data object-data-speed g-temp2)
                (up-modify-goal g-temp2 c:/ 8)
                (up-log-data 0 "Ranged Infantry: Speed -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger speed = lower priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == feudal-battering-ram)
                    (or
                        (up-object-data object-data-class == packed-trebuchet-class)
                        (or
                            (or
                                (up-object-data object-data-class == monastery-class)
                                (up-object-data object-data-class == monk-with-relic-class))
                            (up-object-data object-data-action-time < 5))))  ;recently was attacking
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Ranged Infantry: ram, treb, monks +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == cataphract)
                    (or
                        (up-object-data object-data-base-type == jaguar-warrior)
                        (or
                            (up-object-data object-data-base-type == hand-cannoneer)
                            (up-object-data object-data-base-type == slinger))))
                (up-object-data object-data-distance <= 4)  ;try to kill cataphracts or jaguar warriors if they are close
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 10)
                (up-log-data 0 "Ranged Infantry: anti-infantry +10" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-speed == 0)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                (up-compare-flag g-current-group-flag != ASSAULT-MODE)
                =>
                (up-modify-goal g-current-group-potential-target-score c:- 20)
                (up-log-data 0 "Ranged Infantry: building -20" c: 0)
                )

            ;------------------
            ;   Foot Archers
            ;------------------
            
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:* 4)
                (up-log-data 0 "Foot Archers: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                ; (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Foot Archers: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                (up-get-object-data object-data-pierce-armor g-temp2)
                (up-modify-goal g-temp2 c:* 3)
                (up-log-data 0 "Foot Archers: Armor -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger pierce armor = lower priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-hitpoints g-temp2)
                (up-modify-goal g-temp2 c:/ 10)
                (up-log-data 0 "Foot Archers: HP -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger HP = lower priority
                (up-get-object-data object-data-range g-temp2)
                ; (up-modify-goal g-temp2 c:/ 2)
                (up-log-data 0 "Foot Archers: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority
                (up-get-object-data object-data-speed g-temp2)
                (up-modify-goal g-temp2 c:/ 20)
                (up-log-data 0 "Foot Archers: Speed +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger speed = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == mangonel)
                    (or
                        (up-object-data object-data-action-time <= 5)     ;was recently attacking
                        (or
                            (up-object-data object-data-class == monastery-class)
                            (up-object-data object-data-class == monk-with-relic-class))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Foot Archers: Mangonel, recent attack, monk +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == ghulam)
                    (up-object-data object-data-base-type == shrivamsha-rider))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Foot Archers: ghulam, shrivamsha rider +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == spearman)
                    (or
                        (up-object-data object-data-base-type == skirmisher)
                        (or
                            (up-object-data object-data-base-type == genitour)
                            (up-object-data object-data-base-type == huskarl))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 10)
                (up-log-data 0 "Foot Archers: spears, anti-archer +10" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-speed == 0)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                =>
                (up-modify-goal g-current-group-potential-target-score c:- 30)
                (up-log-data 0 "Foot Archers: building -30" c: 0)
                )

            ;---------------------
            ;   Cavalry Archers
            ;---------------------
            
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:* 4)
                (up-log-data 0 "Cav Archers: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                ; (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Cav Archers: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                (up-get-object-data object-data-pierce-armor g-temp2)
                (up-modify-goal g-temp2 c:* 3)
                (up-log-data 0 "Cav Archers: Armor -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger pierce armor = lower priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-hitpoints g-temp2)
                (up-modify-goal g-temp2 c:/ 10)
                (up-log-data 0 "Cav Archers: HP -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger HP = lower priority
                (up-get-object-data object-data-range g-temp2)
                ; (up-modify-goal g-temp2 c:/ 2)
                (up-log-data 0 "Cav Archers: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority
                (up-get-object-data object-data-speed g-temp2)
                (up-modify-goal g-temp2 c:/ 10)
                (up-log-data 0 "Cav Archers: Speed +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger speed = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == spearman)
                    (or
                        (up-object-data object-data-base-type == mangonel)
                        (or
                            (up-object-data object-data-action-time <= 5)     ;was recently attacking
                            (or
                                (up-object-data object-data-class == monastery-class)
                                (up-object-data object-data-class == monk-with-relic-class)))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Cav Archers: spears, mangonel, recent attackers, monks +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == genoese-crossbowman)
                    (or
                        (up-object-data object-data-base-type == skirmisher)
                        (or
                            (up-object-data object-data-base-type == genitour)
                            (or
                                (up-object-data object-data-base-type == mameluke)
                                (up-object-data object-data-base-type == shrivamsha-rider)))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Cav Archers: genoa xbow, skirms, genitour, mameluke, shrivamsha +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == kamayuk)
                    (or
                        (up-object-data object-data-base-type == camel)
                        (or
                            (up-object-data object-data-base-type == ghulam)
                            (up-object-data object-data-base-type == huskarl))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 10)
                (up-log-data 0 "Cav Archers: kamayuk, camel, ghulam, huskarl +10" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-speed == 0)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                =>
                (up-modify-goal g-current-group-potential-target-score c:- 30)
                (up-log-data 0 "Cav Archers: buildings -30" c: 0)
                )

            ;-------------
            ;   Cavalry
            ;-------------

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Cavalry: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Cavalry: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                (up-get-object-data object-data-strike-armor g-temp2)
                (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Cavalry: Armor -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger melee armor = lower priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-hitpoints g-temp2)
                (up-modify-goal g-temp2 c:/ 15)
                (up-log-data 0 "Cavalry: HP -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger HP = lower priority
                (up-get-object-data object-data-range g-temp2)
                (up-modify-goal g-temp2 c:/ 2)
                (up-log-data 0 "Cavalry: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority
                (up-get-object-data object-data-speed g-temp2)
                (up-modify-goal g-temp2 c:/ 20)
                (up-log-data 0 "Cavalry: Speed -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger speed = lower priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-base-type == spearman)
                ; (up-object-data object-data-distance <= 6)  ;try to kill spearmen
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 50)
                (up-log-data 0 "Cavalry: spears +50" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == camel)
                    (or
                        (up-object-data object-data-base-type == feudal-battering-ram)
                        (or
                            (up-object-data object-data-class == packed-trebuchet-class)
                            (or
                                (up-object-data object-data-action-time <= 5)
                                (or
                                    (up-object-data object-data-class == monastery-class)
                                    (up-object-data object-data-class == monk-with-relic-class))))))     ;was recently attacking
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Cavalry: camel, ram, treb, recent attack, monk +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == siege-weapon-class)
                    (up-object-data object-data-class == scorpion-class))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 5)
                (up-log-data 0 "Cavalry: siege +5" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-speed == 0)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                (up-compare-flag g-current-group-flag != ASSAULT-MODE)
                =>
                (up-modify-goal g-current-group-potential-target-score c:- 30)
                (up-log-data 0 "Cavalry: buildings -30" c: 0)
                )

            ;-----------
            ;   Monks
            ;-----------
            
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MONK-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:- 9)          ;Ideal distance is 9
                (up-modify-goal g-temp3 g:= g-temp2)    ;Check if g-temp2 is now negative by storing the opposite in g-temp3 and see which is larger
                (up-modify-goal g-temp3 c:* -1)
                (up-modify-goal g-temp2 g:max g-temp3)  ;Now g-temp2 is the absolute value of what it was after subtracting 9
                (up-modify-goal g-temp2 c:* 6)
                (up-log-data 0 "Monks: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2)
                (up-get-object-data object-data-base-attack g-temp2)
                (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Monks: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                (up-get-object-data object-data-hitpoints g-temp2)
                ; (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Monks: HP +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger HP = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MONK-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-range g-temp2)
                (up-modify-goal g-temp2 c:* 3)
                (up-log-data 0 "Monks: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = lower priority
                (up-get-object-data object-data-speed g-temp2)
                (up-modify-goal g-temp2 c:/ 10)
                (up-log-data 0 "Monks: Speed -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger speed = lower priority
                )
                
            ;----------
            ;   Rams
            ;----------

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:/ 2)
                (up-log-data 0 "Rams: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                (up-modify-goal g-temp2 c:min 15)
                (up-modify-goal g-temp2 c:* 10)
                (up-log-data 0 "Rams: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                (up-get-object-data object-data-range g-temp2)
                (up-modify-goal g-temp2 c:* 4)
                (up-log-data 0 "Rams: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-maxhp g-temp2)
                (up-modify-goal g-temp2 c:/ 15)
                (up-log-data 0 "Rams: Max HP +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger max HP = higher priority
                (up-get-object-data object-data-hitpoints g-temp2)
                (up-modify-goal g-temp2 c:/ 30)
                (up-log-data 0 "Rams: HP -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger HP = lower priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == feudal-battering-ram)
                    (up-object-data object-data-base-type == armored-elephant))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 150)
                (up-log-data 0 "Rams: rams +150" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-class == siege-weapon-class)
                (up-object-data object-data-target == siege-weapon-class)   ;siege weapon is attacking our rams or other siege weapons
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 100)
                (up-log-data 0 "Rams: Enemy siege targeting siege +100" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == siege-weapon-class)
                    (or
                        (up-object-data object-data-class == scorpion-class)
                        (or
                            (up-object-data object-data-class == unpacked-trebuchet-class)
                            (up-object-data object-data-class == packed-trebuchet-class))))
                (up-object-data object-data-distance <= 4)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 100)
                (up-log-data 0 "Rams: Siege +100" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-action-time < 5)  ;recently was attacking
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 50)
                (up-log-data 0 "Rams: recent attackers +50" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == RAM-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-language-id == lang-id-town-center)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 50)
                (up-log-data 0 "Rams: TCs +50" c: 0)
                )
                
            ;---------------
            ;   Mangonels
            ;---------------
            
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:* 4)
                (up-log-data 0 "Mangonels: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                ; (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Mangonels: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-hitpoints g-temp2)
                (up-modify-goal g-temp2 c:/ 20)
                (up-log-data 0 "Mangonels: HP -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger HP = lower priority
                (up-get-object-data object-data-range g-temp2)
                ; (up-modify-goal g-temp2 c:/ 2)
                (up-log-data 0 "Mangonels: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority
                (up-get-object-data object-data-speed g-temp2)
                (up-modify-goal g-temp2 c:/ 10)
                (up-log-data 0 "Mangonels: Speed +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger speed = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-maxhp < 40)
                    (or
                        (up-object-data object-data-class == siege-weapon-class)
                        (or
                            (up-object-data object-data-class == scorpion-class)
                            (or
                                (up-object-data object-data-class == packed-trebuchet-class)
                                (up-object-data object-data-class == unpacked-trebuchet-class)))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 30)
                (up-log-data 0 "Mangonels: low maxhp, siege +30" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == mangonel)
                    (or
                        (up-object-data object-data-action-time <= 5)     ;was recently attacking
                        (or
                            (up-object-data object-data-class == monastery-class)
                            (up-object-data object-data-class == monk-with-relic-class))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Mangonels: mangonels, recent attackers, monks +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == mangudai)
                    (or
                        (up-object-data object-data-base-type == gbeto)
                        (or
                            (up-object-data object-data-base-type == bombard-cannon)
                            (up-object-data object-data-base-type == chakram-thrower))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Mangonels: mangudai, gbeto, cannon, chakram +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == mameluke)
                    (or
                        (up-object-data object-data-base-type == throwing-axeman)
                        (or
                            (up-object-data object-data-base-type == magyar-huszar)
                            (or
                                (up-object-data object-data-base-type == chu-ko-nu)
                                (up-object-data object-data-base-type == kipchak)))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 10)
                (up-log-data 0 "Mangonels: mameluke, axemen, huszar, chukonu, kipchak +10" c: 0)
                )
                
            ;---------------
            ;   Scorpions
            ;---------------
            
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:- 6)          ;Ideal distance is 6
                (up-modify-goal g-temp3 g:= g-temp2)    ;Check if g-temp2 is now negative by storing the opposite in g-temp3 and see which is larger
                (up-modify-goal g-temp3 c:* -1)
                (up-modify-goal g-temp2 g:max g-temp3)  ;Now g-temp2 is the absolute value of what it was after subtracting 6
                (up-modify-goal g-temp2 c:* 6)
                (up-log-data 0 "Scorpions: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                (up-modify-goal g-temp2 c:* 2)
                (up-log-data 0 "Scorpions: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-range g-temp2)
                ; (up-modify-goal g-temp2 c:/ 2)
                (up-log-data 0 "Scorpions: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority
                (up-get-object-data object-data-speed g-temp2)
                (up-modify-goal g-temp2 c:/ 10)
                (up-log-data 0 "Scorpions: Speed +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger speed = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 2)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == battering-ram)
                    (up-object-data object-data-base-type == armored-elephant))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 50)
                (up-log-data 0 "Scorpions: Rams +50" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == mangudai)
                    (or
                        (up-object-data object-data-base-type == mangonel)
                        (or
                            (up-object-data object-data-base-type == bombard-cannon)
                            (up-object-data object-data-base-type == magyar-huszar))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 30)
                (up-log-data 0 "Scorpions: mangudai, mangonel, cannon, huszar +30" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == infantry-class)
                    (up-object-data object-data-class == cavalry-class))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Scorpions: infantry, cavaly +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == eagle-warrior)
                    (or
                        (up-object-data object-data-action-time <= 5)     ;was recently attacking
                        (or
                            (up-object-data object-data-class == monastery-class)
                            (or
                                (up-object-data object-data-class == monk-with-relic-class)
                                (up-object-data object-data-base-type == chu-ko-nu)))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Scorpions: eagles, recent attackers, monks +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == mameluke)
                    (or
                        (up-object-data object-data-base-type == throwing-axeman)
                        (or
                            (up-object-data object-data-base-type == gbeto)
                            (up-object-data object-data-base-type == chakram-thrower))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 10)
                (up-log-data 0 "Scorpions: mameluke, axemen, gbeto, chakram +10" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == chu-ko-nu)
                    (or
                        (up-object-data object-data-base-type == arambai)
                        (up-object-data object-data-base-type == kipchak)))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 10)
                (up-log-data 0 "Scorpions: chukonu, arambai, kipchak +10" c: 0)
                )
                
            ;-------------
            ;   Cannons
            ;-------------

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                ; (up-modify-goal g-temp2 c:* 4)
                (up-log-data 0 "Cannons: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                (up-modify-goal g-temp2 c:min 15)
                (up-modify-goal g-temp2 c:* 6)
                (up-log-data 0 "Cannons: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                (up-get-object-data object-data-range g-temp2)
                (up-modify-goal g-temp2 c:* 4)
                (up-log-data 0 "Cannons: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-maxhp g-temp2)
                (up-modify-goal g-temp2 c:/ 15)
                (up-log-data 0 "Cannons: Max HP +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger max HP = higher priority
                (up-get-object-data object-data-hitpoints g-temp2)
                (up-modify-goal g-temp2 c:/ 30)
                (up-log-data 0 "Cannons: HP -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger HP = lower priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-target == siege-weapon-class)   ;unit is attacking our cannons or other siege weapons
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 200)
                (up-log-data 0 "Cannons: attacking our siege +200" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == siege-weapon-class)
                    (or
                        (up-object-data object-data-class == scorpion-class)
                        (or
                            (up-object-data object-data-class == packed-trebuchet-class)
                            (up-object-data object-data-class == unpacked-trebuchet-class))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 150)
                (up-log-data 0 "Cannons: Siege +150" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-language-id == lang-id-town-center)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 50)
                (up-log-data 0 "Cannons: TCs +50" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-speed == 0)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 50)
                (up-log-data 0 "Cannons: Buildings +50" c: 0)
                )
                
            ;----------------
            ;   Trebuchets
            ;----------------

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-distance g-temp2)
                (up-modify-goal g-temp2 c:/ 2)
                (up-log-data 0 "Trebuchets: Distance -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger distances = lower priority
                (up-get-object-data object-data-base-attack g-temp2)
                (up-modify-goal g-temp2 c:min 15)
                (up-modify-goal g-temp2 c:* 10)
                (up-log-data 0 "Trebuchets: Attack +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger attack = higher priority
                (up-get-object-data object-data-range g-temp2)
                (up-modify-goal g-temp2 c:* 4)
                (up-log-data 0 "Trebuchets: Range +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger range = higher priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-get-object-data object-data-maxhp g-temp2)
                (up-modify-goal g-temp2 c:/ 15)
                (up-log-data 0 "Trebuchets: Max HP +%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:+ g-temp2) ;larger max HP = higher priority
                (up-get-object-data object-data-hitpoints g-temp2)
                (up-modify-goal g-temp2 c:/ 30)
                (up-log-data 0 "Trebuchets: HP -%d" g: g-temp2)
                (up-modify-goal g-current-group-potential-target-score g:- g-temp2) ;larger HP = lower priority
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == packed-trebuchet-class)
                    (up-object-data object-data-class == unpacked-trebuchet-class))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 150)
                (up-log-data 0 "Trebuchets: Trebs +150" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-action-time < 5)  ;recently was attacking
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 50)
                (up-log-data 0 "Trebuchets: Recent attackers +50" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-language-id == lang-id-town-center)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 50)
                (up-log-data 0 "Trebuchets: TCs +50" c: 0)
                )

            ;-------------------
            ;   Counter Units
            ;-------------------

                ;Anti-infantry
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 32768)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-class == infantry-class)
                (up-object-data object-data-base-type != spearman)
                (up-object-data object-data-base-type != eagle-warrior)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-infantry +20" c: 0)
                )
                ;Anti-pikemen
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 65536)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-base-type == spearman)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-pikemen +20" c: 0)
                )
                ;Anti-eagles
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 131072)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-object-data object-data-base-type == eagle-warrior)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-eagles +20" c: 0)
                )
                ;Anti-foot-archers
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 262144)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == archery-class)
                    (up-object-data object-data-class == archery-cannon-class))
                (up-object-data object-data-base-type != skirmisher)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-foot-archers +20" c: 0)
                )
                ;Anti-skirmishers
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 524288)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == skirmisher)
                    (up-object-data object-data-base-type == genitour))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-skirmishers +20" c: 0)
                )
                ;Anti-cav-archers
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 1048576)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == cavalry-archer-class)
                    (or
                        (up-object-data object-data-class == cavalry-cannon-class)
                        (up-object-data object-data-base-type == ballista-elephant)))
                (up-object-data object-data-base-type != genitour)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-cav-archers +20" c: 0)
                )
                ;Anti-cavalry
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 2097152)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == cavalry-class)
                    (up-object-data object-data-class == scout-cavalry-class))
                (up-object-data object-data-base-type != camel)
                (up-object-data object-data-base-type != mameluke)
                (up-object-data object-data-base-type != ballista-elephant)
                (up-object-data object-data-base-type != battle-elephant)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-cavalry +20" c: 0)
                )
                ;Anti-camels
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 4194304)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == camel)
                    (up-object-data object-data-base-type == mameluke))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-camels +20" c: 0)
                )
                ;Anti-elephants
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 8388608)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == war-elephant)
                    (or
                        (up-object-data object-data-base-type == battle-elephant)
                        (or
                            (up-object-data object-data-base-type == ballista-elephant)
                            (up-object-data object-data-base-type == armored-elephant))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-elephants +20" c: 0)
                )
                ;Anti-siege
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 16777216)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == siege-weapon-class)
                    (or
                        (up-object-data object-data-class == scorpion-class)
                        (or
                            (up-object-data object-data-class == unpacked-trebuchet-class)
                            (up-object-data object-data-class == packed-trebuchet-class))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-siege +20" c: 0)
                )
                ;Anti-monks
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 33554432)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == monastery-class)
                    (up-object-data object-data-class == monk-with-relic-class))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-monks +20" c: 0)
                )
                ;Anti-gunpowder
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 67108864)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-class == archery-cannon-class)
                    (or
                        (up-object-data object-data-class == cavalry-cannon-class)
                        (or
                            (up-object-data object-data-base-type == bombard-cannon)
                            (or
                                (up-object-data object-data-base-type == organ-gun)
                                (up-object-data object-data-base-type == hussite-wagon)))))
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-gunpowder +20" c: 0)
                )
                ;Anti-unique-units
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 134217728)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-train-site == castle)
                    (or
                        (up-object-data object-data-base-type == barracks-huskarl)
                        (or
                            (up-object-data object-data-base-type == stable-tarkan)
                            (up-object-data object-data-base-type == condottiero))))
                (up-object-data object-data-class != packed-trebuchet-class)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                (up-object-data object-data-base-type != petard)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-unique-units +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 134217728)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == foot-konnik)
                    (or
                        (up-object-data object-data-base-type == donjon-serjeant)
                        (up-object-data object-data-base-type == shrivamsha-rider)))
                (up-object-data object-data-class != packed-trebuchet-class)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                (up-object-data object-data-base-type != petard)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-unique-units +20" c: 0)
                )
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-compare-flag g-current-group-type-flag == 134217728)
                (up-set-target-object search-remote g: g-loop-counter)
                (or
                    (up-object-data object-data-base-type == flemish-militia-female)
                    (or
                        (up-object-data object-data-base-type == flemish-militia-male)
                        (up-object-data object-data-base-type == flemish-militia-trained)))
                (up-object-data object-data-class != packed-trebuchet-class)
                (up-object-data object-data-class != unpacked-trebuchet-class)
                (up-object-data object-data-base-type != petard)
                =>
                (up-modify-goal g-current-group-potential-target-score c:+ 20)
                (up-log-data 0 "Any: anti-unique-units +20" c: 0)
                )

            ;----------------
            ;   Comparison
            ;----------------

                ;Check Score
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-set-target-object search-remote g: g-loop-counter)
                =>
                (up-log-data 0 "New Potential Target Score: %d" g: g-current-group-potential-target-score)
                ; (up-chat-data-to-all "New Potential Target Score: %d" g: g-current-group-potential-target-score)
                )

                ;Pick New Best Target
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-compare-goal g-current-group-potential-target-score g:> g-current-group-best-potential-target-score)
                =>
                (up-modify-goal g-current-group-best-potential-target-score g:= g-current-group-potential-target-score)
                (up-get-object-data object-data-id g-current-group-potential-target-id)
                (up-log-data 0 "New Best Target ID: %d" g: g-current-group-potential-target-id)
                ; (up-chat-data-to-all "New Best Target ID: %d" g: g-current-group-potential-target-id)
                )

                ;Repeat Loop
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-remote-total > 0)
                (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-remote g: g-loop-counter)
                (up-compare-goal g-loop-counter < 40)
                =>
                (set-goal g-current-group-potential-target-score 0)
                (set-goal g-temp2 PENDING)
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -89)
                )

        ;-------------------
        ;   Choose Target
        ;-------------------

            ; ;Set new target
            ; (defrule
            ; (up-group-size g: g-current-group > 0)
            ; (up-compare-goal g-remote-total > 0)
            ; (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            ; (up-set-target-by-id g: g-current-group-potential-target-id)
            ; =>
            ; (up-get-object-data object-data-class g-temp6)
            ; (up-chat-data-to-all "Potential target is class %d" g: g-temp6)
            ; )

            ; (defrule
            ; (up-group-size g: g-current-group > 0)
            ; (up-compare-goal g-remote-total > 0)
            ; (up-set-target-by-id g: g-current-group-target-object-id)
            ; =>
            ; (up-get-object-data object-data-hitpoints g-temp6)
            ; (up-chat-data-to-all "Old target HP %d" g: g-temp6)
            ; )

            (defrule
            (timer-triggered t-5-sec)
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-modify-goal g-temp5 g:= g-current-group-smallest-range) 
            (up-modify-goal g-temp5 c:+ 2)      
            (up-object-data object-data-distance g:> g-temp5)
            (up-set-target-by-id g: g-current-group-potential-target-id)
            ; (up-object-data object-data-id g:!= g-current-group-target-object-id)
            (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            (up-compare-goal g-current-group-target-selection-status < TARGET-UNIT-SET)
            =>
            (up-get-object-data object-data-id g-current-group-target-object-id)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id g: g-current-group-target-object-id)
            (set-goal g-current-group-target-selection-status TARGET-UNIT-SET)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-NEW-TARGET g: g-current-group)
            ; (up-chat-data-to-all CHAT-NEW-TARGET g: g-current-group)
            (up-log-data 0 CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            ; (up-chat-data-to-all CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-modify-goal g-temp5 g:= g-current-group-smallest-range) 
            (up-modify-goal g-temp5 c:+ 2)      
            (or
                (up-object-data object-data-distance g:> g-temp5)
                (up-object-data object-data-speed == 0))
            (up-set-target-by-id g: g-current-group-potential-target-id)
            (up-object-data object-data-id g:!= g-current-group-target-object-id)
            (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            (up-compare-goal g-current-group-target-selection-status < TARGET-UNIT-SET)
            =>
            (up-get-object-data object-data-id g-current-group-target-object-id)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id g: g-current-group-target-object-id)
            (set-goal g-current-group-target-selection-status TARGET-UNIT-SET)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-NEW-TARGET g: g-current-group)
            ; (up-chat-data-to-all CHAT-NEW-TARGET g: g-current-group)
            (up-log-data 0 CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            ; (up-chat-data-to-all CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-compare-flag g-current-group-flag == FOCUS-SINGLE-TARGET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-set-target-by-id g: g-current-group-potential-target-id)
            (up-object-data object-data-id g:!= g-current-group-target-object-id)
            (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            (up-compare-goal g-current-group-target-selection-status < TARGET-UNIT-SET)
            =>
            (up-get-object-data object-data-id g-current-group-target-object-id)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id g: g-current-group-target-object-id)
            (set-goal g-current-group-target-selection-status TARGET-UNIT-SET)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-NEW-TARGET g: g-current-group)
            ; (up-chat-data-to-all CHAT-NEW-TARGET g: g-current-group)
            (up-log-data 0 CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            ; (up-chat-data-to-all CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            )
            ; (defrule
            ; (up-group-size g: g-current-group > 0)
            ; (up-compare-goal g-remote-total > 0)
            ; (up-set-target-by-id g: g-current-group-target-object-id)       
            ; (up-object-data object-data-speed < 50)
            ; (up-object-data object-data-class != unpacked-trebuchet-class)
            ; (up-set-target-object search-remote c: 0)
            ; (up-object-data object-data-id g:!= g-current-group-target-object-id)
            ; (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            ; (up-compare-goal g-current-group-target-selection-status < TARGET-UNIT-SET)
            ; =>
            ; (up-get-object-data object-data-id g-current-group-target-object-id)
            ; (up-set-indirect-goal g: g-current-group-target-object-goal-id g: g-current-group-target-object-id)
            ; (set-goal g-current-group-target-selection-status TARGET-UNIT-SET)
            ; (up-get-object-data object-data-type g-temp)
            ; (up-chat-data-to-all "New Target2, group %d" g: g-current-group)
            ; )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (not                                            ;group doesn't have a valid attack target
                (up-set-target-by-id g: g-current-group-target-object-id))
            (up-set-target-by-id g: g-current-group-potential-target-id)
            (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            (up-compare-goal g-current-group-target-selection-status < TARGET-UNIT-SET)
            =>
            (up-get-object-data object-data-id g-current-group-target-object-id)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id g: g-current-group-target-object-id)
            (set-goal g-current-group-target-selection-status TARGET-UNIT-SET)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-NEW-TARGET g: g-current-group)
            ; (up-chat-data-to-all CHAT-NEW-TARGET g: g-current-group)
            (up-log-data 0 CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            ; (up-chat-data-to-all CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-by-id g: g-current-group-potential-target-id)
            (or
                (or
                    (up-object-data object-data-class == monastery-class)
                    (up-object-data object-data-class == monk-with-relic-class))
                (up-object-data object-data-class == siege-weapon-class))
            (up-object-data object-data-range > 0)
            (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            (up-compare-goal g-current-group-target-selection-status < TARGET-UNIT-SET)
            =>
            (up-get-object-data object-data-id g-current-group-target-object-id)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id g: g-current-group-target-object-id)
            (set-goal g-current-group-target-selection-status TARGET-UNIT-SET)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-NEW-TARGET g: g-current-group)
            ; (up-chat-data-to-all CHAT-NEW-TARGET g: g-current-group)
            (up-log-data 0 CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            ; (up-chat-data-to-all CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-by-id g: g-current-group-potential-target-id)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            =>
            (up-set-group search-local g: g-current-group)
            (up-remove-objects search-local object-data-carry < 100)    ;remove monks that can't convert
            (up-get-search-state g-local-total)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-remote-total > 0)
            (up-set-target-object search-local c: 0)
            (up-set-target-by-id g: g-current-group-potential-target-id)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            (up-compare-goal g-current-group-target-selection-status >= FOUND-UNITS-TO-TARGET)
            (up-compare-goal g-current-group-target-selection-status < TARGET-UNIT-SET)
            =>
            (up-get-object-data object-data-id g-current-group-target-object-id)
            (up-set-indirect-goal g: g-current-group-target-object-goal-id g: g-current-group-target-object-id)
            (set-goal g-current-group-target-selection-status TARGET-UNIT-SET)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-NEW-TARGET g: g-current-group)
            ; (up-chat-data-to-all CHAT-NEW-TARGET g: g-current-group)
            (up-log-data 0 CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            ; (up-chat-data-to-all CHAT-NEW-TARGET-ID g: g-current-group-target-object-id)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (goal g-current-group-target-selection-status TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-object-data object-data-speed < 50)
            (up-object-data object-data-class != unpacked-trebuchet-class)
            =>
            (set-goal g-current-group-target-selection-status TARGET-BUILDING-SET)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 "Group %d targeting building" g: g-current-group)
            ; (up-chat-data-to-all "Group %d targeting building" g: g-current-group)
            )

    ;-------------------
    ;   Attack Target
    ;-------------------

        ;-----------
        ;   Debug
        ;-----------

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-flag != FOCUS-SINGLE-TARGET)
            (up-compare-flag g-current-group-flag != FOCUS-MULTIPLE-TARGETS)
            ; (up-compare-flag g-current-group-flag != FOCUS-SEPARATE-TARGETS)
            =>
            (up-modify-flag g-current-group-flag c:+ FOCUS-SINGLE-TARGET)
            (up-get-fact game-time 0 g-loop-counter)
            (up-get-fact player-number 0 g-loop-counter2)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-loop-counter)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-loop-counter2)
            (up-log-data 0 "Group %d no target focus flags!" g: g-current-group)
            ; (up-chat-data-to-all "Group %d no target focus flags!" g: g-current-group)
            )

        ;-------------------------
        ;   Focus Single Target
        ;-------------------------

            ;Attack target
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-type-flag != MONK-GROUP)
            (up-compare-flag g-current-group-type-flag != TREBUCHET-GROUP)
            (up-compare-flag g-current-group-flag == FOCUS-SINGLE-TARGET)
            =>
            (up-modify-sn sn-number-tasked-units c:= 0)
            (up-set-group search-local g: g-current-group)
            (up-remove-objects search-local object-data-target-id g:== g-current-group-target-object-id)
            (up-clean-search search-local -1 search-order-asc)
            (up-target-objects 1 action-default -1 stance-no-attack)
            (set-goal g-current-group-action GROUP-ATTACK)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-ATTACK)
            (up-get-fact game-time 0 g-loop-counter)
            (up-get-fact player-number 0 g-loop-counter2)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-loop-counter)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-loop-counter2)
            (up-log-data 0 "Group %d attack target1" g: g-current-group)
            ; (up-chat-data-to-all "Group %d attack target1" g: g-current-group)
            )

            ;Monks
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            (up-research-status c: ri-theocracy < research-complete)
            =>
            (up-set-group search-local g: g-current-group)
            (up-remove-objects search-local object-data-target-id g:== g-current-group-target-object-id)
            (up-remove-objects search-local object-data-action == actionid-convert)
            (up-remove-objects search-local object-data-carry < 100)    ;Faith regeneration amount
            (up-remove-objects search-local object-data-index >= 1)     ;leave only one monk left in list to have just one monk convert
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            (up-research-status c: ri-theocracy >= research-complete)
            =>
            (up-modify-sn sn-number-tasked-units c:= 0)
            (up-set-group search-local g: g-current-group)
            (up-remove-objects search-local object-data-target-id g:== g-current-group-target-object-id)
            (up-remove-objects search-local object-data-action == actionid-convert)
            (up-remove-objects search-local object-data-carry < 100)    ;Faith regeneration amount
            (up-clean-search search-local -1 search-order-asc)
            (up-get-search-state g-local-total)
            )
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            (up-set-target-object search-local c: 0)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            =>
            (up-modify-sn sn-number-tasked-units c:= 0)
            (up-target-objects 1 action-default -1 -1)
            (set-goal g-current-group-action GROUP-ATTACK)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-ATTACK)
            (up-get-fact game-time 0 g-loop-counter)
            (up-get-fact player-number 0 g-loop-counter2)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-loop-counter)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-loop-counter2)
            (up-log-data 0 "Monk group %d attack target1" g: g-current-group)
            (up-log-data 0 "with %d monks" g: g-current-group)
            ; (up-chat-data-to-all "Monk group %d attack target1" g: g-current-group)
            ; (up-chat-data-to-all "with %d monks" g: g-local-total)
            )

            ;Trebuchets
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
            (up-compare-flag g-current-group-flag == FOCUS-SINGLE-TARGET)
            =>
            (up-modify-sn sn-number-tasked-units c:= 0)
            (up-set-group search-local g: g-current-group)
            (up-remove-objects search-local object-data-target-id g:== g-current-group-target-object-id)
            (up-clean-search search-local -1 search-order-asc)
            (up-target-objects 1 action-default -1 stance-aggressive)
            (set-goal g-current-group-action GROUP-ATTACK)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-ATTACK)
            (up-get-fact game-time 0 g-loop-counter)
            (up-get-fact player-number 0 g-loop-counter2)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-loop-counter)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-loop-counter2)
            (up-log-data 0 "Trebuchet group %d attack target1" g: g-current-group)
            ; (up-chat-data-to-all "Trebuchet group %d attack target1" g: g-current-group)
            )
        
        ;----------------------------
        ;   Focus Multiple Targets
        ;----------------------------

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
            =>
            (up-full-reset-search)
            (up-set-group search-local g: g-current-group)
            (up-remove-objects search-local object-data-target-id g:== g-current-group-target-object-id)
            ; (up-remove-objects search-local object-data-action == actionid-attack)
            (up-clean-search search-local -1 search-order-asc)
            (set-strategic-number sn-focus-player-number 1)
            (up-get-point position-object g-point-x)
            (up-set-target-point g-point-x)
            (up-filter-include cmdid-military -1 -1 -1)
            (up-filter-distance c: -1 c: 10)
            (up-get-search-state g-local-total)
            )

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
                (up-set-target-by-id g: g-current-group-target-object-id)
                (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
                (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
                (nand
                    (player-in-game focus-player)
                    (stance-toward focus-player enemy))
                =>
                (up-modify-sn sn-focus-player-number c:+ 1)
                (up-jump-rule -1)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
                (up-set-target-by-id g: g-current-group-target-object-id)
                (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
                (strategic-number sn-focus-player-number <= MAX-PLAYERS)
                =>
                (up-find-remote c: any-objects c: 10)
                (up-remove-objects search-remote object-data-id g:== g-current-group-target-object-id)
                (up-get-search-state g-local-total)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
                (up-set-target-by-id g: g-current-group-target-object-id)
                (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
                (strategic-number sn-focus-player-number < MAX-PLAYERS)
                (up-compare-goal g-remote-total < 3)
                =>
                (up-modify-sn sn-focus-player-number c:+ 1)
                (up-jump-rule -3)
                )

            ;Loop #24
            ;Remove any units from group that are already attacking units
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status == TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
            (up-compare-goal g-local-total > 0)
            =>
            (set-goal g-loop-counter 0)
            (up-log-data 0 CHAT-LOOP-ID c: 24)
            )

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-current-group-target-selection-status == TARGET-UNIT-SET)
                (up-set-target-by-id g: g-current-group-target-object-id)
                (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-set-target-object search-local g: g-loop-counter)
                (up-object-data object-data-action == actionid-attack)
                (up-object-data object-data-target != building-class)
                (up-object-data object-data-target != tower-class)
                (up-object-data object-data-target != wall-class)
                (up-object-data object-data-target != gate-class)
                (up-object-data object-data-target != farm-class)
                =>
                (up-remove-objects search-local object-data-index g:== g-loop-counter)
                (up-get-search-state g-local-total)
                (up-jump-rule -1)
                )

                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-current-group-target-selection-status == TARGET-UNIT-SET)
                (up-set-target-by-id g: g-current-group-target-object-id)
                (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
                (up-compare-goal g-local-total > 0)
                (up-modify-goal g-loop-counter c:+ 1)
                (up-set-target-object search-local g: g-loop-counter)
                (up-compare-goal g-loop-counter < 40)
                =>
                (up-log-data 0 CHAT-LOOP-PASS g: g-loop-counter)
                (up-jump-rule -2)
                )

            ; (defrule
            ; (up-group-size g: g-current-group > 0)
            ; (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            ; (up-set-target-by-id g: g-current-group-target-object-id)
            ; ; (up-compare-flag g-current-group-flag != FOCUS-SINGLE-TARGET)
            ; (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
            ; =>
            ; (up-chat-data-to-all "Units nearby %d" g: g-remote-total)
            ; )

            ;If we didn't find multiple nearby objects, attack single target
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
            (up-compare-goal g-remote-total < 3)
            (up-compare-goal g-local-total > 0)
            =>
            (up-modify-sn sn-number-tasked-units c:= 0)
            (up-target-objects 1 action-default -1 stance-no-attack)
            (set-goal g-current-group-action GROUP-ATTACK)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-ATTACK)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 "Group %d attack target2" g: g-current-group)
            ; (up-chat-data-to-all "Group %d attack target2" g: g-current-group)
            )

            ;If we found multiple nearby objects, use aggressive action-patrol
            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
            (up-set-target-by-id g: g-current-group-target-object-id)
            (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
            (up-compare-flag g-current-group-type-flag != RAM-GROUP)
            (up-compare-flag g-current-group-type-flag != MONK-GROUP)
            (up-compare-flag g-current-group-type-flag != RANGED-SIEGE-GROUP)
            (up-compare-goal g-remote-total >= 3)
            (up-compare-goal g-local-total > 0)
            =>
            (up-modify-sn sn-number-tasked-units c:= 0)
            (up-target-objects 1 action-patrol -1 stance-aggressive)
            (up-set-group search-local g: g-current-group)
            (up-target-point 0 action-none -1 stance-aggressive)
            (set-goal g-current-group-action GROUP-ATTACK)
            (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-ATTACK)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 "Group %d attack multiple targets1" g: g-current-group)
            ; (up-chat-data-to-all "Group %d attack multiple targets1" g: g-current-group)
            )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-type-flag != RAM-GROUP)
            (up-compare-flag g-current-group-type-flag != MONK-GROUP)
            (up-compare-flag g-current-group-type-flag != RANGED-SIEGE-GROUP)
            =>
            (up-jump-rule 1)
            )

                ;Attack with defensive stance
                (defrule
                (up-group-size g: g-current-group > 0)
                (up-compare-goal g-current-group-target-selection-status >= TARGET-UNIT-SET)
                (up-set-target-by-id g: g-current-group-target-object-id)
                (up-compare-flag g-current-group-flag == FOCUS-MULTIPLE-TARGETS)
                (up-compare-goal g-remote-total >= 3)
                (up-compare-goal g-local-total > 0)
                =>
                (up-modify-sn sn-number-tasked-units c:= 0)
                (up-target-objects 1 action-patrol -1 stance-defensive)
                (set-goal g-current-group-action GROUP-ATTACK)
                (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-ATTACK)
                (up-get-fact game-time 0 g-temp5)
                (up-get-fact player-number 0 g-temp6)
                (up-log-data 0 CHAT-LOG-ENTRY c: 0)
                (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
                (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
                (up-log-data 0 "Group %d attack multiple targets2" g: g-current-group)
                ; (up-chat-data-to-all "Group %d attack multiple targets2" g: g-current-group)
                )

    ;----------------------------------------------------
    ;   Track how long group has been attacking target
    ;----------------------------------------------------

        (defrule
        (up-group-size g: g-current-group > 0)
        (or
            (and
                (goal g-current-group-target-selection-status FOUND-UNITS-TO-TARGET)
                (goal g-current-group-action GROUP-ATTACK))
            (up-compare-goal g-current-group-action != GROUP-ATTACK))
        (up-compare-goal g-current-group-action != PENDING)
        =>
        (up-jump-rule 2)
        )

            (defrule
            (up-group-size g: g-current-group > 0)
            (up-point-distance g-current-group-location-x g-current-group-destination-x < 10)
            ; (or
            ;     (up-compare-goal g-current-group-target-selection-status >= SEARCH-FOR-POTENTIAL-TARGETS)
            ;     (up-compare-goal g-current-group-action <= PENDING))
            (up-compare-goal g-current-group-destination-time < MAX-DESTINATION-TIME)
            =>
            (up-modify-goal g-current-group-destination-time c:+ 1)
            (up-set-indirect-goal g: g-current-group-destination-time-goal-id g: g-current-group-destination-time)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-INCREASE-DESTINATION-TIME g: g-current-group-destination-time)
            ; (up-chat-data-to-all CHAT-INCREASE-DESTINATION-TIME g: g-current-group-destination-time)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-group-size g: g-current-group > 0)
            (up-point-distance g-current-group-location-x g-current-group-destination-x < 20)
            (up-compare-goal g-current-group-destination-time < MAX-DESTINATION-TIME)
            =>
            (up-modify-goal g-current-group-destination-time c:+ 1)
            (up-set-indirect-goal g: g-current-group-destination-time-goal-id g: g-current-group-destination-time)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-INCREASE-DESTINATION-TIME g: g-current-group-destination-time)
            ; (up-chat-data-to-all CHAT-INCREASE-DESTINATION-TIME g: g-current-group-destination-time)
            )

        ;If no objects to attack found, set attack to be over
        (defrule
        (up-group-size g: g-current-group > 0)
        (goal g-current-group-action GROUP-ATTACK)
        (up-compare-goal g-current-group-target-selection-status <= SEARCH-FOR-POTENTIAL-TARGETS)     ;no enemy units found nearby and group doesn't have valid target
        (or
            (not
                (up-set-target-by-id g: g-current-group-target-object-id))
            (and
                (up-set-target-by-id g: g-current-group-target-object-id)
                (or
                    (up-object-data object-data-speed > 0)
                    (up-object-data object-data-hitpoints <= 0))))
        (up-point-distance g-current-group-location-x g-current-group-destination-x > 3)
        =>
        (set-goal g-current-group-action PENDING)
        (set-goal g-current-group-target-object-id PENDING)
        (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
        (up-set-indirect-goal g: g-current-group-target-object-goal-id c: PENDING)
        (up-get-fact game-time 0 g-temp5)
        (up-get-fact player-number 0 g-temp6)
        (up-log-data 0 CHAT-LOG-ENTRY c: 0)
        (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
        (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
        (up-log-data 0 "attack over, group %d" g: g-current-group)
        ; (up-chat-data-to-all "attack over, group %d" g: g-current-group)
        )



;---------------------------
;   Gather Group Together
;---------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-action
    ;g-current-group-action-goal-id
    ;g-current-group-gather-status

    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-group-location-x-goal-id
    ;g-current-group-location-y-goal-id

    ;If the group becomes too scattered, reform group

    ;Setup
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
    (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (set-goal g-current-group-gather-status 0)
    )

    ;Search for any units not near the center of the group
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-action != GROUP-ATTACK)
    (up-point-distance g-current-group-location-x g-position-self-x < 20)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-set-target-point g-current-group-location-x)
    (up-remove-objects search-local object-data-distance < 3)
    (up-remove-objects search-local object-data-distance >= 20)
    (up-get-search-state g-local-total)
    (up-jump-rule 1)
    )
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-current-group-action != GROUP-ATTACK)
    (up-point-distance g-current-group-location-x g-position-self-x >= 20)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-set-target-point g-current-group-location-x)
    (up-remove-objects search-local object-data-distance < 3)
    (up-remove-objects search-local object-data-distance >= 10)
    (up-get-search-state g-local-total)
    )

        ; ;If attacking, search for any units not near the center of the group
        ; (defrule
        ; (timer-triggered t-5-sec)
        ; (up-group-size g: g-current-group > 0)
        ; (up-compare-goal g-current-group-action == GROUP-ATTACK)
        ; (up-compare-flag g-current-group-flag == FOCUS-SINGLE-TARGET)
        ; =>
        ; (up-full-reset-search)
        ; (up-set-group search-local g: g-current-group)
        ; (up-set-target-point g-current-group-location-x)
        ; (up-remove-objects search-local object-data-distance <= 10)
        ; (up-get-search-state g-local-total)
        ; )

        ; ;If attacking, search for any units not near the center of the group
        ; (defrule
        ; (timer-triggered t-5-sec)
        ; (up-group-size g: g-current-group > 0)
        ; (up-compare-goal g-current-group-action == GROUP-ATTACK)
        ; (up-compare-flag g-current-group-flag != FOCUS-SINGLE-TARGET)
        ; =>
        ; (up-full-reset-search)
        ; (up-set-group search-local g: g-current-group)
        ; (up-set-target-point g-current-group-location-x)
        ; (up-remove-objects search-local object-data-distance <= 13)
        ; (up-get-search-state g-local-total)
        ; )

    ;Search if anyone in the group is under attack. If not, don't gather group
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-local-total > 0)
    =>
    (set-goal g-current-group-gather-status 1)
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-remove-objects search-local object-data-attacker-id < 0)
    (up-get-search-state g-local-total)
    )

    ;Only gather group if no one in the group is under attack
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (up-compare-goal g-local-total == 0)
    (goal g-current-group-gather-status 1)
    =>
    (set-goal g-current-group-gather-status 2)
    )

    ;Check if g-current-group-location-x is near enemy defensive building
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-gather-status 2)
    =>
    (up-set-target-point g-current-group-location-x)
    (up-full-reset-search)
    (set-strategic-number sn-focus-player-number 1)
    )

        (defrule
        (timer-triggered t-5-sec)
        (up-group-size g: g-current-group > 0)
        (player-in-game focus-player)
        (stance-toward focus-player enemy)
        (goal g-current-group-gather-status 2)
        =>
        (up-filter-distance c: -1 c: 12)
        (up-find-remote c: town-center c: 40)
        (up-find-remote c: tower-class c: 40)
        (up-remove-objects search-remote object-data-type == outpost)
        (up-filter-distance c: -1 c: 14)
        (up-find-remote c: castle c: 40)
        (up-find-remote c: krepost c: 40)
        (up-clean-search search-remote object-data-distance search-order-asc)
        )

        (defrule
        (timer-triggered t-5-sec)
        (up-group-size g: g-current-group > 0)
        (goal g-current-group-gather-status 2)
        (up-compare-sn sn-focus-player-number < MAX-PLAYERS)
        =>
        (up-modify-sn sn-focus-player-number c:+ 1)
        (up-jump-rule -2)
        )

    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-gather-status 2)
    (up-set-target-object search-remote c: 0)
    =>
    (up-get-point position-object g-point2-x)
    (up-lerp-tiles g-point2-x g-current-group-location-x c: 16)
    (up-bound-precise-point g-point2-x 0 c: 1)
    (up-copy-point g-current-group-location-x g-point2-x)
    )

    ; (defrule
    ; (timer-triggered t-5-sec)
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-action GROUP-ATTACK)
    ; (up-set-target-by-id g: g-current-group-target-object-id)
    ; =>
    ; (up-get-point position-object g-point2-x)
    ; (up-lerp-tiles g-point2-x g-current-group-location-x c: 10)   ;find a point away from our target to gather units
    ; (up-copy-point g-current-group-location-x g-point2-x)
    ; (up-bound-precise-point g-current-group-location-x 0 c: 1)
    ; ; (up-send-flare g-current-group-location-x)
    ; )

    ;Check if g-current-group-location-x is inaccessible
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-gather-status 2)
    =>
    (up-full-reset-search)
    (set-goal g-point-x PENDING)
    (set-goal g-point-y PENDING)
    (up-set-group search-local g: g-current-group)
    (up-get-search-state g-local-total)
    (up-clean-search search-local object-data-point-x search-order-asc)
    (up-get-group-size g: g-current-group g-temp)
    (up-modify-goal g-temp c:z/ 2)  ;get index of unit that is in the middle of the group, according to its x coordinate location
    )

    ;Get location of middle unit if g-current-group-location-x is inaccessible
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-gather-status 2)
    (up-set-target-object search-local g: g-temp)
    (or
        (up-path-distance g-current-group-location-x 0 == 65535)    ;inaccessible ;used to be strict path distance (1)
        (or
            (up-compare-goal g-current-group-location-x <= PENDING)
            (up-compare-goal g-current-group-destination-time >= MAX-DESTINATION-TIME)))
    =>
    (up-get-point position-object g-point-x)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Group %d location inaccessible" g: g-current-group)
    ; (up-chat-data-to-all "Group %d location inaccessible" g: g-current-group)
    ; (up-send-flare g-point-x)
    )

    ;If any units are too far away, task all units in the group to the center location of the group 
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-gather-status 2)
    (up-compare-goal g-local-total > 0)
    (up-compare-goal g-current-group-location-x > PENDING)
    (up-compare-goal g-point-x <= PENDING)    ;g-point-x is only set if g-current-group-location-x is inaccessible
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-modify-sn sn-number-tasked-units c:= 40)
    (up-target-point g-current-group-location-x action-move -1 stance-no-attack)
    (set-goal g-current-group-action GROUP-GATHER)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-GATHER)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-GATHER-GROUP g: g-current-group)
    ; (up-chat-data-to-all CHAT-GATHER-GROUP g: g-current-group)
    )
    ;Use g-point-x if g-current-group-location-x is inaccessible
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-gather-status 2)
    (up-compare-goal g-local-total > 0)
    (up-compare-goal g-point-x > PENDING)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-modify-sn sn-number-tasked-units c:= 40)
    (up-target-point g-point-x action-move -1 stance-no-attack)
    (set-goal g-current-group-action GROUP-GATHER)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-GATHER)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 CHAT-GATHER-GROUP g: g-current-group)
    ; (up-chat-data-to-all CHAT-GATHER-GROUP g: g-current-group)
    )

    ; ;If units use defensive stance by default, then set them to defensive stance instead
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-action GROUP-GATHER)
    ; =>
    ; (up-full-reset-search)
    ; (up-find-local c: packed-trebuchet-class c: 240)
    ; (up-find-local c: unpacked-trebuchet-class c: 240)
    ; (up-find-local c: petard-class c: 240)
    ; (up-find-local c: monastery-class c: 240)
    ; (up-find-local c: monk-with-relic-class c: 240)
    ; (up-find-local c: siege-weapon-class c: 240)
    ; (up-set-target-point g-current-group-location-x)
    ; (up-remove-objects search-local object-data-distance <= 3)
    ; (up-get-search-state g-local-total)
    ; ; (chat-to-all "group gathered")
    ; )

    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-action GROUP-GATHER)
    ; (up-compare-goal g-local-total > 0)
    ; (up-compare-goal g-point-x <= PENDING)
    ; =>
    ; (up-full-reset-search)
    ; (up-set-group search-local g: g-current-group)
    ; (up-target-point g-current-group-location-x action-none -1 stance-defensive)
    ; (chat-to-all "siege gathered")
    ; )
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-action GROUP-GATHER)
    ; (up-compare-goal g-local-total > 0)
    ; (up-compare-goal g-point-x > PENDING)
    ; =>
    ; (up-full-reset-search)
    ; (up-set-group search-local g: g-current-group)
    ; (up-target-point g-point-x action-none -1 stance-defensive)
    ; (chat-to-all "siege gathered")
    ; )

    ;If group is trying to gather, check if any units are still > 3 tiles from group center
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-action GROUP-GATHER)
    ; (up-compare-goal g-current-group-gather-status != 1)
    ; =>
    ; (up-full-reset-search)
    ; (up-set-group search-local g: g-current-group)
    ; (up-set-target-point g-current-group-location-x)
    ; (up-remove-objects search-local object-data-distance <= 3)
    ; (up-remove-objects search-local object-data-class == packed-trebuchet-class)
    ; (up-remove-objects search-local object-data-class == unpacked-trebuchet-class)
    ; (up-remove-objects search-local object-data-class == petard-class)
    ; (up-remove-objects search-local object-data-class == monastery-class)
    ; (up-remove-objects search-local object-data-class == monk-with-relic-class)
    ; (up-remove-objects search-local object-data-class == siege-weapon-class)
    ; (up-get-search-state g-local-total)
    ; )

    ; ;If no units in group are > 3 tiles from group center, consider group gathered. Set group to aggressive and reset group's action.
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-action GROUP-GATHER)
    ; (up-compare-goal g-local-total == 0)
    ; (up-compare-goal g-point-x <= PENDING)
    ; =>
    ; (up-full-reset-search)
    ; (up-set-group search-local g: g-current-group)
    ; (up-target-point g-current-group-location-x action-none -1 stance-aggressive)
    ; )
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-action GROUP-GATHER)
    ; (up-compare-goal g-local-total == 0)
    ; (up-compare-goal g-point-x > PENDING)
    ; =>
    ; (up-full-reset-search)
    ; (up-set-group search-local g: g-current-group)
    ; (up-target-point g-point-x action-none -1 stance-aggressive)
    ; )
    
    ;If group is gathered, reset group action
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-action GROUP-GATHER)
    (up-point-distance g-current-group-location-x g-position-self-x <= 30)
    =>
    (up-full-reset-search)
    (up-get-group-size g: g-current-group g-temp2)
    (up-modify-goal g-temp2 c:- 10)     ;g-temp2 = precise distance when group is considered gathered
    (up-modify-goal g-temp2 c:max 0)    ;should increase when groups are larger
    (up-modify-goal g-temp2 c:* 5)      ;calculation: if groups are <= 10 units, set distance to 300
    (up-modify-goal g-temp2 c:+ 300)                ; if groups are > 10 units, distance = 300 + 5 x (size of group - 10)
    (up-set-group search-local g: g-current-group)
    (up-set-target-point g-current-group-location-x)
    (up-remove-objects search-local object-data-precise-distance g:<= g-temp2)
    (up-get-search-state g-local-total)
    )
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-action GROUP-GATHER)
    (up-point-distance g-current-group-location-x g-position-self-x > 30)
    =>
    (up-full-reset-search)
    (up-get-group-size g: g-current-group g-temp2)
    (up-modify-goal g-temp2 c:- 10)     ;g-temp2 = precise distance when group is considered gathered
    (up-modify-goal g-temp2 c:max 0)    ;should increase when groups are larger
    (up-modify-goal g-temp2 c:* 5)      ;calculation: if groups are <= 10 units, set distance to 450
    (up-modify-goal g-temp2 c:+ 450)                ; if groups are > 10 units, distance = 450 + 5 x (size of group - 10)
    (up-set-group search-local g: g-current-group)
    (up-set-target-point g-current-group-location-x)
    (up-remove-objects search-local object-data-precise-distance g:<= g-temp2)
    (up-get-search-state g-local-total)
    )

    ;If no units in group are > 3 tiles from group center, consider group gathered.
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-action GROUP-GATHER)
    (up-compare-goal g-local-total == 0)
    =>
    (set-goal g-current-group-action PENDING)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: PENDING)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "group %d gathered" g: g-current-group)
    ; (up-chat-data-to-all "group %d gathered" g: g-current-group)
    )

    ;Increase destination time while gathering
    (defrule
    (timer-triggered t-5-sec)
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-action GROUP-GATHER)
    (up-compare-goal g-current-group-destination-time < MAX-DESTINATION-TIME)
    =>
    (up-modify-goal g-current-group-destination-time c:+ 1)
    (up-set-indirect-goal g: g-current-group-destination-time-goal-id g: g-current-group-destination-time)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Increase destination time while gathering: %d" g: g-current-group-destination-time)
    ; (up-chat-data-to-all "Increase destination time while gathering: %d" g: g-current-group-destination-time)
    )

;----------------
;   Move group
;----------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Temp goals:
    ;g-current-group-action
    ;g-current-group-action-goal-id
    
    ;Temp points:
    ;g-current-group-location-x
    ;g-current-group-location-y
    ;g-current-group-location-x-goal-id
    ;g-current-group-location-y-goal-id
    ;g-current-group-destination-x
    ;g-current-group-destination-y
    ;g-current-group-destination-x-goal-id
    ;g-current-group-destination-y-goal-id

    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
    (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
    )

    ;If group isn't tasked, give it a move task
    (defrule
    (up-group-size g: g-current-group > 0)
    (goal g-current-group-action PENDING)
    (up-compare-goal g-current-group-destination-x >= 0)
    (up-compare-goal g-current-group-destination-y >= 0)
    (up-point-distance g-current-group-location-x g-current-group-destination-x >= 3)       ;group is >= 3 tiles from destination
    =>
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point g-current-group-destination-x action-move -1 stance-no-attack)
    (set-goal g-current-group-action GROUP-MOVE)
    (up-set-indirect-goal g: g-current-group-action-goal-id c: GROUP-MOVE)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "move group %d" g: g-current-group)
    ; (up-chat-data-to-all "move group %d" g: g-current-group)
    )

    ; ;If group is moving, make sure destination time is zero
    ; (defrule
    ; (up-group-size g: g-current-group > 0)
    ; (goal g-current-group-action GROUP-MOVE)
    ; (up-compare-goal g-current-group-destination-time > 0)
    ; =>
    ; (set-goal g-current-group-destination-time 0)
    ; (up-set-indirect-goal g: g-current-group-destination-time-goal-id c: 0)
    ; (up-get-fact game-time 0 g-temp5)
    ; (up-get-fact player-number 0 g-temp6)
    ; (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    ; (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    ; (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    ; (up-log-data 0 "Reset group %d destination time" g: g-current-group)
    ; (up-chat-data-to-all "Reset group %d destination time" g: g-current-group)
    ; )



;-----------------------------
;   Change Group Formations
;-----------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Setup
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    )

    (defrule
    (up-group-size g: g-current-group > 0)
    (up-group-size g: g-current-group <= 6)
    (up-compare-flag g-current-group-flag != USE-BOX-FORMATION)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point 0 action-none formation-box -1)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Group %d, use box" g: g-current-group)
    ; (up-chat-data-to-all "Group %d, use box" g: g-current-group)
    (up-modify-flag g-current-group-flag c:+ USE-BOX-FORMATION)
    (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
    )

    (defrule
    (up-group-size g: g-current-group > 6)
    (up-compare-flag g-current-group-flag == USE-BOX-FORMATION)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point 0 action-none formation-line -1)
    (up-get-fact game-time 0 g-temp5)
    (up-get-fact player-number 0 g-temp6)
    (up-log-data 0 CHAT-LOG-ENTRY c: 0)
    (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
    (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
    (up-log-data 0 "Group %d, don't use box" g: g-current-group)
    ; (up-chat-data-to-all "Group %d, don't use box" g: g-current-group)
    (up-modify-flag g-current-group-flag c:- USE-BOX-FORMATION)
    (up-set-indirect-goal g: g-current-group-flag-goal-id g: g-current-group-flag)
    )

    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-current-group-flag != USE-BOX-FORMATION)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point 0 action-none formation-line -1)
    )
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-current-group-flag == USE-BOX-FORMATION)
    =>
    (up-full-reset-search)
    (up-set-group search-local g: g-current-group)
    (up-clean-search search-local -1 search-order-asc)
    (up-target-point 0 action-none formation-box -1)
    )


;-----------
;   Debug
;-----------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    ;Setup
    (defrule
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
    (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
    )

    (defrule
    (taunt-detected 1 211)
    (up-group-size g: g-current-group > 0)
    =>
    (up-chat-data-to-all CHAT-ACTION g: g-current-group-action)
    )

    (defrule
    (taunt-detected 1 212)
    (up-group-size g: g-current-group > 0)
    =>
    (up-chat-data-to-all CHAT-TYPE-FLAG g: g-current-group-type-flag)
    )

    (defrule
    (taunt-detected 1 213)
    (up-group-size g: g-current-group > 0)
    =>
    (up-chat-data-to-all CHAT-FLAG g: g-current-group-flag)
    )

    (defrule
    (taunt-detected 1 214)
    (up-group-size g: g-current-group > 0)
    =>
    (up-send-flare g-current-group-destination-x)
    )

;-----------------------------
;   Loop Through All Groups
;-----------------------------

    (load "The General 1.2/Functions/Reset")
    (load "The General 1.2/Functions/Reset DUC")

    (defrule
    (up-compare-goal g-current-group > 0)
    (up-compare-goal g-current-group <= 6)
    =>
    (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
    (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
    (up-get-indirect-goal g: g-current-group-action-goal-id g-current-group-action)
    (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
    (up-get-indirect-goal g: g-current-group-destination-time-goal-id g-current-group-destination-time)
    (up-get-indirect-goal g: g-current-group-avoidance-counter-goal-id g-current-group-avoidance-counter)
    (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
    (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
    (up-get-indirect-goal g: g-current-group-destination-x-goal-id g-current-group-destination-x)
    (up-get-indirect-goal g: g-current-group-destination-y-goal-id g-current-group-destination-y)
    (up-get-group-size g: g-current-group g-temp)
    (up-set-group search-local g: g-current-group)
    (up-get-search-state g-local-total)
    (up-log-data 0 "Group %d settings at end of pass:" g: g-current-group)
    )

    (defrule
    (up-group-size g: g-current-group <= 0)
    (up-compare-goal g-local-total <= 0)
    (up-compare-goal g-current-group-action == PENDING)
    (up-compare-goal g-current-group-target-object-goal-id == PENDING)
    (up-compare-goal g-current-group-location-x < 0)
    (up-compare-goal g-current-group-location-y < 0)
    (up-compare-goal g-current-group-destination-x < 0)
    (up-compare-goal g-current-group-destination-y < 0)
    =>
    (up-jump-rule 1)
    )

        (defrule
        (up-compare-goal g-current-group > 0)
        (up-compare-goal g-current-group <= 6)
        =>
        (up-log-data 0 CHAT-GROUP-SIZE g: g-temp)
        (up-log-data 0 CHAT-GROUP-SIZE-DUC g: g-local-total)
        (up-log-data 0 CHAT-FLAG g: g-current-group-flag)
        (up-log-data 0 CHAT-TYPE-FLAG g: g-current-group-type-flag)
        (up-log-data 0 CHAT-ACTION g: g-current-group-action)
        (up-log-data 0 CHAT-TARGET-OBJECT g: g-current-group-target-object-id)
        (up-log-data 0 CHAT-DESTINATION-TIME g: g-current-group-destination-time)
        (up-log-data 0 CHAT-AVOIDANCE-COUNTER g: g-current-group-avoidance-counter)
        (up-log-data 0 CHAT-LOCATION-X g: g-current-group-location-x)
        (up-log-data 0 CHAT-LOCATION-Y g: g-current-group-location-y)
        (up-log-data 0 CHAT-DESTINATION-X g: g-current-group-destination-x)
        (up-log-data 0 CHAT-DESTINATION-Y g: g-current-group-destination-y)
        )
    
    (defrule
    (taunt-detected 1 215)
    (up-group-size g: g-current-group > 0)
    =>
    (up-get-indirect-goal g: g-current-group-target-object-goal-id g-current-group-target-object-id)
    (up-chat-data-to-all "Target ID: %d" g: g-current-group-target-object-id)
    )

    (defrule
    (taunt-detected 1 215)
    (up-group-size g: g-current-group > 0)
    (up-set-target-by-id g: g-current-group-target-object-id)
    =>
    (up-get-point position-object g-point-x)
    (up-send-flare g-point-x)
    )

    (defrule
    (taunt-detected 1 215)
    (up-group-size g: g-current-group > 0)
    (not
        (up-set-target-by-id g: g-current-group-target-object-id))
    =>
    (up-chat-data-to-all "No target, group %d" g: g-current-group)
    )

    (defrule
    (game-time > 2)
    (up-compare-goal g-duc-micro-start-rule-id >= 0)
    (up-compare-goal g-current-group < 6)
    (up-modify-goal g-current-group c:+ 1)
    (up-group-size g: g-current-group > 0)
    =>
    (up-jump-direct g: g-duc-micro-start-rule-id)
    )

    (defrule
    (game-time > 2)
    (up-compare-goal g-duc-micro-start-rule-id >= 0)
    (up-compare-goal g-current-group < 6)
    (up-group-size g: g-current-group == 0)
    =>
    (up-jump-rule -2)
    )

    (defrule
    (taunt-detected 1 211)
    =>
    (acknowledge-taunt 1 211)
    )

    (defrule
    (taunt-detected 1 212)
    =>
    (acknowledge-taunt 1 212)
    )

    (defrule
    (taunt-detected 1 213)
    =>
    (acknowledge-taunt 1 213)
    )

    (defrule
    (taunt-detected 1 214)
    =>
    (acknowledge-taunt 1 214)
    )

    (defrule
    (taunt-detected 1 215)
    =>
    (acknowledge-taunt 1 215)
    )

;---------------------------------------
;   Ungrouped Soldiers to Join Groups
;---------------------------------------

    (load "The General 1.2/Functions/Reset")

    (defrule
    (up-compare-goal g-duc-micro-end-rule-id >= 0)
    (or
        (up-group-size c: 1 == 0)
        (or
            (up-group-size c: 2 == 0)
            (or
                (up-group-size c: 3 == 0)
                (or
                    (up-group-size c: 4 == 0)
                    (or
                        (up-group-size c: 5 == 0)
                        (up-group-size c: 6 == 0))))))
    =>
    (up-jump-direct g: g-duc-micro-end-rule-id)
    )

    ;Skip if we don't have any ungrouped melee infantry
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != MELEE-INFANTRY-GROUP)
    (up-compare-flag g-group2-type-flag != MELEE-INFANTRY-GROUP)
    (up-compare-flag g-group3-type-flag != MELEE-INFANTRY-GROUP)
    (up-compare-flag g-group4-type-flag != MELEE-INFANTRY-GROUP)
    (up-compare-flag g-group5-type-flag != MELEE-INFANTRY-GROUP)
    (up-compare-flag g-group6-type-flag != MELEE-INFANTRY-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: infantry-class c: 100)
        (up-remove-objects search-local object-data-range > 2)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have melee infantry in the local list, get location of a group that has them in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-flag-goal-id g-before-group-flags-goal-id)
        (up-modify-goal g-current-group-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped soldiers to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-flag != SCOUT-MODE)
            (up-compare-flag g-current-group-type-flag == MELEE-INFANTRY-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any ungrouped ranged infantry
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != RANGED-INFANTRY-GROUP)
    (up-compare-flag g-group2-type-flag != RANGED-INFANTRY-GROUP)
    (up-compare-flag g-group3-type-flag != RANGED-INFANTRY-GROUP)
    (up-compare-flag g-group4-type-flag != RANGED-INFANTRY-GROUP)
    (up-compare-flag g-group5-type-flag != RANGED-INFANTRY-GROUP)
    (up-compare-flag g-group6-type-flag != RANGED-INFANTRY-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: throwing-axeman-line c: 100)
        (up-find-local c: gbeto c: 100)
        (up-find-local c: elite-gbeto c: 100)
        (up-find-local c: chakram-thrower-line c: 100)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have ranged infantry in the local list, get location of a group that has them in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-flag-goal-id g-before-group-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped soldiers to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-flag != SCOUT-MODE)
            (up-compare-flag g-current-group-type-flag == RANGED-INFANTRY-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any ungrouped foot archers
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != FOOT-ARCHER-GROUP)
    (up-compare-flag g-group2-type-flag != FOOT-ARCHER-GROUP)
    (up-compare-flag g-group3-type-flag != FOOT-ARCHER-GROUP)
    (up-compare-flag g-group4-type-flag != FOOT-ARCHER-GROUP)
    (up-compare-flag g-group5-type-flag != FOOT-ARCHER-GROUP)
    (up-compare-flag g-group6-type-flag != FOOT-ARCHER-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: archery-class c: 100)
        (up-find-local c: archery-cannon-class c: 100)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have foot archers in the local list, get location of a group that has foot archers in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-flag-goal-id g-before-group-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped soldiers to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-flag != SCOUT-MODE)
            (up-compare-flag g-current-group-type-flag == FOOT-ARCHER-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any ungrouped cav archers
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != CAVALRY-ARCHER-GROUP)
    (up-compare-flag g-group2-type-flag != CAVALRY-ARCHER-GROUP)
    (up-compare-flag g-group3-type-flag != CAVALRY-ARCHER-GROUP)
    (up-compare-flag g-group4-type-flag != CAVALRY-ARCHER-GROUP)
    (up-compare-flag g-group5-type-flag != CAVALRY-ARCHER-GROUP)
    (up-compare-flag g-group6-type-flag != CAVALRY-ARCHER-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: cavalry-archer-class c: 100)
        (up-find-local c: cavalry-cannon-class c: 100)
        (up-find-local c: mameluke-line c: 100)
        (up-find-local c: ballista-elephant c: 100)
        (up-find-local c: elite-ballista-elephant c: 100)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have cav archers in the local list, get location of a group that has cav archers in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-flag-goal-id g-before-group-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped soldiers to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-flag != SCOUT-MODE)
            (up-compare-flag g-current-group-type-flag == CAVALRY-ARCHER-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any ungrouped cavalry
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != CAVALRY-GROUP)
    (up-compare-flag g-group2-type-flag != CAVALRY-GROUP)
    (up-compare-flag g-group3-type-flag != CAVALRY-GROUP)
    (up-compare-flag g-group4-type-flag != CAVALRY-GROUP)
    (up-compare-flag g-group5-type-flag != CAVALRY-GROUP)
    (up-compare-flag g-group6-type-flag != CAVALRY-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: cavalry-class c: 100)
        (up-find-local c: scout-cavalry-class c: 100)
        (up-remove-objects search-local object-data-range > 2)
        (up-remove-objects search-local object-data-base-type == armored-elephant)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have cavalry in the local list, get location of a group that has them in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-flag-goal-id g-before-group-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped soldiers to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-flag != SCOUT-MODE)
            (up-compare-flag g-current-group-type-flag == CAVALRY-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-flag-goal-id g-current-group-flag)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any ungrouped monks
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != MONK-GROUP)
    (up-compare-flag g-group2-type-flag != MONK-GROUP)
    (up-compare-flag g-group3-type-flag != MONK-GROUP)
    (up-compare-flag g-group4-type-flag != MONK-GROUP)
    (up-compare-flag g-group5-type-flag != MONK-GROUP)
    (up-compare-flag g-group6-type-flag != MONK-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-relic orderid-relic -1)
        (up-find-local c: monastery-class c: 50)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have monks in the local list, get location of a group that has them in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped monks to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-type-flag == MONK-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any ungrouped rams
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != RAM-GROUP)
    (up-compare-flag g-group2-type-flag != RAM-GROUP)
    (up-compare-flag g-group3-type-flag != RAM-GROUP)
    (up-compare-flag g-group4-type-flag != RAM-GROUP)
    (up-compare-flag g-group5-type-flag != RAM-GROUP)
    (up-compare-flag g-group6-type-flag != RAM-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: battering-ram-line c: 50)
        (up-find-local c: armored-elephant-line c: 50)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have rams in the local list, get location of a group that has them in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped rams to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-type-flag == RAM-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            ; (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-target-point g-current-group-location-x action-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any ungrouped short ranged siege weapons
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != SCORPION-GROUP)
    (up-compare-flag g-group2-type-flag != SCORPION-GROUP)
    (up-compare-flag g-group3-type-flag != SCORPION-GROUP)
    (up-compare-flag g-group4-type-flag != SCORPION-GROUP)
    (up-compare-flag g-group5-type-flag != SCORPION-GROUP)
    (up-compare-flag g-group6-type-flag != SCORPION-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: scorpion-class c: 60)
        (up-find-local c: organ-gun c: 60)
        (up-find-local c: elite-organ-gun c: 60)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have short ranged siege in the local list, get location of a group that has them in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped soldiers to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-type-flag == SCORPION-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            ; (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-target-point g-current-group-location-x action-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any ungrouped short ranged siege weapons
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != MANGONEL-GROUP)
    (up-compare-flag g-group2-type-flag != MANGONEL-GROUP)
    (up-compare-flag g-group3-type-flag != MANGONEL-GROUP)
    (up-compare-flag g-group4-type-flag != MANGONEL-GROUP)
    (up-compare-flag g-group5-type-flag != MANGONEL-GROUP)
    (up-compare-flag g-group6-type-flag != MANGONEL-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: mangonel-line c: 50)
        (up-find-local c: wk-onager c: 50)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have short ranged siege in the local list, get location of a group that has them in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped soldiers to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-type-flag == MANGONEL-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            ; (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-target-point g-current-group-location-x action-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any cannons
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != CANNON-GROUP)
    (up-compare-flag g-group2-type-flag != CANNON-GROUP)
    (up-compare-flag g-group3-type-flag != CANNON-GROUP)
    (up-compare-flag g-group4-type-flag != CANNON-GROUP)
    (up-compare-flag g-group5-type-flag != CANNON-GROUP)
    (up-compare-flag g-group6-type-flag != CANNON-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: bombard-cannon c: 50)
        (up-find-local c: houfnice c: 50)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have long ranged siege in the local list, get location of a group that has them in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped long ranged siege to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-group-size g: g-current-group > 0)
            (up-compare-goal g-local-total > 0)
            (up-compare-flag g-current-group-type-flag == CANNON-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            ; (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-target-point g-current-group-location-x action-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

    ;Skip if we don't have any trebuchets
    (defrule
    (timer-triggered t-5-sec)
    (up-compare-flag g-group1-type-flag != TREBUCHET-GROUP)
    (up-compare-flag g-group2-type-flag != TREBUCHET-GROUP)
    (up-compare-flag g-group3-type-flag != TREBUCHET-GROUP)
    (up-compare-flag g-group4-type-flag != TREBUCHET-GROUP)
    (up-compare-flag g-group5-type-flag != TREBUCHET-GROUP)
    (up-compare-flag g-group6-type-flag != TREBUCHET-GROUP)
    =>
    (up-jump-rule 4)
    )

        (defrule
        (timer-triggered t-5-sec)
        =>
        (up-full-reset-search)
        (up-filter-exclude -1 actionid-explore orderid-explore -1)
        (up-find-local c: packed-trebuchet-class c: 60)
        (up-find-local c: unpacked-trebuchet-class c: 60)
        (up-remove-objects search-local object-data-group-flag >= 0)    ;remove objects already assigned to a group
        (up-get-search-state g-local-total)
        )

        ;If we have trebs in the local list, get location of a group that has them in it
        (defrule
        (timer-triggered t-5-sec)
        (up-compare-goal g-local-total > 0)
        =>
        (set-goal g-current-group 1)
        (set-goal g-current-group-type-flag-goal-id g-before-group-type-flags-goal-id)   ;flag goal stores the unit types in the goal, among other things, it's not the group-flag number
        (up-modify-goal g-current-group-type-flag-goal-id g:+ g-current-group)
        (set-goal g-current-group-location-x-goal-id g-before-group-locations-goal-id)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-x-goal-id g:+ g-current-group)
        (up-modify-goal g-current-group-location-y-goal-id g:= g-current-group-location-x-goal-id)
        (up-modify-goal g-current-group-location-y-goal-id c:+ 1)
        (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
        (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
        (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
        )

            ;Task ungrouped trebs to current location of group
            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-group-size g: g-current-group > 0)
            (up-compare-flag g-current-group-type-flag == TREBUCHET-GROUP)
            =>
            (up-clean-search search-local -1 search-order-asc)
            ; (up-target-point g-current-group-location-x custom-action-attack-move -1 -1)
            (up-target-point g-current-group-location-x action-move -1 -1)
            (up-get-fact game-time 0 g-temp5)
            (up-get-fact player-number 0 g-temp6)
            (up-log-data 0 CHAT-LOG-ENTRY c: 0)
            (up-log-data 0 CHAT-LOG-TIME g: g-temp5)
            (up-log-data 0 CHAT-LOG-PLAYER g: g-temp6)
            (up-log-data 0 CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            ; (up-chat-data-to-all CHAT-SEND-UNIT-TO-JOIN-GROUP g: g-current-group)
            (up-jump-rule 1)
            )

            (defrule
            (timer-triggered t-5-sec)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-current-group < 6)
            =>
            (up-modify-goal g-current-group c:+ 1)
            (up-modify-goal g-current-group-type-flag-goal-id c:+ 1)
            (up-modify-goal g-current-group-location-x-goal-id c:+ 2)
            (up-modify-goal g-current-group-location-y-goal-id c:+ 2)
            (up-get-indirect-goal g: g-current-group-type-flag-goal-id g-current-group-type-flag)
            (up-get-indirect-goal g: g-current-group-location-x-goal-id g-current-group-location-x)
            (up-get-indirect-goal g: g-current-group-location-y-goal-id g-current-group-location-y)
            (up-jump-rule -2)
            )

;-------------
;   End DUC
;-------------

    (defrule
    (true)
    =>
    (up-get-rule-id g-duc-micro-end-rule-id)
    (disable-self)
    )