;Escrow.per

;=========================<>=========================
;				  ESCROW TYPE GOALS
;=========================<>=========================

    ;-----------
    ;   Reset
    ;-----------

        (load "The General 1.2/Functions/Reset")

        (defrule
        (true)
        =>
        (up-modify-goal g-prior-wood-escrow-type g:= g-wood-escrow-type)
        (up-modify-goal g-prior-food-escrow-type g:= g-food-escrow-type)
        (up-modify-goal g-prior-gold-escrow-type g:= g-gold-escrow-type)
        (up-modify-goal g-prior-stone-escrow-type g:= g-stone-escrow-type)
        (set-goal g-wood-escrow-type OFF)
        (set-goal g-food-escrow-type OFF)
        (set-goal g-gold-escrow-type OFF)
        (set-goal g-stone-escrow-type OFF)
        )

    ;-----------------------
    ;   Accumulate Escrow
    ;-----------------------

        ;Military/Eco Upgrades
        (defrule
        (or
            (goal g-game-focus AGGRESSIVE)
            (or
                (goal g-game-focus BOOM)
                (goal g-game-focus BALANCED)))
        (or
            (up-compare-goal g-current-age-primary-unit-tech-progress < ALL-COMPLETE)
            (up-compare-goal g-current-age-support-unit-tech-progress < ALL-COMPLETE))
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        (set-goal g-food-escrow-type ACCUMULATED)
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus DEFENSIVE)
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        (or
            (up-compare-goal g-current-age-primary-unit-tech-progress < REQUIRED-COMPLETE)
            (and
                (up-compare-goal g-current-age-support-unit-tech-progress < REQUIRED-COMPLETE)
                (up-compare-goal g-desired-num-support-unit g:> g-desired-num-primary-unit)))
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        (set-goal g-food-escrow-type ACCUMULATED)
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus REBUILD)
        (up-compare-goal g-desired-num-military > 0)
        (or
            (goal g-current-age-primary-unit-tech-progress REQUIRED-COMPLETE)
            (or
                (goal g-current-age-primary-unit-tech-progress PRIORITY-COMPLETE)
                (up-compare-goal g-current-age-support-unit-tech-progress < SECONDARY-COMPLETE)))
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        (set-goal g-food-escrow-type ACCUMULATED)
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        (defrule
        (or
            (goal g-game-focus AGGRESSIVE)
            (or
                (goal g-game-focus BALANCED)
                (goal g-game-focus REBUILD)))
        (up-compare-goal g-current-age-eco-tech-progress < SECONDARY-COMPLETE)
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        (set-goal g-food-escrow-type ACCUMULATED)
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus BOOM)
        (up-compare-goal g-current-age-eco-tech-progress < ALL-COMPLETE)
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        (set-goal g-food-escrow-type ACCUMULATED)
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        ;Save for Other Techs
        (defrule
        (or
            (goal g-game-focus AGGRESSIVE)
            (or
                (goal g-game-focus BOOM)
                (goal g-game-focus BALANCED)))
        (up-research-status c: ri-heresy < research-pending)
        (up-compare-const HERESY-AVAILABLE == YES)
        (up-compare-goal g-enemy-monks-count >= 12)
        (building-type-count monastery > 0)
        =>
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        (defrule
        (or
            (goal g-game-focus AGGRESSIVE)
            (or
                (goal g-game-focus BOOM)
                (goal g-game-focus BALANCED)))
        (up-research-status c: ri-faith < research-pending)
        (up-compare-const HERESY-AVAILABLE == NO)
        (up-compare-goal g-enemy-monks-count >= 12)
        (building-type-count monastery > 0)
        =>
        (set-goal g-food-escrow-type ACCUMULATED)
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus DEFENSIVE)
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        (up-research-status c: ri-heresy < research-pending)
        (up-compare-const HERESY-AVAILABLE == YES)
        (up-compare-goal g-enemy-monks-count >= 12)
        (building-type-count monastery > 0)
        =>
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus DEFENSIVE)
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        (up-research-status c: ri-faith < research-pending)
        (up-compare-const HERESY-AVAILABLE == NO)
        (up-compare-goal g-enemy-monks-count >= 12)
        (building-type-count monastery > 0)
        =>
        (set-goal g-food-escrow-type ACCUMULATED)
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus DEFENSIVE)
        (goal g-age-status SAVE-FOR-FEUDAL)
        =>
        (set-goal g-food-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus DEFENSIVE)
        (or
            (goal g-age-status SAVE-FOR-CASTLE)
            (goal g-age-status SAVE-FOR-IMPERIAL))
        =>
        (set-goal g-food-escrow-type ACCUMULATED)
        (set-goal g-gold-escrow-type ACCUMULATED)
        )

        ;Buildings
        (defrule
        (goal g-game-focus AGGRESSIVE)
        (or
            (up-object-type-count-total c: market g:< g-desired-num-market)
            (up-object-type-count-total c: university g:< g-desired-num-university))
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )

        (defrule
        (up-object-type-count-total c: barracks g:< g-desired-num-barracks)
        (building-type-count barracks == 0)
        (or
            (up-compare-goal g-desired-num-militia > 0)
            (or
                (up-compare-goal g-desired-num-spearman > 0)
                (or
                    (up-compare-goal g-desired-num-eagle-warrior > 0)
                    (up-compare-goal g-desired-num-condottiero > 0))))
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )

        #load-if-defined BURGUNDIANS-CIV

            (defrule
            (up-object-type-count-total c: barracks g:< g-desired-num-barracks)
            (building-type-count barracks == 0)
            (up-compare-goal g-desired-num-second-unique-unit > 0)
            (up-compare-goal g-human-military-count g:>= g-min-military-pop)
            =>
            (set-goal g-wood-escrow-type ACCUMULATED)
            )

        #end-if

        (defrule
        (up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
        (building-type-count archery-range == 0)
		(or
			(up-compare-goal g-desired-num-archer > 0)
			(or
				(up-compare-goal g-desired-num-skirmisher > 0)
				(or
					(up-compare-goal g-desired-num-cavalry-archer > 0)
					(or
						(up-compare-goal g-desired-num-hand-cannoneer > 0)
						(or
							(up-compare-goal g-desired-num-genitour > 0)
							(up-compare-goal g-desired-num-elephant-archer > 0))))))
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )

        #load-if-defined INCAN-CIV

            (defrule
            (up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
            (building-type-count archery-range == 0)
            (up-compare-goal g-desired-num-second-unique-unit > 0)
            (up-compare-goal g-human-military-count g:>= g-min-military-pop)
            =>
            (set-goal g-wood-escrow-type ACCUMULATED)
            )

        #end-if

        (defrule
        (up-object-type-count-total c: stable g:< g-desired-num-stable)
        (building-type-count stable == 0)
        (or
            (up-compare-goal g-desired-num-scout-cavalry > 0)
            (or
                (up-compare-goal g-desired-num-knight > 0)
                (or
                    (up-compare-goal g-desired-num-camel > 0)
                    (or
                        (up-compare-goal g-desired-num-battle-elephant > 0)
                        (up-compare-goal g-desired-num-steppe-lancer > 0)))))
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )

        #load-if-defined GURJARAS-CIV

            (defrule
            (up-object-type-count-total c: stable g:< g-desired-num-stable)
            (building-type-count stable == 0)
            (up-compare-goal g-desired-num-second-unique-unit > 0)
            (up-compare-goal g-human-military-count g:>= g-min-military-pop)
            =>
            (set-goal g-wood-escrow-type ACCUMULATED)
            )

        #end-if

        (defrule
        (up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
        (building-type-count siege-workshop == 0)
        (or
            (up-compare-goal g-desired-num-ram-type > 0)
            (or
                (up-compare-goal g-desired-num-mangonel > 0)
                (or
                    (up-compare-goal g-desired-num-scorpion > 0)
                    (up-compare-goal g-desired-num-bombard-cannon > 0))))
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )

        (defrule
        (up-object-type-count-total c: castle g:< g-desired-num-castle)
        (building-type-count castle == 0)
        (or
            (up-compare-goal g-desired-num-unique-unit > 0)
            (up-compare-goal g-desired-num-trebuchet > 0))
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        =>
        (set-goal g-stone-escrow-type ACCUMULATED)
        )

        (defrule
        (up-object-type-count-total c: monastery g:< g-desired-num-monastery)
        (building-type-count monastery == 0)
        (up-compare-goal g-desired-num-monk > 0)
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )

        #load-if-defined SPANISH-CIV

            (defrule
            (up-object-type-count-total c: monastery g:< g-desired-num-monastery)
            (building-type-count monastery == 0)
            (up-compare-goal g-desired-num-second-unique-unit > 0)
            (up-compare-goal g-human-military-count g:>= g-min-military-pop)
            =>
            (set-goal g-wood-escrow-type ACCUMULATED)
            )

        #end-if

        (defrule
        (goal g-game-focus BOOM)
        (up-object-type-count-total c: university g:< g-desired-num-university)
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus BALANCED)
        (or
            (up-object-type-count-total c: market g:< g-desired-num-market)
            (up-object-type-count-total c: university g:< g-desired-num-university))
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus REBUILD)
        (or
            (up-object-type-count-total c: barracks g:< g-desired-num-barracks)
            (or
                (up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
                (or
                    (up-object-type-count-total c: stable g:< g-desired-num-stable)
                    (or
                        (up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
                        (and
                            (up-object-type-count-total c: monastery g:< g-desired-num-monastery)
                            (or
                                (goal g-primary-unit monk)
                                (goal g-primary-unit missionary)))))))
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )

        (defrule
        (goal g-game-focus AGGRESSIVE)
        (up-object-type-count-total c: castle g:< g-desired-num-castle)
        =>
        (set-goal g-stone-escrow-type ACCUMULATED)
        )

    ;----------------------
    ;   Immediate Escrow
    ;----------------------
        
        ;Military/Eco Upgrades
        (defrule
        (or
            (goal g-game-focus AGGRESSIVE)
            (or
                (goal g-game-focus BALANCED)
                (and
                    (goal g-game-focus REBUILD)
                    (up-compare-goal g-desired-num-military > 0))))
        (or
            (up-compare-goal g-target-military-parity > 0)
            (up-compare-goal g-human-military-count g:>= g-required-attack-num))
        (up-compare-goal g-current-age-primary-unit-tech-progress < REQUIRED-COMPLETE)
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        (set-goal g-food-escrow-type IMMEDIATE)
        (set-goal g-gold-escrow-type IMMEDIATE)
        )

        (defrule
        (goal g-game-focus BOOM)
        (or
            (up-compare-goal g-current-age-primary-unit-tech-progress < PRIORITY-COMPLETE)
            (or
                (up-compare-goal g-current-age-support-unit-tech-progress < PRIORITY-COMPLETE)
                (up-compare-goal g-current-age-eco-tech-progress < SECONDARY-COMPLETE)))
        (or
            (up-compare-goal g-target-military-parity > 0)
            (up-compare-goal g-human-military-count g:>= g-required-attack-num))
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        (set-goal g-food-escrow-type IMMEDIATE)
        (set-goal g-gold-escrow-type IMMEDIATE)
        )

        (defrule
        (up-compare-goal g-game-focus != DEFENSIVE)
        (or
            (goal g-age-status TO-FEUDAL)
            (or
                (goal g-age-status TO-CASTLE)
                (goal g-age-status TO-IMPERIAL)))
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        (set-goal g-food-escrow-type IMMEDIATE)
        (set-goal g-gold-escrow-type IMMEDIATE)
        )

        (defrule
        (up-compare-goal g-game-focus != DEFENSIVE)
        (goal g-age-status LATE-IMPERIAL)
        =>
        (set-goal g-gold-escrow-type IMMEDIATE)
        )

        ;Buildings
        (defrule
        (up-object-type-count-total c: wonder g:< g-desired-num-wonder)
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        (set-goal g-stone-escrow-type IMMEDIATE)
        (set-goal g-gold-escrow-type IMMEDIATE)
        )

        (defrule
        (goal g-game-focus AGGRESSIVE)
        (up-object-type-count-total c: barracks g:< g-desired-num-barracks)
        (building-type-count-total barracks < 2)
        (goal g-primary-unit-class infantry-class)
        (or
            (up-compare-goal g-primary-unit != my-unique-unit)
            (research-completed ri-anarchy))
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        )

        (defrule
        (goal g-game-focus AGGRESSIVE)
        (up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
        (building-type-count-total archery-range < 2)
        (or
            (goal g-primary-unit-class archery-class)
            (or
                (goal g-primary-unit-class cavalry-archer-class)
                (goal g-primary-unit-class archery-cannon-class)))
        (up-compare-goal g-primary-unit != my-unique-unit)
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        )

        (defrule
        (goal g-game-focus AGGRESSIVE)
        (up-object-type-count-total c: stable g:< g-desired-num-stable)
        (building-type-count-total stable < 2)
        (goal g-primary-unit-class cavalry-class)
        (or
            (up-compare-goal g-primary-unit != my-unique-unit)
            (research-completed ri-marauders))
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        )

        (defrule
        (goal g-game-focus AGGRESSIVE)
        (up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
        (building-type-count-total siege-workshop == 0)
        (or
            (goal g-primary-unit-class siege-weapon-class)
            (goal g-primary-unit scorpion))
        (up-compare-goal g-primary-unit != my-unique-unit)
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        )

        (defrule
        (or
            (goal g-game-focus AGGRESSIVE)
            (or
                (goal g-game-focus DEFENSIVE)
                (goal g-game-focus BALANCED)))
        (up-object-type-count-total c: monastery g:< g-desired-num-monastery)
        (building-type-count-total monastery == 0)
        (or
            (goal g-primary-unit monk)
            (goal g-primary-unit missionary))
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        )

        (defrule
        (or
            (goal g-game-focus BOOM)
            (or
                (goal g-game-focus REBUILD)
                (goal g-game-focus BALANCED)))
        (up-object-type-count-total c: market g:< g-desired-num-market)
        (building-type-count-total market == 0)
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        )

        (defrule
        (up-compare-goal g-game-focus != DEFENSIVE)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        (set-goal g-stone-escrow-type IMMEDIATE)
        ; (chat-to-all "imm escrow for TC")
        )

        (defrule
        (goal g-game-focus BOOM)
        (or
            (up-object-type-count-total c: blacksmith g:< g-desired-num-blacksmith)
            (or
                (up-object-type-count-total c: barracks g:< g-desired-num-barracks)
                (or
                    (up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
                    (or
                        (up-object-type-count-total c: stable g:< g-desired-num-stable)
                        (or            
                            (up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
                            (up-object-type-count-total c: monastery g:< g-desired-num-monastery))))))
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        )

        (defrule
        (goal g-game-focus BALANCED)
        (or
            (up-object-type-count-total c: blacksmith g:< g-desired-num-blacksmith)
            (or
                (up-object-type-count-total c: barracks g:< g-desired-num-barracks)
                (or
                    (up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
                    (up-object-type-count-total c: stable g:< g-desired-num-stable))))
        =>
        (set-goal g-wood-escrow-type IMMEDIATE)
        )

        (defrule
        (or
            (goal g-game-focus BOOM)
            (or
                (goal g-game-focus REBUILD)
                (or
                    (goal g-game-focus BALANCED)
                    (goal g-game-focus DEFENSIVE))))
        (up-object-type-count-total c: castle g:< g-desired-num-castle)
        =>
        (set-goal g-stone-escrow-type IMMEDIATE)
        )

        ;Save for other techs
        (defrule
        (or
            (goal g-game-focus AGGRESSIVE)
            (goal g-game-focus BALANCED))
        (goal g-age-status SAVE-FOR-FEUDAL)
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        =>
        (set-goal g-food-escrow-type IMMEDIATE)
        )

        (defrule
        (or
            (goal g-game-focus AGGRESSIVE)
            (goal g-game-focus BALANCED))
        (or
            (goal g-age-status SAVE-FOR-CASTLE)
            (goal g-age-status SAVE-FOR-IMPERIAL))
        (up-compare-goal g-human-military-count g:>= g-min-military-pop)
        =>
        (set-goal g-food-escrow-type IMMEDIATE)
        (set-goal g-gold-escrow-type IMMEDIATE)
        )

        (defrule
        (or
            (goal g-game-focus BOOM)
            (goal g-game-focus REBUILD))
        (goal g-age-status SAVE-FOR-FEUDAL)
        =>
        (set-goal g-food-escrow-type IMMEDIATE)
        )

        (defrule
        (or
            (goal g-game-focus BOOM)
            (goal g-game-focus REBUILD))
        (or
            (goal g-age-status SAVE-FOR-CASTLE)
            (goal g-age-status SAVE-FOR-IMPERIAL))
        =>
        (set-goal g-food-escrow-type IMMEDIATE)
        (set-goal g-gold-escrow-type IMMEDIATE)
        )

        (defrule
        (up-compare-goal g-difficulty <= MODERATE)
        (goal g-wood-escrow-type IMMEDIATE)
        =>
        (set-goal g-wood-escrow-type ACCUMULATED)
        )
        (defrule
        (up-compare-goal g-difficulty <= MODERATE)
        (goal g-food-escrow-type IMMEDIATE)
        =>
        (set-goal g-food-escrow-type ACCUMULATED)
        )
        (defrule
        (up-compare-goal g-difficulty <= MODERATE)
        (goal g-gold-escrow-type IMMEDIATE)
        =>
        (set-goal g-gold-escrow-type ACCUMULATED)
        )
        (defrule
        (up-compare-goal g-difficulty <= MODERATE)
        (goal g-stone-escrow-type IMMEDIATE)
        =>
        (set-goal g-stone-escrow-type ACCUMULATED)
        )

        ;If switching from Immediate escrow to accumulated, release some escrow
        (defrule
        (goal g-wood-escrow-type ACCUMULATED)
        (goal g-prior-wood-escrow-type IMMEDIATE)
        =>
        (up-get-fact wood-amount 0 g-temp)
        (up-modify-escrow wood g:= g-temp)
        (up-modify-escrow wood c:- 150)
        (up-modify-escrow wood c:max 0)
        )

        (defrule
        (goal g-food-escrow-type ACCUMULATED)
        (goal g-prior-food-escrow-type IMMEDIATE)
        =>
        (up-get-fact food-amount 0 g-temp)
        (up-modify-escrow food g:= g-temp)
        (up-modify-escrow food c:- 100)
        (up-modify-escrow food c:max 0)
        )

        (defrule
        (goal g-gold-escrow-type ACCUMULATED)
        (goal g-prior-gold-escrow-type IMMEDIATE)
        =>
        (up-get-fact gold-amount 0 g-temp)
        (up-modify-escrow gold g:= g-temp)
        (up-modify-escrow gold c:- 100)
        (up-modify-escrow gold c:max 0)
        )

        (defrule
        (goal g-stone-escrow-type ACCUMULATED)
        (goal g-prior-stone-escrow-type IMMEDIATE)
        =>
        (up-get-fact stone-amount 0 g-temp)
        (up-modify-escrow stone g:= g-temp)
        (up-modify-escrow stone c:- 100)
        (up-modify-escrow stone c:max 0)
        )

        ;Nomad
        (defrule
        (goal g-map-style NOMAD)
        (building-type-count-total town-center == 0)
        (game-time < 300)
        =>
        (set-goal g-wood-escrow-type OFF)
        (set-goal g-stone-escrow-type OFF)
        )

;=========================<>=========================
;				 		ESCROW
;=========================<>=========================

    ;Off
	(defrule
	(goal g-wood-escrow-type OFF)
	=>
	(release-escrow wood)
	)

	(defrule
	(goal g-food-escrow-type OFF)
	=>
	(release-escrow food)
	)

	(defrule
	(goal g-gold-escrow-type OFF)
	=>
	(release-escrow gold)
	)

	(defrule
	(goal g-stone-escrow-type OFF)
	=>
	(release-escrow stone)
	)

    ;Immediate
	(defrule
	(goal g-wood-escrow-type IMMEDIATE)
	=>
	(up-modify-escrow wood g:= g-max-wood-needed)
	)

	(defrule
	(goal g-food-escrow-type IMMEDIATE)
	=>
	(up-modify-escrow food g:= g-max-food-needed)
	)

	(defrule
	(goal g-gold-escrow-type IMMEDIATE)
	=>
	(up-modify-escrow gold g:= g-max-gold-needed)
	)

	(defrule
	(goal g-stone-escrow-type IMMEDIATE)
	=>
	(up-modify-escrow stone g:= g-max-stone-needed)
	)

    ;Accumulated
	(defrule
	(goal g-wood-escrow-type ACCUMULATED)
    (up-compare-goal g-game-focus != DEFENSIVE)
	(or
		(up-compare-goal g-current-age-primary-unit-tech-progress < SECONDARY-COMPLETE)
		(and
			(up-compare-goal g-support-unit != 0)
			(up-compare-goal g-current-age-support-unit-tech-progress < SECONDARY-COMPLETE)))
	=>
	(set-escrow-percentage wood 20)
	)

	(defrule
	(goal g-wood-escrow-type ACCUMULATED)
    (goal g-game-focus DEFENSIVE)
	=>
	(set-escrow-percentage wood 10)
	)

	(defrule
	(goal g-wood-escrow-type ACCUMULATED)
	(up-compare-goal g-current-age-primary-unit-tech-progress >= SECONDARY-COMPLETE)
	(or
		(goal g-support-unit 0)
		(up-compare-goal g-current-age-support-unit-tech-progress >= SECONDARY-COMPLETE))
	=>
	(set-escrow-percentage wood 10)
	)
    
    (defrule
	(goal g-food-escrow-type ACCUMULATED)
    (or
        (goal g-age-status SAVE-FOR-FEUDAL)
        (or
            (goal g-age-status SAVE-FOR-CASTLE)
            (goal g-age-status SAVE-FOR-IMPERIAL)))
    =>
    (set-escrow-percentage food 50)
    )

	(defrule
	(goal g-food-escrow-type ACCUMULATED)
    (up-compare-goal g-age-status != SAVE-FOR-FEUDAL)
    (up-compare-goal g-age-status != SAVE-FOR-CASTLE)
    (up-compare-goal g-age-status != SAVE-FOR-IMPERIAL)
    (up-compare-goal g-game-focus != DEFENSIVE)
	(or
		(up-compare-goal g-current-age-primary-unit-tech-progress < SECONDARY-COMPLETE)
		(and
			(up-compare-goal g-support-unit != 0)
			(up-compare-goal g-current-age-support-unit-tech-progress < SECONDARY-COMPLETE)))
	=>
	(set-escrow-percentage food 20)
	)

	(defrule
	(goal g-food-escrow-type ACCUMULATED)
    (up-compare-goal g-age-status != SAVE-FOR-FEUDAL)
    (up-compare-goal g-age-status != SAVE-FOR-CASTLE)
    (up-compare-goal g-age-status != SAVE-FOR-IMPERIAL)
    (goal g-game-focus DEFENSIVE)
	=>
	(set-escrow-percentage food 10)
	)

	(defrule
	(goal g-food-escrow-type ACCUMULATED)
    (up-compare-goal g-age-status != SAVE-FOR-FEUDAL)
    (up-compare-goal g-age-status != SAVE-FOR-CASTLE)
    (up-compare-goal g-age-status != SAVE-FOR-IMPERIAL)
	(up-compare-goal g-current-age-primary-unit-tech-progress >= SECONDARY-COMPLETE)
	(or
		(goal g-support-unit 0)
		(up-compare-goal g-current-age-support-unit-tech-progress >= SECONDARY-COMPLETE))
	=>
	(set-escrow-percentage food 10)
	)
    
    (defrule
	(goal g-gold-escrow-type ACCUMULATED)
    (or
        (goal g-age-status SAVE-FOR-FEUDAL)
        (or
            (goal g-age-status SAVE-FOR-CASTLE)
            (goal g-age-status SAVE-FOR-IMPERIAL)))
    =>
    (set-escrow-percentage gold 50)
    )

	(defrule
	(goal g-gold-escrow-type ACCUMULATED)
    (up-compare-goal g-age-status != SAVE-FOR-FEUDAL)
    (up-compare-goal g-age-status != SAVE-FOR-CASTLE)
    (up-compare-goal g-age-status != SAVE-FOR-IMPERIAL)
    (up-compare-goal g-game-focus != DEFENSIVE)
	(or
		(up-compare-goal g-current-age-primary-unit-tech-progress < SECONDARY-COMPLETE)
		(and
			(up-compare-goal g-support-unit != 0)
			(up-compare-goal g-current-age-support-unit-tech-progress < SECONDARY-COMPLETE)))
	=>
	(set-escrow-percentage gold 20)
	)

	(defrule
	(goal g-gold-escrow-type ACCUMULATED)
    (up-compare-goal g-age-status != SAVE-FOR-FEUDAL)
    (up-compare-goal g-age-status != SAVE-FOR-CASTLE)
    (up-compare-goal g-age-status != SAVE-FOR-IMPERIAL)
    (goal g-game-focus DEFENSIVE)
	=>
	(set-escrow-percentage gold 10)
	)

	(defrule
	(goal g-stone-escrow-type ACCUMULATED)
	=>
	(set-escrow-percentage stone 50)
	)

    ;Cap Escrow
	(defrule
	(true)
	=>
    (up-setup-cost-data 1 g-food-cost)
    (up-get-cost-delta g-food-delta)
	(up-modify-escrow food g:min g-max-food-needed)
    (up-modify-escrow food g:min g-food-delta)
	(up-modify-escrow wood g:min g-max-wood-needed)
    (up-modify-escrow wood g:min g-wood-delta)
	(up-modify-escrow stone g:min g-max-stone-needed)
    (up-modify-escrow stone g:min g-stone-delta)
	(up-modify-escrow gold g:min g-max-gold-needed)
    (up-modify-escrow gold g:min g-gold-delta)
	)
	
;=========================<>=========================
;		   TAUNT 248 - DEBUG ESCROW AMOUNTS
;=========================<>=========================

	(defrule
	(taunt-detected TAUNT-PLAYER 248)
	=>
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Max Food Needed: %d" g: g-max-food-needed)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Max Wood Needed: %d" g: g-max-wood-needed)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Max Gold Needed: %d" g: g-max-gold-needed)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Max Stone Needed: %d" g: g-max-stone-needed)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Important Techs Food Needed: %d" g: g-important-techs-food-needed)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Important Techs Wood Needed: %d" g: g-important-techs-wood-needed)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Important Techs Gold Needed: %d" g: g-important-techs-gold-needed)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Important Techs Stone Needed: %d" g: g-important-techs-stone-needed)
    )

	(defrule
	(taunt-detected TAUNT-PLAYER 248)
	=>
	(up-get-fact escrow-amount food g-temp)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Escrow Food: %d" g: g-temp)
	(up-get-fact escrow-amount wood g-temp)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Escrow Wood: %d" g: g-temp)
	(up-get-fact escrow-amount gold g-temp)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Escrow Gold: %d" g: g-temp)
	(up-get-fact escrow-amount stone g-temp)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Escrow Stone: %d" g: g-temp)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Wood escrow type: %d" g: g-wood-escrow-type)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Food escrow type: %d" g: g-food-escrow-type)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Gold escrow type: %d" g: g-gold-escrow-type)
	(up-chat-data-to-player THIS-ANY-TAUNT-PLAYER "Stone escrow type: %d" g: g-stone-escrow-type)
    (acknowledge-taunt THIS-ANY-TAUNT-PLAYER 248)
	)