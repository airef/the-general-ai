

    (load "The General 1.2/Functions/Reset")

;---------------------
;	GOAL: g-general
;---------------------

	;Use the number of trees on the map as a makeshift random number generator that is the same for all players.
	;This number will be used to assign a general to each player to ensure that two generals of the same name aren't (likely) chosen.

	(defrule
	(goal g-general PENDING)
	=>
	(up-get-fact cc-gaia-type-count tree-class g-temp)		;Get number of forest trees on map as a universal seed for randomization
	(up-get-fact player-number my-player-number g-temp2)	;Store the player number
	(up-modify-goal g-temp g:+ g-temp2)					;add player number (g-temp2) to the number of trees on the map (g-temp)
	(up-modify-goal g-temp c:mod NUM-GENERALS)				;Get the mod by the number of different generals available for the civ
	(up-modify-goal g-general g:= g-temp)					;Set g-general to the result
	)

	;Set the name of each general based on g-general calculated above.
	#load-if-defined AZTEC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ACAMAPICHTLI)
		(up-change-name "General Acamapichtli")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general AHUITZOTOL)
		(up-change-name "General Ahuitzotol")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general CUAUHTEMOC)
		(up-change-name "General Cuauhtemoc")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ITZCOATL)
		(up-change-name "General Itzcoatl")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general MONTEZUMA)
		(up-change-name "General Montezuma")
		(disable-self)
		)

	#end-if

	#load-if-defined BERBERS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general IDRIS-IBN-ABDALLAH)
		(up-change-name "General Idris ibn Abdallah")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general MUHAMMAD-IBN-TUMART)
		(up-change-name "General Muhammad ibn Tumart")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MUSA-IBN-NUSAYR)
		(up-change-name "General Musa ibn Nusayr")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general TARIQ-IBN-ZIYAD)
		(up-change-name "General Tariq ibn Ziyad")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YUSUF-IBN-TASHFIN)
		(up-change-name "General Yusuf ibn Tashfin")
		(disable-self)
		)
		
	#end-if

	#load-if-defined BRITON-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general EDWARD-LONGSHANKS)
		(up-change-name "General Edward Longshanks")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general HAROLD-GODWINSON)
		(up-change-name "General Harold Godwinson")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HENRY-V)
		(up-change-name "General Henry V")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general RICHARD-I)
		(up-change-name "General Richard I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ARTHUR)
		(up-change-name "General Arthur")
		(disable-self)
		)

	#end-if

	#load-if-defined BULGARIANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ASPARUKH)
		(up-change-name "General Asparukh")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BORIS)
		(up-change-name "General Boris I Mikhail")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general IVAN-ASEN)
		(up-change-name "General Ivan Asen II")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general IVAYLO)
		(up-change-name "General Ivaylo")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general SIMEON)
		(up-change-name "General Simeon")
		(disable-self)
		)
		
	#end-if

	#load-if-defined BURGUNDIANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general GUNDAHARIUS)
		(up-change-name "General Gundaharius")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general JOHN-THE-FEARLESS)
		(up-change-name "General John the Fearless")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general ODO-IV)
		(up-change-name "General Odo IV")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general PHILIP-THE-GOOD)
		(up-change-name "General Philip the Good")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general RICHARD-THE-JUSTICIAR)
		(up-change-name "General Richard the Justiciar")
		(disable-self)
		)
		
	#end-if

	#load-if-defined BURMESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ANAWRAHTA)
		(up-change-name "General Anawrahta")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BAYINNAUNG)
		(up-change-name "General Bayinnaung")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MINGYINYO)
		(up-change-name "General Mingyinyo")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general NARAPATISITHU)
		(up-change-name "General Napapatisithu")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TABINSHWEHTI)
		(up-change-name "General Tabinshwehti")
		(disable-self)
		)
		
	#end-if

	#load-if-defined BYZANTINE-CIV

		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BASIL)
		(up-change-name "General Basil")
		(disable-self)
		)

		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BELISARIUS)
		(up-change-name "General Belisarius")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general CONSTANTINE)
		(up-change-name "General Constantine")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general HERACLIUS)
		(up-change-name "General Heraclius")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general JUSTINIAN)
		(up-change-name "General Justinian")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general MANUEL)
		(up-change-name "General Manuel Komnenos")
		(disable-self)
		)

	#end-if

	#load-if-defined CELTIC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general AETHELFIRTH)
		(up-change-name "General Aethelfirth")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BRIAN-BORU)
		(up-change-name "General Brian Boru")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MURTAUGH-OBRIEN)
		(up-change-name "General Murtaugh O'Brien")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ROBERT-THE-BRUCE)
		(up-change-name "General Robert the Bruce")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general WILLIAM-WALLACE)
		(up-change-name "General William Wallace")
		(disable-self)
		)

	#end-if

	#load-if-defined CHINESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general LI-SHI-MIN)
		(up-change-name "General Li Shi-min")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general SU-DINGFANG)
		(up-change-name "General Su Dingfang")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general YUE-FEI)
		(up-change-name "General Yue Fei")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ZHAO-KUANG-YING)
		(up-change-name "General Zhao Kuang-Ying")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ZHU-YUAN-ZHANG)
		(up-change-name "General Zhu Yuan-zhang")
		(disable-self)
		)

	#end-if

	#load-if-defined CUMANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BONIAK)
		(up-change-name "General Boniak")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KOTYAN-KHAN)
		(up-change-name "General Kotyan Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general KONCHAK-OTRAKOVICH)
		(up-change-name "General Konchak")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general SOKAL)
		(up-change-name "General Sokal")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general AYEPA)
		(up-change-name "General Ayepa Khan")
		(disable-self)
		)
		
	#end-if

	#load-if-defined ETHIOPIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general AMDA-SEYON)
		(up-change-name "General Amda Seyon")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KALEB-OF-AKSUM)
		(up-change-name "General Kaleb of Aksum")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general YEKUNO-AMLAK)
		(up-change-name "General Yekuno Amlak")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general YODIT)
		(up-change-name "General Yodit")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ZARA-YAQOB)
		(up-change-name "General Zara Yaqob")
		(disable-self)
		)
		
	#end-if

	#load-if-defined FRANKISH-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general CHARLEMAGNE)
		(up-change-name "General Charlemagne")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general CHARLES-MARTEL)
		(up-change-name "General Charles Martel")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general JOAN-OF-ARC)
		(up-change-name "General Joan of Arc")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general LA-HIRE)
		(up-change-name "General La Hire")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general WILLIAM-THE-CONQUEROR)
		(up-change-name "General William the Conqueror")
		(disable-self)
		)

	#end-if

	#load-if-defined GOTHIC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALARIC)
		(up-change-name "General Alaric")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ATAULF)
		(up-change-name "General Ataulf")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general FRITIGERN)
		(up-change-name "General Fritigern")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general THEODORIC)
		(up-change-name "General Theodoric")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general WALLIA)
		(up-change-name "General Wallia")
		(disable-self)
		)

	#end-if

	#load-if-defined HUN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ATTILA)
		(up-change-name "General Attila")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BLEDA)
		(up-change-name "General Bleda")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general DENGIZICH)
		(up-change-name "General Dengizich")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general RUGILA)
		(up-change-name "General Rugila")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ULDIN)
		(up-change-name "General Uldin")
		(disable-self)
		)

	#end-if

	#load-if-defined INCAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ATAHUALPA)
		(up-change-name "General Atahualpa")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general HUAYNA-CAPAC)
		(up-change-name "General Huayna Capac")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MANCO-CAPAC)
		(up-change-name "General Manco Capac")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general PACHACUTI)
		(up-change-name "General Pachacuti")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TOPA-YUPANQUI)
		(up-change-name "General Topa Yupanqui")
		(disable-self)
		)

	#end-if

	#load-if-defined INDIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general AKBAR)
		(up-change-name "General Akbar")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ALA-UD-DIN)
		(up-change-name "General Ala-ud-din")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general BABUR)
		(up-change-name "General Babur")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general BAPPA-RAWAL)
		(up-change-name "General Bappa Rawal")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general CHANDRAGUPTA)
		(up-change-name "General Chandragupta")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general PRITHVIRAJ)
		(up-change-name "General Prithviraj")
		(disable-self)
		)
			
		(defrule
		(goal g-general 6)
		=>
		(set-goal g-general RAJENDRA)
		(up-change-name "General Rajendra")
		(disable-self)
		)
		
	#end-if

	#load-if-defined ITALIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general DOMENICO-SELVO)
		(up-change-name "General Domenico Selvo")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general FRANCESCO-SFORZA)
		(up-change-name "General Francesco Sforza")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general GUGLIELMO-EMBRIACO)
		(up-change-name "General Guglielmo Embriaco")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general LIUTPRAND)
		(up-change-name "General Liutprand")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general OTTONE-VISCONTI)
		(up-change-name "General Ottone Visconti")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general PIETRO-GRADENIGO)
		(up-change-name "General Pietro Gradenigo")
		(disable-self)
		)
		
	#end-if

	#load-if-defined JAPANESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general FUJIWARANO-MICHINAGA)
		(up-change-name "General Fujiwara Michinaga")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KUSUNOKI-MASASHIGE)
		(up-change-name "General Kusunoki Masashige")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MINAMOTONO-YORITOMO)
		(up-change-name "General Minamotono Yoritomo")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ODA-NOBUNAGA)
		(up-change-name "General Oda Nobunaga")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TOKUGAWA-IEYASU)
		(up-change-name "General Tokugawa Ieyasu")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general TOYOTOMI-HIDEYOSHI)
		(up-change-name "General Toyotomi Hideyoshi")
		(disable-self)
		)

	#end-if

	#load-if-defined KHMER-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general JAYAVARMAN-II)
		(up-change-name "General Jayavarman II")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general JAYAVARMAN-VII)
		(up-change-name "General Jayavarman VII")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general SURYAVARMAN-I)
		(up-change-name "General Suryavarman I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general SURYAVARMAN-II)
		(up-change-name "General Suryavarman II")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YASOVARMAN-I)
		(up-change-name "General Yasovarman I")
		(disable-self)
		)
		
	#end-if

	#load-if-defined KOREAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general CHOE-MU-SON)
		(up-change-name "General Ch'oe Mu-son")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ULJI-MUN-TOK)
		(up-change-name "General Ulji Mun-tok")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general WANG-KON)
		(up-change-name "General Wang Kon")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general YI-SONG-KYE)
		(up-change-name "General Yi Song-kye")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YI-SUN-SHIN)
		(up-change-name "General Yi Sun-shin")
		(disable-self)
		)

	#end-if

	#load-if-defined LITHUANIANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALGIRDAS)
		(up-change-name "General Algirdas")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general GEDIMINAS)
		(up-change-name "General Gediminas")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general JOGAILA)
		(up-change-name "General Jagaila")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general MINDAUGAS)
		(up-change-name "General Mindaugas")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general VYTAUTAS)
		(up-change-name "General Vytautus")
		(disable-self)
		)
		
	#end-if

	#load-if-defined MAGYAR-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ARPAD)
		(up-change-name "General Arpad")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general HUNYADI-JANOS)
		(up-change-name "General Hunyadi Janos")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general ISTVAN)
		(up-change-name "General Istvan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general KAROLY-ROBERT)
		(up-change-name "General Karoly Robert")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general LASZLO)
		(up-change-name "General Laszlo")
		(disable-self)
		)
		
	#end-if

	#load-if-defined MALAY-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general DHARMASETU)
		(up-change-name "General Dharmasetu")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general GAJAH-MADA)
		(up-change-name "General Gajah Mada")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HAYAM-WURUK)
		(up-change-name "General Hayam Wuruk")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general PARAMESWARA)
		(up-change-name "General Parameswara")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general RADEN-WIJAYA)
		(up-change-name "General Raden Wijaya")
		(disable-self)
		)
		
	#end-if

	#load-if-defined MALIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general MAHMUD-IV)
		(up-change-name "General Mahmud IV")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general MUSA)
		(up-change-name "General Musa")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general SAKURA)
		(up-change-name "General Sakura")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general SOULEYMAN)
		(up-change-name "General Souleyman")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general SUNDJATA)
		(up-change-name "General Sundjata")
		(disable-self)
		)
		
	#end-if

	#load-if-defined MAYAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BALAJ-CHAN-KAWIIL)
		(up-change-name "General B'alaj Chan K'awiil")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KINICH-JANAAB-PACAL)
		(up-change-name "General Kinich Janaab Pacal")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general UAXACLAJUUN-UBAAH-KAWIIL)
		(up-change-name "General Uaxaclajuun Ub'aah K'awiil")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general YIKIN-CHAN-KAWIIL)
		(up-change-name "General Yik'in Chan K'awiil")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YUKNOOM-CHEEN)
		(up-change-name "General Yuknoom Che'en II")
		(disable-self)
		)

	#end-if

	#load-if-defined MONGOL-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general GENGHIS-KHAN)
		(up-change-name "General Genghis Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KUBLAI-KHAN)
		(up-change-name "General Kublai Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general KUSHLUK)
		(up-change-name "General Kushluk")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general OGEDEI-KHAN)
		(up-change-name "General Ogedei Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general SUBOTAI)
		(up-change-name "General Subotai")
		(disable-self)
		)

	#end-if

	#load-if-defined PERSIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALA-AD-DIN-MUHAMMAD)
		(up-change-name "General Ala ad-Din Muhammad")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ANUSH-TIGIN-GHARCHAI)
		(up-change-name "General Anush Tigin Gharchai")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general BAHRAM)
		(up-change-name "General Bahram V")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general MAHMUD-GHAZNAVI)
		(up-change-name "General Mahmud Ghaznavi")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general KHOSRAU)
		(up-change-name "General Khosrau I")
		(disable-self)
		)

	#end-if

	#load-if-defined PORTUGUESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general AFONSO-DE-ALBUQUERQUE)
		(up-change-name "General Afonso de Albuquerque")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general AFONSO-HENRIQUES)
		(up-change-name "General Afonso Henriques")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general FRANCISCO-DE-ALMEIDA)
		(up-change-name "General Francisco de Almeida")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general HENRY-THE-NAVIGATOR)
		(up-change-name "General Henry the Navigator")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general NUNO-ALVARES-PEREIRA)
		(up-change-name "General Nuno Alvares Pereira")
		(disable-self)
		)
		
	#end-if

	#load-if-defined SARACEN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BAIBARS)
		(up-change-name "General Baibars")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ABU-BAKR)
		(up-change-name "General Abu Bakr")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MUAWIYAH)
		(up-change-name "General Muawiyah I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general KHALID)
		(up-change-name "General Khalid")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general HARUN-AL-RASHID)
		(up-change-name "General Harun al-Rashid")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general SALADIN)
		(up-change-name "General Saladin")
		(disable-self)
		)

	#end-if

	#load-if-defined SICILIANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BOHEMOND)
		(up-change-name "General Bohemond")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general FREDERICK-II)
		(up-change-name "General Frederick II")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general ROBERT-GUISCARD)
		(up-change-name "General Robert Guiscard")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ROGER-BOSSO)
		(up-change-name "General Roger Bosso")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ROGER-II)
		(up-change-name "General Roger II")
		(disable-self)
		)

	#end-if

	#load-if-defined SLAVIC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALEXANDER-NEVSKY)
		(up-change-name "General Alexander Nevski")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BOLESLAW)
		(up-change-name "General Boleslaw")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general SVIATOSLAV)
		(up-change-name "General Sviatoslav")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general VLADIMIR)
		(up-change-name "General Vladimir")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YAROSLAV)
		(up-change-name "General Yaroslav")
		(disable-self)
		)
		
	#end-if

	#load-if-defined SPANISH-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALFONSO)
		(up-change-name "General Alfonso VI")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general GONZALO-PIZARRO)
		(up-change-name "General Gonzalo Pizarro")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HERNAN-CORTEZ)
		(up-change-name "General Hernan Cortez")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general RODRIGO-DIAZ)
		(up-change-name "General Rodrigo Diaz")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ISABELLA)
		(up-change-name "General Isabella")
		(disable-self)
		)

	#end-if

	#load-if-defined TATARS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BATU-KHAN)
		(up-change-name "General Batu Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KAIDU)
		(up-change-name "General Kaidu")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general TAMERLANE)
		(up-change-name "General Tamerlane")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general TOKHTAMYSH-KHAN)
		(up-change-name "General Tokhtamysh Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general UZBEG-KHAN)
		(up-change-name "General Uzbeg Khan")
		(disable-self)
		)
		
	#end-if

	#load-if-defined TEUTONIC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general CHARLES-V)
		(up-change-name "General Charles V")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general FREDERICK)
		(up-change-name "General Frederick I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HENRY-THE-LION)
		(up-change-name "General Henry the Lion")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general OTTO)
		(up-change-name "General Otto I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general WINRICH-VON-KNIPRODE)
		(up-change-name "General Winrich")
		(disable-self)
		)

	#end-if

	#load-if-defined TURKISH-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALP-ARSLAN)
		(up-change-name "General Alp Arslan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BAYAZID)
		(up-change-name "General Bayazid")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general OSMAN)
		(up-change-name "General Osman")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general SULEIMAN)
		(up-change-name "General Suleiman")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TUGHRIL)
		(up-change-name "General Tughril")
		(disable-self)
		)

	#end-if

	#load-if-defined VIETNAMESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general LE-LOI)
		(up-change-name "General Le Loi")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general LE-THANH-TONG)
		(up-change-name "General Le Thanh Tong")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general NGO-QUYEN)
		(up-change-name "General Ngo Quyen")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general TRAN-NHAN-TONG)
		(up-change-name "General Tran Nhan Tong")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TRAN-THAI-TONG)
		(up-change-name "General Tran Thai Tong")
		(disable-self)
		)
	#end-if

	#load-if-defined VIKING-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general CNUT)
		(up-change-name "General Cnut")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general HARALD-FAIRHAIR)
		(up-change-name "General Harald Fairhair")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HARALD-HARDRAADE)
		(up-change-name "General Harald Hardraade")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general LEIF-ERICSON)
		(up-change-name "General Leif Ericson")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general OLAF-HARALDSSON)
		(up-change-name "General Olaf Haraldsson")
		(disable-self)
		)
	#end-if

;------------------------------
;	GOAL: g-current-strategy 
;------------------------------

	;-----------------------
	;	Update Strategies
	;-----------------------

		(defrule
		(current-age == dark-age)
		(up-compare-goal g-current-strategy g:!= g-dark-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-dark-strategy)
		(up-modify-goal g-current-strategy g:= g-dark-strategy)
		(up-modify-goal g-next-strategy g:= g-early-feudal-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		; (set-goal g-support-unit 0)
		)

		(defrule
		(up-compare-goal g-age-status == EARLY-FEUDAL)
		(up-compare-goal g-current-strategy g:!= g-early-feudal-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-early-feudal-strategy)
		(up-modify-goal g-current-strategy g:= g-early-feudal-strategy)
		(up-modify-goal g-next-strategy g:= g-mid-feudal-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		; (set-goal g-support-unit 0)
		)

		(defrule
		(current-age == feudal-age)
		(up-compare-goal g-age-status >= MID-FEUDAL)
		(up-compare-goal g-current-strategy g:!= g-mid-feudal-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-mid-feudal-strategy)
		(up-modify-goal g-current-strategy g:= g-mid-feudal-strategy)
		(up-modify-goal g-next-strategy g:= g-early-castle-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		; (set-goal g-support-unit 0)
		)

		(defrule
		(up-compare-goal g-age-status == EARLY-CASTLE)
		(up-compare-goal g-current-strategy g:!= g-early-castle-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-early-castle-strategy)
		(up-modify-goal g-current-strategy g:= g-early-castle-strategy)
		(up-modify-goal g-next-strategy g:= g-mid-castle-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		; (set-goal g-support-unit 0)
		)

		(defrule
		(current-age == castle-age)
		(up-compare-goal g-age-status >= MID-CASTLE)
		(up-compare-goal g-current-strategy g:!= g-mid-castle-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-mid-castle-strategy)
		(up-modify-goal g-current-strategy g:= g-mid-castle-strategy)
		(up-modify-goal g-next-strategy g:= g-early-imperial-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		; (set-goal g-support-unit 0)
		)

		(defrule
		(up-compare-goal g-age-status == EARLY-IMPERIAL)
		(up-compare-goal g-current-strategy g:!= g-early-imperial-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-early-imperial-strategy)
		(up-modify-goal g-current-strategy g:= g-early-imperial-strategy)
		(up-modify-goal g-next-strategy g:= g-mid-imperial-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		; (set-goal g-support-unit 0)
		)

		(defrule
		(up-compare-goal g-age-status == MID-IMPERIAL)
		(up-compare-goal g-current-strategy g:!= g-mid-imperial-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-mid-imperial-strategy)
		(up-modify-goal g-current-strategy g:= g-mid-imperial-strategy)
		(up-modify-goal g-next-strategy g:= g-mid-imperial-strategy)	;Mid-Imp is our last planned strategy (hopefully we don't have to go to late imp)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		)

		(defrule
		(up-compare-goal g-age-status == LATE-IMPERIAL)
		(up-compare-goal g-current-strategy g:!= g-late-imperial-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-late-imperial-strategy)
		(up-modify-goal g-current-strategy g:= g-late-imperial-strategy)
		(up-modify-goal g-next-strategy g:= g-late-imperial-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		)

		(defrule
		(up-compare-goal g-previous-strategy < 101)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		)

;------------------------------
;	GOAL: g-initial-strategy
;------------------------------

	(defrule
	(up-compare-goal g-current-strategy > 0)
	=>
	(up-modify-goal g-initial-strategy g:= g-current-strategy)
	(disable-self)
	)

;------------------------
;	GOAL: g-game-focus
;------------------------

    (load "The General 1.2/Functions/Reset Mini")

	;What the AI is current focused on

	;-----------
	;	Reset
	;-----------

		(defrule
		(true)
		=>
		(set-goal g-game-focus PENDING)
		)

	;-------------
	;	Rebuild
	;-------------

		#load-if-defined TEST-BEFORE-USING

			;Rebuild if we have no TC
			(defrule
			(up-compare-goal g-current-strategy != DOUCHE)
			(or
				(game-time > 600)
				(and
					(game-time > 300)
					(goal g-map-style NO)))
			(building-type-count-total town-center == 0)
			=>
			(set-goal g-game-focus REBUILD)
			)

			;If top enemy military pop and total pop are both more than twice our military and total pop, time to rebuild
			;Check if top enemy player has at least twice as much military and total pop as us
			;Example: if top enemy has 52 military and we have 23, g-top-player-military-parity will be -29
			;Calculation: multiply -29 by negative 1 and compare to 23 => enemy has more than twice the military pop
			(defrule
			(game-time > 300)
			(civilian-population < 40)
			(up-get-fact-max any-enemy military-population 0 g-temp)
			(up-get-fact military-population 0 g-temp3)
			(up-modify-goal g-temp g:- g-temp3)
			(up-get-fact-max any-enemy population 0 g-temp2)
			(up-get-fact population 0 g-temp3)
			(up-modify-goal g-temp2 g:- g-temp3)
			(military-population g:< g-temp)	;our military is less than half of top enemy
			(population g:< g-temp2)			;our total pop is less than half of top enemy
			(or
				(current-age > dark-age)
				(game-time > 600))
			=>
			(set-goal g-game-focus REBUILD)
			)
			(defrule
			(game-time > 300)
			(civilian-population < 40)
			(up-get-fact-max any-enemy military-population 0 g-temp)
			(up-get-fact military-population 0 g-temp3)
			(up-modify-goal g-temp g:- g-temp3)
			(up-get-fact-max any-enemy population 0 g-temp2)
			(up-get-fact population 0 g-temp3)
			(up-modify-goal g-temp2 g:- g-temp3)
			(military-population g:< g-temp)	;our military is less than half of top enemy
			(population g:< g-temp2)			;our total pop is less than half of top enemy
			(game-time > 300)
			(goal g-map-style NO)
			=>
			(set-goal g-game-focus REBUILD)
			)

		#end-if

	;---------------
	;	Defensive
	;---------------

		;If enemy units are in town, determine military advantage based on multiple variables, store in g-temp
		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(goal g-town-under-attack YES)
		=>
		(up-modify-goal g-temp g:= g-enemy-units-in-town)
		(up-get-fact military-population 0 g-temp2)
		(up-modify-goal g-temp g:- g-temp2)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(goal g-town-under-attack NO)
		=>
		(up-modify-goal g-temp g:= g-target-military-parity)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(building-type-count castle > 0)
		=>
		(up-modify-goal g-temp c:+ 8)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(up-building-type-in-town c: castle > 0)
		(goal g-attacking NO)
		=>
		(up-modify-goal g-temp c:- 15)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(goal g-target-age-parity WE-ARE-AHEAD)
		=>
		(up-modify-goal g-temp c:+ 10)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(goal g-target-age-parity WE-ARE-BEHIND)
		=>
		(up-modify-goal g-temp c:- 10)
		)

		;Focus on defending if enemy is attacking with large enough numbers
		(defrule
		(goal g-game-focus PENDING)
		(up-compare-goal g-enemy-units-in-town >= 2)
		(up-compare-goal g-enemy-units-in-town <= 5)
		(up-compare-goal g-temp <= -5)
		(up-get-fact military-population 0 g-temp2)
		(up-modify-goal g-temp2 c:/ -4)
		(up-compare-goal g-temp g:<= g-temp2)	;calculated military advantage < -25% of our military population
		=>
		(set-goal g-game-focus DEFENSIVE)
		; (chat-local-to-self "Defensive1")
		)

		(defrule
		(goal g-game-focus PENDING)
		(up-compare-goal g-enemy-units-in-town >= 6)
		(up-compare-goal g-enemy-units-in-town <= 10)
		(up-compare-goal g-temp <= 0)			;calculated military advantage < 0
		=>
		(set-goal g-game-focus DEFENSIVE)
		; (chat-local-to-self "Defensive2")
		)

		(defrule
		(goal g-game-focus PENDING)
		(up-compare-goal g-enemy-units-in-town >= 11)
		(up-compare-goal g-temp <= 5)
		(up-get-fact military-population 0 g-temp2)
		(up-modify-goal g-temp2 c:/ 4)
		(up-compare-goal g-temp g:<= g-temp2)	;calculated military advantage < 25% of our military population
		=>
		(set-goal g-game-focus DEFENSIVE)
		; (chat-local-to-self "Defensive3")
		)

		;Not currently attacked by many soldiers, but a threat from the enemy seems imminent
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position FLANK)
		(up-compare-goal g-enemy-units-in-town < 2)
		(or
			(up-compare-goal g-target-military-parity < -8)
			(and
				(goal g-town-under-attack YES)
				(up-compare-goal g-temp < -5)))
		(military-population < 12)
		=>
		(set-goal g-game-focus DEFENSIVE)
		; (chat-local-to-self "Defensive4")
		)

	;----------
	;	Boom
	;----------

		;Boom if we fell behind in population and we have a strong ally
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position FLANK)
		(up-get-fact-max any-enemy military-population 0 g-temp)
		(up-get-fact military-population 0 g-temp2)
		(up-modify-goal g-temp g:- g-temp2)
		(up-compare-goal g-temp > 0)							;top enemy has more military than us
		(up-get-fact-max any-enemy population 0 g-temp)
		(up-get-fact population 0 g-temp2)
		(up-modify-goal g-temp g:- g-temp2)
		(up-compare-goal g-temp > TWENTY-FIVE-PERCENT-POP)		;top enemy has > 50 pop more than us (in 200 pop game)
		(players-population any-ally >= EIGHTY-PERCENT-POP)		;we have a stronger ally that can support us
		=>
		(set-goal g-game-focus BOOM)
		; (chat-local-to-self "Boom1")
		)

		;Boom if we are fast castling and got to castle age without many losses
		(defrule
		(goal g-game-focus PENDING)
		(civilian-population >= 30)
		(goal g-strategy-type FAST-CASTLE)
		(up-compare-goal g-age-status >= MID-CASTLE)
		(or
			(goal g-target-age-parity WE-ARE-AHEAD)
			(up-compare-flag g-flag != ENEMY-FC))
		(up-resource-amount amount-killed-by-others <= 4)
		=>
		(set-goal g-game-focus BOOM)
		; (chat-local-to-self "Boom2")
		)
		(defrule
		(goal g-game-focus PENDING)
		(civilian-population >= 30)
		(goal g-strategy-type FAST-CASTLE)
		(up-compare-goal g-age-status >= MID-CASTLE)
		(or
			(goal g-target-age-parity WE-ARE-AHEAD)
			(up-compare-flag g-flag != ENEMY-FC))
		(up-resource-amount amount-kill-ratio > 0)
		(up-resource-amount amount-killed-by-others <= 6)
		(up-get-fact-max any-enemy population 0 g-temp)
		(up-get-fact population 0 g-temp2)
		(up-modify-goal g-temp g:- g-temp2)
		(up-compare-goal g-temp < 10)		;top enemy has < 10 pop more than us
		=>
		(set-goal g-game-focus BOOM)
		; (chat-local-to-self "Boom3")
		)

		;Boom if we gained map control
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position FLANK)
		(up-compare-goal g-target-military-parity > 10)				;ahead by 10 in military
		(up-get-fact civilian-population 0 g-temp)
		(up-get-fact-max any-enemy civilian-population 0 g-temp2)
		(up-modify-goal g-temp g:- g-temp2)
		(up-compare-goal g-temp > 0)								;also ahead in civilian pop
		(up-get-fact civilian-population 0 g-temp)
		(up-get-fact-max any-enemy civilian-population 0 g-temp2)
		(up-modify-goal g-temp g:- g-temp2)
		(up-compare-goal g-temp > 20)								;ahead by 20 in total pop
		(up-compare-goal g-primary-unit-tech-progress >= PRIORITY-CASTLE-COMPLETE)
		(up-compare-goal g-age-status >= MID-CASTLE)
		(up-timer-status t-first-attack != timer-running)
		=>
		(set-goal g-game-focus BOOM)
		; (chat-local-to-self "Boom4")
		)

		;Focus on booming if we fell behind in both military and economy
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position FLANK)
		(up-compare-goal g-target-military-parity < -4)				;behind by 4 military
		(up-get-fact-max any-enemy civilian-population 0 g-temp2)
		(up-modify-goal g-temp g:- g-temp2)
		(up-compare-goal g-temp < 0)								;also behind in civilian pop
		(up-compare-goal g-primary-unit-tech-progress >= PRIORITY-CASTLE-COMPLETE)
		(up-compare-goal g-target-age-parity != WE-ARE-AHEAD)
		=>
		(set-goal g-game-focus BOOM)
		; (chat-local-to-self "Boom5")
		)

		;If pocket, boom after first attack is launched
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position POCKET)
		(up-compare-goal g-age-status >= MID-CASTLE)
		(up-modify-goal g-temp g:= g-desired-num-villager)
		(up-modify-goal g-temp c:- 10)
		(or
			(up-compare-goal g-primary-unit-tech-progress < PRIORITY-IMPERIAL-COMPLETE)
			(or
				(up-compare-goal g-support-unit-tech-progress < PRIORITY-IMPERIAL-COMPLETE)
				(up-object-type-count c: villager g:< g-temp)))	;want at least 10 more villagers
		=>
		(set-goal g-game-focus BOOM)
		; (chat-local-to-self "Boom6")
		)

	;--------------------------
	;	Aggressive (Default)
	;--------------------------

		(defrule
		(goal g-game-focus PENDING)
		; (goal g-position FLANK)
		=>
		(set-goal g-game-focus AGGRESSIVE)
		; (chat-local-to-self "Aggressive3")
		)

;------------------------
;	GOAL: g-age-status
;------------------------

	(load "The General 1.2/Functions/Reset Mini")

		(defrule
		(true)
		=>
		(set-goal g-age-status PENDING)
		(up-get-threat-data g-threat-elapsed-time g-threat-player g-threat-source-class g-threat-target-class)	;gets data of the most threat from anywhere on the map
		(up-modify-sn sn-focus-player-number g:= g-threat-player)	;the player that most recently attacked us
		)

	;--------------
	;	Dark Age
	;--------------

		(defrule
		(up-research-status c: feudal-age == research-pending)
		=>
		(set-goal g-age-status TO-FEUDAL)
		)

		(defrule
		(current-age == dark-age)
		(up-compare-goal g-age-status < SAVE-FOR-FEUDAL)
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:- 2)
		(or
			(up-object-type-count-total c: villager g:>= g-temp)
			(goal g-town-under-attack YES))
		(current-age-time > 5)	;wait until g-required-num-villager is set
		=>
		(set-goal g-age-status SAVE-FOR-FEUDAL)
		)

		(defrule
		(current-age == dark-age)
		(goal g-age-status PENDING)
		=>
		(set-goal g-age-status DARK)
		)

	;----------------
	;	Feudal Age
	;----------------

		(defrule
		(up-research-status c: castle-age == research-pending)
		=>
		(set-goal g-age-status TO-CASTLE)
		)

		(defrule
		(current-age == feudal-age)
		(up-compare-goal g-age-status < SAVE-FOR-CASTLE)
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:- 4)
		(or
			(up-object-type-count-total c: villager g:>= g-temp)
			(and
				(players-current-age focus-player >= castle-age)
				(goal g-town-under-attack YES)))
		(current-age-time > 5)	;wait until g-required-num-villager is set
		=>
		(set-goal g-age-status SAVE-FOR-CASTLE)
		)

		(defrule
		(current-age == feudal-age)
		(up-compare-goal g-age-status < MID-FEUDAL)
		(or
			(up-compare-goal g-attack-status >= FIRST-FEUDAL-ATTACK)
			(current-age-time >= 300))
		=>
		(set-goal g-age-status MID-FEUDAL)
		)

		(defrule
		(current-age == feudal-age)
		(goal g-age-status PENDING)
		=>
		(set-goal g-age-status EARLY-FEUDAL)
		)

	;----------------
	;	Castle Age
	;----------------

		(defrule
		(up-research-status c: imperial-age == research-pending)
		=>
		(set-goal g-age-status TO-IMPERIAL)
		)

		(defrule
		(current-age == castle-age)
		(up-compare-goal g-age-status < SAVE-FOR-IMPERIAL)
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:- 5)
		(or
			(up-object-type-count-total c: villager g:>= g-temp)
			(and
				(players-current-age focus-player >= imperial-age)
				(goal g-town-under-attack YES)))
		(current-age-time > 5)	;wait until g-required-num-villager is set
		=>
		(set-goal g-age-status SAVE-FOR-IMPERIAL)
		)

		(defrule
		(current-age == castle-age)
		(up-compare-goal g-age-status < MID-CASTLE)
		(or
			(up-compare-goal g-attack-status >= FIRST-CASTLE-ATTACK)
			(current-age-time >= 450))
		=>
		(set-goal g-age-status MID-CASTLE)
		)

		(defrule
		(current-age == castle-age)
		(goal g-age-status PENDING)
		=>
		(set-goal g-age-status EARLY-CASTLE)
		)

	;------------------
	;	Imperial Age
	;------------------

		(defrule
		(current-age == imperial-age)
		(up-compare-goal g-age-status < LATE-IMPERIAL)
		(up-compare-goal g-recent-gold-gathered < 100)
		(up-compare-sn sn-gold-gatherer-percentage >= 10)
		(gold-amount < 700)
		=>
		(set-goal g-age-status LATE-IMPERIAL)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-age-status LATE-IMPERIAL)
		(or
			(up-compare-goal g-recent-gold-gathered >= 100)
			(or
				(gold-amount >= 700)
				(up-compare-sn sn-gold-gatherer-percentage < 10)))
		=>
		(set-goal g-age-status MID-IMPERIAL)
		)

		(defrule
		(current-age == imperial-age)
		(up-compare-goal g-age-status < MID-IMPERIAL)
		(or
			(up-compare-goal g-attack-status >= FIRST-IMPERIAL-ATTACK)
			(current-age-time >= 450))
		=>
		(set-goal g-age-status MID-IMPERIAL)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-age-status PENDING)
		=>
		(set-goal g-age-status EARLY-IMPERIAL)
		)

;--------------------------------------
;	GOALS: g-town-under-attack
;		   g-enemy-buildings-in-town
;		   g-enemy-units-in-town
;--------------------------------------

    (load "The General 1.2/Functions/Reset Mini")

	;Determines if the town is under attack, helps request assistance from allies

	(defrule
	(true)
	=>
	(set-strategic-number sn-focus-player-number 1)
	(set-goal g-enemy-buildings-in-town 0)
	; (set-goal g-enemy-units-in-town 0)
	(set-goal g-temp 0)
	(set-goal g-temp2 0)
	)

		;Loop through all in-game enemies and count their buildings and units

		(defrule
		(player-in-game focus-player)
		(not
			(stance-toward focus-player ally))	;self is also considered an ally, so this rule won't count our own buildings
		=>
		(up-modify-goal g-temp s:= csn-peaceful-town-size)
		(up-modify-goal g-temp c:* 2)	;increase distance to search for enemy buildings by 200% because csn-peaceful-town-size...
		(up-modify-goal g-temp c:min 30)	;...is measured as a square around the TC, not a circle
		(up-full-reset-search)				
		(up-set-target-point g-position-self-x)	
		(up-filter-distance c: -1 g: g-temp)	;search for buildings within csn-peaceful-town-size
		(up-find-remote c: building-class c: 40)
		(up-find-remote c: tower-class c: 40)
		(up-filter-status c: status-pending c: list-active)	;find buildings and towers under construction
		(up-find-status-remote c: building-class c: 40)
		(up-find-status-remote c: tower-class c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-enemy-buildings-in-town g:+ g-remote-total)
		)

		(defrule
		(player-in-game focus-player)
		(not
			(stance-toward focus-player ally))
		=>
		(up-modify-goal g-temp s:= csn-peaceful-town-size)
		(up-modify-goal g-temp c:* 2)	
		(up-modify-goal g-temp c:min 30)
		(up-full-reset-search)
		(up-set-target-point g-position-self-x)
		(up-filter-distance c: -1 g: g-temp)
		(up-filter-exclude cmdid-military-building -1 -1 building-class)
		(up-find-remote c: any-objects c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp2 g:+ g-remote-total)
		)

		(defrule
		(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
		=>
		(up-modify-sn sn-focus-player-number c:+ 1)
		(up-jump-rule -3)
		)

	(defrule
	(up-compare-goal g-temp2 > 0)
	=>
	(up-modify-goal g-enemy-units-in-town g:= g-remote-total)
	(disable-timer t-enemy-in-town)
	)

	(defrule
	(up-compare-goal g-temp2 <= 0)
	(up-compare-goal g-enemy-units-in-town > 0)
	(up-timer-status t-enemy-in-town == timer-triggered)
	=>
	(disable-timer t-enemy-in-town)
	(set-goal g-enemy-units-in-town 0)
	)

	(defrule
	(up-compare-goal g-temp2 <= 0)
	(up-compare-goal g-enemy-units-in-town > 0)
	(up-timer-status t-enemy-in-town != timer-running)
	=>
	(enable-timer t-enemy-in-town 15)
	)

	(defrule
	(or
		(town-under-attack)
		(up-compare-goal g-enemy-units-in-town >= 7))
	(goal g-attacking NO)
	(up-compare-goal g-town-under-attack != YES)
	(or
		(up-building-type-in-town c: castle > 0)
		(or
			(up-compare-goal g-enemy-units-in-town >= 5)
			(and
				(current-age <= feudal-age)
				(up-compare-goal g-enemy-units-in-town >= 2))))
	=>
	(disable-timer t-town-under-attack)
	(set-goal g-town-under-attack YES)
	; (chat-to-player my-player-number "town under attack")
	)

	(defrule
	(goal g-town-under-attack PENDING)
	(up-timer-status t-town-under-attack != timer-running)
	(not
		(town-under-attack))
	(up-building-type-in-town c: castle == 0)
	(up-compare-goal g-enemy-units-in-town < 5)
	(or
		(current-age > feudal-age)
		(up-compare-goal g-enemy-units-in-town < 2))
	=>
	(disable-timer t-town-under-attack)
	(set-goal g-town-under-attack NO)
	; (chat-to-player my-player-number "town is safe")
	)

	(defrule
	(goal g-town-under-attack YES)
	(up-timer-status t-town-under-attack != timer-running)
	(not
		(town-under-attack))
	(up-building-type-in-town c: castle == 0)
	(up-compare-goal g-enemy-units-in-town < 5)
	(or
		(current-age > feudal-age)
		(up-compare-goal g-enemy-units-in-town < 2))
	=>
	(enable-timer t-town-under-attack 10)
	(set-goal g-town-under-attack PENDING)
	; (chat-to-player my-player-number "wait to see if town is safe")
	)

;------------------------------------
;	GOAL: g-target-military-parity
;------------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;The difference between our military pop and the military pop of the target player, > 0 means we have superiority

	(defrule
	(player-in-game target-player)
	=>
	(up-get-fact military-population 0 g-target-military-parity)
	(up-get-target-fact military-population 0 g-temp)
	(up-get-target-fact unit-type-count karambit-warrior g-temp2)
	(up-get-target-fact unit-type-count elite-karambit-warrior g-temp3)
	(up-modify-goal g-temp2 g:+ g-temp3)	;add karambit warrior counts together
	(up-modify-goal g-temp2 c:/ 2)			;divide karambit warrior counts in half
	(up-modify-goal g-temp g:- g-temp2)	;subtract half of karambit warrior counts since they should only count as half pop, military population counts them as a whole unit
	(up-modify-goal g-target-military-parity g:- g-temp)	;subtract the military population of target player from our military population
	)

;-------------------------------
;	GOAL: g-target-pop-parity
;-------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;The difference between our total pop and the total pop of the target player, > 0 means we have superiority

	(defrule
	(player-in-game target-player)
	=>
	(up-get-fact population 0 g-target-pop-parity)
	(up-get-target-fact population 0 g-temp)
	(up-get-target-fact unit-type-count karambit-warrior g-temp2)
	(up-get-target-fact unit-type-count elite-karambit-warrior g-temp3)
	(up-modify-goal g-temp2 g:+ g-temp3)	;add karambit warrior counts together
	(up-modify-goal g-temp2 c:/ 2)			;divide karambit warrior counts in half
	(up-modify-goal g-temp g:- g-temp2)	;subtract half of karambit warrior counts since they should only count as half pop, population counts them as a whole unit
	(up-modify-goal g-target-pop-parity g:- g-temp)	;subtract the total population of target player from our total population
	)

;-------------------------------
;	GOAL: g-target-age-parity
;-------------------------------

    (load "The General 1.2/Functions/Reset Mini")

	;Determines whether we are ahead or behind in age, compared to our target enemy

	(defrule
	(true)
	=>
	(up-get-fact current-age 0 g-temp)					;store our current age
	(up-get-target-fact current-age 0 g-temp2)	;store target-player's current age
	)

	(defrule
	(up-compare-goal g-temp g:< g-temp2)
	=>
	(set-goal g-target-age-parity WE-ARE-BEHIND)
	)
	
	(defrule
	(up-compare-goal g-temp g:== g-temp2)
	=>
	(set-goal g-target-age-parity WE-ARE-EQUAL)
	)

	(defrule
	(up-compare-goal g-temp g:> g-temp2)
	=>
	(set-goal g-target-age-parity WE-ARE-AHEAD)
	)

;-----------------------------
;	GOAL: g-scouting-status
;-----------------------------

    (load "The General 1.2/Functions/Reset Mini")

	;Find necessary resources first
	(defrule
	(up-set-target-by-id g: g-scout1-id)
	(building-type-count-total town-center > 0)
	=>
	(set-goal g-scouting-status FIND-RESOURCES)
	(disable-self)
	)

	(defrule
	(goal g-scouting-status FIND-RESOURCES)
	(building-type-count-total town-center > 0)
	(or
		(up-compare-goal g-sheep-found-count > 0)
		(up-compare-const MIN-SHEEP == 0))
	(or
		(up-compare-goal g-boar-found-count > 0)
		(up-compare-const MIN-BOAR == 0))
	(or
		(up-gaia-type-count-total c: forage-class > 0)
		(up-compare-const FORAGE-PILE-1 == 0))
	=>
	(set-goal g-temp 19001)
	)

	;If playing a custom map, where sheep/boar/forage amounts aren't known, reset g-temp until we've found a food resource
	(defrule
	(goal g-scouting-status FIND-RESOURCES)
	(building-type-count-total town-center > 0)
	(up-compare-const MIN-SHEEP == 0)
	(up-compare-const MIN-BOAR == 0)
	(up-compare-const FORAGE-PILE-1 == 0)
	(up-compare-goal g-sheep-found-count == 0)
	(up-compare-goal g-boar-found-count == 0)
	(up-gaia-type-count-total c: forage-class == 0)
	(up-compare-goal g-deer-found-count == 0)
	(building-type-count farm == 0)
	=>
	(set-goal g-temp 0)
	)

	(defrule
	(goal g-temp 19001)
	(goal g-scouting-status FIND-RESOURCES)
	(building-type-count-total town-center > 0)
	(or
		(resource-found wood)
		(up-gaia-type-count-total c: wood >= 40))
	(up-gaia-type-count-total c: gold > 0)
	(up-gaia-type-count-total c: stone > 0)
	=>
	(set-goal g-scouting-status SCOUT-TOWN)
	)

    (load "The General 1.2/Functions/Reset Mini")

	;Once necessary resources are found, find the rest if possible
	;Only require a certain percentage of the expected resources to be explored
	(defrule
	(goal g-scouting-status SCOUT-TOWN)
	(building-type-count-total town-center > 0)
	=>
	(set-goal g-temp MIN-SHEEP)
	(up-modify-goal g-temp c:%* 75)
	(up-modify-goal g-temp c:min 8)
	(set-goal g-temp2 FORAGE-PILE-1)
	(up-modify-goal g-temp2 c:+ FORAGE-PILE-2)
	(up-modify-goal g-temp2 c:%* 60)
	(up-modify-goal g-temp2 c:min 8)
	)

	(defrule
	(goal g-scouting-status SCOUT-TOWN)
	(building-type-count-total town-center > 0)
	(up-compare-goal g-sheep-found-count g:>= g-temp)
	(up-gaia-type-count-total c: forage-class g:>= g-temp2)
	=>
	(set-goal g-temp MIN-BOAR)
	(up-modify-goal g-temp c:%* 60)
	(up-modify-goal g-temp c:min 2)
	(set-goal g-temp2 MIN-DEER)
	(up-modify-goal g-temp2 c:%* 55)
	(up-modify-goal g-temp2 c:min 4)
	(set-goal g-temp3 20001)
	)

	(defrule
	(goal g-temp3 20001)
	(goal g-scouting-status SCOUT-TOWN)
	(building-type-count-total town-center > 0)
	(up-compare-goal g-boar-found-count g:>= g-temp)
	(up-compare-goal g-deer-found-count g:>= g-temp2)
	=>
	(set-goal g-temp GOLD-PILE-1)
	(up-modify-goal g-temp c:+ GOLD-PILE-2)
	(up-modify-goal g-temp c:+ GOLD-PILE-3)
	(up-modify-goal g-temp c:%* 60)
	(up-modify-goal g-temp c:min 11)
	(set-goal g-temp2 STONE-PILE-1)
	(up-modify-goal g-temp2 c:+ STONE-PILE-2)
	(up-modify-goal g-temp2 c:%* 40)
	(up-modify-goal g-temp2 c:min 7)
	(set-goal g-temp3 20002)
	)

	(defrule
	(goal g-temp3 20002)
	(goal g-scouting-status SCOUT-TOWN)
	(building-type-count-total town-center > 0)
	(up-gaia-type-count-total c: gold g:>= g-temp)
	(up-gaia-type-count-total c: stone g:>= g-temp2)
	=>
	(set-goal g-scouting-status ALL-RESOURCES-FOUND)
	)

	(defrule
	(goal g-duc-scouting STOP-DUC-SCOUTING)
	(up-compare-goal g-scouting-status < ALL-RESOURCES-FOUND)
	=>
	(set-goal g-scouting-status ALL-RESOURCES-FOUND)
	)

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(up-compare-goal g-scouting-status >= ALL-RESOURCES-FOUND)
	(up-compare-goal g-scouting-status != PUSH-DEER)
	(up-compare-goal g-scouting-status != FIND-ENEMY)
	(up-compare-goal g-scouting-status != RESCOUT-ENEMY)
	(up-compare-goal g-scouting-status != AUTO-SCOUT)
	=>
	(set-goal g-scouting-status AUTO-SCOUT)
	)

	;If no deer to push or we don't have time to push deer, move on to finding enemy
	(defrule
	(game-time s:> sn-home-exploration-time)
	(current-age == dark-age)
	(up-set-target-by-id g: g-scout1-id)
	(up-compare-goal g-scouting-status >= ALL-RESOURCES-FOUND)
	(up-compare-goal g-scouting-status != PUSH-DEER)
	(up-compare-goal g-current-deer-count > 0)
	=>
	(set-goal g-scouting-status PUSH-DEER)
	)

	(load "The General 1.2/Functions/Reset Mini")
	
	(defrule
	(goal g-scouting-status PUSH-DEER)
	(or
		(not 
			(up-set-target-by-id g: g-scout1-id))
		(goal g-current-deer-count 0))
	=>
	(set-goal g-scouting-status AUTO-SCOUT)
	)
	
	(defrule
	(goal g-scouting-status PUSH-DEER)
	(up-compare-goal g-game-focus != BOOM)
	(or
		(up-compare-goal g-strategy-type < FAST-CASTLE)
		(current-age == feudal-age))
	(up-modify-goal g-temp s:= sn-home-exploration-time)
	(up-modify-goal g-temp c:+ 120)
	(or
		(game-time g:> g-temp)
		(or
			(unit-type-count villager >= 28)
			(up-compare-goal g-age-status >= TO-FEUDAL)))
	=>
	(set-goal g-scouting-status AUTO-SCOUT)
	(set-goal g-deer-pushing-status PENDING)
	(set-goal g-current-deer-id PENDING)
	)

	;Scout enemy
	(defrule
	(timer-triggered t-30-sec)
	(goal g-scouting-status AUTO-SCOUT)
	(current-age >= feudal-age)
	(up-compare-goal g-attack-status <= FIRST-CASTLE-ATTACK)
	(up-compare-sn sn-number-explore-groups > 0)
	=>
	(up-get-point position-flank g-point-x)
	)

	(defrule
	(timer-triggered t-30-sec)
	(goal g-scouting-status AUTO-SCOUT)
	(current-age >= feudal-age)
	(up-compare-goal g-attack-status <= FIRST-CASTLE-ATTACK)
	(up-compare-sn sn-number-explore-groups > 0)
	(up-point-explored g-point-x == explored-no)
	=>
	(up-send-scout group-type-land-explore scout-flank)
	)

	;Scout for market placement
	(defrule
	(goal g-scouting-status AUTO-SCOUT)
	(military-population >= TEN-PERCENT-POP)
	(up-compare-sn sn-number-explore-groups > 0)
	=>
	(up-get-point position-corner g-point-x)
	(disable-self)
	)

	(defrule
	(goal g-scouting-status AUTO-SCOUT)
	(military-population >= TEN-PERCENT-POP)
	(up-compare-sn sn-number-explore-groups > 0)
	(up-point-explored g-point-x == explored-no)
	=>
	(up-send-scout group-type-land-explore scout-corner)
	(disable-self)
	)

;-------------------------------
;	GOAL: g-scouting-distance
;-------------------------------

    (load "The General 1.2/Functions/Reset Mini")

	;Initialize g-scouting-distance
	(defrule
	(up-compare-goal g-scout1-id > 0)
    (or
        (goal g-scouting-status FIND-RESOURCES)
        (goal g-scouting-status SCOUT-TOWN))
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	(building-type-count-total town-center > 0)
	(up-compare-goal g-map-style != NOMAD)
	=>
	(set-goal g-scouting-distance 10)
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:- 1)
	(up-set-timer c: t-scout-distance-increase g: g-temp)	;set timer to 1 less than current g-scouting-distance
	(disable-self)														
	)

	;Initialize g-scouting-distance for Nomad, only set once TC is being built
	(defrule
	(up-compare-goal g-scout1-id > 0)
    (or
        (goal g-scouting-status FIND-RESOURCES)
        (goal g-scouting-status SCOUT-TOWN))
	(building-type-count town-center > 0)
	(goal g-map-style NOMAD)
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	=>
	(set-goal g-scouting-distance 6)
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:- 2)
	(up-set-timer c: t-scout-distance-increase g: g-temp)
	(disable-self)
	)

	;Increase g-scouting-distance once timer has triggered

	;Set timer length adjustment
	;If we have a second scout, the second scout is likely a sheep, so we don't want to increase scouting distance as often
	(defrule
	(up-compare-goal g-scout1-id > 0)
	(up-compare-goal g-scout2-id > 0)	;we have a second scout
	(up-compare-goal g-scouting-distance < 15)
	=>
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:+ 8)
	)

	(defrule
	(up-compare-goal g-scout1-id > 0)
	(or
		(up-compare-goal g-scout2-id <= 0)	;we don't have a second scout
		(up-compare-goal g-scouting-distance >= 15))
	(or
		(civ-selected mongol)
		(players-civ any-ally mongol))
	=>
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:- 9)
	)

	(defrule
	(up-compare-goal g-scout1-id > 0)
	(or
		(up-compare-goal g-scout2-id <= 0)	;we don't have a second scout
		(up-compare-goal g-scouting-distance >= 15))
	(nor
		(civ-selected mongol)
		(players-civ any-ally mongol))
	=>
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:- 4)
	)

	(defrule
	(up-compare-goal g-scout1-id > 0)
    (or
        (goal g-scouting-status FIND-RESOURCES)
        (goal g-scouting-status SCOUT-TOWN))
	(timer-triggered t-scout-distance-increase)
	(building-type-count-total town-center > 0)
	(up-set-target-by-id g: g-scout1-id)
	(goal g-claim-sheep NO)
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	=>
	(disable-timer t-scout-distance-increase)
	(up-modify-goal g-scouting-distance c:+ 1)
	(up-set-timer c: t-scout-distance-increase g: g-temp)	;timer length will increase as g-scouting-distance increases
	)

	;Decrease scouting distance once by 1 if we have a second scout
	(defrule
	(up-compare-goal g-scout2-id > 0)
	(timer-triggered t-scout-distance-increase)
	=>
	(up-modify-goal g-scouting-distance c:- 1)
	(disable-self)
	)

;--------------------------------
;	GOAL: g-boar-found-count
;	GOAL: g-current-boar-count
;--------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	=>
	(set-goal g-loop-counter 0)
	(set-goal g-current-boar-count 0)
	(up-set-target-point g-position-self-x)
	)

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	(up-set-target-by-id g: g-loop-counter)
	(up-object-data object-data-class == boar-class)
	(up-object-data object-data-carry > 0)
	(up-object-data object-data-hitpoints > 0)
	(up-object-data object-data-distance <= MAX-BOAR-HUNT-DISTANCE)
	(up-get-object-data object-data-point-x g-point-x)
	(up-get-object-data object-data-point-y g-point-y)
	(up-point-explored g-point-x != explored-no)
	=>
	(up-modify-goal g-current-boar-count c:+ 1)
	(up-modify-goal g-boar-found-count g:max g-current-boar-count)
	)

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	(up-compare-goal g-loop-counter g:< g-id-loop-max-objects)
	=>
	(up-modify-goal g-loop-counter c:+ 1)
	(up-jump-rule -2)
	)

;--------------------------------
;	GOAL: g-deer-found-count
;	GOAL: g-current-deer-count
;--------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	=>
	(set-goal g-loop-counter 0)
	(set-goal g-current-deer-count 0)
	(up-set-target-point g-position-self-x)
	)

		(defrule
		(or
			(game-time < 900)
			(current-age == dark-age))
		(up-set-target-by-id g: g-loop-counter)
		(up-object-data object-data-class == deer-class)
		(up-object-data object-data-carry > 0)
		(up-object-data object-data-hitpoints > 0)
		(up-object-data object-data-distance <= 45)
		(up-get-object-data object-data-point-x g-point-x)
		(up-get-object-data object-data-point-y g-point-y)
		(up-point-explored g-point-x != explored-no)
		=>
		(up-modify-goal g-current-deer-count c:+ 1)
		(up-modify-goal g-deer-found-count g:max g-current-deer-count)
		)

		(defrule
		(or
			(game-time < 900)
			(current-age == dark-age))
		(up-compare-goal g-loop-counter g:< g-id-loop-max-objects)
		=>
		(up-modify-goal g-loop-counter c:+ 1)
		(up-jump-rule -2)
		)

;----------------------
;	GOAL: g-position
;----------------------

	#load-if-defined UP-POCKET-POSITION

		(defrule
		(true)
		=>
		(set-goal g-position POCKET)
		(disable-self)
		)

	#else

		(defrule
		(true)
		=>
		(set-goal g-position FLANK)
		(disable-self)
		)

	#end-if

;----------------------------------
;	GOAL: g-scout1-id
;	GOAL: g-scout2-id	(if sheep, sheep are set as scouts in the sheep scouting section below
;	GOAL: g-scout3-id	(if sheep, sheep are set as scouts in the sheep scouting section below
;----------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;find potential scouts
	(defrule
	(goal g-scout1-id PENDING)
	(military-population > 0)
	(game-time < 5)
	=>
	(up-full-reset-search)
	(up-filter-exclude cmdid-villager actionid-explore orderid-build trade-cart-class)
	(up-find-local c: any-objects c: 240)
	(up-remove-objects search-local object-data-class == monastery-class)
	(up-remove-objects search-local object-data-class == monk-with-relic-class)
	(up-remove-objects search-local object-data-train-site == siege-workshop)
	(up-remove-objects search-local object-data-train-site == dock)
	(up-remove-objects search-local object-data-speed == 0)
	(up-remove-objects search-local object-data-class == king-class)
	(up-clean-search search-local object-data-speed search-order-desc)	;get fastest unit first in the search list
	(up-get-search-state g-local-total)
	(set-goal g-temp 47)
	(disable-self)
	)

	;Set first unit found as Scout 1
	(defrule
	(goal g-temp 47)
	(goal g-scout1-id PENDING)
	(military-population > 0)
	(game-time < 5)
	(up-set-target-object search-local c: 0)
	=>
	(up-get-object-data object-data-id g-scout1-id)
	)

	;Set second unit found as Scout 2
	(defrule
	(goal g-temp 47)
	(goal g-scout2-id PENDING)
	(military-population > 0)
	(game-time < 5)
	(up-set-target-object search-local c: 1)
	=>
	(up-get-object-data object-data-id g-scout2-id)
	)

	;Set third unit found as Scout 3
	(defrule
	(goal g-temp 47)
	(goal g-scout3-id PENDING)
	(military-population > 0)
	(game-time < 5)
	(up-set-target-object search-local c: 2)
	=>
	(up-get-object-data object-data-id g-scout3-id)
	)
	
	(load "The General 1.2/Functions/Reset Mini")

	;Set sheep as scout 2
	(defrule
	(not
		(up-set-target-by-id g: g-scout2-id))
	(up-compare-goal g-scouting-distance <= 22)
	(up-compare-goal g-current-sheep-count >= 3)
	(or
		(goal g-scouting-status FIND-RESOURCES)
		(goal g-scouting-status SCOUT-TOWN))
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	=>
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 10)
	(up-remove-objects search-local object-data-id g:== g-current-sheep-id)
	(up-remove-objects search-local object-data-id g:== g-next-sheep-id)
	(up-remove-objects search-local object-data-id g:== g-scout3-id)
	(up-remove-objects search-local object-data-player != my-player-number)
	(up-remove-objects search-local object-data-hitpoints == 0)
	(up-get-search-state g-local-total)
	)

	(defrule
	(not
		(up-set-target-by-id g: g-scout2-id))
	(unit-type-count livestock-class > 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	(up-compare-goal g-scouting-distance <= 25)
	(up-compare-goal g-current-sheep-count >= 3)
	(or
		(goal g-scouting-status FIND-RESOURCES)
		(goal g-scouting-status SCOUT-TOWN))
	=>
	(up-get-object-data object-data-id g-scout2-id)
	(up-target-point 0 action-stop -1 -1)
	)

	;Set sheep as scout 3
	(defrule
	(not
		(up-set-target-by-id g: g-scout3-id))
	(up-compare-goal g-scouting-distance <= 22)
	(up-compare-goal g-current-sheep-count >= 4)
	(or
		(goal g-scouting-status FIND-RESOURCES)
		(goal g-scouting-status SCOUT-TOWN))
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	=>
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 10)
	(up-remove-objects search-local object-data-id g:== g-current-sheep-id)
	(up-remove-objects search-local object-data-id g:== g-next-sheep-id)
	(up-remove-objects search-local object-data-id g:== g-scout2-id)
	(up-remove-objects search-local object-data-player != my-player-number)
	(up-remove-objects search-local object-data-hitpoints == 0)
	(up-get-search-state g-local-total)
	)

	(defrule
	(not
		(up-set-target-by-id g: g-scout3-id))
	(unit-type-count livestock-class > 0)
	(up-compare-goal g-local-total > 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	(up-compare-goal g-scouting-distance <= 22)
	(up-compare-goal g-current-sheep-count >= 3)
	(or
		(goal g-scouting-status FIND-RESOURCES)
		(goal g-scouting-status SCOUT-TOWN))
	=>
	(up-get-object-data object-data-id g-scout3-id)
	(up-target-point 0 action-stop -1 -1)
	)

	;Scout 1 died, set to -2 (not -1 because Scout 1 won't be used after initial scout is dead)
	(defrule
	(up-compare-goal g-scout1-id >= 0)
	(not
		(up-set-target-by-id g: g-scout1-id))
	=>
	(set-goal g-scout1-id -2)
	)

	;Scout 2 died, set to -1 (to allow a new unit to be Scout 2)
	(defrule
	(up-compare-goal g-scout2-id >= 0)
	(not
		(up-set-target-by-id g: g-scout2-id))
	=>
	(set-goal g-scout2-id PENDING)
	)

	;Scout 3 died, set to -1 (to allow a new unit to be Scout 3)
	(defrule
	(up-compare-goal g-scout3-id >= 0)
	(not
		(up-set-target-by-id g: g-scout3-id))
	=>
	(set-goal g-scout3-id PENDING)
	)

	;Stop sheep exploring
	(defrule
	(up-compare-goal g-scout2-id >= 0)
	(up-set-target-by-id g: g-scout2-id)
	(up-object-data object-data-class == livestock-class)
	(or
		(up-compare-goal g-scouting-distance > 25)
    	(or
			(up-compare-goal g-current-sheep-count <= 2)
			(nor
        		(goal g-scouting-status FIND-RESOURCES)
       			(goal g-scouting-status SCOUT-TOWN))))
	=>
	(set-goal g-scout2-id PENDING)
	)

	(defrule
	(up-compare-goal g-scout3-id >= 0)
	(up-set-target-by-id g: g-scout3-id)
	(up-object-data object-data-class == livestock-class)
	(or
		(up-compare-goal g-scouting-distance > 22)
    	(or
			(up-compare-goal g-current-sheep-count <= 3)
			(nor
        		(goal g-scouting-status FIND-RESOURCES)
       			(goal g-scouting-status SCOUT-TOWN))))
	=>
	(set-goal g-scout3-id PENDING)
	)

	;No Scout Unit
	(defrule
	(game-time < 5)
	(military-population == 0)
	(up-compare-goal g-scout1-id != -2)
	=>
	(set-goal g-scout1-id -2)
	)

	;If Scout 2 doesn't exist, put Scout 3 in its place
	(defrule
	(not
		(up-set-target-by-id g: g-scout2-id))
	(up-set-target-by-id g: g-scout3-id)
	=>
	(up-modify-goal g-scout2-id g:= g-scout3-id)
	(set-goal g-scout3-id PENDING)
	)

;----------------------------
;	GOAL: g-sheep-gather-x
;	GOAL: g-sheep-gather-y
;----------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;Get coordinates for sheep gather point
	(defrule
	(building-type-count town-center == 1)
	=>
	(up-copy-point g-sheep-gather-x g-position-self-x)
	(up-modify-goal g-sheep-gather-x c:- 4)
	(disable-self)
	)

;---------------------------------
;	GOAL: g-sheep-found-count
;	GOAL: g-current-sheep-count
;---------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	=>
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 20)
	(up-get-search-state g-local-total)
	(up-modify-goal g-temp g:= g-local-total)
	(up-modify-goal g-temp g:- g-current-sheep-count)
	(up-modify-goal g-temp c:max 0)
	(up-modify-goal g-sheep-found-count g:+ g-temp)
	(up-modify-goal g-current-sheep-count g:= g-local-total)
	)

;------------------------------
;	GOAL: g-current-sheep-id
;	GOAL: g-next-sheep-id
;------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;If we don't have a sheep currently being gathered, set next sheep as the current sheep
	(defrule
	(building-type-count town-center == 1)
	(not
		(up-set-target-by-id g: g-current-sheep-id))
	(up-set-target-by-id g: g-next-sheep-id)
	=>
	(up-modify-goal g-current-sheep-id g:= g-next-sheep-id)
	(set-goal g-next-sheep-id PENDING)
	)

	;If we still don't have a current sheep set to gather, find one
	(defrule
	(building-type-count town-center == 1)
	(up-compare-goal g-current-sheep-count > 0)
	(or
		(not
			(up-set-target-by-id g: g-current-sheep-id))
		(not
			(up-set-target-by-id g: g-next-sheep-id)))
	=>
	(set-goal g-temp sheep)
	)

	(defrule
	(goal g-temp sheep)
	(not
		(up-set-target-by-id g: g-current-sheep-id))
	=>
	(up-set-target-point g-position-self-x)	;search from sheep near sheep gather point
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 20)
	(up-remove-objects search-local object-data-id g:== g-scout2-id)	;don't use sheep scouts
	(up-remove-objects search-local object-data-id g:== g-scout3-id)	;don't use sheep scouts
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-add-object-by-id search-local g: g-scout2-id)	;add scout 2 to end of search, sheep scouts have lowest priority to be gathered
	(up-add-object-by-id search-local g: g-scout3-id)	;add scout 3 to end of search
	(up-remove-objects search-local object-data-class != livestock-class)	;remove scouts 2 or 3 if they aren't sheep
	(up-get-search-state g-local-total)
	)

	;Set currently gathered sheep ID
	(defrule
	(goal g-temp sheep)
	(not
		(up-set-target-by-id g: g-current-sheep-id))
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	=>
	(up-get-object-data object-data-id g-current-sheep-id)
	)

	;Set next sheep to gather

	(defrule
	(goal g-temp sheep)
	(up-set-target-by-id g: g-current-sheep-id)
	(not
		(up-set-target-by-id g: g-next-sheep-id))
	=>
	(up-set-target-point g-position-self-x)	;search from sheep near sheep gather point
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 20)
	(up-remove-objects search-local object-data-id g:== g-scout2-id)	;don't use sheep scouts
	(up-remove-objects search-local object-data-id g:== g-scout3-id)	;don't use sheep scouts
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-add-object-by-id search-local g: g-scout2-id)	;add scout 2 to end of search, sheep scouts have lowest priority to be gathered
	(up-add-object-by-id search-local g: g-scout3-id)	;add scout 3 to end of search
	(up-remove-objects search-local object-data-class != livestock-class)	;remove scouts 2 or 3 if they aren't sheep
	(up-remove-objects search-local object-data-id g:== g-current-sheep-id)
	(up-get-search-state g-local-total)
	)

	(defrule
	(goal g-temp sheep)
	(up-set-target-by-id g: g-current-sheep-id)
	(not
		(up-set-target-by-id g: g-next-sheep-id))
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	=>
	(up-get-object-data object-data-id g-next-sheep-id)
	)

	(defrule
	(true)
	=>
	(up-set-target-point g-position-self-x)
	)

	(defrule
	(up-set-target-by-id g: g-current-sheep-id)
	(up-set-target-by-id g: g-next-sheep-id)
	(up-object-data object-data-distance > 7)
	=>
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 20)
	(up-remove-objects search-local object-data-id g:== g-scout2-id)	;don't use sheep scouts
	(up-remove-objects search-local object-data-id g:== g-scout3-id)	;don't use sheep scouts
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-add-object-by-id search-local g: g-scout2-id)	;add scout 2 to end of search, sheep scouts have lowest priority to be gathered
	(up-add-object-by-id search-local g: g-scout3-id)	;add scout 3 to end of search
	(up-remove-objects search-local object-data-class != livestock-class)	;remove scouts 2 or 3 if they aren't sheep
	(up-remove-objects search-local object-data-id g:== g-current-sheep-id)
	(up-get-search-state g-local-total)
	)

	(defrule
	(up-set-target-by-id g: g-current-sheep-id)
	(up-set-target-by-id g: g-next-sheep-id)
	(up-object-data object-data-distance > 7)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	=>
	(up-get-object-data object-data-id g-next-sheep-id)
	)

	(defrule
	(up-set-target-by-id g: g-next-sheep-id)
	(up-compare-goal g-next-sheep-id g:== g-scout2-id)
	=>
	(set-goal g-scout2-id PENDING)
	)

	(defrule
	(up-set-target-by-id g: g-next-sheep-id)
	(up-compare-goal g-next-sheep-id g:== g-scout3-id)
	=>
	(set-goal g-scout3-id PENDING)
	)

	;If sheep scouts are set as the currently gathered sheep or sheep to be gathered next, reset their scout ID
	(defrule
	(up-compare-goal g-scout2-id != PENDING)
	(or
		(up-compare-goal g-current-sheep-id g:== g-scout2-id)
		(up-compare-goal g-next-sheep-id g:== g-scout2-id))
	=>
	(set-goal g-scout2-id PENDING)
	)

	(defrule
	(up-compare-goal g-scout3-id != PENDING)
	(or
		(up-compare-goal g-current-sheep-id g:== g-scout3-id)
		(up-compare-goal g-next-sheep-id g:== g-scout3-id))
	=>
	(set-goal g-scout3-id PENDING)
	)

	;Reset current or next sheep if they are dead or converted
	(defrule
	(up-compare-goal g-current-sheep-id != PENDING)
	(or
		(not
			(up-set-target-by-id g: g-current-sheep-id))
		(and
			(up-set-target-by-id g: g-current-sheep-id)
			(and
				(up-object-data object-data-player != my-player-number)
				(up-object-data object-data-hitpoints == 7))))
	=>
	(set-goal g-current-sheep-id PENDING)
	)

	(defrule
	(up-compare-goal g-next-sheep-id != PENDING)
	(or
		(not
			(up-set-target-by-id g: g-next-sheep-id))
		(and
			(up-set-target-by-id g: g-next-sheep-id)
			(or
				(and
					(up-object-data object-data-player != my-player-number)
					(up-object-data object-data-hitpoints == 7))
				(up-object-data object-data-hitpoints == 0))))
	=>
	(set-goal g-next-sheep-id PENDING)
	)

;-----------------------------------
;	GOAL: g-true-housing-headroom
;-----------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;True housing headroom takes headroom buildings in progress
	;into account.

	#load-if-not-defined HUN-CIV
		#load-if-not-defined CHINESE-CIV
			#load-if-not-defined INCAN-CIV
				#load-if-not-defined SLAVIC-CIV
					(defrule
					(true)
					=>
					(up-get-fact building-type-count town-center g-temp)
					(up-modify-goal g-temp c:* 5)
					(up-modify-goal g-true-housing-headroom g:= g-temp)
					(up-get-fact building-type-count-total house g-temp)
					(up-modify-goal g-temp c:* 5)
					(up-modify-goal g-true-housing-headroom g:+ g-temp)
					(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
					(up-modify-goal g-temp c:* 20)
					(up-modify-goal g-true-housing-headroom g:+ g-temp)
					(up-get-fact population 0 g-temp)
					(up-modify-goal g-true-housing-headroom g:- g-temp)
					(up-get-fact resource-amount amount-queued-count g-temp)
					(up-modify-goal g-true-housing-headroom g:- g-temp)
					)
				#end-if
			#end-if
		#end-if
	#end-if

	#load-if-defined CHINESE-CIV
		(defrule
		(true)
		=>
		(up-get-fact building-type-count town-center g-temp)
		(up-modify-goal g-temp c:* 10)
		(up-modify-goal g-true-housing-headroom g:= g-temp)
		(up-get-fact building-type-count-total house g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
		(up-modify-goal g-temp c:* 20)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact population 0 g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		(up-get-fact resource-amount amount-queued-count g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		)
	#end-if

	#load-if-defined INCAN-CIV
		(defrule
		(true)
		=>
		(up-get-fact building-type-count town-center g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:= g-temp)
		(up-get-fact building-type-count-total house g-temp)
		(up-modify-goal g-temp c:* 10)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
		(up-modify-goal g-temp c:* 20)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact population 0 g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		(up-get-fact resource-amount amount-queued-count g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		)
	#end-if

	#load-if-defined SLAVIC-CIV

		(defrule
		(true)
		=>
		(up-get-fact building-type-count town-center g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:= g-temp)
		(up-get-fact building-type-count-total house g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
		(up-modify-goal g-temp c:* 20)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count-total barracks g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count-total archery-range g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		)
		
		(defrule
		(true)
		=>
		(up-get-fact building-type-count-total stable g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count-total siege-workshop g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact population 0 g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		(up-get-fact resource-amount amount-queued-count g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		)
					
	#end-if

	#load-if-defined BULGARIANS-CIV

		(defrule
		(true)
		=>
		(up-get-fact building-type-count krepost g-temp)
		(up-modify-goal g-temp c:* 20)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		)
	
	#end-if

;---------------------------
;	GOAL: g-strategy-type
;---------------------------

	(defrule
	(up-compare-goal g-initial-strategy >= DARK-STRATS-START)
	(up-compare-goal g-initial-strategy <= DARK-STRATS-END)
	(up-compare-goal g-strategy-type != DRUSH)
	=>
	(set-goal g-strategy-type DRUSH)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= FL-STRATS-START)
	(up-compare-goal g-initial-strategy <= FL-STRATS-END)
	(up-compare-goal g-strategy-type != FLUSH)
	=>
	(set-goal g-strategy-type FLUSH)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= FC-STRATS-START)
	(up-compare-goal g-initial-strategy <= FC-STRATS-END)
	(up-compare-goal g-strategy-type != FAST-CASTLE)
	=>
	(set-goal g-strategy-type FAST-CASTLE)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= BOOMC-STRATS-START)	;Booming Castle Age Strats
	(up-compare-goal g-initial-strategy <= BOOMC-STRATS-END)
	(up-compare-goal g-strategy-type != FAST-CASTLE)
	=>
	(set-goal g-strategy-type FAST-CASTLE)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= FI-STRATS-START)
	(up-compare-goal g-initial-strategy <= FI-STRATS-END)
	(up-compare-goal g-strategy-type != FAST-IMPERIAL)
	=>
	(set-goal g-strategy-type FAST-IMPERIAL)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= BOOMI-STRATS-START)	;Booming Imperial Age Strats
	(up-compare-goal g-initial-strategy <= BOOMI-STRATS-END)
	(up-compare-goal g-strategy-type != FAST-IMPERIAL)
	=>
	(set-goal g-strategy-type FAST-IMPERIAL)
	)

;------------------------------
;	GOAL: g-attack-objective
;------------------------------

	(defrule
	(up-compare-goal g-attack-objective != ATTACK-TARGET-ENEMY)
	=>
	(set-goal g-attack-objective ATTACK-TARGET-ENEMY)
	)

;---------------------------
;	GOAL: g-closest-enemy
;---------------------------

	;If flank, find closest enemy that has > 20 villagers.
	;If pocket, set closest enemy to same player as nearby flank.
	;If pocket and team partner isn't a General AI, use same technique as flank players.

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(up-timer-status t-10-sec == timer-running)
	=>
	(up-jump-rule 8)
	)

		(defrule
		(players-building-count any-enemy > 0)
		=>
		(set-strategic-number sn-focus-player-number 1)
		(set-goal g-temp 99999)		;shortest distance to enemy player
		)

			(defrule
			(players-building-count any-enemy > 0)
			(player-in-game focus-player)
			(stance-toward focus-player enemy)
			=>
			(up-full-reset-search)
			(up-find-remote c: town-center c: 1)
			(up-find-remote c: building-class c: 1)
			(up-find-remote c: tower-class c: 1)
			(up-find-remote c: wall-class c: 1)
			(up-find-remote c: gate-class c: 1)
			(set-goal g-temp2 99999)
			(set-goal g-temp3 PENDING)
			(set-goal g-temp4 PENDING)
			(set-goal g-temp5 PENDING)
			)

			;Get player distance
			(defrule
			(players-building-count any-enemy > 0)
			(player-in-game focus-player)
			(stance-toward focus-player enemy)
			(up-set-target-object search-remote c: 0)
			=>
			(up-get-point position-object g-point-x)
			(up-set-target-point g-point-x)
			(up-get-point-distance g-position-self-x g-point-x g-temp2)
			)

			;If enemy has low villager pop, double the player distance to make AI less likely to pick it as the closest enemy
			(defrule
			(players-building-count any-enemy > 0)
			(player-in-game focus-player)
			(stance-toward focus-player enemy)
			(up-set-target-object search-remote c: 0)
			(or
				(players-civilian-population focus-player < 15)
				(and
					(players-civilian-population focus-player < 25)
					(players-building-type-count focus-player town-center == 0)))
			=>
			(up-modify-goal g-temp2 c:* 25)
			)

			;Prioritize setting closest enemy to the same as flank's closest enemy
			(defrule
			(players-building-count any-enemy > 0)
			(player-in-game focus-player)
			(stance-toward focus-player enemy)
			(up-set-target-object search-remote c: 0)
			(goal g-position POCKET)
			(up-compare-goal g-team-partner > 0)
			(up-compare-goal g-team-partner-identity == THE-GENERAL)
			=>
			(up-modify-goal g-temp3 s:= sn-focus-player-number)
			(up-modify-sn sn-focus-player-number g:= g-team-partner)
			(up-get-focus-fact allied-goal g-closest-enemy g-temp4)
			(up-get-focus-fact allied-goal g-position g-temp5)
			(up-modify-sn sn-focus-player-number g:= g-temp3)
			)

			(defrule
			(players-building-count any-enemy > 0)
			(player-in-game focus-player)
			(stance-toward focus-player enemy)
			(up-set-target-object search-remote c: 0)
			(goal g-position POCKET)
			(up-compare-goal g-team-partner > 0)
			(up-compare-goal g-team-partner-identity == THE-GENERAL)
			(up-compare-sn sn-focus-player-number g:== g-temp4)	;focus player is the same as team partner's closest enemy
			(goal g-temp5 FLANK)	;team partner is a flank
			=>
			(up-modify-goal g-temp2 c:/ 50)
			)

			;Set closest enemy to current player if current player is closest enemy so far
			(defrule
			(players-building-count any-enemy > 0)
			(player-in-game focus-player)
			(stance-toward focus-player enemy)
			(up-set-target-object search-remote c: 0)
			(up-compare-goal g-temp2 g:< g-temp)	;less than the lowest distance to an enemy found so far
			(up-compare-goal g-temp2 > 0)
			=>
			(up-modify-goal g-closest-enemy s:= sn-focus-player-number)
			(up-modify-goal g-temp g:= g-temp2)	;store new lowest distance to an ally
			)

			(defrule
			(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
			=>
			(up-modify-sn sn-focus-player-number c:+ 1)
			(up-jump-rule -7)
			)

	;Backup
	(defrule
	(true)
	=>
	(up-modify-sn sn-focus-player-number g:= g-closest-enemy)
	)

	(defrule
	(or
		(up-compare-goal g-closest-enemy <= 0)
		(not
			(player-in-game focus-player)))
	=>
	(up-find-player enemy find-closest g-closest-enemy)
	(up-modify-sn sn-focus-player-number g:= g-closest-enemy)
	)

	(defrule
	(or
		(up-compare-goal g-closest-enemy <= 0)
		(not
			(player-in-game focus-player)))
	=>
	(up-find-player enemy find-random g-closest-enemy)
	)

	; (defrule
	; (players-building-count any-enemy > 0)
	; (up-compare-goal g-closest-enemy <= 0)
	; (timer-triggered t-10-sec)
	; =>
	; (chat-to-all CHAT-CLOSEST-ENEMY-BUG)
	; )

;---------------------------------------------
;	GOAL: g-closest-enemy-building-distance
;---------------------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(players-building-count any-enemy > 0)
	(up-compare-goal g-closest-enemy > 0)
	=>
	(up-modify-sn sn-focus-player-number g:= g-closest-enemy)
	)

	(defrule
	(players-building-count any-enemy > 0)
	(players-building-count focus-player > 0)
	(up-compare-goal g-closest-enemy > 0)
	=>
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(up-find-remote c: building-class c: 40)
	(up-find-remote c: tower-class c: 40)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: building-class c: 40)
	(up-find-status-remote c: tower-class c: 40)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(up-get-search-state g-local-total)
	)

	(defrule
	(players-building-count any-enemy > 0)
	(players-building-count focus-player > 0)
	(up-compare-goal g-closest-enemy > 0)
	(up-compare-goal g-remote-total > 0)
	(up-set-target-object search-remote c: 0)
	=>
	(up-get-object-data object-data-distance g-closest-enemy-building-distance)
	)

;---------------------------------------------
;	GOAL: g-nearest-enemy-defenses-distance
;---------------------------------------------

	(defrule
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	=>
	(set-strategic-number sn-focus-player-number 1)
	(set-goal g-nearest-enemy-defenses-distance HUNDRED-FIFTY-PERCENT-MAP-SIZE)
	)

		(defrule
		(timer-triggered t-10-sec)
		(players-building-count any-enemy > 0)
        (up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
        (nand
            (player-in-game focus-player)
            (stance-toward focus-player enemy))
        =>
        (up-modify-sn sn-focus-player-number c:+ 1)
        (up-jump-rule -1)
        )
		
		(defrule
		(timer-triggered t-10-sec)
		(players-building-count any-enemy > 0)
		(players-building-count focus-player > 0)
		(player-in-game focus-player)
		(stance-toward focus-player enemy)
		=>
		(up-full-reset-search)
		(up-set-target-point g-position-self-x)
		(up-find-remote c: castle c: 40)
		(up-find-remote c: krepost c: 40)
		(up-find-remote c: tower-class c: 40)
		(up-clean-search search-remote -1 search-order-asc)
		(up-clean-search search-remote object-data-distance search-order-asc)
		)
		
		(defrule
		(timer-triggered t-10-sec)
		(players-building-count any-enemy > 0)
		(players-building-count focus-player > 0)
		(player-in-game focus-player)
		(stance-toward focus-player enemy)
		(up-set-target-object search-remote c: 0)
		(up-get-object-data object-data-distance g-temp2)
		(up-compare-goal g-temp2 g:< g-nearest-enemy-defenses-distance)
		=>
		(up-modify-goal g-nearest-enemy-defenses-distance g:min g-temp2)
		)
		
		(defrule
		(timer-triggered t-10-sec)
		(players-building-count any-enemy > 0)
		(strategic-number sn-focus-player-number < MAX-PLAYERS)
		=>
		(up-modify-sn sn-focus-player-number c:+ 1)
		(up-jump-rule -4)
		)

;------------------------------
;	GOALS: Enemy Unit Counts
;------------------------------

	(load "The General 1.2/Functions/Reset")

	(defrule
	(true)
	=>
	(set-goal g-enemy-swordsmen-count 0)
	(set-goal g-enemy-spearmen-count 0)
	(set-goal g-enemy-eagle-warriors-count 0)
	(set-goal g-enemy-foot-archers-count 0)
	(set-goal g-enemy-skirmishers-count 0)
	(set-goal g-enemy-cavalry-archers-count 0)
	(set-goal g-enemy-hand-cannoneers-count 0)
	(set-goal g-enemy-light-cavalry-count 0)
	(set-goal g-enemy-heavy-cavalry-count 0)
	(set-goal g-enemy-camels-count 0)
	(set-goal g-enemy-elephants-count 0)
	(set-goal g-enemy-field-siege-count 0)
	(set-goal g-enemy-monks-count 0)
	(disable-self)
	)
	(defrule
	(true)
	=>
	(set-goal g-enemy-jaguar-warriors-count 0)
	(set-goal g-enemy-huskarls-count 0)
	(set-goal g-enemy-chakram-throwers-count 0)
	(set-goal g-enemy-samurai-count 0)
	(set-goal g-enemy-teutonic-knights-count 0)
	(set-goal g-enemy-genoese-crossbowmen-count 0)
	(set-goal g-enemy-cataphracts-count 0)
	(set-goal g-enemy-mamelukes-count 0)
	(disable-self)
	)

	;Fully count target player's units
	;Only count other players' units 1/3 as much
	;Also, only count if we have >= 60 villagers or are defending

	;----------------------------------------
	;	Check if player armies are visible
	;----------------------------------------

		;Reset
		(defrule
		(true)
		=>
		(set-goal g-target-army-visible NO)
		(set-goal g-other-enemy-armies-visible NO)
		(set-goal g-total-enemy-soldier-counts 0)
		(set-goal g-temp 0)
		(set-goal g-temp2 0)
		(set-goal g-loop-counter 0)
		)
		
		;Target Player
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		=>
		(up-get-target-fact military-population 0 g-temp2)
		(up-modify-goal g-temp2 c:%* 67)
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-filter-include cmdid-military -1 -1 monastery-class)
		(up-find-remote c: any-objects c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		(up-modify-goal g-loop-counter c:+ 1)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-remote-total 40)
		(up-compare-goal g-loop-counter < 10)
		=>
		(up-reset-search 0 0 0 1)
		(up-find-remote c: any-objects c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		(up-modify-goal g-loop-counter c:+ 1)
		(up-jump-rule -1)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-temp g:>= g-temp2)	;at least 67% of the target player's units are visible
		=>
		(set-goal g-target-army-visible YES)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count militiaman-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count throwing-axeman-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count berserk-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count condottiero g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count kamayuk g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-kamayuk g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count shotel-warrior g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-shotel-warrior g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count gbeto g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-gbeto g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count karambit-warrior g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-karambit-warrior g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		; (up-get-player-fact target-player unit-type-count foot-konnik g-temp2)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		; (up-get-player-fact target-player unit-type-count elite-foot-konnik g-temp2)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count serjeant-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count donjon-serjeant-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		; (up-get-player-fact target-player unit-type-count flemish-militia-male g-temp2)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		; (up-get-player-fact target-player unit-type-count flemish-militia-female g-temp2)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count flemish-militia-trained g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count spearman-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count eagle-warrior-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count ghulam-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count archer-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count longbowman-line g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count chu-ko-nu-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count plumed-archer-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count janissary-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count rattan-archer g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-rattan-archer g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count skirmisher-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count genitour g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-genitour g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count cavalry-archer-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count war-wagon-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count mangudai-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count conquistador-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count camel-archer g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-camel-archer g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count arambai g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-arambai g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count kipchak-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elephant-archer-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count ratha-melee-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count ratha-ranged-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count hand-cannoneer g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count slinger g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count scout-cavalry-line g-temp)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count magyar-huszar g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-magyar-huszar g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count steppe-lancer-line g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count shrivamsha-rider-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count knight-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count tarkan-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count stable-tarkan g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count stable-elite-tarkan g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count boyar g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count elite-boyar g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count konnik-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count keshik-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count leitis-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count coustillier-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count camel-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count war-elephant-line g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count battle-elephant g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-battle-elephant g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count mangonel-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count scorpion-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count organ-gun g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-organ-gun g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count ballista-elephant g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-ballista-elephant g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count hussite-wagon-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count monk g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count missionary g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count jaguar-warrior-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count urumi-swordsman-line g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count huskarl-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count barracks-huskarl g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count barracks-elite-huskarl g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count chakram-thrower-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count samurai-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count teutonic-knight-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count genoese-crossbowman g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-genoese-crossbowman g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count cataphract-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count mameluke-line g-temp2)
		(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
		
			;Other Players
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			=>
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp3 0)
			(set-goal g-temp4 0)
			(set-goal g-loop-counter 0)
			(up-get-fact-sum any-enemy military-population 0 g-temp4)
			(up-get-target-fact military-population 0 g-temp2)
			(up-modify-goal g-temp4 g:- g-temp2)	;remove target player's military pop
			(up-modify-goal g-temp4 c:%* 67)
			)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(strategic-number sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-filter-include cmdid-military -1 -1 monastery-class)
				(up-find-remote c: any-objects c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp3 g:+ g-remote-total)
				(up-modify-goal g-loop-counter c:+ 1)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(strategic-number sn-focus-player-number s:!= sn-target-player-number)
				(goal g-remote-total 40)
				(up-compare-goal g-loop-counter < 10)
				=>
				(up-reset-search 0 0 0 1)
				(up-find-remote c: any-objects c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp3 g:+ g-remote-total)
				(up-modify-goal g-loop-counter c:+ 1)
				(up-jump-rule -1)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(set-goal g-loop-counter 0)
				(up-jump-rule -3)
				)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-compare-goal g-temp3 g:>= g-temp4)	;at least 67% of other enemy player's units are visible
			=>
			(set-goal g-other-enemy-armies-visible YES)
			(up-modify-goal g-temp3 c:/ 3)
			(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp3)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			=>
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp 0)
			)
			
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
				(or
					(up-compare-sn sn-focus-player-number s:== sn-target-player-number)
					(nor
						(player-in-game focus-player)
						(stance-toward focus-player enemy)))
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -1)
				)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-get-player-fact focus-player unit-type-count militiaman-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count throwing-axeman-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count berserk-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count condottiero g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count kamayuk g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-kamayuk g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count shotel-warrior g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-shotel-warrior g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count gbeto g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-gbeto g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count karambit-warrior g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-karambit-warrior g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				; (up-get-player-fact focus-player unit-type-count foot-konnik g-temp2)
				; (up-modify-goal g-temp g:+ g-temp2)
				; (up-get-player-fact focus-player unit-type-count elite-foot-konnik g-temp2)
				; (up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count serjeant-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-get-player-fact focus-player unit-type-count donjon-serjeant-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				; (up-get-player-fact focus-player unit-type-count flemish-militia-male g-temp2)
				; (up-modify-goal g-temp g:+ g-temp2)
				; (up-get-player-fact focus-player unit-type-count flemish-militia-female g-temp2)
				; (up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count flemish-militia-trained g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count spearman-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count eagle-warrior-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count ghulam-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count archer-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count longbowman-line g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count chu-ko-nu-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count plumed-archer-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count janissary-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count rattan-archer g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-rattan-archer g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count skirmisher-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-get-player-fact focus-player unit-type-count genitour g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-genitour g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count cavalry-archer-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count war-wagon-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count mangudai-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count conquistador-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count camel-archer g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-camel-archer g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count arambai g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-arambai g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count kipchak-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elephant-archer-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count ratha-melee-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-get-player-fact focus-player unit-type-count ratha-ranged-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count hand-cannoneer g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count slinger g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count scout-cavalry-line g-temp)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count magyar-huszar g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-magyar-huszar g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count steppe-lancer-line g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count shrivamsha-rider-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count knight-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count tarkan-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count stable-tarkan g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count stable-elite-tarkan g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count boyar g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-get-player-fact focus-player unit-type-count elite-boyar g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count konnik-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count keshik-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count leitis-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count coustillier-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count camel-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count war-elephant-line g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count battle-elephant g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-battle-elephant g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count mangonel-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count scorpion-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count organ-gun g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-organ-gun g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-get-player-fact focus-player unit-type-count ballista-elephant g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-ballista-elephant g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count hussite-wagon-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count monk g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count missionary g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count jaguar-warrior-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count urumi-swordsman-line g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count huskarl-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count barracks-huskarl g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count barracks-elite-huskarl g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count chakram-thrower-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count samurai-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count teutonic-knight-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				=>
				(up-get-player-fact focus-player unit-type-count genoese-crossbowman g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count elite-genoese-crossbowman g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count cataphract-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				(up-get-player-fact focus-player unit-type-count mameluke-line g-temp2)
				(up-modify-goal g-temp g:+ g-temp2)
				)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -15)
				)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			=>
			(up-modify-goal g-temp c:/ 3)
			(up-modify-goal g-total-enemy-soldier-counts g:+ g-temp)
			)

		#end-if

	;---------------
	;	Swordsmen
	;---------------

		(load "The General 1.2/Functions/Reset Mini")

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		(not
			(players-civ target-player malian))
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: militiaman-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: condottiero c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-find-remote c: woad-raider-line c: 40)
		(up-find-remote c: throwing-axeman-line c: 40)
		(up-find-remote c: berserk-line c: 40)
		(up-find-remote c: kamayuk c: 40)
		(up-find-remote c: elite-kamayuk c: 40)
		(up-find-remote c: shotel-warrior c: 40)
		(up-find-remote c: elite-shotel-warrior c: 40)
		(up-find-remote c: gbeto c: 40)
		(up-find-remote c: elite-gbeto c: 40)
		(up-find-remote c: karambit-warrior c: 40)
		(up-find-remote c: elite-karambit-warrior c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-find-remote c: foot-konnik-line c: 40)
		(up-find-remote c: serjeant-line c: 40)
		(up-find-remote c: donjon-serjeant-line c: 40)
		(up-find-remote c: flemish-militia-trained c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-find-remote c: flemish-militia-male c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-find-remote c: flemish-militia-female c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)

		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		(not
			(players-civ target-player malian))
		=>
		(up-get-player-fact target-player unit-type-count militiaman-line g-temp)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		(players-civ target-player malian)
		=>
		(set-goal g-temp 0)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count woad-raider-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count throwing-axeman-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count berserk-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count condottiero g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count kamayuk g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count elite-kamayuk g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count shotel-warrior g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-shotel-warrior g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count gbeto g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-gbeto g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count karambit-warrior g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-karambit-warrior g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		; (up-get-player-fact target-player unit-type-count foot-konnik g-temp2)
		; (up-modify-goal g-temp g:+ g-temp2)
		; (up-get-player-fact target-player unit-type-count elite-foot-konnik g-temp2)
		; (up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count serjeant-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count donjon-serjeant-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		; (up-get-player-fact target-player unit-type-count flemish-militia-male g-temp2)
		; (up-modify-goal g-temp g:+ g-temp2)
		; (up-get-player-fact target-player unit-type-count flemish-militia-female g-temp2)
		; (up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count flemish-militia-trained g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)
	
		#load-if-defined UP-MULTIPLE-ENEMIES

			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				(not
					(players-civ target-player malian))
				=>
				(up-full-reset-search)
				(up-find-remote c: militiaman-line c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: condottiero c: 40)
				(up-find-remote c: woad-raider-line c: 40)
				(up-find-remote c: throwing-axeman-line c: 40)
				(up-find-remote c: berserk-line c: 40)
				(up-find-remote c: kamayuk c: 40)
				(up-find-remote c: elite-kamayuk c: 40)
				(up-find-remote c: shotel-warrior c: 40)
				(up-find-remote c: elite-shotel-warrior c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-find-remote c: gbeto c: 40)
				(up-find-remote c: elite-gbeto c: 40)
				(up-find-remote c: karambit-warrior c: 40)
				(up-find-remote c: elite-karambit-warrior c: 40)
				(up-find-remote c: foot-konnik-line c: 40)
				(up-find-remote c: serjeant-line c: 40)
				(up-find-remote c: donjon-serjeant-line c: 40)
				(up-find-remote c: flemish-militia-trained c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-find-remote c: flemish-militia-male c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-find-remote c: flemish-militia-female c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -6)
				)

			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count militiaman-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count woad-raider-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count throwing-axeman-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count berserk-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count condottiero g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count kamayuk g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count elite-kamayuk g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count shotel-warrior g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count elite-shotel-warrior g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count gbeto g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count elite-gbeto g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count karambit-warrior g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count elite-karambit-warrior g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			; (up-get-fact-sum any-enemy unit-type-count foot-konnik-line g-temp3)
			; (up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count serjeant-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count donjon-serjeant-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			; (up-get-player-fact target-player unit-type-count flemish-militia-male g-temp3)
			; (up-modify-goal g-temp2 g:+ g-temp3)
			; (up-get-player-fact target-player unit-type-count flemish-militia-female g-temp3)
			; (up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-player-fact target-player unit-type-count flemish-militia-trained g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			;Remove enemy Malian swordsmen (included in huskarls count instead)
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			(players-civ any-enemy malian)
			=>
			(set-strategic-number sn-focus-player-number 1)
			)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-players-in-game enemy > 1)
				(or
					(goal g-game-focus DEFENSIVE)
					(civilian-population >= 60))
				(players-civ any-enemy malian)
				(strategic-number sn-focus-player-number <= MAX-PLAYERS)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(players-civ focus-player malian)
				=>
				(up-get-player-fact focus-player unit-type-count militiaman-line g-temp3)
				(up-modify-goal g-temp2 g:- g-temp3)
				)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-players-in-game enemy > 1)
				(or
					(goal g-game-focus DEFENSIVE)
					(civilian-population >= 60))
				(players-civ any-enemy malian)
				(strategic-number sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy swordsmen count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-total-enemy-soldier-counts > 0)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-swordsmen-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-swordsmen-count g:= g-temp)
		; (up-chat-data-to-all "More swordsmen: %d" g: g-enemy-swordsmen-count)
		)
		;If enemy swordsmen count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-swordsmen-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-swordsmen-count c:- 1)
		; (up-chat-data-to-all "Less swordsmen: %d" g: g-enemy-swordsmen-count)
		)

	;--------------
	;	Spearmen
	;--------------

		(load "The General 1.2/Functions/Reset Mini")

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: spearman-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count spearman-line g-temp)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: spearman-line c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)

			;Other Players Normal counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count spearman-line g-temp2)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-spearmen-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-spearmen-count g:= g-temp)
		; (up-chat-data-to-all "More spearmen: %d" g: g-enemy-spearmen-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-spearmen-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-spearmen-count c:- 1)
		; (up-chat-data-to-all "Less spearmen: %d" g: g-enemy-spearmen-count)
		)

	;--------------------
	;	Eagle Warriors	
	;--------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(or
			(goal g-target-army-visible YES)
			(current-age < castle-age))
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(or
			(goal g-target-army-visible YES)
			(current-age < castle-age))
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: eagle-warrior-line c: 40)
		(up-find-remote c: heavy-eagle-warrior c: 40)
		(up-find-remote c: ghulam-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		(current-age >= castle-age)
		=>
		(up-get-player-fact target-player unit-type-count eagle-warrior-line g-temp)
		(up-get-player-fact target-player unit-type-count ghulam-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-GAME-WK
		#load-if-not-defined DE-AVAILABLE
		
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-target-army-visible NO)
			=>
			(up-get-player-fact target-player unit-type-count heavy-eagle-warrior g-temp2)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if
		#end-if

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: eagle-warrior-line c: 40)
				(up-find-remote c: heavy-eagle-warrior c: 40)
				(up-find-remote c: ghulam-line c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)

			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count eagle-warrior-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count ghulam-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE
			
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-players-in-game enemy > 1)
				(or
					(goal g-game-focus DEFENSIVE)
					(civilian-population >= 60))
				=>
				(up-get-fact-sum any-enemy unit-type-count heavy-eagle-warrior g-temp3)
				(up-modify-goal g-temp2 g:+ g-temp3)
				)

			#end-if
			#end-if

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-eagle-warriors-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-eagle-warriors-count g:= g-temp)
		; (up-chat-data-to-all "More eagle-warriors: %d" g: g-enemy-eagle-warriors-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-eagle-warriors-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-eagle-warriors-count c:- 1)
		; (up-chat-data-to-all "Less eagle-warriors: %d" g: g-enemy-eagle-warriors-count)
		)

	;------------------
	;	Foot Archers
	;------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: archer-line c: 40)
		(up-find-remote c: longbowman c: 40)
		(up-find-remote c: chu-ko-nu-line c: 40)
		(up-find-remote c: plumed-archer-line c: 40)
		(up-find-remote c: janissary-line c: 40)
		(up-find-remote c: rattan-archer c: 40)
		(up-find-remote c: elite-rattan-archer c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count archer-line g-temp)
		(up-get-player-fact target-player unit-type-count longbowman-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count chu-ko-nu-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count plumed-archer-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count janissary-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count rattan-archer g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-rattan-archer g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: archer-line c: 40)
				(up-find-remote c: longbowman c: 40)
				(up-find-remote c: chu-ko-nu-line c: 40)
				(up-find-remote c: plumed-archer-line c: 40)
				(up-find-remote c: janissary-line c: 40)
				(up-find-remote c: rattan-archer c: 40)
				(up-find-remote c: elite-rattan-archer c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other players
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count archer-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count longbowman-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count chu-ko-nu-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count plumed-archer-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count janissary-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count rattan-archer g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count elite-rattan-archer g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-foot-archers-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-foot-archers-count g:= g-temp)
		; (up-chat-data-to-all "More foot-archers: %d" g: g-enemy-foot-archers-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-foot-archers-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-foot-archers-count c:- 1)
		; (up-chat-data-to-all "Less foot-archers: %d" g: g-enemy-foot-archers-count)
		)

	;-----------------
	;	Skirmishers
	;-----------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: skirmisher-line c: 40)
		(up-find-remote c: imperial-skirmisher c: 40)
		(up-find-remote c: genitour c: 40)
		(up-find-remote c: elite-genitour c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count skirmisher-line g-temp)
		(up-get-player-fact target-player unit-type-count genitour g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-genitour g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-GAME-WK
		#load-if-not-defined DE-AVAILABLE
		
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-target-army-visible NO)
			=>
			(up-get-player-fact target-player unit-type-count imperial-skirmisher g-temp2)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if
		#end-if

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: skirmisher-line c: 40)
				(up-find-remote c: imperial-skirmisher c: 40)
				(up-find-remote c: genitour c: 40)
				(up-find-remote c: elite-genitour c: 40)
				(up-get-search-state g-local-total)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)

			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count skirmisher-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count genitour g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count elite-genitour g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE
			
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-players-in-game enemy > 1)
				(or
					(goal g-game-focus DEFENSIVE)
					(civilian-population >= 60))
				=>
				(up-get-fact-sum any-enemy unit-type-count imperial-skirmisher g-temp3)
				(up-modify-goal g-temp2 g:+ g-temp3)
				)

			#end-if
			#end-if

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-skirmishers-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-skirmishers-count g:= g-temp)
		; (up-chat-data-to-all "More skirmishers: %d" g: g-enemy-skirmishers-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-skirmishers-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-skirmishers-count c:- 1)
		; (up-chat-data-to-all "Less skirmishers: %d" g: g-enemy-skirmishers-count)
		)
		
	;---------------------
	;	Cavalry Archers
	;---------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: cavalry-archer-line c: 40)
		(up-find-remote c: elephant-archer-line c: 40)
		(up-find-remote c: conquistador-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: war-wagon-line c: 40)
		(up-find-remote c: mangudai-line c: 40)
		(up-find-remote c: camel-archer c: 40)
		(up-find-remote c: elite-camel-archer c: 40)
		(up-find-remote c: arambai c: 40)
		(up-find-remote c: elite-arambai c: 40)
		(up-find-remote c: kipchak-line c: 40)
		(up-find-remote c: ratha-melee-line c: 40)
		(up-find-remote c: ratha-ranged-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)

		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count cavalry-archer-line g-temp)
		(up-get-player-fact target-player unit-type-count war-wagon-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count mangudai-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count conquistador-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count camel-archer g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-camel-archer g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count arambai g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-arambai g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count kipchak-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elephant-archer-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count ratha-melee-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count ratha-ranged-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: cavalry-archer-line c: 40)
				(up-find-remote c: elephant-archer-line c: 40)
				(up-find-remote c: conquistador-line c: 40)
				(up-find-remote c: arambai c: 40)
				(up-find-remote c: elite-arambai c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: war-wagon-line c: 40)
				(up-find-remote c: mangudai-line c: 40)
				(up-find-remote c: camel-archer c: 40)
				(up-find-remote c: elite-camel-archer c: 40)
				(up-find-remote c: kipchak-line c: 40)
				(up-find-remote c: ratha-melee-line c: 40)
				(up-find-remote c: ratha-ranged-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -3)
				)

			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count cavalry-archer-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count war-wagon-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count mangudai-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count conquistador-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count camel-archer g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count elite-camel-archer g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count arambai g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count elite-arambai g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count kipchak-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count elephant-archer-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count ratha-ranged-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count ratha-melee-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-cavalry-archers-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-cavalry-archers-count g:= g-temp)
		; (up-chat-data-to-all "More cavalry-archers: %d" g: g-enemy-cavalry-archers-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-cavalry-archers-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-cavalry-archers-count c:- 1)
		; (up-chat-data-to-all "Less cavalry-archers: %d" g: g-enemy-cavalry-archers-count)
		)

	;---------------------
	;	Hand Cannoneers
	;---------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: hand-cannoneer c: 40)
		(up-find-remote c: slinger c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
		
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count hand-cannoneer g-temp)
		(up-get-player-fact target-player unit-type-count slinger g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: hand-cannoneer c: 40)
				(up-find-remote c: slinger c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
		
			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count hand-cannoneer g-temp2)
			(up-get-fact-sum any-enemy unit-type-count slinger g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-hand-cannoneers-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-hand-cannoneers-count g:= g-temp)
		; (up-chat-data-to-all "More hand-cannoneers: %d" g: g-enemy-hand-cannoneers-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-hand-cannoneers-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-hand-cannoneers-count c:- 1)
		; (up-chat-data-to-all "Less hand-cannoneers: %d" g: g-enemy-hand-cannoneers-count)
		)

	;-------------------
	;	Light Cavalry
	;-------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(or
			(goal g-target-army-visible YES)
			(current-age < castle-age))
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(or
			(goal g-target-army-visible YES)
			(current-age < castle-age))
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: scout-cavalry-line c: 40)
		(up-find-remote c: magyar-huszar c: 40)
		(up-find-remote c: elite-magyar-huszar c: 40)
		(up-find-remote c: steppe-lancer-line c: 40)
		(up-find-remote c: shrivamsha-rider-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		(current-age >= castle-age)
		=>
		(up-get-player-fact target-player unit-type-count scout-cavalry-line g-temp)
		(up-get-player-fact target-player unit-type-count magyar-huszar g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-magyar-huszar g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count steppe-lancer-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count shrivamsha-rider-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: scout-cavalry-line c: 40)
				(up-find-remote c: magyar-huszar c: 40)
				(up-find-remote c: elite-magyar-huszar c: 40)
				(up-find-remote c: steppe-lancer-line c: 40)
				(up-find-remote c: shrivamsha-rider-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count scout-cavalry-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count magyar-huszar g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count elite-magyar-huszar g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count steppe-lancer-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count shrivamsha-rider-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-light-cavalry-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-light-cavalry-count g:= g-temp)
		; (up-chat-data-to-all "More light-cavalry: %d" g: g-enemy-light-cavalry-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-light-cavalry-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-light-cavalry-count c:- 1)
		; (up-chat-data-to-all "Less light-cavalry: %d" g: g-enemy-light-cavalry-count)
		)
		
	;-------------------
	;	Heavy Cavalry
	;-------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: knight-line c: 40)
		(up-find-remote c: stable-tarkan c: 40)
		(up-find-remote c: stable-elite-tarkan c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: tarkan-line c: 40)
		(up-find-remote c: boyar c: 40)
		(up-find-remote c: elite-boyar c: 40)
		(up-find-remote c: konnik-line c: 40)
		(up-find-remote c: keshik-line c: 40)
		(up-find-remote c: leitis-line c: 40)
		(up-find-remote c: coustillier-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count knight-line g-temp)
		(up-get-player-fact target-player unit-type-count tarkan-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count stable-tarkan g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count stable-elite-tarkan g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count boyar g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-boyar g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count konnik-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count keshik-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count leitis-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count coustillier-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: knight-line c: 40)
				(up-find-remote c: stable-tarkan c: 40)
				(up-find-remote c: stable-elite-tarkan c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)
				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: tarkan-line c: 40)
				(up-find-remote c: boyar c: 40)
				(up-find-remote c: elite-boyar c: 40)
				(up-find-remote c: konnik-line c: 40)
				(up-find-remote c: keshik-line c: 40)
				(up-find-remote c: leitis-line c: 40)
				(up-find-remote c: coustillier-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -3)
				)

			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count knight-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count tarkan-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count stable-tarkan g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count stable-elite-tarkan g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count boyar g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count elite-boyar g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count konnik-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count keshik-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count leitis-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count coustillier-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-heavy-cavalry-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-heavy-cavalry-count g:= g-temp)
		; (up-chat-data-to-all "More heavy-cavalry: %d" g: g-enemy-heavy-cavalry-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-heavy-cavalry-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-heavy-cavalry-count c:- 1)
		; (up-chat-data-to-all "Less heavy-cavalry: %d" g: g-enemy-heavy-cavalry-count)
		)

	;------------
	;	Camels
	;------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(or
			(goal g-target-army-visible YES)
			(current-age < castle-age))
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(or
			(goal g-target-army-visible YES)
			(current-age < castle-age))
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: camel-line c: 40)
		(up-find-remote c: imperial-camel c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target player
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		(current-age >= castle-age)
		=>
		(up-get-player-fact target-player unit-type-count camel-line g-temp)
		)

		#load-if-defined UP-GAME-WK
		#load-if-not-defined DE-AVAILABLE
	
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-target-army-visible NO)
			=>
			(up-get-player-fact target-player unit-type-count imperial-camel g-temp2)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if
		#end-if

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: camel-line c: 40)
				(up-find-remote c: imperial-camel c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)

			;Other Players Normal Counting	
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count camel-line g-temp2)
			)

			#load-if-defined INDIAN-CIV
			#load-if-not-defined DE-AVAILABLE
		
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-players-in-game enemy > 1)
				(or
					(goal g-game-focus DEFENSIVE)
					(civilian-population >= 60))
				=>
				(up-get-fact-sum any-enemy unit-type-count imperial-camel g-temp3)
				(up-modify-goal g-temp2 g:+ g-temp3)
				)

			#end-if
			#end-if

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-camels-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-camels-count g:= g-temp)
		; (up-chat-data-to-all "More camels: %d" g: g-enemy-camels-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-camels-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-camels-count c:- 1)
		; (up-chat-data-to-all "Less camels: %d" g: g-enemy-camels-count)
		)

	;---------------
	;	Elephants
	;---------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: war-elephant-line c: 40)
		(up-find-remote c: battle-elephant c: 40)
		(up-find-remote c: elite-battle-elephant c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)

		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count war-elephant-line g-temp)
		(up-get-player-fact target-player unit-type-count battle-elephant g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-battle-elephant g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: war-elephant-line c: 40)
				(up-find-remote c: battle-elephant c: 40)
				(up-find-remote c: elite-battle-elephant c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)

			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count war-elephant-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count battle-elephant g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count elite-battle-elephant g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-elephants-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-elephants-count g:= g-temp)
		; (up-chat-data-to-all "More elephants: %d" g: g-enemy-elephants-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-elephants-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-elephants-count c:- 1)
		; (up-chat-data-to-all "Less elephants: %d" g: g-enemy-elephants-count)
		)

	;-----------------
	;	Field Siege
	;-----------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: mangonel-line c: 40)
		(up-find-remote c: scorpion-line c: 40)
		(up-find-remote c: organ-gun c: 40)
		(up-find-remote c: elite-organ-gun c: 40)
		(up-find-remote c: ballista-elephant c: 40)
		(up-find-remote c: elite-ballista-elephant c: 40)
		(up-find-remote c: hussite-wagon-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count mangonel-line g-temp)
		(up-get-player-fact target-player unit-type-count scorpion-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count organ-gun g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-organ-gun g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count ballista-elephant g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count elite-ballista-elephant g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count hussite-wagon-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-GAME-WK
		#load-if-not-defined DE-AVAILABLE

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-target-army-visible NO)
			=>
			(up-get-player-fact target-player unit-type-count wk-onager g-temp2)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if
		#end-if

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: mangonel-line c: 40)
				(up-find-remote c: scorpion-line c: 40)
				(up-find-remote c: organ-gun c: 40)
				(up-find-remote c: elite-organ-gun c: 40)
				(up-find-remote c: ballista-elephant c: 40)
				(up-find-remote c: elite-ballista-elephant c: 40)
				(up-find-remote c: hussite-wagon-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)

			;Other Players Normal counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count mangonel-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count scorpion-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count organ-gun g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count elite-organ-gun g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count ballista-elephant g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count elite-ballista-elephant g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count hussite-wagon-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-players-in-game enemy > 1)
				(or
					(goal g-game-focus DEFENSIVE)
					(civilian-population >= 60))
				=>
				(up-get-fact-sum any-enemy unit-type-count wk-onager g-temp3)
				(up-modify-goal g-temp2 g:+ g-temp3)
				)

			#end-if
			#end-if

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-field-siege-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-field-siege-count g:= g-temp)
		; (up-chat-data-to-all "More field-siege: %d" g: g-enemy-field-siege-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-field-siege-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-field-siege-count c:- 1)
		; (up-chat-data-to-all "Less field-siege: %d" g: g-enemy-field-siege-count)
		)

	;-----------
	;	Monks
	;-----------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: monk c: 40)
		(up-find-remote c: missionary c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count monk g-temp)
		(up-get-player-fact target-player unit-type-count missionary g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: monk c: 40)
				(up-find-remote c: missionary c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count monk g-temp2)
			(up-get-fact-sum any-enemy unit-type-count missionary g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-monks-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-monks-count g:= g-temp)
		; (up-chat-data-to-all "More monks: %d" g: g-enemy-monks-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-monks-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-monks-count c:- 1)
		; (up-chat-data-to-all "Less monks: %d" g: g-enemy-monks-count)
		)

	;---------------------
	;	Jaguar Warriors
	;---------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: jaguar-warrior-line c: 40)
		(up-find-remote c: urumi-swordsman-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target player
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count jaguar-warrior-line g-temp)
		(up-get-player-fact target-player unit-type-count urumi-swordsman-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: jaguar-warrior-line c: 40)
				(up-find-remote c: urumi-swordsman-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other players
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count jaguar-warrior-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count urumi-swordsman-line g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)
			
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-jaguar-warriors-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-jaguar-warriors-count g:= g-temp)
		; (up-chat-data-to-all "More jaguar-warriors: %d" g: g-enemy-jaguar-warriors-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-jaguar-warriors-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-jaguar-warriors-count c:- 1)
		; (up-chat-data-to-all "Less jaguar-warriors: %d" g: g-enemy-jaguar-warriors-count)
		)

	;--------------
	;	Huskarls
	;--------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: huskarl-line c: 40)
		(up-find-remote c: barracks-huskarl c: 40)
		(up-find-remote c: barracks-elite-huskarl c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count huskarl-line g-temp)
		(up-get-player-fact target-player unit-type-count barracks-huskarl g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		(up-get-player-fact target-player unit-type-count barracks-elite-huskarl g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		(players-civ target-player malian)
		=>
		(up-get-player-fact target-player unit-type-count militiaman-line g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: huskarl-line c: 40)
				(up-find-remote c: barracks-huskarl c: 40)
				(up-find-remote c: barracks-elite-huskarl c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)

			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count huskarl-line g-temp2)
			(up-get-fact-sum any-enemy unit-type-count barracks-huskarl g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			(up-get-fact-sum any-enemy unit-type-count barracks-elite-huskarl g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			;Add enemy Malian swordsmen
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			(players-civ any-enemy malian)
			=>
			(set-strategic-number sn-focus-player-number 1)
			)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-players-in-game enemy > 1)
				(or
					(goal g-game-focus DEFENSIVE)
					(civilian-population >= 60))
				(players-civ any-enemy malian)
				(strategic-number sn-focus-player-number <= MAX-PLAYERS)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(players-civ focus-player malian)
				=>
				(up-get-player-fact focus-player unit-type-count militiaman-line g-temp3)
				(up-modify-goal g-temp2 g:+ g-temp3)
				)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(goal g-other-enemy-armies-visible NO)
				(up-players-in-game enemy > 1)
				(or
					(goal g-game-focus DEFENSIVE)
					(civilian-population >= 60))
				(players-civ any-enemy malian)
				(strategic-number sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-huskarls-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-huskarls-count g:= g-temp)
		; (up-chat-data-to-all "More huskarls: %d" g: g-enemy-huskarls-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-huskarls-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-huskarls-count c:- 1)
		; (up-chat-data-to-all "Less huskarls: %d" g: g-enemy-huskarls-count)
		)

	;----------------------
	;	Chakram Throwers
	;----------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: chakram-thrower-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count chakram-thrower-line g-temp)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: chakram-thrower-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count chakram-thrower-line g-temp2)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-chakram-throwers-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-chakram-throwers-count g:= g-temp)
		; (up-chat-data-to-all "More chakram-throwers: %d" g: g-enemy-chakram-throwers-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-chakram-throwers-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-chakram-throwers-count c:- 1)
		; (up-chat-data-to-all "Less chakram-throwers: %d" g: g-enemy-chakram-throwers-count)
		)

	;-------------
	;	Samurai
	;-------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: samurai-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count samurai-line g-temp)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: samurai-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count samurai-line g-temp2)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-samurai-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-samurai-count g:= g-temp)
		; (up-chat-data-to-all "More samurai: %d" g: g-enemy-samurai-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-samurai-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-samurai-count c:- 1)
		; (up-chat-data-to-all "Less samurai: %d" g: g-enemy-samurai-count)
		)

	;----------------------
	;	Teutonic Knights
	;----------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: teutonic-knight-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count teutonic-knight-line g-temp)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: teutonic-knight-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count teutonic-knight-line g-temp2)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-teutonic-knights-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-teutonic-knights-count g:= g-temp)
		; (up-chat-data-to-all "More teutonic-knights: %d" g: g-enemy-teutonic-knights-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-teutonic-knights-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-teutonic-knights-count c:- 1)
		; (up-chat-data-to-all "Less teutonic-knights: %d" g: g-enemy-teutonic-knights-count)
		)

	;-------------------------
	;	Genoese Crossbowmen
	;-------------------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: genoese-crossbowman c: 40)
		(up-find-remote c: elite-genoese-crossbowman c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count genoese-crossbowman g-temp)
		(up-get-player-fact target-player unit-type-count elite-genoese-crossbowman g-temp2)
		(up-modify-goal g-temp g:+ g-temp2)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: genoese-crossbowman c: 40)
				(up-find-remote c: elite-genoese-crossbowman c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count genoese-crossbowman g-temp2)
			(up-get-fact-sum any-enemy unit-type-count elite-genoese-crossbowman g-temp3)
			(up-modify-goal g-temp2 g:+ g-temp3)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-genoese-crossbowmen-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-genoese-crossbowmen-count g:= g-temp)
		; (up-chat-data-to-all "More genoese-crossbowmen: %d" g: g-enemy-genoese-crossbowmen-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-genoese-crossbowmen-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-genoese-crossbowmen-count c:- 1)
		; (up-chat-data-to-all "Less genoese-crossbowmen: %d" g: g-enemy-genoese-crossbowmen-count)
		)

	;-----------------
	;	Cataphracts
	;-----------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: cataphract-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count cataphract-line g-temp)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: cataphract-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count cataphract-line g-temp2)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-cataphracts-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-cataphracts-count g:= g-temp)
		; (up-chat-data-to-all "More cataphracts: %d" g: g-enemy-cataphracts-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-cataphracts-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-cataphracts-count c:- 1)
		; (up-chat-data-to-all "Less cataphracts: %d" g: g-enemy-cataphracts-count)
		)

	;---------------
	;	Mamelukes
	;---------------

		(load "The General 1.2/Functions/Reset Mini")

		;Target DUC Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(set-goal g-temp 0)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible YES)
		=>
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-full-reset-search)
		(up-find-remote c: mameluke-line c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-temp g:+ g-remote-total)
		)
	
		;Target Normal Counting
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(goal g-target-army-visible NO)
		=>
		(up-get-player-fact target-player unit-type-count mameluke-line g-temp)
		)

		#load-if-defined UP-MULTIPLE-ENEMIES
	
			;Other Players DUC Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible YES)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(set-goal g-temp2 0)
			(set-strategic-number sn-focus-player-number 1)
			(set-goal g-temp5 YES)
			)

				(defrule
				(goal g-temp5 YES)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
				=>
				(up-full-reset-search)
				(up-find-remote c: mameluke-line c: 40)
				(up-modify-goal g-temp2 g:+ g-remote-total)
				)

				(defrule
				(goal g-temp5 YES)
				(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -2)
				)
	
			;Other Players Normal Counting
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(goal g-other-enemy-armies-visible NO)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-get-fact-sum any-enemy unit-type-count mameluke-line g-temp2)
			)

			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			(or
				(goal g-game-focus DEFENSIVE)
				(civilian-population >= 60))
			=>
			(up-modify-goal g-temp2 g:- g-temp)	;remove target player's units
			(up-modify-goal g-temp2 c:/ 3)
			(up-modify-goal g-temp g:+ g-temp2)
			)

		#end-if

		;If enemy count has increased, update count
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-get-fact-max any-enemy military-population 0 g-temp2)
		(up-compare-goal g-total-enemy-soldier-counts g:> g-temp2)
		=>
		(up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		(up-modify-goal g-temp g:%* g-temp2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-mamelukes-count g:< g-temp)
		=>
		(up-modify-goal g-enemy-mamelukes-count g:= g-temp)
		; (up-chat-data-to-all "More mamelukes: %d" g: g-enemy-mamelukes-count)
		)
		;If enemy count has decreased,
		;only decrease count by 1 every 5 seconds to reduce rapid changes
		(defrule
		(timer-triggered t-5-sec)
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-compare-goal g-enemy-mamelukes-count g:> g-temp)
		=>
		(up-modify-goal g-enemy-mamelukes-count c:- 1)
		; (up-chat-data-to-all "Less mamelukes: %d" g: g-enemy-mamelukes-count)
		)

	;-----------------------------------
	;	Cap at max enemy military pop
	;-----------------------------------

		;Cap military numbers at max enemy military population (enemy player unit counts can sometimes go way too high)
		; (defrule
		; (players-military-population any-enemy > 1)
		; =>
		; (up-modify-goal g-total-enemy-soldier-counts g:= g-enemy-swordsmen-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-spearmen-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-eagle-warriors-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-foot-archers-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-skirmishers-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-cavalry-archers-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-hand-cannoneers-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-light-cavalry-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-heavy-cavalry-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-camels-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-elephants-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-field-siege-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-monks-count)
		; )
		; (defrule
		; (players-military-population any-enemy > 1)
		; =>
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-jaguar-warriors-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-huskarls-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-chakram-throwers-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-samurai-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-teutonic-knights-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-genoese-crossbowmen-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-cataphracts-count)
		; (up-modify-goal g-total-enemy-soldier-counts g:+ g-enemy-mamelukes-count)
		; )

		; (defrule
		; (players-military-population any-enemy > 1)
		; (up-get-fact-max any-enemy military-population 0 g-temp4)
		; ; (up-compare-goal g-total-enemy-soldier-counts g:> g-temp4)
		; (up-modify-goal g-temp2 g:= g-temp4)
		; (up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		; =>
		; (up-modify-goal g-enemy-swordsmen-count g:%* g-temp2)
		; (up-modify-goal g-enemy-spearmen-count g:%* g-temp2)
		; (up-modify-goal g-enemy-foot-archers-count g:%* g-temp2)
		; (up-modify-goal g-enemy-skirmishers-count g:%* g-temp2)
		; (up-modify-goal g-enemy-cavalry-archers-count g:%* g-temp2)
		; (up-modify-goal g-enemy-hand-cannoneers-count g:%* g-temp2)
		; (up-modify-goal g-enemy-heavy-cavalry-count g:%* g-temp2)
		; (up-modify-goal g-enemy-elephants-count g:%* g-temp2)
		; (up-modify-goal g-enemy-field-siege-count g:%* g-temp2)
		; (up-modify-goal g-enemy-monks-count g:%* g-temp2)
		; )

		; (defrule
		; (players-military-population any-enemy > 1)
		; (up-get-fact-max any-enemy military-population 0 g-temp4)
		; ; (up-compare-goal g-total-enemy-soldier-counts g:> g-temp4)
		; (up-modify-goal g-temp2 g:= g-temp4)
		; (up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		; =>
		; (up-modify-goal g-enemy-jaguar-warriors-count g:%* g-temp2)
		; (up-modify-goal g-enemy-chakram-throwers-count g:%* g-temp2)
		; (up-modify-goal g-enemy-huskarls-count g:%* g-temp2)
		; (up-modify-goal g-enemy-samurai-count g:%* g-temp2)
		; (up-modify-goal g-enemy-teutonic-knights-count g:%* g-temp2)
		; (up-modify-goal g-enemy-genoese-crossbowmen-count g:%* g-temp2)
		; (up-modify-goal g-enemy-cataphracts-count g:%* g-temp2)
		; (up-modify-goal g-enemy-mamelukes-count g:%* g-temp2)
		; )

		; (defrule
		; (players-military-population any-enemy > 1)
		; (up-get-fact-max any-enemy military-population 0 g-temp4)
		; (or
		; 	(up-compare-goal g-total-enemy-soldier-counts g:> g-temp4)
		; 	(current-age >= castle-age))
		; (up-modify-goal g-temp2 g:= g-temp4)
		; (up-modify-goal g-temp2 g:%/ g-total-enemy-soldier-counts)
		; =>
		; (up-modify-goal g-enemy-eagle-warriors-count g:%* g-temp2)
		; (up-modify-goal g-enemy-light-cavalry-count g:%* g-temp2)
		; (up-modify-goal g-enemy-camels-count g:%* g-temp2)
		; )

;--------------------------------------------------
;	GOAL: g-constant-train-unit
;	GOAL: g-desired-num-constant-train-unit-goal
;--------------------------------------------------

	(defrule
	(up-compare-goal g-constant-train-unit != 0)
	=>
	(set-goal g-constant-train-unit 0)
	)

	(defrule
	(goal g-current-strategy FC-KRUSH)
	(current-age == castle-age)
	(unit-type-count knight-line g:< g-required-attack-num)
	(up-object-type-count-total c: knight-line g:< g-desired-num-knight)
	(up-compare-flag g-flag != FIRST-ATTACK-LAUNCHED)
	(up-compare-goal g-knight-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit knight)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-knight)	;This sets g-desired-num-constant-train-unit-goal to the
	)																					;goal ID constant of g-desired-num-knight, not the actual
																						;number of desired knights stored in the goal
	(defrule
	(goal g-current-strategy FC-CRUSH)
	(current-age == castle-age)
	(up-compare-goal g-camel-line g:< g-required-attack-num)
	(up-compare-goal g-camel-line g:< g-desired-num-camel)
	(up-compare-flag g-flag != FIRST-ATTACK-LAUNCHED)
	(up-compare-goal g-camel-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit camel)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-camel)
	)

	(defrule
	(goal g-current-strategy FC-EAGLES-REVENGE)
	(current-age == castle-age)
	(up-compare-goal g-eagle-scout-line g:< g-required-attack-num)
	(up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
	(up-compare-flag g-flag != FIRST-ATTACK-LAUNCHED)
	(up-compare-goal g-eagle-warrior-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit eagle-warrior)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-eagle-warrior)
	)

	(defrule
	(goal g-current-strategy FC-STRONGBOW)
	(current-age == castle-age)
	(unit-type-count-total archer-line g:< g-required-attack-num)
	(up-object-type-count c: archer-line g:< g-desired-num-archer)
	(up-compare-flag g-flag != FIRST-ATTACK-LAUNCHED)
	(up-compare-goal g-archer-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= SECONDARY-FEUDAL-COMPLETE)
	=>
	(set-goal g-constant-train-unit archer)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-archer)
	)

	(defrule
	(goal g-current-strategy FC-DEMON)
	(current-age == castle-age)
	(unit-type-count-total monk g:< g-required-attack-num)
	(up-object-type-count c: monk g:< g-desired-num-monk)
	(up-compare-flag g-flag != FIRST-ATTACK-LAUNCHED)
	(or
		(up-research-status c: ri-sanctity >= research-pending)
		(up-compare-const SANCTITY-AVAILABLE == NO))
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit monk)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-monk)
	)

	(defrule
	(goal g-current-strategy FC-CASTLE-DROP)
	(current-age == castle-age)
	(unit-type-count-total my-unique-unit g:< g-required-attack-num)
	(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
	(up-compare-flag g-flag != FIRST-ATTACK-LAUNCHED)
	(up-compare-goal g-unique-unit-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit my-unique-unit)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-unique-unit)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-desired-num-trade-cart > 0)
	(up-object-type-count-total c: trade-cart g:< g-desired-num-trade-cart)
	(research-completed ri-caravan)
	(goal g-town-under-attack NO)
	=>
	(set-goal g-constant-train-unit trade-cart)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-trade-cart)
	)

	(defrule
	(current-age >= castle-age)
	(or
		(up-building-type-in-town c: castle > 0)
		(military-population > 15))
	(building-type-count siege-workshop > 0)
	(up-compare-goal g-siege-class < 2)
	(up-compare-goal g-desired-num-ram-type >= 2)
	(up-research-status c: ri-capped-ram != research-available)
	=>
	(set-goal g-constant-train-unit battering-ram)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-ram-type)
	)

	(defrule
	(current-age == imperial-age)
	(or
		(up-building-type-in-town c: castle > 0)
		(military-population > 15))
	(building-type-count castle > 0)
	(up-compare-goal g-siege-class < 2)
	(up-compare-goal g-desired-num-trebuchet >= 2)
	=>
	(set-goal g-constant-train-unit trebuchet)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-trebuchet)
	)

	#load-if-defined DE-AVAILABLE

		(defrule
		(current-age == imperial-age)
		(or
			(up-building-type-in-town c: castle > 0)
			(military-population > 15))
		(building-type-count siege-workshop > 0)
		(unit-available bombard-cannon-line)
		(unit-type-count-total bombard-cannon-line == 0)
		(up-compare-goal g-desired-num-bombard-cannon > 0)
		=>
		(set-goal g-constant-train-unit bombard-cannon)
		(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-bombard-cannon)
		)

	#else

		(defrule
		(current-age == imperial-age)
		(or
			(up-building-type-in-town c: castle > 0)
			(military-population > 15))
		(building-type-count siege-workshop > 0)
		(unit-available bombard-cannon)
		(unit-type-count-total bombard-cannon == 0)
		(up-compare-goal g-desired-num-bombard-cannon > 0)
		=>
		(set-goal g-constant-train-unit bombard-cannon)
		(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-bombard-cannon)
		)

	#end-if

;-----------------------------------
;	GOAL: g-team-partner
;	GOAL: g-team-partner-identity
;-----------------------------------

	(defrule
	(true)
	=>
	(up-modify-sn sn-focus-player-number g:= g-team-partner)
	)

	(defrule
	(not
		(player-in-game focus-player))
	=>
	(set-goal g-team-partner PENDING)
	)

	;2 Player team

	#load-if-defined UP-2-PLAYER-TEAM
	(defrule
	(player-in-game any-ally)
	=>
	(set-goal g-team-partner PENDING)
	(up-find-player ally find-closest g-team-partner)
	(up-modify-sn sn-focus-player-number g:= g-team-partner)
	(up-get-focus-fact allied-goal g-identity g-team-partner-identity)
	)
	#end-if

	;3+ player team
	#load-if-not-defined UP-1-PLAYER-TEAM
	#load-if-not-defined UP-2-PLAYER-TEAM

	(load "The General 1.2/Functions/Reset Mini")

		(defrule
		(game-time > 5)
		(goal g-team-partner PENDING)
		(player-in-game any-ally)
		=>
		(up-modify-sn sn-focus-player-number c:= 1)
		(set-goal g-temp 99999)	;player with the lowest score is the ideal team partner
		(set-goal g-temp2 0)
		(set-goal g-temp3 0)
		(set-goal g-temp4 2098)
		)

			;Loop through all players and find the closest allied pocket with DUC
			(defrule
			(goal g-temp4 2098)
			(or
				(up-compare-sn sn-focus-player-number == my-player-number)
				(nand
					(player-in-game focus-player)
					(stance-toward focus-player ally)))
			(up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
			=>
			(up-modify-sn sn-focus-player-number c:+ 1)
			(up-jump-rule -1)
			)

			(defrule
			(goal g-temp4 2098)
			=>
			(up-full-reset-search)
			(up-find-remote c: town-center c: 1)
			(up-find-remote c: building-class c: 1)
			)

			(defrule
			(goal g-temp4 2098)
			(up-set-target-object search-remote c: 0)
			=>
			(up-get-point position-object g-point-x)
			(up-get-point-distance g-position-self-x g-point-x g-temp2)
			)

			(defrule
			(goal g-temp4 2098)
			(up-set-target-object search-remote c: 0)
			(goal g-position FLANK)
			(up-allied-goal focus-player g-position == FLANK)
			=>
			(up-modify-goal g-temp2 c:* 100)
			)
			(defrule
			(goal g-temp4 2098)
			(up-set-target-object search-remote c: 0)
			(goal g-position POCKET)
			=>
			(up-get-focus-fact population 0 g-temp3)
			(up-modify-goal g-temp3 c:* 3)
			(up-modify-goal g-temp2 g:- g-temp3)
			)
			(defrule
			(goal g-temp4 2098)
			(up-set-target-object search-remote c: 0)
			(goal g-position POCKET)
			(up-allied-goal focus-player g-position == POCKET)
			=>
			(up-modify-goal g-temp2 c:* 100)
			)

			(defrule
			(goal g-temp4 2098)
			(up-set-target-object search-remote c: 0)
			(up-allied-goal focus-player g-identity == THE-GENERAL)
			(up-allied-goal focus-player g-team-partner == my-player-number)
			=>
			(up-modify-goal g-temp2 c:/ 2)
			)

			(defrule
			(goal g-temp4 2098)
			(up-set-target-object search-remote c: 0)
			(up-compare-goal g-temp2 g:< g-temp)	;less than the lowest distance to an ally found so far
			(up-compare-goal g-temp2 > 0)
			=>
			(up-modify-goal g-team-partner s:= sn-focus-player-number)
			(up-modify-goal g-temp g:= g-temp2)	;store new lowest distance to an ally
			)

			(defrule
			(goal g-temp4 2098)
			(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
			=>
			(up-modify-sn sn-focus-player-number c:+ 1)
			(set-goal g-temp2 0)
			(set-goal g-temp3 0)
			(up-jump-rule -9)
			)

	#end-if
	#end-if

	;Set g-team-partner-identity
	(defrule
	(up-compare-goal g-team-partner > 0)
	=>
	(up-modify-sn sn-focus-player-number g:= g-team-partner)
	(up-get-focus-fact allied-goal g-identity g-team-partner-identity)
	)

;------------------
;	GOAL: g-flag
;------------------

	;---------------------------
	;	First Attack Launched
	;---------------------------

		(defrule
		(up-compare-flag g-flag != FIRST-ATTACK-LAUNCHED)
		(goal g-attacking YES)
		=>
		(up-modify-flag g-flag c:+ FIRST-ATTACK-LAUNCHED)
		)
	
	;--------------
	;	Far Boar
	;--------------
	
		(load "The General 1.2/Functions/Reset Mini")

		;Find furthest boar
		(defrule
		(up-compare-flag g-flag != FAR-BOAR)
		(up-compare-goal g-current-boar-count > 0)
		=>
		(up-full-reset-search)
		(up-set-target-point g-position-self-x)
		(set-strategic-number sn-focus-player-number 0)
		(up-find-remote c: boar-class c: 5)
		(up-remove-objects search-remote object-data-carry == 0)
		(up-remove-objects search-remote object-data-hitpoints < 5)
		(up-remove-objects search-remote object-data-id g:== g-current-boar-id)
		(up-clean-search search-remote object-data-distance search-order-desc)
		)

		;If boar is further than 24 tiles, set FAR-BOAR flag
		(defrule
		(up-compare-goal g-current-boar-count > 0)
		(up-set-target-object search-remote c: 0)
		(up-get-object-data object-data-distance g-temp)
		(up-compare-goal g-temp >= NEAR-BOAR-HUNT-DISTANCE)
		=>
		(up-modify-flag g-flag c:+ FAR-BOAR)
		(disable-self)
		)

	;---------------------------------
	;	Boar Hunting Conditions Met
	;---------------------------------

		(load "The General 1.2/Functions/Reset Mini")

		(defrule
		(up-compare-flag g-flag == BOAR-HUNTING-CONDITIONS-MET)
		(or
			(unit-type-count villager < 10)
			(or
				(goal g-current-boar-count 0)
				(and
					(up-research-status c: ri-loom < research-pending)
					(or
						(cc-players-unit-type-count 0 elephant > 0)
						(cc-players-unit-type-count 0 rhino > 0)))))
		=>
		(up-modify-flag g-flag c:- BOAR-HUNTING-CONDITIONS-MET)
		)

		(defrule
		(up-compare-flag g-flag != BOAR-HUNTING-CONDITIONS-MET)
		; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
		(unit-type-count villager >= 10)
		(up-compare-goal g-current-boar-count > 0)
		(or
			(up-research-status c: ri-loom >= research-pending)
			(and
				(cc-players-unit-type-count 0 elephant == 0)
				(cc-players-unit-type-count 0 rhino == 0)))
		=>
		(up-modify-flag g-flag c:+ BOAR-HUNTING-CONDITIONS-MET)
		)

	;---------------------------------
	;	Save for Support Unit Techs
	;---------------------------------

		(defrule
		(up-compare-flag g-flag == SAVE-FOR-SUPPORT-UNIT-TECHS)
		=>
		(up-modify-flag g-flag c:- SAVE-FOR-SUPPORT-UNIT-TECHS)		;Reset each pass
		)

		(defrule
		(up-compare-goal g-current-age-primary-unit-tech-progress >= PRIORITY-COMPLETE)
		(unit-type-count villager >= 80)
		(up-compare-goal g-age-status != SAVE-FOR-IMPERIAL)
		(or
			(building-type-count-total town-center >= 3)
			(up-compare-goal g-desired-num-town-center < 3))
		(military-population g:>= g-min-military-pop)
		=>
		(up-modify-flag g-flag c:+ SAVE-FOR-SUPPORT-UNIT-TECHS)
		)
		
	;----------------------------
	;	Allow Queued Villagers
	;----------------------------

		(defrule
		(true)
		=>
		(up-modify-flag g-flag c:+ ALLOW-QUEUED-VILLAGERS)
		)

		;Cancel training queue for villagers if we need to free up the TC for upcoming techs

		;Loom
		(defrule
		(up-research-status c: ri-loom < research-complete)
		(or
			(players-military-population any-enemy > 1)
			(or
				(cc-players-unit-type-count 0 elephant > 0)
				(cc-players-unit-type-count 0 rhino > 0)))
		(up-object-type-count-total c: villager >= 10)
		=>
		(up-modify-flag g-flag c:- ALLOW-QUEUED-VILLAGERS)
		)

		;Loom or Next Age
		(defrule
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:- 1)
		(up-object-type-count c: villager g:>= g-temp)
		=>
		(up-modify-flag g-flag c:- ALLOW-QUEUED-VILLAGERS)
		)

		;Preparing an attack
		(defrule
		(current-age == castle-age)
		(goal g-strategy-type FAST-CASTLE)
		(up-compare-flag g-flag != FIRST-ATTACK-LAUNCHED)
		=>
		(up-modify-flag g-flag c:- ALLOW-QUEUED-VILLAGERS)
		)

		;Defensive
		(defrule
		(military-population < 25)
		(goal g-game-focus DEFENSIVE)
		(or
			(current-age >= feudal-age)
			(goal g-town-under-attack YES))
		=>
		(up-modify-flag g-flag c:- ALLOW-QUEUED-VILLAGERS)
		)

		;Defensive or Aggressive
		(defrule
		(military-population < 25)
		(goal g-game-focus AGGRESSIVE)
		(food-amount < 125)
		(up-compare-goal g-current-age-primary-unit-tech-progress < PRIORITY-COMPLETE)
		(or
			(current-age >= feudal-age)
			(goal g-town-under-attack YES))
		=>
		(up-modify-flag g-flag c:- ALLOW-QUEUED-VILLAGERS)
		)

		;Low military
		(defrule
		(up-compare-goal g-game-focus != REBUILD)
		(building-type-count town-center > 1)
		(military-population g:< g-min-military-pop)
		=>
		(up-modify-flag g-flag c:- ALLOW-QUEUED-VILLAGERS)
		)

		;Wheelbarrow
		(defrule
		(or
			(building-type-count town-center > 1)
			(up-compare-goal g-usable-farm-count >= 18))
		(up-compare-goal g-usable-farm-count >= 14)
		(or
			(up-compare-goal g-game-focus != DEFENSIVE)
			(military-population g:>= g-min-military-pop))
		(up-research-status c: ri-wheel-barrow == research-available)
		=>
		(up-modify-goal g-flag c:- ALLOW-QUEUED-VILLAGERS)
		)

		;Hand Cart
		(defrule
		(goal g-game-focus BOOM)
		(or
			(building-type-count town-center > 1)
			(up-compare-goal g-usable-farm-count >= 25))
		(up-compare-goal g-usable-farm-count >= 20)
		(population >= 80)
		(up-compare-goal g-age-status != SAVE-FOR-IMPERIAL)
		(up-research-status c: ri-heavy-plow >= research-pending)
		(up-research-status c: ri-hand-cart == research-available)
		=>
		(up-modify-goal g-flag c:- ALLOW-QUEUED-VILLAGERS)
		)
		
	;-----------------------
	;	Enemy Fast Castle
	;-----------------------

		(defrule
		(strategic-number sn-target-player-number > 0)
		(players-current-age target-player == dark-age)
		(players-civilian-population target-player >= 27)
		(players-military-population target-player <= 1)
		=>
		(up-modify-flag g-flag c:+ ENEMY-FC)
		(disable-self)
		)

	;------------------
	;	Super Pocket
	;------------------

		(load "The General 1.2/Functions/Reset Mini")

		#load-if-defined UP-POCKET-POSITION
			;If pocket, determine if we are super-pocket. This is when a pocket player is in between two other pocket players.
			(defrule
			(game-time > 10)
			(up-compare-flag g-flag != SUPER-POCKET)
			=>
			(up-find-player ally find-closest g-temp)
			(up-modify-sn sn-focus-player-number g:= g-temp)
			)

			(defrule
			(game-time > 10)
			(up-compare-flag g-flag != SUPER-POCKET)
			(up-allied-goal focus-player g-position == 2)	;closest ally is pocket
			=>
			(up-find-player ally find-closest g-temp)
			(up-find-next-player ally find-closest g-temp)	;find second-closest ally
			(up-modify-sn sn-focus-player-number g:= g-temp)
			(set-goal g-temp2 123)
			)

			(defrule
			(goal g-temp2 123)
			(game-time > 10)
			(up-compare-flag g-flag != SUPER-POCKET)
			(up-allied-goal focus-player g-position == 2)	;second-closest ally is pocket
			=>
			(up-modify-flag g-flag c:+ SUPER-POCKET)
			)

		#end-if

;--------------------------------------------------
;	RESET Tech Progress (Goals 237-239, 242-257)
;--------------------------------------------------

	(defrule
	(true)
	=>
	(set-goal g-primary-unit-tech-progress 0)
	(set-goal g-support-unit-tech-progress 0)
	(set-goal g-eco-tech-progress 0)
	(set-goal g-militia-tech-progress 0)
	(set-goal g-spearman-tech-progress 0)
	(set-goal g-eagle-warrior-tech-progress 0)
	(set-goal g-condottiero-tech-progress 0)
	)

	(defrule
	(true)
	=>
	(set-goal g-archer-tech-progress 0)
	(set-goal g-skirmisher-tech-progress 0)
	(set-goal g-cavalry-archer-tech-progress 0)
	(set-goal g-hand-cannoneer-tech-progress 0)
	(set-goal g-genitour-tech-progress 0)
	(set-goal g-scout-cavalry-tech-progress 0)
	(set-goal g-knight-tech-progress 0)
	(set-goal g-camel-tech-progress 0)
	(set-goal g-battle-elephant-tech-progress 0)
	(set-goal g-steppe-lancer-tech-progress 0)
	(set-goal g-unique-unit-tech-progress 0)
	(set-goal g-second-unique-unit-tech-progress 0)
	)

;-------------------------------
;	GOAL: g-eco-tech-progress
;-------------------------------

	;----------------
	;	Feudal Age
	;----------------

		(defrule
		(current-age >= feudal-age)
		=>
		(set-goal g-eco-tech-progress PRIORITY-FEUDAL-COMPLETE)
		)

		(defrule
		(current-age >= feudal-age)
		(goal g-eco-tech-progress PRIORITY-FEUDAL-COMPLETE)
		(up-research-status c: ri-double-bit-axe >= research-pending)
		(up-research-status c: ri-horse-collar >= research-pending)
		=>
		(set-goal g-eco-tech-progress SECONDARY-FEUDAL-COMPLETE)
		)

		(defrule
		(current-age >= feudal-age)
		(goal g-eco-tech-progress SECONDARY-FEUDAL-COMPLETE)
		(or
			(up-research-status c: ri-gold-mining >= research-pending)
			(up-compare-goal g-desired-num-gold-vils < 6))
		(or
			(up-research-status c: ri-stone-mining >= research-pending)
			(up-compare-goal g-desired-num-stone-vils < 8))
		(up-research-status c: ri-wheel-barrow >= research-pending)
		=>
		(set-goal g-eco-tech-progress ALL-FEUDAL-COMPLETE)
		)

	;----------------
	;	Castle Age
	;----------------

		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-eco-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bow-saw >= research-pending)
		(up-research-status c: ri-horse-collar >= research-pending)
		(or
			(goal g-desired-num-trade-cart 0)
			(up-research-status c: ri-caravan >= research-pending))
		=>
		(set-goal g-eco-tech-progress PRIORITY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-eco-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-wheel-barrow >= research-pending)
		(or
			(up-research-status c: ri-gillnets >= research-pending)
			(goal g-desired-num-fishing-ship 0))
		=>
		(set-goal g-eco-tech-progress SECONDARY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-eco-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-hand-cart >= research-pending)
		(up-research-status c: ri-heavy-plow >= research-pending)
		(or
			(up-research-status c: ri-gold-mining >= research-pending)
			(up-compare-goal g-desired-num-gold-vils < 6))
		(or
			(up-research-status c: ri-stone-mining >= research-pending)
			(up-compare-goal g-desired-num-stone-vils < 8))
		=>
		(set-goal g-eco-tech-progress ALL-CASTLE-COMPLETE)
		)

	;------------------
	;	Imperial Age
	;------------------
		
		(defrule
		(goal g-eco-tech-progress ALL-CASTLE-COMPLETE)
		(current-age == imperial-age)
		=>
		(set-goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		#load-if-defined INDIAN-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(up-research-status c: ri-two-man-saw >= research-pending)
			(up-research-status c: ri-gold-shaft-mining >= research-pending)
			(up-research-status c: my-second-unique-research >= research-pending)
			=>
			(set-goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined ITALIAN-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(up-research-status c: ri-two-man-saw >= research-pending)
				(or
					(up-research-status c: my-unique-research >= research-pending)
					(and
						(goal g-desired-num-trade-cart 0)
						(goal g-desired-num-trade-cog 0)))
				=>
				(set-goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#else

				(defrule
				(current-age == imperial-age)
				(goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(or
					(up-research-status c: ri-two-man-saw >= research-pending)
					(up-compare-const TWO-MAN-SAW-AVAILABLE == NO))
				(or
					(up-research-status c: ri-gold-shaft-mining >= research-pending)
					(or
						(up-compare-goal g-desired-num-gold-vils < 6)
						(up-compare-const GOLD-SHAFT-MINING-AVAILABLE == NO)))
				=>
				(set-goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)
			#end-if
		#end-if

		(defrule
		(current-age == imperial-age)
		(goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(or
			(up-research-status c: ri-crop-rotation >= research-pending)
			(up-compare-const CROP-ROTATION-AVAILABLE == NO))
		(or
			(up-research-status c: ri-stone-shaft-mining >= research-pending)
			(or
				(up-compare-const STONE-SHAFT-MINING-AVAILABLE == NO)
				(up-compare-goal g-desired-num-stone-vils < 8)))
		=>
		(set-goal g-eco-tech-progress ALL-IMPERIAL-COMPLETE)
		)



;-----------------------------------
;	GOAL: g-militia-tech-progress
;-----------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-militia-tech-progress < PRIORITY-FEUDAL-COMPLETE)
	(up-research-status c: ri-man-at-arms >= research-pending)
	=>
	(set-goal g-militia-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-militia-tech-progress PRIORITY-FEUDAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-militia-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-militia-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-militia-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-militia-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-long-swordsman >= research-pending)
	=>
	(set-goal g-militia-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-militia-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-militia-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-militia-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-compare-goal g-desired-num-militia < 10)
		(or
			(up-research-status c: ri-supplies >= research-pending)
			(up-compare-const SUPPLIES-AVAILABLE == NO)))
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-militia-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-militia-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-militia-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-militia-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	(up-research-status c: ri-long-swordsman >= research-pending)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-two-handed-swordsman)
		(up-compare-const TWO-HANDED-SWORDSMAN-AVAILABLE == NO))
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-militia-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-militia-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-champion)
		(up-compare-const CHAMPION-AVAILABLE == NO))
	(or
		(research-completed ri-plate-mail)
		(up-compare-const PLATE-MAIL-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-compare-goal g-desired-num-militia < 10)
		(or
			(up-research-status c: ri-supplies >= research-pending)
			(up-compare-const SUPPLIES-AVAILABLE == NO)))
	=>
	(set-goal g-militia-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined GOTHIC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-militia-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined MALAY-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-militia-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			(or
				(research-completed ri-blast-furnace)
				(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
			=>
			(set-goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-militia-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(or
				(research-completed ri-blast-furnace)
				(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
			=>
			(set-goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if
	
	#load-if-defined AZTEC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Garland Wars
		=>
		(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined SLAVIC-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined VIKING-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				#load-if-defined BULGARIANS-CIV

					(defrule
					(current-age == imperial-age)
					(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					(research-completed my-unique-research)	;Bagains
					=>
					(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
					)

				#else

					(defrule
					(current-age == imperial-age)
					(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					=>
					(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
					)
				
				#end-if
			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-militia 0)
	=>
	(set-goal g-militia-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-militia 0)
	=>
	(set-goal g-militia-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-militia 0)
	=>
	(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;------------------------------------
;	GOAL: g-spearman-tech-progress
;------------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-spearman-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-spearman-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-spearman-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-spearman-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-spearman-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-spearman-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(or
		(research-completed ri-pikeman)
		(up-compare-const PIKEMAN-AVAILABLE == NO))
	=>
	(set-goal g-spearman-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-spearman-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-spearman-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-spearman-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-spearman-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-spearman-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-spearman-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-spearman-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-pikeman)
		(up-compare-const PIKEMAN-AVAILABLE == NO))
	(up-research-status c: ri-scale-mail >= research-pending)
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-spearman-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-spearman-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-halberdier)
		(up-compare-const HALBERDIER-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-plate-mail)
		(up-compare-const PLATE-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-spearman-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined GOTHIC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-spearman-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
			
		(defrule
		(current-age == imperial-age)
		(goal g-spearman-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined AZTEC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Garland Wars
		=>
		(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined SLAVIC-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined VIKING-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				#load-if-defined LITHUANIANS-CIV

					(defrule
					(current-age == imperial-age)
					(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					(research-completed my-unique-research)
					=>
					(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
					)

				#else

					(defrule
					(current-age == imperial-age)
					(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					=>
					(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
					)

				#end-if
			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-spearman 0)
	=>
	(set-goal g-spearman-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-spearman 0)
	=>
	(set-goal g-spearman-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-spearman 0)
	=>
	(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;-----------------------------------------
;	GOAL: g-eagle-warrior-tech-progress
;-----------------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-eagle-warrior-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-eagle-warrior-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-eagle-warrior-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)
	
	(defrule
	(current-age >= feudal-age)
	(goal g-eagle-warrior-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-eagle-warrior-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	(or
		(research-completed ri-eagle-warrior)
		(up-compare-const EAGLE-SCOUT-AVAILABLE == NO))
	=>
	(set-goal g-eagle-warrior-tech-progress REQUIRED-CASTLE-COMPLETE)
	)
	
	(defrule
	(current-age >= castle-age)
	(goal g-eagle-warrior-tech-progress REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-eagle-warrior-tech-progress PRIORITY-CASTLE-COMPLETE)
	)
	
	(defrule
	(current-age >= castle-age)
	(goal g-eagle-warrior-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-eagle-warrior-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-eagle-warrior-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-CASTLE-COMPLETE)
	)	

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-eagle-warrior-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-eagle-warrior)
		(up-compare-const EAGLE-SCOUT-AVAILABLE == NO))
	(up-research-status c: ri-scale-mail >= research-pending)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-eagle-warrior-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-eagle-warrior-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-elite-eagle-warrior >= research-pending)
		(up-compare-const ELITE-EAGLE-WARRIOR-AVAILABLE == NO))
	(or
		(research-completed ri-plate-mail)
		(up-compare-const PLATE-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-eagle-warrior-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined MAYAN-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-eagle-warrior-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-eagle-warrior-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined AZTEC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Garland Wars
		=>
		(set-goal g-eagle-warrior-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined INCAN-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-eagle-warrior-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else

			(defrule
			(current-age == imperial-age)
			(goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-eagle-warrior-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-eagle-warrior 0)
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-eagle-warrior 0)
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-eagle-warrior 0)
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;---------------------------------------
;	GOAL: g-condottiero-tech-progress
;---------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-condottiero-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-condottiero-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-condottiero-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-condottiero-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-condottiero-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-condottiero-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-condottiero-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-condottiero-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-condottiero-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-condottiero-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-condottiero-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(research-completed ri-plate-mail)
		(up-compare-const PLATE-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-condottiero-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined GOTHIC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-condottiero-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		(research-completed my-second-unique-research)
		=>
		(set-goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
			
		(defrule
		(current-age == imperial-age)
		(goal g-condottiero-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined AZTEC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Garland Wars
		=>
		(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined SLAVIC-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined VIKING-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				#load-if-defined ITALIAN-CIV
					#load-if-defined DE-AVAILABLE

						(defrule
						(current-age == imperial-age)
						(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
						(research-completed my-second-unique-research)
						=>
						(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
						)

					#else

						(defrule
						(current-age == imperial-age)
						(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
						=>
						(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
						)

					#end-if
				#else

					(defrule
					(current-age == imperial-age)
					(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					=>
					(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
					)

				#end-if
			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-condottiero 0)
	=>
	(set-goal g-condottiero-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-condottiero 0)
	=>
	(set-goal g-condottiero-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-condottiero 0)
	=>
	(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;----------------------------------
;	GOAL: g-archer-tech-progress
;----------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-archer-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-archer-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-fletching >= research-pending)
	=>
	(set-goal g-archer-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-archer-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-archer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-archer-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-crossbow >= research-pending)
		(up-compare-const CROSSBOWMAN-AVAILABLE == NO))
	=>
	(set-goal g-archer-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-archer-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-fletching >= research-pending)
	=>
	(set-goal g-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	=>
	(set-goal g-archer-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-archer-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-crossbow >= research-pending)
		(up-compare-const CROSSBOWMAN-AVAILABLE == NO))
	(or
		(research-completed ri-arbalest)
		(up-compare-const ARBALEST-AVAILABLE == NO))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	=>
	(set-goal g-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	=>
	(set-goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined MAYAN-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		(or
			(research-completed ri-ring-archer-armor)
			(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
		=>
		(set-goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined PERSIAN-CIV
			#load-if-defined DE-AVAILABLE

				(defrule
				(current-age == imperial-age)
				(goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				(or
					(research-completed ri-ring-archer-armor)
					(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
				=>
				(set-goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#else

				(defrule
				(current-age == imperial-age)
				(goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(or
					(research-completed ri-ring-archer-armor)
					(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
				=>
				(set-goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#end-if
		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)
		
		#end-if
	#end-if
		
	#load-if-defined BRITON-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		(research-completed my-unique-research)	;Yeomen
		=>
		(set-goal g-archer-tech-progress ALL-IMPERIAL-COMPLETE)
		)
	
	#else
		#load-if-defined ITALIAN-CIV
			(defrule
			(current-age == imperial-age)
			(goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed ri-chemistry)
			(research-completed my-second-unique-research)
			=>
			(set-goal g-archer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else

			(defrule
			(current-age == imperial-age)
			(goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed ri-chemistry)
			=>
			(set-goal g-archer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-archer 0)
	=>
	(set-goal g-archer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-archer 0)
	=>
	(set-goal g-archer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-archer 0)
	=>
	(set-goal g-archer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;--------------------------------------
;	GOAL: g-skirmisher-tech-progress
;--------------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-skirmisher-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-skirmisher-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-fletching >= research-pending)
	=>
	(set-goal g-skirmisher-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-skirmisher-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-skirmisher-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-skirmisher-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(or
		(up-compare-goal g-enemy-foot-archers-count > 10)
		(or
			(up-compare-goal g-enemy-cavalry-archers-count > 10)
			(or
				(up-compare-goal g-enemy-hand-cannoneers-count > 10)
				(or
					(up-research-status c: ri-elite-skirmisher >= research-pending)
					(up-compare-const ELITE-SKIRMISHER-AVAILABLE == NO)))))
	=>
	(set-goal g-skirmisher-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-skirmisher-tech-progress REQUIRED-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-elite-skirmisher >= research-pending)
		(up-compare-const ELITE-SKIRMISHER-AVAILABLE == NO))
	(up-research-status c: ri-fletching >= research-pending)
	=>
	(set-goal g-skirmisher-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-skirmisher-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-skirmisher-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-skirmisher-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-ballistics >= research-pending)
	=>
	(set-goal g-skirmisher-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-skirmisher-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-elite-skirmisher >= research-pending)
		(up-compare-const ELITE-SKIRMISHER-AVAILABLE == NO))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-skirmisher-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-skirmisher-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(research-completed ri-imperial-skirmisher)
		(up-research-status c: ri-imperial-skirmisher == research-unavailable))
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	(or
		(research-completed ri-ring-archer-armor)
		(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-skirmisher-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined INCAN-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-skirmisher-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-skirmisher-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined AZTEC-CIV
	
		(defrule
		(current-age == imperial-age)
		(goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		(research-completed my-second-unique-research)	;Atl-Atl
		=>
		(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined BRITON-CIV
		
			(defrule
			(current-age == imperial-age)
			(goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed ri-chemistry)
			(research-completed my-unique-research)	;Yeomen
			=>
			(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined LITHUANIANS-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed ri-chemistry)
				(research-completed my-unique-research)
				=>
				(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
			
				(defrule
				(current-age == imperial-age)
				(goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed ri-chemistry)
				=>
				(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-skirmisher 0)
	=>
	(set-goal g-skirmisher-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-skirmisher 0)
	=>
	(set-goal g-skirmisher-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-skirmisher 0)
	=>
	(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;------------------------------------------
;	GOAL: g-cavalry-archer-tech-progress
;------------------------------------------

	(defrule
	(current-age >= castle-age)
	=>
	(set-goal g-cavalry-archer-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-cavalry-archer-tech-progress < PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	=>
	(set-goal g-cavalry-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-cavalry-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	=>
	(set-goal g-cavalry-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-cavalry-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	=>
	(set-goal g-cavalry-archer-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-cavalry-archer-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-cavalry-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-cavalry-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	=>
	(set-goal g-cavalry-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined CUMANS-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-cavalry-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-heavy-cavalry-archer)
			(up-compare-const HEAVY-CAVALRY-ARCHER-AVAILABLE == NO))
		(or
			(research-completed ri-ring-archer-armor)
			(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
		(research-completed my-second-unique-research)
		=>
		(set-goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-cavalry-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-heavy-cavalry-archer)
			(up-compare-const HEAVY-CAVALRY-ARCHER-AVAILABLE == NO))
		(or
			(research-completed ri-ring-archer-armor)
			(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
		=>
		(set-goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined MAGYAR-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		(research-completed ri-parthian-tactics)
		(research-completed my-unique-research)
		=>
		(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined TATARS-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed ri-chemistry)
			(research-completed ri-parthian-tactics)
			(research-completed my-second-unique-research)
			=>
			(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined TURKISH-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed ri-chemistry)
				(research-completed ri-parthian-tactics)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				
				(defrule
				(current-age == imperial-age)
				(goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed ri-chemistry)
				(or
					(research-completed ri-parthian-tactics)
					(up-compare-const PARTHIAN-TACTICS-AVAILABLE == NO))
				=>
				(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-cavalry-archer 0)
	=>
	(set-goal g-cavalry-archer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-cavalry-archer 0)
	=>
	(set-goal g-cavalry-archer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-cavalry-archer 0)
	=>
	(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;-------------------------------------------
;	GOAL: g-elephant-archer-tech-progress
;-------------------------------------------

	;Required Castle Age Techs
	(defrule
	(current-age >= castle-age)
	=>
	(set-goal g-elephant-archer-tech-progress REQUIRED-CASTLE-COMPLETE)
	)
		
	;Priority Castle Age Techs
	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-elephant-archer-tech-progress < PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	=>
	(set-goal g-elephant-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	)
	
	;Secondary Castle Age Techs
	(defrule
	(current-age >= castle-age)
	(goal g-elephant-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-elephant-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	)
	
	;All Castle Age Techs
	(defrule
	(current-age >= castle-age)
	(goal g-elephant-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	=>
	(set-goal g-elephant-archer-tech-progress ALL-CASTLE-COMPLETE)
	)
	
	;Required Imperial Age Techs
	(defrule
	(current-age == imperial-age)
	(research-completed ri-bodkin-arrow)
	(research-completed ri-padded-archer-armor)
	=>
	(set-goal g-elephant-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)

	;Priority Imperial Age Techs
	(defrule
	(current-age == imperial-age)
	(goal g-elephant-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(research-completed ri-ballistics)
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	=>
	(set-goal g-elephant-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
	
	;Secondary Imperial Age Techs
	(defrule
	(current-age == imperial-age)
	(goal g-elephant-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-elite-elephant-archer)
		(up-compare-const ELITE-ELEPHANT-ARCHER-AVAILABLE == NO))
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-ring-archer-armor)
		(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-elephant-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	)
	
	;All Imperial Age Techs
	(defrule
	(current-age == imperial-age)
	(goal g-elephant-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-parthian-tactics)
		(up-compare-const PARTHIAN-TACTICS-AVAILABLE == NO))
	(research-completed ri-chemistry)
	=>
	(set-goal g-elephant-archer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-elephant-archer 0)
	=>
	(set-goal g-elephant-archer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-elephant-archer 0)
	=>
	(set-goal g-elephant-archer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-elephant-archer 0)
	=>
	(set-goal g-elephant-archer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;------------------------------------------
;	GOAL: g-hand-cannoneer-tech-progress
;------------------------------------------

	(defrule
	(current-age >= castle-age)
	=>
	(set-goal g-hand-cannoneer-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-hand-cannoneer-tech-progress < SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-hand-cannoneer-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-hand-cannoneer-tech-progress SECONDARY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-hand-cannoneer-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-hand-cannoneer-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(research-completed ri-chemistry)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-hand-cannoneer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-hand-cannoneer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-hand-cannoneer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-hand-cannoneer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-ring-archer-armor)
		(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-hand-cannoneer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	)

	#load-if-defined INDIAN-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-hand-cannoneer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-hand-cannoneer-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined PORTUGUESE-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-hand-cannoneer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-hand-cannoneer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-hand-cannoneer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-hand-cannoneer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-hand-cannoneer 0)
	=>
	(set-goal g-hand-cannoneer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-hand-cannoneer 0)
	=>
	(set-goal g-hand-cannoneer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-hand-cannoneer 0)
	=>
	(set-goal g-hand-cannoneer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;------------------------------------
;	GOAL: g-genitour-tech-progress
;------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-genitour-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-genitour-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-genitour-tech-progress < PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	=>
	(set-goal g-genitour-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-genitour-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-genitour-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-genitour-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-genitour-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-genitour-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-genitour-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-genitour-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-temp 66532)
	)
		
	(defrule
	(goal g-temp 66532)
	(current-age == imperial-age)
	(goal g-genitour-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-elite-genitour)
		(up-research-status c: ri-elite-genitour == research-unavailable))
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	(or
		(research-completed ri-ring-archer-armor)
		(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-genitour-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-genitour-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(research-completed ri-chemistry)
	=>
	(set-goal g-genitour-tech-progress ALL-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-genitour 0)
	=>
	(set-goal g-genitour-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-genitour 0)
	=>
	(set-goal g-genitour-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-genitour 0)
	=>
	(set-goal g-genitour-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;-----------------------------------------
;	GOAL: g-scout-cavalry-tech-progress
;-----------------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-scout-cavalry-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-scout-cavalry-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-scout-cavalry-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-scout-cavalry-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	=>
	(set-goal g-scout-cavalry-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-scout-cavalry-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-light-cavalry >= research-pending)
		(up-compare-const LIGHT-CAVALRY-AVAILABLE == NO))
	=>
	(set-goal g-scout-cavalry-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-scout-cavalry-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-scout-cavalry-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-scout-cavalry-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-scout-cavalry-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	#load-if-defined FRANKISH-CIV

		(defrule
		(current-age >= castle-age)
		(goal g-scout-cavalry-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-scout-cavalry-tech-progress ALL-CASTLE-COMPLETE)
		)

	#else

		(defrule
		(current-age >= castle-age)
		(goal g-scout-cavalry-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-scout-cavalry-tech-progress ALL-CASTLE-COMPLETE)
		)

	#end-if
			
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-scout-cavalry-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-light-cavalry >= research-pending)
		(up-compare-const LIGHT-CAVALRY-AVAILABLE == NO))
	(up-research-status c: ri-scale-barding >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-scout-cavalry-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)

	#load-if-defined FRANKISH-CIV
			
		(defrule
		(current-age == imperial-age)
		(goal g-scout-cavalry-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-barding)
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

	#else

		(defrule
		(current-age == imperial-age)
		(goal g-scout-cavalry-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-chain-barding)
			(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
		(research-completed ri-iron-casting)
		(or
			(research-completed ri-hussar)
			(up-compare-const HUSSAR-AVAILABLE == NO))
		(or
			(research-completed ri-plate-barding)
			(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
		=>
		(set-goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BULGARIANS-CIV
	
		(defrule
		(current-age == imperial-age)
		(goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)	;Stirrups
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined CUMANS-CIV
	
			(defrule
			(current-age == imperial-age)
			(goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(research-completed ri-blast-furnace)
			(research-completed my-second-unique-research)
			=>
			(set-goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(or
				(research-completed ri-blast-furnace)
				(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
			=>
			(set-goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if
		
	#load-if-defined BURMESE-CIV
		(defrule
		(current-age == imperial-age)
		(goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Manipur Cavalry
		=>
		(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined MALIAN-CIV
		
			(defrule
			(current-age == imperial-age)
			(goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined TATARS-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				
				(defrule
				(current-age == imperial-age)
				(goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				=>
				(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-scout-cavalry 0)
	=>
	(set-goal g-scout-cavalry-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-scout-cavalry 0)
	=>
	(set-goal g-scout-cavalry-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-scout-cavalry 0)
	=>
	(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;----------------------------------
;	GOAL: g-knight-tech-progress
;----------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-knight-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-knight-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-knight-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	=>
	(set-goal g-knight-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-knight-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-knight-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-knight-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-knight-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-knight-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-cavalier >= research-pending)
		(up-compare-const CAVALIER-AVAILABLE == NO))
	(up-research-status c: ri-scale-barding >= research-pending)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-knight-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-knight-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(research-completed ri-plate-barding)
		(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined BULGARIANS-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)	;Stirrups
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined FRANKISH-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(or
				(research-completed ri-blast-furnace)
				(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
			(or
				(research-completed ri-paladin)
				(or
					(up-compare-const PALADIN-AVAILABLE == NO)
					(up-players-in-game ally <= 1)))	;we are alone
			(up-research-status c: my-second-unique-research >= research-pending)
			=>
			(set-goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined SICILIANS-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(or
					(research-completed ri-blast-furnace)
					(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
				(or
					(research-completed ri-paladin)
					(or
						(up-compare-const PALADIN-AVAILABLE == NO)
						(up-players-in-game ally <= 1)))	;we are alone
				(up-research-status c: my-unique-research >= research-pending)
				=>
				(set-goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#else

				(defrule
				(current-age == imperial-age)
				(goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(or
					(research-completed ri-blast-furnace)
					(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
				(or
					(research-completed ri-paladin)
					(or
						(up-compare-const PALADIN-AVAILABLE == NO)
						(up-players-in-game ally <= 1)))	;we are alone
				=>
				(set-goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#end-if
		#end-if
	#end-if
	
	#load-if-defined BURMESE-CIV
		(defrule
		(current-age == imperial-age)
		(goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-knight-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined MALIAN-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-knight-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else

			(defrule
			(current-age == imperial-age)
			(goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(or
				(research-completed ri-paladin)
				(up-compare-const PALADIN-AVAILABLE == NO))
			=>
			(set-goal g-knight-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-knight 0)
	=>
	(set-goal g-knight-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-knight 0)
	=>
	(set-goal g-knight-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-knight 0)
	=>
	(set-goal g-knight-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;---------------------------------
;	GOAL: g-camel-tech-progress
;---------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-camel-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-camel-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-camel-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	=>
	(set-goal g-camel-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-camel-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-camel-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-camel-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-camel-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-camel-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-heavy-camel)
		(up-compare-const HEAVY-CAMEL-AVAILABLE == NO))
	(up-research-status c: ri-scale-barding >= research-pending)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-camel-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-camel-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(research-completed ri-plate-barding)
		(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-camel-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined INDIAN-CIV
		
		(defrule
		(current-age == imperial-age)
		(goal g-camel-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		(research-completed ri-imperial-camel)
		=>
		(set-goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-camel-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BERBERS-CIV
		
		(defrule
		(current-age == imperial-age)
		(goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Maghrabi Camels
		=>
		(set-goal g-camel-tech-progress ALL-IMPERIAL-COMPLETE)
		)
	
	#else
		#load-if-defined SARACEN-CIV
		
			(defrule
			(current-age == imperial-age)
			(goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-camel-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-camel-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-camel 0)
	=>
	(set-goal g-camel-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-camel 0)
	=>
	(set-goal g-camel-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-camel 0)
	=>
	(set-goal g-camel-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;-------------------------------------------
;	GOAL: g-battle-elephant-tech-progress
;-------------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-battle-elephant-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-battle-elephant-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-battle-elephant-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	=>
	(set-goal g-battle-elephant-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-battle-elephant-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-battle-elephant-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-battle-elephant-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-battle-elephant-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-battle-elephant-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(research-completed ri-scale-barding)
	(research-completed ri-forging)
	=>
	(set-goal g-battle-elephant-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-battle-elephant-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-plate-barding)
		(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-battle-elephant-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined KHMER-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-battle-elephant-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-elite-battle-elephant)
			(up-compare-const ELITE-BATTLE-ELEPHANT-AVAILABLE == NO))
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		(research-completed my-second-unique-research)
		=>
		(set-goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-battle-elephant-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-elite-battle-elephant)
			(up-compare-const ELITE-BATTLE-ELEPHANT-AVAILABLE == NO))
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined BURMESE-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)	;Howdah
		=>
		(set-goal g-battle-elephant-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined VIETNAMESE-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-second-unique-research)
			=>
			(set-goal g-battle-elephant-tech-progress ALL-IMPERIAL-COMPLETE)
			)
			
			(defrule
			(current-age == imperial-age)
			(goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-battle-elephant-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-battle-elephant 0)
	=>
	(set-goal g-battle-elephant-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-battle-elephant 0)
	=>
	(set-goal g-battle-elephant-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-battle-elephant 0)
	=>
	(set-goal g-battle-elephant-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;-----------------------------------------
;	GOAL: g-steppe-lancer-tech-progress
;-----------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-steppe-lancer-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-steppe-lancer-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-steppe-lancer-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-steppe-lancer-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-steppe-lancer-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-steppe-lancer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-steppe-lancer-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	(up-research-status c: ri-forging >= research-pending)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-steppe-lancer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-steppe-lancer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(research-completed ri-plate-barding)
		(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-blast-furnace)
		(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
	(or
		(research-completed ri-elite-steppe-lancer)
		(up-compare-const ELITE-STEPPE-LANCER-AVAILABLE == NO))
	=>
	(set-goal g-steppe-lancer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined CUMANS-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-steppe-lancer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-steppe-lancer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else

		(defrule
		(current-age == imperial-age)
		(goal g-steppe-lancer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-steppe-lancer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined TATARS-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-steppe-lancer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-steppe-lancer-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else

		(defrule
		(current-age == imperial-age)
		(goal g-steppe-lancer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-steppe-lancer-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-steppe-lancer 0)
	=>
	(set-goal g-steppe-lancer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-steppe-lancer 0)
	=>
	(set-goal g-steppe-lancer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-steppe-lancer 0)
	=>
	(set-goal g-steppe-lancer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;---------------------------------------
;	GOAL: g-unique-unit-tech-progress
;---------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-unique-unit-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-unique-unit-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	#load-if-defined AZTEC-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required/Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BERBERS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-ballistics)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		;(research-completed ri-parthian-tactics)
		(research-completed my-unique-research)
		(research-completed my-second-unique-research)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BRITON-CIV
		
		;Required/Priority Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		;(up-research-status c: ri-thumb-ring >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required/Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		; (research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BULGARIANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		(research-completed ri-forging)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-barding)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BURGUNDIANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BURMESE-CIV
		
		;Required/Priority Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-compare-goal g-unique-unit-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-padded-archer-armor)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		(research-completed ri-parthian-tactics)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BYZANTINE-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-forging)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined CELTIC-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined CHINESE-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		(research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined CUMANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-ballistics)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		;(research-completed ri-bracer)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-parthian-tactics)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined ETHIOPIAN-CIV
		
		;Required/Priority Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined FRANKISH-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required/Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined GOTHIC-CIV

		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(research-completed my-unique-research)	;Anarchy
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		;(research-completed ri-plate-mail)
		(research-completed my-second-unique-research)	;Perfusion
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined HUN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		(research-completed ri-forging)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined INCAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined INDIAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-ballistics)
		(research-completed ri-bracer)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-parthian-tactics)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined ITALIAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		(research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined JAPANESE-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined KHMER-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-scale-barding)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-bloodlines)
		(research-completed ri-plate-barding)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined KOREAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		(up-research-status c: ri-thumb-ring >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		;(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-ballistics)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined LITHUANIANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MAGYAR-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-barding)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MALAY-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MALIAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MAYAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		(research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MONGOL-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-ballistics)
		(research-completed ri-bracer)
		(research-completed ri-parthian-tactics)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined PERSIAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-bloodlines)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-barding)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined PORTUGUESE-CIV
		
		;Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < ALL-CASTLE-COMPLETE)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-siege-engineers)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined SARACEN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-forging)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-bloodlines)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined SICILIANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-scale-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined SLAVIC-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined SPANISH-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-padded-archer-armor)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined TATARS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined TEUTONIC-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-scale-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined TURKISH-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < ALL-CASTLE-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(up-research-status c: ri-ring-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined VIETNAMESE-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		(research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined VIKING-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-unique-unit 0)
	=>
	(set-goal g-unique-unit-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-unique-unit 0)
	=>
	(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-unique-unit 0)
	=>
	(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;----------------------------------------------
;	GOAL: g-second-unique-unit-tech-progress
;----------------------------------------------

	#load-if-defined INCAN-CIV

		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-second-unique-unit-tech-progress < REQUIRED-CASTLE-COMPLETE)
		=>
		(set-goal g-second-unique-unit-tech-progress REQUIRED-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-second-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-second-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-second-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-second-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-second-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-ballistics >= research-pending)
		(or
			(up-research-status c: ri-leather-archer-armor >= research-pending)
			(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
		=>
		(set-goal g-second-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
			
		(defrule
		(current-age == imperial-age)
		(up-compare-goal g-second-unique-unit-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-second-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)
			
		(defrule
		(current-age == imperial-age)
		(goal g-second-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(up-research-status c: ri-ballistics >= research-pending)
		(or
			(up-research-status c: ri-leather-archer-armor >= research-pending)
			(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
		(or
			(research-completed ri-bracer)
			(up-compare-const BRACER-AVAILABLE == NO))
		=>
		(set-goal g-second-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-second-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-ring-archer-armor)
			(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
		(research-completed my-second-unique-research)
		=>
		(set-goal g-second-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		(defrule
		(current-age == imperial-age)
		(goal g-second-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-second-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BURGUNDIANS-CIV

		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-second-unique-unit-tech-progress < REQUIRED-CASTLE-COMPLETE)
		=>
		(set-goal g-second-unique-unit-tech-progress REQUIRED-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-second-unique-unit-tech-progress REQUIRED-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-mail >= research-pending)
		=>
		(set-goal g-second-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-second-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(or
			(up-research-status c: ri-chain-mail >= research-pending)
			(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
		=>
		(set-goal g-second-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-second-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-second-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
			
		(defrule
		(current-age == imperial-age)
		(up-compare-goal g-second-unique-unit-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
		(up-research-status c: ri-scale-mail >= research-pending)
		(or
			(up-research-status c: ri-chain-mail >= research-pending)
			(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-second-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)
			
		(defrule
		(current-age == imperial-age)
		(goal g-second-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(or
			(research-completed ri-plate-mail)
			(up-compare-const PLATE-MAIL-ARMOR-AVAILABLE == NO))
		=>
		(set-goal g-second-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
				
		(defrule
		(current-age == imperial-age)
		(goal g-second-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-second-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined GURJARAS-CIV

		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-knight-tech-progress < REQUIRED-CASTLE-COMPLETE)
		=>
		(set-goal g-knight-tech-progress REQUIRED-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-knight-tech-progress REQUIRED-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		=>
		(set-goal g-knight-tech-progress PRIORITY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-knight-tech-progress PRIORITY-CASTLE-COMPLETE)
		(or
			(up-research-status c: ri-chain-barding >= research-pending)
			(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
		(or
			(up-research-status c: ri-bloodlines >= research-pending)
			(up-compare-const BLOODLINES-AVAILABLE == NO))
		=>
		(set-goal g-knight-tech-progress SECONDARY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-knight-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-knight-tech-progress ALL-CASTLE-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(up-compare-goal g-knight-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
		(or
			(up-research-status c: ri-cavalier >= research-pending)
			(up-compare-const CAVALIER-AVAILABLE == NO))
		(up-research-status c: ri-scale-barding >= research-pending)
		(or
			(up-research-status c: ri-chain-barding >= research-pending)
			(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-knight-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-knight-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(or
			(up-research-status c: ri-bloodlines >= research-pending)
			(up-compare-const BLOODLINES-AVAILABLE == NO))
		(up-research-status c: ri-iron-casting >= research-pending)
		(or
			(research-completed ri-plate-barding)
			(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
		=>
		(set-goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		(or
			(research-completed ri-paladin)
			(or
				(up-compare-const PALADIN-AVAILABLE == NO)
				(up-players-in-game ally <= 1)))	;we are alone
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-knight-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-not-defined BURGUNDIANS-CIV
	#load-if-not-defined GURJARAS-CIV
	#load-if-not-defined INCAN-CIV

		(defrule
		(current-age == feudal-age)
		(goal g-desired-num-second-unique-unit 0)
		=>
		(set-goal g-unique-unit-tech-progress ALL-FEUDAL-COMPLETE)
		)

		(defrule
		(current-age == castle-age)
		(goal g-desired-num-second-unique-unit 0)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-desired-num-second-unique-unit 0)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if
	#end-if
	#end-if

;----------------------------------------
;	GOAL: g-primary-unit-tech-progress
;----------------------------------------

	(defrule
	(goal g-primary-unit militiaman)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-militia-tech-progress)
	)

	(defrule
	(goal g-primary-unit spearman)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-spearman-tech-progress)
	)

	(defrule
	(goal g-primary-unit eagle-warrior)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-eagle-warrior-tech-progress)
	)

	(defrule
	(goal g-primary-unit condottiero)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-condottiero-tech-progress)
	)

	(defrule
	(goal g-primary-unit archer)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-archer-tech-progress)
	)

	(defrule
	(goal g-primary-unit skirmisher)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-skirmisher-tech-progress)
	)

	(defrule
	(goal g-primary-unit cavalry-archer)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-cavalry-archer-tech-progress)
	)

	(defrule
	(goal g-primary-unit hand-cannoneer)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-hand-cannoneer-tech-progress)
	)

	(defrule
	(goal g-primary-unit genitour)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-genitour-tech-progress)
	)

	(defrule
	(goal g-primary-unit scout-cavalry)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-scout-cavalry-tech-progress)
	)

	(defrule
	(goal g-primary-unit knight)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-knight-tech-progress)
	)

	(defrule
	(goal g-primary-unit camel)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-camel-tech-progress)
	)

	(defrule
	(goal g-primary-unit battle-elephant)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-battle-elephant-tech-progress)
	)

	(defrule
	(goal g-primary-unit steppe-lancer)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-steppe-lancer-tech-progress)
	)

	(defrule
	(goal g-primary-unit my-unique-unit)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-unique-unit-tech-progress)
	)

	(defrule
	(goal g-primary-unit my-second-unique-unit)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-second-unique-unit-tech-progress)
	)

	(defrule
	(goal g-primary-unit 0)
	(current-age == feudal-age)
	=>
	(set-goal g-primary-unit-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(goal g-primary-unit 0)
	(current-age == castle-age)
	=>
	(set-goal g-primary-unit-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(goal g-primary-unit 0)
	(current-age == imperial-age)
	=>
	(set-goal g-primary-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;----------------------------------------
;	GOAL: g-support-unit-tech-progress
;----------------------------------------

	(defrule
	(goal g-support-unit militiaman)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-militia-tech-progress)
	)

	(defrule
	(goal g-support-unit spearman)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-spearman-tech-progress)
	)

	(defrule
	(goal g-support-unit eagle-warrior)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-eagle-warrior-tech-progress)
	)

	(defrule
	(goal g-support-unit condottiero)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-condottiero-tech-progress)
	)

	(defrule
	(goal g-support-unit archer)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-archer-tech-progress)
	)

	(defrule
	(goal g-support-unit skirmisher)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-skirmisher-tech-progress)
	)

	(defrule
	(goal g-support-unit cavalry-archer)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-cavalry-archer-tech-progress)
	)

	(defrule
	(goal g-support-unit hand-cannoneer)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-hand-cannoneer-tech-progress)
	)

	(defrule
	(goal g-support-unit genitour)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-genitour-tech-progress)
	)

	(defrule
	(goal g-support-unit scout-cavalry)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-scout-cavalry-tech-progress)
	)

	(defrule
	(goal g-support-unit knight)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-knight-tech-progress)
	)

	(defrule
	(goal g-support-unit camel)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-camel-tech-progress)
	)

	(defrule
	(goal g-support-unit battle-elephant)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-battle-elephant-tech-progress)
	)

	(defrule
	(goal g-support-unit steppe-lancer)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-steppe-lancer-tech-progress)
	)

	(defrule
	(goal g-support-unit my-unique-unit)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-unique-unit-tech-progress)
	)

	(defrule
	(goal g-support-unit my-second-unique-unit)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-second-unique-unit-tech-progress)
	)

	(defrule
	(goal g-support-unit 0)
	(current-age == feudal-age)
	=>
	(set-goal g-support-unit-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(goal g-support-unit 0)
	(current-age == castle-age)
	=>
	(set-goal g-support-unit-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(goal g-support-unit 0)
	(current-age == imperial-age)
	=>
	(set-goal g-support-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;------------------------------
;	GOAL: g-min-military-pop
;------------------------------

	(defrule
	(up-compare-goal g-min-military-pop != 0)
	=>
	(set-goal g-min-military-pop 0)
	)

	(defrule
	(goal g-game-focus REBUILD)
	(up-compare-goal g-min-military-pop > 0)
	=>
	(set-goal g-min-military-pop 0)
	)

	(defrule
	(up-compare-goal g-game-focus != REBUILD)
	(current-age == feudal-age)
	(up-compare-goal g-current-strategy != FC-KRUSH)
	(up-compare-goal g-current-strategy != FC-CRUSH)
	(up-compare-goal g-current-strategy != FC-DEMON)
	(up-compare-goal g-current-strategy != FC-CASTLE-DROP)
	(up-compare-goal g-current-strategy != BOOMC-KNIGHTS)
	(up-compare-goal g-current-strategy != BOOMC-CAMELS)
	=>
	(set-goal g-min-military-pop 6)
	)

	(defrule
	(current-age >= castle-age)
	(or
		(goal g-age-status EARLY-CASTLE)
		(goal g-game-focus BOOM))
	(or
		(goal g-primary-unit knight)
		(or
			(goal g-primary-unit camel)
			(goal g-primary-unit battle-elephant)))
	(up-compare-goal g-game-focus != REBUILD)
	=>
	(set-goal g-min-military-pop 6)
	)

	(defrule
	(or
		(goal g-age-status EARLY-CASTLE)
		(goal g-game-focus BOOM))
	(up-compare-goal g-primary-unit != knight)
	(up-compare-goal g-primary-unit != camel)
	(up-compare-goal g-primary-unit != battle-elephant)
	(up-compare-goal g-game-focus != REBUILD)
	=>
	(set-goal g-min-military-pop 9)
	)

	(defrule
	(current-age == castle-age)
	(up-compare-goal g-age-status >= MID-CASTLE)
	(up-compare-goal g-game-focus != REBUILD)
	(up-compare-goal g-game-focus != BOOM)
	=>
	(set-goal g-min-military-pop 12)
	)

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-game-focus != REBUILD)
	=>
	(set-goal g-min-military-pop 16)
	)

;----------------------------------------------------
;	GOAL: g-current-age-primary-unit-tech-progress
;----------------------------------------------------

	(defrule
	(true)
	=>
	(set-goal g-current-age-primary-unit-tech-progress INCOMPLETE)
	)

	(defrule
	(up-compare-goal g-age-status < TO-FEUDAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress REQUIRED-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-primary-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress PRIORITY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-primary-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-primary-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress ALL-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-primary-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress ALL-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress ALL-COMPLETE)
	)
	
;----------------------------------------------------
;	GOAL: g-current-age-support-unit-tech-progress
;----------------------------------------------------

	(defrule
	(true)
	=>
	(set-goal g-current-age-support-unit-tech-progress INCOMPLETE)
	)

	(defrule
	(up-compare-goal g-age-status < TO-FEUDAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress REQUIRED-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-support-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress PRIORITY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-support-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-support-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress ALL-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-support-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress ALL-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress ALL-COMPLETE)
	)

;-------------------------------------------
;	GOAL: g-current-age-eco-tech-progress
;-------------------------------------------

	(defrule
	(true)
	=>
	(set-goal g-current-age-eco-tech-progress INCOMPLETE)
	)

	(defrule
	(up-compare-goal g-age-status < TO-FEUDAL)
	=>
	(set-goal g-current-age-eco-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress REQUIRED-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-eco-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress PRIORITY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-eco-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-eco-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress ALL-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-eco-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress ALL-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress ALL-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress ALL-COMPLETE)
	)

;-------------------------------
;	GOAL: g-villager-training
;-------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(up-compare-goal g-villager-training != TRAIN-WITH-ESCROW)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	=>
	(set-goal g-villager-training TRAIN-WITH-ESCROW)
	)

	(defrule
	(up-compare-goal g-villager-training != LIMITED-TRAIN-WITH-ESCROW)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(goal g-game-focus DEFENSIVE)
	(military-population g:< g-min-military-pop)
	(or
		(up-compare-goal g-desired-num-infantry > 0)
		(up-compare-goal g-desired-num-cavalry > 0))
	(up-pending-objects c: villager >= 2)
	=>
	(set-goal g-villager-training LIMITED-TRAIN-WITH-ESCROW)
	)
	(defrule
	(up-compare-goal g-villager-training != LIMITED-TRAIN-WITH-ESCROW)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(goal g-game-focus DEFENSIVE)
	(military-population g:< g-min-military-pop)
	(or
		(up-compare-goal g-desired-num-genitour > 0)
		(or
			(up-compare-goal g-desired-num-skirmisher > 0)
			(up-compare-goal g-desired-num-hand-cannoneers > 0)))
	(up-pending-objects c: villager >= 2)
	=>
	(set-goal g-villager-training LIMITED-TRAIN-WITH-ESCROW)
	)
	#load-if-defined INCAN-CIV
	(defrule
	(up-compare-goal g-villager-training != LIMITED-TRAIN-WITH-ESCROW)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(goal g-game-focus DEFENSIVE)
	(military-population g:< g-min-military-pop)
	(up-compare-goal g-desired-num-second-unique-unit > 0)
	(up-pending-objects c: villager >= 2)
	=>
	(set-goal g-villager-training LIMITED-TRAIN-WITH-ESCROW)
	)
	#end-if

	;Stop training villagers if close to required vils when going fast castle
	(defrule
	(goal g-age-status SAVE-FOR-CASTLE)
	(goal g-strategy-type FAST-CASTLE)
	(up-compare-goal g-villager-training != OFF)
	(current-age-time >= 45)
	(building-type-count-total blacksmith > 0)
	(or
		(building-type-count-total market > 0)
		(or
			(building-type-count-total archery-range > 0)
			(building-type-count-total stable > 0)))
	=>
	(set-goal g-villager-training OFF)
	)

	(defrule
	(goal g-age-status SAVE-FOR-CASTLE)
	(goal g-strategy-type FAST-CASTLE)
	(up-compare-goal g-villager-training != OFF)
	(up-compare-goal g-game-focus != DEFENSIVE)
	(up-compare-goal g-game-focus != REBUILD)
	(goal g-strategy-type FAST-CASTLE)
	(or
		(and
			(goal g-current-strategy FC-EAGLES-REVENGE)
			(up-compare-const EAGLE-SCOUT-AVAILABLE == YES))
		(goal g-current-strategy FC-STRONGBOW))		
	(up-modify-goal g-temp g:= g-required-num-villager)
	(up-modify-goal g-temp c:+ 2)
	(up-object-type-count c: villager g:>= g-temp)
	=>
	(set-goal g-villager-training OFF)
	)

	;Stop training villagers if we are close to researching Feudal age
	(defrule
	(goal g-age-status SAVE-FOR-FEUDAL)
	(up-compare-goal g-villager-training != OFF)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(up-object-type-count-total c: villager g:>= g-required-num-villager)
	=>
	(up-setup-cost-data 1 g-food-cost)
	(up-add-research-cost c: feudal-age c: 1)
	)

	(defrule
	(goal g-age-status SAVE-FOR-FEUDAL)
	(up-compare-goal g-villager-training != OFF)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(up-object-type-count-total c: villager g:>= g-required-num-villager)
	(up-modify-goal g-temp g:= g-food-cost)
	(up-modify-goal g-temp c:- 50)
	(food-amount g:>= g-temp)	;usually 450 food
	(up-modify-goal g-temp2 g:= g-food-cost)
	(up-modify-goal g-temp2 c:+ 50)
	(food-amount g:< g-temp2)	;usually 550 food
	=>
	(set-goal g-villager-training OFF)
	)

	;Stop training villagers if we are close to researching Castle age
	(defrule
	(goal g-age-status SAVE-FOR-CASTLE)
	(up-compare-goal g-villager-training != OFF)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(up-object-type-count-total c: villager g:>= g-required-num-villager)
	=>
	(up-setup-cost-data 1 g-food-cost)
	(up-add-research-cost c: castle-age c: 1)
	)

	(defrule
	(goal g-age-status SAVE-FOR-CASTLE)
	(up-compare-goal g-villager-training != OFF)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(up-object-type-count-total c: villager g:>= g-required-num-villager)
	(up-modify-goal g-temp g:= g-food-cost)
	(up-modify-goal g-temp c:- 100)
	(food-amount g:>= g-temp)			;usually 700 food
	(up-modify-goal g-temp2 g:= g-gold-cost)
	(up-modify-goal g-temp2 c:- 20)
	(gold-amount g:>= g-temp2)			;usually 180 gold
	(up-modify-goal g-temp3 g:= g-food-cost)
	(up-modify-goal g-temp3 c:+ 50)
	(food-amount g:< g-temp3)			;usually 850 food
	=>
	(set-goal g-villager-training OFF)
	)

	;Stop training villagers if we are close to researching Imperial age
	(defrule
	(goal g-age-status SAVE-FOR-IMPERIAL)
	(up-compare-goal g-villager-training != OFF)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(up-object-type-count-total c: villager g:>= g-required-num-villager)
	=>
	(up-setup-cost-data 1 g-food-cost)
	(up-add-research-cost c: imperial-age c: 1)
	)

	(defrule
	(goal g-age-status SAVE-FOR-IMPERIAL)
	(up-compare-goal g-villager-training != OFF)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(up-object-type-count-total c: villager g:>= g-required-num-villager)
	(up-modify-goal g-temp g:= g-food-cost)
	(up-modify-goal g-temp c:- 150)
	(food-amount g:>= g-temp)			;usually 850 food
	(up-modify-goal g-temp2 g:= g-gold-cost)
	(up-modify-goal g-temp2 c:- 100)
	(gold-amount g:>= g-temp2)			;usually 700 gold
	(up-modify-goal g-temp3 g:= g-food-cost)
	(up-modify-goal g-temp3 c:+ 50)
	(food-amount g:< g-temp3)			;usually 1050 food
	=>
	(set-goal g-villager-training OFF)
	)

	;Slow down villager training if saving for Imperial
	(defrule
	(goal g-age-status SAVE-FOR-IMPERIAL)
	(up-compare-goal g-villager-training != OFF)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(up-object-type-count-total c: villager g:>= g-required-num-villager)
	(food-amount >= 400)
	(up-pending-objects c: villager >= 1)
	(or
		(food-amount >= 700)
		(up-pending-objects c: villager >= 2))
	=>
	(set-goal g-villager-training OFF)
	)

	(defrule
	(goal g-age-status SAVE-FOR-IMPERIAL)
	(up-compare-goal g-villager-training != OFF)
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(goal g-target-age-parity WE-ARE-BEHIND)
	(up-pending-objects c: villager >= 1)
	=>
	(set-goal g-villager-training OFF)
	)

	;Stop training villagers if over our desired amount
	(defrule
	(up-compare-goal g-villager-training != OFF)
	(up-object-type-count-total c: villager g:>= g-desired-num-villager)
	=>
	(set-goal g-villager-training OFF)
	)

;--------------------------------------------
;	GOAL: g-current-farming-gathering-rate
;--------------------------------------------

	;constants are defined in Game Stats.per

	(defrule
	(true)
	=>
	(set-goal g-current-farming-gathering-rate FARM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	=>
	(set-goal g-current-farming-gathering-rate FARM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	=>
	(set-goal g-current-farming-gathering-rate FARM-CART-RATE)
	(disable-self)
	)

;-----------------------------------------
;	GOAL: g-current-wood-gathering-rate
;-----------------------------------------

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(up-research-status c: ri-double-bit-axe != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(up-research-status c: ri-double-bit-axe != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(up-research-status c: ri-double-bit-axe != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-double-bit-axe)
	(up-research-status c: ri-bow-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-DBA-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-double-bit-axe)
	(up-research-status c: ri-bow-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-DBA-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-double-bit-axe)
	(up-research-status c: ri-bow-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-DBA-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-bow-saw)
	(up-research-status c: ri-two-man-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-BS-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-bow-saw)
	(up-research-status c: ri-two-man-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-BS-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-bow-saw)
	(up-research-status c: ri-two-man-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-BS-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-two-man-saw)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-TMS-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-two-man-saw)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-TMS-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-two-man-saw)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-TMS-CART-RATE)
	(disable-self)
	)

;------------------------------------------
;	GOAL: g-current-stone-gathering-rate
;------------------------------------------

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(up-research-status c: ri-stone-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(up-research-status c: ri-stone-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(up-research-status c: ri-stone-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-stone-mining)
	(up-research-status c: ri-stone-shaft-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-stone-mining)
	(up-research-status c: ri-stone-shaft-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-stone-mining)
	(up-research-status c: ri-stone-shaft-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SM-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-stone-shaft-mining)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SSM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-stone-shaft-mining)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SSM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-stone-shaft-mining)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SSM-CART-RATE)
	(disable-self)
	)

;-----------------------------------------
;	GOAL: g-current-gold-gathering-rate
;-----------------------------------------

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(up-research-status c: ri-gold-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(up-research-status c: ri-gold-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(up-research-status c: ri-gold-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-gold-mining)
	(up-research-status c: ri-gold-shaft-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-gold-mining)
	(up-research-status c: ri-gold-shaft-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-gold-mining)
	(up-research-status c: ri-gold-shaft-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GM-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-gold-shaft-mining)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GSM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-gold-shaft-mining)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GSM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-gold-shaft-mining)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GSM-CART-RATE)
	(disable-self)
	)

;---------------------------------
;	GOAL: g-id-loop-max-objects
;---------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(game-time > 3)
	(game-time < 10)
	=>
	(up-modify-goal g-loop-counter g:= g-id-loop-max-objects)
	(up-modify-goal g-loop-counter c:+ 100)
	(disable-self)
	)

		(defrule
		(game-time > 3)
		(game-time < 10)
		(up-set-target-by-id g: g-loop-counter)
		=>
		(up-modify-goal g-loop-counter c:+ 100)
		(up-modify-goal g-id-loop-max-objects g:= g-loop-counter)
		; (up-chat-data-to-all "Max Objects on map at start: %d" g: g-id-loop-max-objects)
		(up-jump-rule 1)
		)

		(defrule
		(game-time > 3)
		(game-time < 10)
		(up-compare-goal g-loop-counter > 0)
		=>
		(up-modify-goal g-loop-counter c:- 1)
		(up-jump-rule -2)
		)

	(defrule
	(timer-triggered t-10-sec)
	=>
	(up-modify-goal g-loop-counter g:= g-id-loop-max-objects)
	(up-modify-goal g-loop-counter c:+ 100)
	(up-modify-goal g-temp g:= g-id-loop-max-objects)
	(up-modify-goal g-temp c:- 100)
	)

		(defrule
		(timer-triggered t-10-sec)
		(up-set-target-by-id g: g-loop-counter)
		=>
		(up-modify-goal g-loop-counter c:+ 100)
		(up-modify-goal g-id-loop-max-objects g:= g-loop-counter)
		; (up-chat-data-to-all "Max Objects on map to search through: %d" g: g-id-loop-max-objects)
		(up-jump-rule 1)
		)

		(defrule
		(timer-triggered t-10-sec)
		(up-modify-goal g-loop-counter c:- 1)
		(up-compare-goal g-loop-counter g:> g-temp)
		=>
		(up-jump-rule -2)
		)

;--------------------------------------
;	GOAL: g-total-decaying-hunt-food
;--------------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(dropsite-min-distance hunting < 10)
	(building-type-count town-center > 0)
	=>
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(up-filter-distance c: -1 c: 12)
	(up-filter-status c: status-gather c: list-inactive)
	(up-find-resource c: boar-class c: 20)
	(up-find-resource c: deer-class c: 20)
	(up-filter-status c: status-gather c: list-active)	;just in case the decaying animals are in list-active instead (they shouldn't be)
	(up-find-resource c: boar-class c: 20)
	(up-find-resource c: deer-class c: 20)
	(up-remove-objects search-remote object-data-carry <= 0)
	(up-clean-search search-remote -1 search-order-asc)	;remove duplicates
	(set-goal g-loop-counter 0)
	(set-goal g-total-decaying-hunt-food 0)
	)

		(defrule
		(dropsite-min-distance hunting < 10)
		(building-type-count town-center > 0)
		(up-set-target-object search-remote g: g-loop-counter)
		(up-compare-goal g-loop-counter < 20)
		(up-object-data object-data-class == boar-class)
		(up-get-object-data object-data-carry g-temp)
		=>
		(up-modify-goal g-total-decaying-hunt-food g:+ g-temp)
		(up-modify-goal g-loop-counter c:+ 1)
		(up-jump-rule -1)
		)

		(defrule
		(dropsite-min-distance hunting < 10)
		(building-type-count town-center > 0)
		(up-set-target-object search-remote g: g-loop-counter)
		(up-compare-goal g-loop-counter < 20)
		(up-object-data object-data-class == deer-class)
		(up-get-object-data object-data-carry g-temp)
		(up-modify-goal g-temp c:/ 3)
		=>
		(up-modify-goal g-total-decaying-hunt-food g:+ g-temp)
		(up-modify-goal g-loop-counter c:+ 1)
		(up-jump-rule -2)
		)

	(defrule
	(dropsite-min-distance hunting > 6)
	(up-compare-goal g-total-decaying-hunt-food != 0)
	=>
	(set-goal g-total-decaying-hunt-food 0)
	)

;--------------------------------------
;	GOALS: Recent Resources Gathered 
;--------------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;Track how many resources are gathered in 120 seconds
	(defrule
	(timer-triggered t-60-sec)
	=>
	(up-modify-goal g-temp g:= g-total-food-gathered)
	(up-get-fact resource-amount amount-food-total g-total-food-gathered)
	(up-modify-goal g-total-food-gathered g:- g-total-food-bought)
	; (up-get-fact-sum any-ally players-tribute food g-temp2)
	; (up-modify-goal g-total-food-gathered g:+ g-temp2)
	(up-modify-goal g-recent-food-gathered g:= g-total-food-gathered)
	(up-modify-goal g-recent-food-gathered g:- g-temp)
	(up-modify-goal g-temp g:= g-total-wood-gathered)
	(up-get-fact resource-amount amount-wood-total g-total-wood-gathered)
	(up-modify-goal g-total-wood-gathered g:- g-total-wood-bought)
	; (up-get-fact-sum any-ally players-tribute wood g-temp2)
	; (up-modify-goal g-total-wood-gathered g:+ g-temp2)
	(up-modify-goal g-recent-wood-gathered g:= g-total-wood-gathered)
	(up-modify-goal g-recent-wood-gathered g:- g-temp)
	)

	(defrule
	(timer-triggered t-60-sec)
	=>
	(up-modify-goal g-temp g:= g-total-stone-gathered)
	(up-get-fact resource-amount amount-stone-total g-total-stone-gathered)
	(up-modify-goal g-total-stone-gathered g:- g-total-stone-bought)
	; (up-get-fact-sum any-ally players-tribute stone g-temp2)
	; (up-modify-goal g-total-stone-gathered g:+ g-temp2)
	(up-modify-goal g-recent-stone-gathered g:= g-total-stone-gathered)
	(up-modify-goal g-recent-stone-gathered g:- g-temp)
	(up-modify-goal g-temp g:= g-total-gold-gathered)
	(up-get-fact resource-amount amount-gold-total g-total-gold-gathered)
	(up-modify-goal g-total-gold-gathered g:- g-total-gold-bought)
	; (up-get-fact-sum any-ally players-tribute gold g-temp2)
	; (up-modify-goal g-total-gold-gathered g:+ g-temp2)
	(up-modify-goal g-recent-gold-gathered g:= g-total-gold-gathered)
	(up-modify-goal g-recent-gold-gathered g:- g-temp)
	; (up-chat-data-to-all "Recent gold: %d" g: g-recent-gold-gathered)
	)

;--------------------------------
;	GOAL: g-barracks-next-unit
;--------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count barracks > 0)
	=>
	(set-goal g-barracks-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count barracks > 0)
	(up-object-type-count-total c: militiaman-line g:< g-desired-num-militia)
	=>
	(set-goal g-barracks-next-unit militiaman-line)
	(up-get-fact unit-type-count-total militiaman-line g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-militia)
	)
	
	(defrule
	(building-type-count barracks > 0)
	(up-object-type-count-total c: spearman-line g:< g-desired-num-spearman)
	(up-get-fact unit-type-count-total spearman-line g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-spearman)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-barracks-next-unit spearman-line)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count barracks > 0)
	(up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
	(up-modify-goal g-temp2 g:= g-eagle-scout-line)
	(up-modify-goal g-temp2 g:%/ g-desired-num-eagle-warrior)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-barracks-next-unit eagle-warrior)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count barracks > 0)
	(up-object-type-count-total c: condottiero g:< g-desired-num-condottiero)
	(up-get-fact unit-type-count-total condottiero g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-condottiero)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-barracks-next-unit condottiero-placeholder)
	(up-modify-goal g-temp g:= g-temp2)
	)

	#load-if-defined GOTHIC-CIV
	
		(defrule
		(research-completed my-unique-research) ;Anarchy
		(building-type-count barracks > 0)
		(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
		(up-modify-goal g-temp2 g:= g-unique-unit-line)
		(up-modify-goal g-temp2 g:%/ g-desired-num-unique-unit)
		(up-compare-goal g-temp2 g:< g-temp)
		=>
		(set-goal g-barracks-next-unit barracks-huskarl)
		(up-modify-goal g-temp g:= g-temp2)
		)

	#end-if

;-------------------------------------
;	GOAL: g-archery-range-next-unit
;-------------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count archery-range > 0)
	=>
	(set-goal g-archery-range-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count archery-range > 0)
	(up-object-type-count-total c: archer-line g:< g-desired-num-archer)
	=>
	(set-goal g-archery-range-next-unit archer-line)
	(up-get-fact unit-type-count-total archer-line g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-archer)
	)
	
	(defrule
	(building-type-count archery-range > 0)
	(up-compare-goal g-skirmisher-line g:< g-desired-num-skirmisher)
	(up-modify-goal g-temp2 g:= g-skirmisher-line)
	(up-modify-goal g-temp2 g:%/ g-desired-num-skirmisher)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-archery-range-next-unit skirmisher)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count archery-range > 0)
	(up-object-type-count-total c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
	(up-get-fact unit-type-count-total cavalry-archer-line g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-cavalry-archer)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-archery-range-next-unit cavalry-archer-line)
	(up-modify-goal g-temp g:= g-temp2)
	)

	#load-if-defined DE-AVAILABLE
	
		(defrule
		(building-type-count archery-range > 0)
		(up-object-type-count-total c: elephant-archer-line g:< g-desired-num-elephant-archer)
		(up-get-fact unit-type-count-total elephant-archer-line g-temp2)
		(up-modify-goal g-temp2 g:%/ g-desired-num-elephant-archer)
		(up-compare-goal g-temp2 g:< g-temp)
		=>
		(set-goal g-archery-range-next-unit elephant-archer-line)
		(up-modify-goal g-temp g:= g-temp2)
		)

	#end-if
	
	(defrule
	(building-type-count archery-range > 0)
	(up-object-type-count-total c: hand-cannoneer g:< g-desired-num-hand-cannoneer)
	(up-get-fact unit-type-count-total hand-cannoneer g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-hand-cannoneer)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-archery-range-next-unit hand-cannoneer)
	(up-modify-goal g-temp g:= g-temp2)
	)

	#load-if-defined INCAN-CIV
	
		(defrule
		(building-type-count archery-range > 0)
		(up-object-type-count-total c: slinger g:< g-desired-num-second-unique-unit)
		(up-get-fact unit-type-count-total slinger g-temp2)
		(up-modify-goal g-temp2 g:%/ g-desired-num-second-unique-unit)
		(up-compare-goal g-temp2 g:< g-temp)
		=>
		(set-goal g-archery-range-next-unit slinger)
		(up-modify-goal g-temp g:= g-temp2)
		)

	#end-if
	
	(defrule
	(building-type-count archery-range > 0)
	(up-compare-goal g-genitour-line g:< g-desired-num-genitour)
	(up-modify-goal g-temp2 g:= g-genitour-line)
	(up-modify-goal g-temp2 g:%/ g-desired-num-genitour)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-archery-range-next-unit genitour-placeholder)
	(up-modify-goal g-temp g:= g-temp2)
	)

;------------------------------
;	GOAL: g-stable-next-unit
;------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count stable > 0)
	=>
	(set-goal g-stable-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count stable > 0)
	(up-object-type-count-total c: scout-cavalry-line g:< g-desired-num-scout-cavalry)
	=>
	(set-goal g-stable-next-unit scout-cavalry-line)
	(up-get-fact unit-type-count-total scout-cavalry-line g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-scout-cavalry)
	)
	
	(defrule
	(building-type-count stable > 0)
	(up-object-type-count-total c: knight-line g:< g-desired-num-knight)
	(up-get-fact unit-type-count-total knight-line g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-knight)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-stable-next-unit knight-line)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count stable > 0)
	(up-compare-goal g-camel-line g:< g-desired-num-camel)
	(up-modify-goal g-temp2 g:= g-camel-line)
	(up-modify-goal g-temp2 g:%/ g-desired-num-camel)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-stable-next-unit camel)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count stable > 0)
	(up-compare-goal g-battle-elephant-line g:< g-desired-num-battle-elephant)
	(up-modify-goal g-temp2 g:= g-battle-elephant-line)
	(up-modify-goal g-temp2 g:%/ g-desired-num-battle-elephant)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-stable-next-unit battle-elephant)
	(up-modify-goal g-temp g:= g-temp2)
	)

	#load-if-defined DE-AVAILABLE
	
		(defrule
		(building-type-count stable > 0)
		(up-object-type-count-total c: steppe-lancer-line g:< g-desired-num-steppe-lancer)
		(up-get-fact unit-type-count-total steppe-lancer-line g-temp2)
		(up-modify-goal g-temp2 g:%/ g-desired-num-steppe-lancer)
		(up-compare-goal g-temp2 g:< g-temp)
		=>
		(set-goal g-stable-next-unit steppe-lancer-line)
		(up-modify-goal g-temp g:= g-temp2)
		)

	#end-if

	#load-if-defined GURJARAS-CIV
	
		(defrule
		(building-type-count stable > 0)
		(up-object-type-count-total c: shrivamsha-rider-line g:< g-desired-num-second-unique-unit)
		(up-get-fact unit-type-count-total shrivamsha-rider-line g-temp2)
		(up-modify-goal g-temp2 g:%/ g-desired-num-second-unique-unit)
		(up-compare-goal g-temp2 g:< g-temp)
		=>
		(set-goal g-stable-next-unit shrivamsha-rider-line)
		(up-modify-goal g-temp g:= g-temp2)
		)

	#end-if

	#load-if-defined HUN-CIV
	
		(defrule
		(research-completed my-second-unique-research) ;Marauders
		(building-type-count stable > 0)
		(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
		(up-modify-goal g-temp2 g:= g-unique-unit-line)
		(up-modify-goal g-temp2 g:%/ g-desired-num-unique-unit)
		(up-compare-goal g-temp2 g:< g-temp)
		=>
		(set-goal g-stable-next-unit stable-tarkan)
		(up-modify-goal g-temp g:= g-temp2)
		)

	#end-if

;--------------------------------------
;	GOAL: g-siege-workshop-next-unit
;--------------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count siege-workshop > 0)
	=>
	(set-goal g-siege-workshop-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count siege-workshop > 0)
	(up-object-type-count-total c: battering-ram-line g:< g-desired-num-ram-type)
	=>
	(set-goal g-siege-workshop-next-unit battering-ram-line)
	(up-get-fact unit-type-count-total battering-ram-line g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-ram-type)
	)
	
	(defrule
	(building-type-count siege-workshop > 0)
	(up-compare-goal g-mangonel-line g:< g-desired-num-mangonel)
	(up-modify-goal g-temp2 g:= g-mangonel-line)
	(up-modify-goal g-temp2 g:%/ g-desired-num-mangonel)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-siege-workshop-next-unit mangonel)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count siege-workshop > 0)
	(up-object-type-count-total c: scorpion-line g:< g-desired-num-scorpion)
	(up-get-fact unit-type-count-total scorpion-line g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-scorpion)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-siege-workshop-next-unit scorpion-line)
	(up-modify-goal g-temp g:= g-temp2)
	)

	#load-if-defined DE-AVAILABLE
	
		(defrule
		(building-type-count siege-workshop > 0)
		(up-object-type-count-total c: bombard-cannon-line g:< g-desired-num-bombard-cannon)
		(up-get-fact unit-type-count-total bombard-cannon-line g-temp2)
		(up-modify-goal g-temp2 g:%/ g-desired-num-bombard-cannon)
		(up-compare-goal g-temp2 g:< g-temp)
		=>
		(set-goal g-siege-workshop-next-unit bombard-cannon)
		(up-modify-goal g-temp g:= g-temp2)
		)

	#else
	
		(defrule
		(building-type-count siege-workshop > 0)
		(up-object-type-count-total c: bombard-cannon g:< g-desired-num-bombard-cannon)
		(up-get-fact unit-type-count-total bombard-cannon g-temp2)
		(up-modify-goal g-temp2 g:%/ g-desired-num-bombard-cannon)
		(up-compare-goal g-temp2 g:< g-temp)
		=>
		(set-goal g-siege-workshop-next-unit bombard-cannon)
		(up-modify-goal g-temp g:= g-temp2)
		)

	#end-if

;----------------------------
;	GOAL: g-dock-next-unit
;----------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count dock > 0)
	=>
	(set-goal g-dock-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: fishing-ship g:< g-desired-num-fishing-ship)
	=>
	(set-goal g-dock-next-unit fishing-ship)
	(up-get-fact unit-type-count-total fishing-ship g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-fishing-ship)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: transport-ship g:< g-desired-num-transport-ship)
	(up-get-fact unit-type-count-total transport-ship g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-transport-ship)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit transport-ship)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: trade-cog g:< g-desired-num-trade-cog)
	(up-get-fact unit-type-count-total trade-cog g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-trade-cog)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit trade-cog)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: galley-line g:< g-desired-num-galley)
	(up-get-fact unit-type-count-total galley-line g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-galley)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit galley-line)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-compare-goal g-fire-galley-line g:< g-desired-num-fire-ship)
	(up-modify-goal g-temp2 g:= g-fire-galley-line)
	(up-modify-goal g-temp2 g:%/ g-desired-num-fire-ship)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit fire-ship-line)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-compare-goal g-demolition-raft-line g:< g-desired-num-demolition-ship)
	(up-modify-goal g-temp2 g:= g-demolition-raft-line)
	(up-modify-goal g-temp2 g:%/ g-desired-num-demolition-ship)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit demolition-ship-line)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: cannon-galleon-line g:< g-desired-num-cannon-galleon)
	(up-get-fact unit-type-count-total cannon-galleon-line g-temp2)
	(up-modify-goal g-temp2 g:%/ g-desired-num-cannon-galleon)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit cannon-galleon-line)
	(up-modify-goal g-temp g:= g-temp2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
	(up-modify-goal g-temp2 g:= g-unique-ship-line)
	(up-modify-goal g-temp2 g:%/ g-desired-num-unique-ship)
	(up-compare-goal g-temp2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit my-unique-ship-line)
	(up-modify-goal g-temp g:= g-temp2)
	)

;--------------------------------------------------
;				  GARRISON INSIDE
;	GOAL: g-previous-garrisonable-building-count
;--------------------------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	;g-temp = enemy military power inside town
	;g-temp2 = own military power

	;Calculate attacking army parity
	;Adjust for knights and skirmishers
	(defrule
	(true)
	=>
	(up-modify-goal g-temp g:= g-enemy-units-in-town)
	(up-get-fact unit-type-in-town knight-line g-temp3)
	(up-modify-goal g-temp3 c:/ 2)
	(up-modify-goal g-temp g:+ g-temp3)			;treat enemy knights as 1.5 soldiers
	(up-get-fact soldier-count 0 g-temp2)
	(up-get-fact unit-type-count knight-line g-temp3)
	(up-modify-goal g-temp3 c:/ 2)
	(up-modify-goal g-temp2 g:+ g-temp3)			;treat own knights as 1.5 soldiers
	)

	(defrule
	(up-compare-goal g-primary-unit != archer)
	(up-compare-goal g-primary-unit != cavalry-archer)
	(up-compare-goal g-primary-unit != hand-cannoneer)
	(up-compare-goal g-primary-unit != slinger)
	=>
	(up-get-fact unit-type-in-town skirmisher-line g-temp3)
	(up-modify-goal g-temp3 c:/ 2)
	(up-modify-goal g-temp g:- g-temp3)			;treat enemy skirmishers as 0.5 soldiers
	)

	(defrule
	(goal g-target-age-parity WE-ARE-AHEAD)
	=>
	(up-modify-goal g-temp c:/ 2)					;treat enemy as half pop if we are ahead in age
	)

	;Garrison new units inside buildings if we have small military
	(defrule
	(goal g-gather-inside NO)
	(goal g-attacking NO)
	(goal g-target-age-parity WE-ARE-AHEAD)
	(soldier-count < 3)
	=>
	(set-goal g-gather-inside YES)
	(up-gather-inside c: monastery c: 1)
	(up-gather-inside c: barracks c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: siege-workshop c: 1)
	(up-gather-inside c: castle c: 1)
	(up-jump-rule 1)
	)
		(defrule
		(goal g-gather-inside NO)
		(goal g-attacking NO)
		(up-compare-goal g-target-age-parity != WE-ARE-AHEAD)
		(soldier-count < 4)
		=>
		(set-goal g-gather-inside YES)
		(up-gather-inside c: monastery c: 1)
		(up-gather-inside c: barracks c: 1)
		(up-gather-inside c: archery-range c: 1)
		(up-gather-inside c: stable c: 1)
		(up-gather-inside c: siege-workshop c: 1)
		(up-gather-inside c: castle c: 1)
		)

	;Garrison new units inside buildings if we are attacked and outnumbered
	(defrule
	(goal g-gather-inside NO)
	(goal g-attacking NO)
	(goal g-town-under-attack YES)
	(up-compare-goal g-enemy-units-in-town >= 6)
	(soldier-count < 10)
	(up-compare-goal g-temp g:> g-temp2)	;Enemy outnumbers us
	=>
	(set-goal g-gather-inside YES)
	(up-gather-inside c: monastery c: 1)
	(up-gather-inside c: barracks c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: siege-workshop c: 1)
	(up-gather-inside c: castle c: 1)
	)
	
	;Set new buildings to also garrison units
	;Check if new garrisonable building exists, if so, set gather point
	(defrule
	(true)
	=>
	(up-get-fact building-type-count monastery g-temp3)
	(up-get-fact building-type-count barracks g-temp4)
	(up-modify-goal g-temp3 g:+ g-temp4)
	(up-get-fact building-type-count archery-range g-temp4)
	(up-modify-goal g-temp3 g:+ g-temp4)
	(up-get-fact building-type-count stable g-temp4)
	(up-modify-goal g-temp3 g:+ g-temp4)
	(up-get-fact building-type-count siege-workshop g-temp4)
	(up-modify-goal g-temp3 g:+ g-temp4)
	(up-get-fact building-type-count castle g-temp4)
	(up-modify-goal g-temp3 g:+ g-temp4)
	)

	(defrule
	(up-compare-goal g-temp3 g:!= g-previous-garrisonable-building-count)	;the number of garrisonable buildings has changed, reset gather points
	(goal g-gather-inside YES)
	=>
	(up-gather-inside c: monastery c: 1)
	(up-gather-inside c: barracks c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: siege-workshop c: 1)
	(up-gather-inside c: castle c: 1)
	)

	;Ungarrison
	(defrule
	(goal g-attacking NO)
	(soldier-count < 4)
	=>
	(up-jump-rule 2)
	)
	
	(defrule
	(goal g-attacking NO)
	(goal g-town-under-attack YES)
	(up-compare-goal g-enemy-units-in-town >= 6)
	(soldier-count < 10)
	(up-compare-goal g-temp g:> g-temp2)	;Enemy outnumbers us
	=>
	(up-jump-rule 1)
	)

		(defrule
		(goal g-gather-inside YES)
		=>
		(set-goal g-gather-inside NO)
		(up-gather-inside c: barracks c: 0)
		(up-gather-inside c: archery-range c: 0)
		(up-gather-inside c: stable c: 0)
		(up-gather-inside c: siege-workshop c: 0)
		(up-gather-inside c: castle c: 0)
		(up-gather-inside c: monastery c: 0)
		(up-ungarrison c: barracks)
		(up-ungarrison c: archery-range)
		(up-ungarrison c: stable)
		(up-ungarrison c: siege-workshop)
		(up-ungarrison c: castle)
		(up-ungarrison c: monastery)
		)
	
	; (defrule
	; (goal g-gather-inside YES)
	; (up-unit-type-in-town c: skirmisher-line >= 5)
	; (or
	; 	(unit-type-count scout-cavalry-line >= 4)
	; 	(and
	; 		(up-compare-goal g-enemy-units-in-town < 8)
	; 		(unit-type-count scout-cavalry-line >= 2)))
	; =>
	; (up-ungarrison c: stable)
	; )
	
	; (defrule
	; (goal g-gather-inside YES)
	; (up-unit-type-in-town c: skirmisher-line >= 5)
	; (or
	; 	(unit-type-count knight-line >= 4)
	; 	(and
	; 		(up-compare-goal g-enemy-units-in-town < 10)
	; 		(unit-type-count knight-line >= 2)))
	; =>
	; (up-ungarrison c: stable)
	; )

	; (defrule
	; (goal g-gather-inside YES)
	; (up-unit-type-in-town c: skirmisher-line >= 5)
	; (or
	; 	(up-compare-goal g-eagle-scout-line >= 4)
	; 	(and
	; 		(up-compare-goal g-enemy-units-in-town < 8)
	; 		(up-compare-goal g-eagle-scout-line >= 2)))
	; =>
	; (up-ungarrison c: barracks)
	; )

	; (defrule
	; (goal g-gather-inside YES)
	; (up-unit-type-in-town c: knight-line > 3)
	; (up-unit-type-in-town c: knight-line < 12)
	; (or
	; 	(unit-type-count spearman-line >= 6)
	; 	(and
	; 		(up-compare-goal g-enemy-units-in-town < 7)
	; 		(unit-type-count spearman-line >= 4)))
	; =>
	; (up-ungarrison c: barracks)
	; )

	; (defrule
	; (goal g-gather-inside YES)
	; (up-unit-type-in-town c: knight-line > 3)
	; (up-unit-type-in-town c: knight-line < 12)
	; (or
	; 	(up-compare-goal g-camel-line >= 5)
	; 	(and
	; 		(up-compare-goal g-enemy-units-in-town < 7)
	; 		(up-compare-goal g-camel-line >= 3)))
	; =>
	; (up-ungarrison c: stable)
	; )

	; #load-if-defined SARACEN-CIV

	; 	(defrule
	; 	(goal g-gather-inside YES)
	; 	(up-unit-type-in-town c: knight-line > 3)
	; 	(up-unit-type-in-town c: knight-line < 12)
	; 	(or
	; 		(up-compare-goal g-unique-unit-line >= 5)
	; 		(and
	; 			(up-compare-goal g-enemy-units-in-town < 7)
	; 			(up-compare-goal g-unique-unit-line >= 3)))
	; 	=>
	; 	(up-ungarrison c: castle)
	; 	)
		
	; #end-if

	;Re-calculate number of garrisonable buildings for next pass
	(defrule
	(true)
	=>
	(up-get-fact building-type-count monastery g-previous-garrisonable-building-count)
	(up-get-fact building-type-count barracks g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	(up-get-fact building-type-count archery-range g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	(up-get-fact building-type-count stable g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	(up-get-fact building-type-count siege-workshop g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	(up-get-fact building-type-count castle g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	)

;-------------------------------
;	GOAL: g-usable-farm-count
;-------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(building-type-count farm == 0)
	(up-compare-goal g-usable-farm-count > 0)
	=>
	(set-goal g-usable-farm-count 0)
	)

	(defrule
	(building-type-count farm > 0)
	=>
	(up-full-reset-search)
	(up-find-local c: farm c: 240)
	(set-goal g-loop-counter 0)
	(up-get-search-state g-local-total)
	(up-modify-goal g-usable-farm-count g:= g-local-total)
	)

		(defrule
		(building-type-count farm > 0)
		(up-compare-goal g-loop-counter g:< g-local-total)
		(up-set-target-object search-local g: g-loop-counter)
		=>
		(up-get-point position-object g-point-x)
		(up-set-target-point g-point-x)
		(set-strategic-number sn-focus-player-number my-player-number)
		(up-reset-search 0 0 1 1)
		(up-reset-filters)
		(up-filter-distance c: -1 c: 12)
		(up-find-remote c: town-center c: 20)
		(up-find-remote c: mill c: 20)
		(up-get-search-state g-local-total)
		)

		(defrule
		(building-type-count farm > 0)
		(up-compare-goal g-loop-counter g:< g-local-total)
		(up-set-target-object search-local g: g-loop-counter)
		(goal g-remote-total 0)
		=>
		(up-modify-goal g-usable-farm-count c:- 1)
		)

		(defrule
		(building-type-count farm > 0)
		(up-compare-goal g-loop-counter g:< g-local-total)
		(up-set-target-object search-local g: g-loop-counter)
		=>
		(up-modify-goal g-loop-counter c:+ 1)
		(up-jump-rule -3)
		)

;-------------------------------------
;	GOAL: g-usable-farm-count-total
;-------------------------------------

	(load "The General 1.2/Functions/Reset Mini")

	(defrule
	(building-type-count-total farm > 0)
	=>
	(up-get-fact building-type-count farm g-temp)
	(up-get-fact building-type-count-total farm g-temp2)
	(up-modify-goal g-temp2 g:- g-temp)
	(up-modify-goal g-usable-farm-count-total g:= g-usable-farm-count)
	(up-modify-goal g-usable-farm-count-total g:+ g-temp2)
	)

;-------------------------------------
;	GOAL: g-current-gold-camp-total
;-------------------------------------

	(load "The General 1.2/Functions/Reset Mini")
	
	(defrule
	(building-type-count-total mining-camp > 0)
	=>
	(up-full-reset-search)
	(up-find-local c: mining-camp c: 100)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: mining-camp c: 5)
	(up-clean-search search-local -1 search-order-asc)	;remove duplicates just in case
	(up-get-search-state g-local-total)
	(set-goal g-loop-counter 0)
	(set-goal g-current-gold-camp-total 0)
	)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal g-loop-counter g:< g-local-total)
		(up-set-target-object search-local g: g-loop-counter)
		=>
		(up-get-point position-object g-point-x)
		(up-set-target-point g-point-x)
		(up-reset-search 0 0 1 1)
		(up-reset-filters)
		(up-filter-distance c: -1 c: 6)
		(up-filter-status c: status-resource c: list-active)
		(up-find-resource c: gold c: 1)
		(up-get-search-state g-local-total)
		)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal g-loop-counter g:< g-local-total)
		(up-set-target-object search-local g: g-loop-counter)
		(up-compare-goal g-remote-total > 0)            ;gold mines found
		=>
		(up-modify-goal g-current-gold-camp-total c:+ 1)
		)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal g-loop-counter g:< g-local-total)
		(up-set-target-object search-local g: g-loop-counter)
		=>
		(up-modify-goal g-loop-counter c:+ 1)
		(up-jump-rule -3)
		)

;--------------------------------------
;	GOAL: g-current-stone-camp-total
;--------------------------------------

	(load "The General 1.2/Functions/Reset Mini")
	
	(defrule
	(building-type-count-total mining-camp > 0)
	=>
	(up-full-reset-search)
	(up-find-local c: mining-camp c: 100)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: mining-camp c: 5)
	(up-clean-search search-local -1 search-order-asc)	;remove duplicates just in case
	(up-get-search-state g-local-total)
	(set-goal g-loop-counter 0)
	(set-goal g-current-stone-camp-total 0)
	)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal g-loop-counter g:< g-local-total)
		(up-set-target-object search-local g: g-loop-counter)
		=>
		(up-get-point position-object g-point-x)
		(up-set-target-point g-point-x)
		(up-reset-search 0 0 1 1)
		(up-reset-filters)
		(up-filter-distance c: -1 c: 6)
		(up-filter-status c: status-resource c: list-active)
		(up-find-resource c: stone c: 1)
		(up-get-search-state g-local-total)
		)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal g-loop-counter g:< g-local-total)
		(up-set-target-object search-local g: g-loop-counter)
		(up-compare-goal g-remote-total > 0)            ;stone mines found
		=>
		(up-modify-goal g-current-stone-camp-total c:+ 1)
		)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal g-loop-counter g:< g-local-total)
		(up-set-target-object search-local g: g-loop-counter)
		=>
		(up-modify-goal g-loop-counter c:+ 1)
		(up-jump-rule -3)
		)