;Gathering.per

;=========================<>=========================
;			STATIC DESIRED GATHERER COUNTS
;=========================<>=========================

    ;Number of gatherers on each resource wanted in the future

    ;-----------
    ;   Reset
    ;-----------

        (load "The General 1.2/Functions/Reset")

        (defrule
        (true)
        =>
        (set-goal g-desired-future-food-vils 0)
        (set-goal g-desired-future-wood-vils 0)
        (set-goal g-desired-future-stone-vils 0)
        (set-goal g-desired-future-gold-vils 0)
        )

        (defrule
        (up-compare-goal g-map-style != NOMAD)
        =>
        (up-get-fact unit-type-count villager g-desired-num-food-vils)
        (disable-self)
        )

    ;----------------------
    ;   Default Dark Age
    ;----------------------

        ;VILS-FOR-LUMBER-CAMP is the villager mark when The General will try to build a lumber camp
        ;For most civs, this is 7 villagers, but Britons and Chinese are different.

        (defrule
        (goal g-map-style NOMAD)
        (or
            (building-type-count-total town-center == 0)
            (nor
                (building-type-count-total house >= 1)
                (civ-selected hun)))
        =>
        (set-goal g-desired-future-wood-vils 6)
        )

        (defrule
        (or
            (up-compare-goal g-map-style != NOMAD)
            (and
                (building-type-count-total town-center >= 1)
                (or
                    (building-type-count-total house >= 1)
                    (civ-selected hun))))
        (unit-type-count villager <= VILS-FOR-LUMBER-CAMP)          ;usually 7
        (building-type-count-total mill == 0)
        =>
        (set-goal g-desired-future-food-vils VILS-FOR-LUMBER-CAMP)  ;usually 7
        )
        (defrule
        (or
            (up-compare-goal g-map-style != NOMAD)
            (and
                (building-type-count-total town-center >= 1)
                (or
                    (building-type-count-total house >= 1)
                    (civ-selected hun))))
        (up-modify-goal g-temp c:= VILS-FOR-LUMBER-CAMP)            ;usually 7
        (up-modify-goal g-temp c:+ 1)                               ;usually 8
        (unit-type-count villager g:<= g-temp)                      ;usually 8
        (building-type-count-total mill > 0)
        =>
        (set-goal g-desired-future-food-vils VILS-FOR-LUMBER-CAMP)  ;usually 8
        )

        (defrule
        (or
            (up-compare-goal g-map-style != NOMAD)
            (and
                (building-type-count-total town-center >= 1)
                (or
                    (building-type-count-total house >= 1)
                    (civ-selected hun))))
        (up-modify-goal g-temp c:= VILS-FOR-LUMBER-CAMP)            ;usually 7
        (up-modify-goal g-temp c:+ 1)                               ;usually 8
        (unit-type-count villager g:>= g-temp)                      ;usually 8
        (unit-type-count villager <= 10)
        (up-compare-goal g-age-status < TO-CASTLE)
        (building-type-count-total mill == 0)
        =>
        (up-modify-goal g-temp c:- 2)
        (up-modify-goal g-desired-future-food-vils g:= g-temp)      ;usually 6
        (set-goal g-desired-future-wood-vils 4)
        )
        (defrule
        (or
            (up-compare-goal g-map-style != NOMAD)
            (and
                (building-type-count-total town-center >= 1)
                (or
                    (building-type-count-total house >= 1)
                    (civ-selected hun))))
        (up-modify-goal g-temp c:= VILS-FOR-LUMBER-CAMP)            ;usually 7
        (up-modify-goal g-temp c:+ 2)                               ;usually 9
        (unit-type-count villager g:>= g-temp)                      ;usually 9
        (unit-type-count villager <= 10)
        (up-compare-goal g-age-status < TO-CASTLE)
        (building-type-count-total mill > 0)
        =>
        (up-modify-goal g-temp c:- 2)
        (up-modify-goal g-desired-future-food-vils g:= g-temp)      ;usually 7
        (set-goal g-desired-future-wood-vils 3)
        )

        (defrule
        (or
            (up-compare-goal g-map-style != NOMAD)
            (and
                (building-type-count-total town-center >= 1)
                (or
                    (building-type-count-total house >= 1)
                    (civ-selected hun))))
        (up-modify-goal g-temp c:= VILS-FOR-LUMBER-CAMP)            ;usually 7
        (up-modify-goal g-temp c:+ 4)                               ;usually 11
        (unit-type-count villager g:>= g-temp)                      ;usually 11
        (unit-type-count villager <= 17)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 13)
        (set-goal g-desired-future-wood-vils 4)
        )

        (defrule
        (goal g-map-style NOMAD)
        (unit-type-count villager <= 5)
        (wood-amount < 25)
        =>
        (up-modify-goal g-desired-future-food-vils c:- 1)
        (up-modify-goal g-desired-future-wood-vils c:+ 1)
        )

        (defrule
        (goal g-map-style NOMAD)
        (unit-type-count villager >= 6)
        (unit-type-count villager <= 17)
        (or
            (wood-amount < 100)
            (building-type-count-total farm >= 3))
        =>
        (up-modify-goal g-desired-future-food-vils c:- 1)
        (up-modify-goal g-desired-future-wood-vils c:+ 1)
        )

    ;-------------------
    ;   25-vil Morley
    ;-------------------
        
        (defrule
        (goal g-current-strategy FC-MORLEY)
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 22)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 12)
        (set-goal g-desired-future-wood-vils 10)
        )

        (defrule
        (goal g-current-strategy FC-MORLEY)
        (unit-type-count villager >= 23)
        ; (unit-type-count villager <= 25)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 12)
        (set-goal g-desired-future-wood-vils 10)
        (set-goal g-desired-future-gold-vils 3)
        )

        (defrule
        (goal g-current-strategy FC-MORLEY)
        ; (unit-type-count villager >= 25)
        (goal g-age-status TO-CASTLE)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-desired-future-food-vils 12)
        (set-goal g-desired-future-wood-vils 9)
        (set-goal g-desired-future-gold-vils 4)
        )

        ;Switch to using gathering percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy FC-MORLEY)
        (unit-type-count villager >= 25)
        (unit-type-count villager <= 34)
        (current-age >= castle-age)
        =>
        (set-goal g-desired-future-food-vils 600)   
        (set-goal g-desired-future-wood-vils 240)   
        (set-goal g-desired-future-gold-vils 160)
        )

        (defrule
        (goal g-current-strategy FC-MORLEY)
        (unit-type-count villager >= 35)
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 530)   
        (set-goal g-desired-future-wood-vils 250)   
        (set-goal g-desired-future-gold-vils 220)   
        )

        (defrule
        (goal g-current-strategy FC-MORLEY)
        (unit-type-count villager >= 35)
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 490)   
        (set-goal g-desired-future-wood-vils 230)   
        (set-goal g-desired-future-gold-vils 200)   
        (set-goal g-desired-future-stone-vils 80)
        )

    ;-----------------
    ;   Castle Drop
    ;-----------------
        
        (defrule
        (goal g-current-strategy FC-CASTLE-DROP)
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 25)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 10)
        )

        (defrule
        (goal g-current-strategy FC-CASTLE-DROP)
        (unit-type-count villager >= 26)
        (unit-type-count villager <= 27)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 10)
        (set-goal g-desired-future-gold-vils 2)
        )

        (defrule
        (goal g-current-strategy FC-CASTLE-DROP)
        (unit-type-count villager >= 28)
        ; (unit-type-count villager <= 32)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 10)
        (set-goal g-desired-future-gold-vils 2)
        (set-goal g-desired-future-stone-vils 5)
        )

        ;Switch to using gathering percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy FC-CASTLE-DROP)
        (up-compare-goal g-age-status >= TO-CASTLE)
        (or
            (goal g-percent-dynamic-gathering 0)
            (up-object-type-count-total c: castle g:< g-desired-num-castle))
        =>
        (set-goal g-desired-future-food-vils 400)
        (set-goal g-desired-future-wood-vils 350)
        (set-goal g-desired-future-gold-vils 65)
        (set-goal g-desired-future-stone-vils 185)
        )

        (defrule
        (goal g-current-strategy FC-CASTLE-DROP)
        (current-age >= castle-age)
        (up-object-type-count-total c: castle g:>= g-desired-num-castle)
        (up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 490)   ;54%
        (set-goal g-desired-future-wood-vils 210)   ;23%
        (set-goal g-desired-future-gold-vils 300)   ;23%
        )

        (defrule
        (goal g-current-strategy FC-CASTLE-DROP)
        (current-age >= castle-age)
        (up-object-type-count-total c: castle g:>= g-desired-num-castle)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 450)   ;54%
        (set-goal g-desired-future-wood-vils 190)   ;23%
        (set-goal g-desired-future-gold-vils 280)   ;23%
        (set-goal g-desired-future-stone-vils 80)
        )

    ;------------------
    ;   29-vil Krush
    ;------------------
        
        (defrule
        (or
            (goal g-current-strategy FC-KRUSH)
            (goal g-current-strategy EARLYC-KNIGHTS))
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 26)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 11)
        )

        (defrule
        (or
            (goal g-current-strategy FC-KRUSH)
            (goal g-current-strategy EARLYC-KNIGHTS))
        (unit-type-count villager >= 27)
        (unit-type-count villager <= 29)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 11)
        (set-goal g-desired-future-gold-vils 3)
        )

        (defrule
        (or
            (goal g-current-strategy FC-KRUSH)
            (goal g-current-strategy EARLYC-KNIGHTS))
        (unit-type-count villager >= 30)
        ; (unit-type-count villager <= 31)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 11)
        (set-goal g-desired-future-gold-vils 5)
        )

        ;Switch to using gathering percentages (out of 1000 villagers)
        (defrule
        (or
            (goal g-current-strategy FC-KRUSH)
            (goal g-current-strategy EARLYC-KNIGHTS))
        (goal g-age-status TO-CASTLE)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-desired-future-food-vils 540)
        (set-goal g-desired-future-wood-vils 300)
        (set-goal g-desired-future-gold-vils 160)
        )

        (defrule
        (or
            (goal g-current-strategy FC-KRUSH)
            (goal g-current-strategy EARLYC-KNIGHTS))
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 490)   ;54%
        (set-goal g-desired-future-wood-vils 210)   ;23%
        (set-goal g-desired-future-gold-vils 300)   ;23%
        )

        (defrule
        (or
            (goal g-current-strategy FC-KRUSH)
            (goal g-current-strategy EARLYC-KNIGHTS))
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 450)   ;54%
        (set-goal g-desired-future-wood-vils 190)   ;23%
        (set-goal g-desired-future-gold-vils 280)   ;23%
        (set-goal g-desired-future-stone-vils 80)
        )

    ;-----------
    ;   Crush
    ;-----------
        
        (defrule
        (or
            (goal g-current-strategy FC-CRUSH)
            (goal g-current-strategy EARLYC-CAMELS))
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 26)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 11)
        )

        (defrule
        (or
            (goal g-current-strategy FC-CRUSH)
            (goal g-current-strategy EARLYC-CAMELS))
        (unit-type-count villager >= 27)
        (unit-type-count villager <= 29)
        (up-compare-goal g-age-status < EARLY-FEUDAL)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 11)
        (set-goal g-desired-future-gold-vils 3)
        )

        (defrule
        (or
            (goal g-current-strategy FC-CRUSH)
            (goal g-current-strategy EARLYC-CAMELS))
        (unit-type-count villager == 29)
        (current-age == feudal-age)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 14)
        (set-goal g-desired-future-wood-vils 9)
        (set-goal g-desired-future-gold-vils 6)
        )

        (defrule
        (or
            (goal g-current-strategy FC-CRUSH)
            (goal g-current-strategy EARLYC-CAMELS))
        (unit-type-count villager >= 30)
        ; (unit-type-count villager <= 31)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 16)
        (set-goal g-desired-future-wood-vils 9)
        (set-goal g-desired-future-gold-vils 6)
        )

        ;Switch to using gathering percentages (out of 1000 villagers)
        (defrule
        (or
            (goal g-current-strategy FC-CRUSH)
            (goal g-current-strategy EARLYC-CAMELS))
        (goal g-age-status TO-CASTLE)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-desired-future-food-vils 550)
        (set-goal g-desired-future-wood-vils 240)
        (set-goal g-desired-future-gold-vils 210)
        )

        (defrule
        (or
            (goal g-current-strategy FC-CRUSH)
            (goal g-current-strategy EARLYC-CAMELS))
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 540)   ;54%
        (set-goal g-desired-future-wood-vils 230)   ;23%
        (set-goal g-desired-future-gold-vils 230)   ;23%
        )

        (defrule
        (or
            (goal g-current-strategy FC-CRUSH)
            (goal g-current-strategy EARLYC-CAMELS))
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 500)   ;54%
        (set-goal g-desired-future-wood-vils 210)   ;23%
        (set-goal g-desired-future-gold-vils 210)   ;23%
        (set-goal g-desired-future-stone-vils 80)
        )

    ;------------------
    ;   Boom Knights
    ;------------------
    
        (defrule
        (goal g-current-strategy BOOMC-KNIGHTS)
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 25)
        (up-compare-goal g-age-status < TO-FEUDAL)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 10)
        )

        (defrule
        (goal g-current-strategy BOOMC-KNIGHTS)
        (unit-type-count villager >= 26)
        (unit-type-count villager <= 28)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 10)
        (set-goal g-desired-future-gold-vils 3)
        )

        (defrule
        (goal g-current-strategy BOOMC-KNIGHTS)
        (unit-type-count villager >= 29)
        ; (unit-type-count villager <= 30)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 11)
        (set-goal g-desired-future-gold-vils 4)
        )

        ;Switch to using gathering percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy BOOMC-KNIGHTS)
        (goal g-age-status TO-CASTLE)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-desired-future-food-vils 490)
        (set-goal g-desired-future-wood-vils 390)
        (set-goal g-desired-future-gold-vils 120)
        )

        ;Default post-build order percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy BOOMC-KNIGHTS)
        (current-age >= castle-age)
        =>
        (set-goal g-desired-future-food-vils 520)   ;56%
        (set-goal g-desired-future-wood-vils 280)   ;24%
        (set-goal g-desired-future-gold-vils 120)   ;20%
        (set-goal g-desired-future-stone-vils 80)
        )

        ;Default post-build order percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy BOOMC-KNIGHTS)
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        (stone-amount < 100)
        =>
        (set-goal g-desired-future-food-vils 520)   ;56%
        (set-goal g-desired-future-wood-vils 300)   ;24%
        (set-goal g-desired-future-gold-vils 100)   ;20%
        (set-goal g-desired-future-stone-vils 80)
        )

        ;Default post-build order percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy BOOMC-KNIGHTS)
        (current-age >= castle-age)
        (or
            (up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
            (stone-amount >= 100))
        =>
        (set-goal g-desired-future-food-vils 550)   ;56%
        (set-goal g-desired-future-wood-vils 330)   ;24%
        (set-goal g-desired-future-gold-vils 120)   ;20%
        (set-goal g-desired-future-stone-vils 0)
        )

    ;-----------------
    ;   Boom Camels
    ;-----------------
    
        (defrule
        (goal g-current-strategy BOOMC-CAMELS)
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 25)
        (up-compare-goal g-age-status < TO-FEUDAL)
        =>
        (set-goal g-desired-future-food-vils 16)
        (set-goal g-desired-future-wood-vils 9)
        )

        (defrule
        (goal g-current-strategy BOOMC-CAMELS)
        (unit-type-count villager >= 26)
        (unit-type-count villager <= 28)
        (up-compare-goal g-age-status < TO-FEUDAL)
        =>
        (set-goal g-desired-future-food-vils 16)
        (set-goal g-desired-future-wood-vils 9)
        (set-goal g-desired-future-gold-vils 3)
        )

        (defrule
        (goal g-current-strategy BOOMC-CAMELS)
        (goal g-age-status TO-FEUDAL)
        =>
        (set-goal g-desired-future-food-vils 11)
        (set-goal g-desired-future-wood-vils 13)
        (set-goal g-desired-future-gold-vils 4)
        )

        (defrule
        (goal g-current-strategy BOOMC-CAMELS)
        (unit-type-count villager >= 28)
        ; (unit-type-count villager <= 30)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 13)
        (set-goal g-desired-future-wood-vils 13)
        (set-goal g-desired-future-gold-vils 4)
        )

        ;Switch to using gathering percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy BOOMC-CAMELS)
        (goal g-age-status TO-CASTLE)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-desired-future-food-vils 470)
        (set-goal g-desired-future-wood-vils 370)
        (set-goal g-desired-future-gold-vils 160)
        )

        ;Default post-build order percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy BOOMC-CAMELS)
        (current-age >= castle-age)
        =>
        (set-goal g-desired-future-food-vils 520)   ;56%
        (set-goal g-desired-future-wood-vils 220)   ;24%
        (set-goal g-desired-future-gold-vils 180)   ;20%
        (set-goal g-desired-future-stone-vils 80)
        )
        
    ;--------------------
    ;   Eagles Revenge
    ;--------------------
        
        (defrule
        (or
            (goal g-current-strategy FC-EAGLES-REVENGE)
            (goal g-current-strategy EARLYC-EAGLES))
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 25)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 14)
        (set-goal g-desired-future-wood-vils 11)
        )

        (defrule
        (or
            (goal g-current-strategy FC-EAGLES-REVENGE)
            (goal g-current-strategy EARLYC-EAGLES))
        (unit-type-count villager >= 26)
        ; (unit-type-count villager <= 30)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 14)
        (set-goal g-desired-future-wood-vils 11)
        (set-goal g-desired-future-gold-vils 5)
        )

        ;Switch to using gathering percentages (out of 1000 villagers)
        (defrule
        (or
            (goal g-current-strategy FC-EAGLES-REVENGE)
            (goal g-current-strategy EARLYC-EAGLES))
        (goal g-age-status TO-CASTLE)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-desired-future-food-vils 500)
        (set-goal g-desired-future-wood-vils 280)
        (set-goal g-desired-future-gold-vils 220)
        )

        (defrule
        (or
            (goal g-current-strategy FC-EAGLES-REVENGE)
            (goal g-current-strategy EARLYC-EAGLES))
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 490)   ;52%
        (set-goal g-desired-future-wood-vils 250)   ;24%
        (set-goal g-desired-future-gold-vils 280)   ;24%
        )

        (defrule
        (or
            (goal g-current-strategy FC-EAGLES-REVENGE)
            (goal g-current-strategy EARLYC-EAGLES))
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 460)   ;54%
        (set-goal g-desired-future-wood-vils 230)   ;23%
        (set-goal g-desired-future-gold-vils 250)   ;23%
        (set-goal g-desired-future-stone-vils 80)
        )
        
    ;---------------
    ;   Strongbow
    ;---------------
        
        (defrule
        (or
            (goal g-current-strategy FC-STRONGBOW)
            (goal g-current-strategy EARLYC-XBOWS))
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 24)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 13)
        (set-goal g-desired-future-wood-vils 11)
        )

        (defrule
        (or
            (goal g-current-strategy FC-STRONGBOW)
            (goal g-current-strategy EARLYC-XBOWS))
        (unit-type-count villager >= 25)
        ; (unit-type-count villager <= 30)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 13)
        (set-goal g-desired-future-wood-vils 11)
        (set-goal g-desired-future-gold-vils 6)
        )

        ;Switch to using gather percentages (out of 1000 villagers)
        (defrule
        (or
            (goal g-current-strategy FC-STRONGBOW)
            (goal g-current-strategy EARLYC-XBOWS))
        (goal g-age-status TO-CASTLE)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-desired-future-food-vils 400)   ;430
        (set-goal g-desired-future-wood-vils 370)   
        (set-goal g-desired-future-gold-vils 230)   ;200
        )
        (defrule
        (or
            (goal g-current-strategy FC-STRONGBOW)
            (goal g-current-strategy EARLYC-XBOWS))
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 400)   ;46%    ;460
        (set-goal g-desired-future-wood-vils 320)   ;28%    ;280
        (set-goal g-desired-future-gold-vils 280)   ;26%    ;260
        )

        (defrule
        (or
            (goal g-current-strategy FC-STRONGBOW)
            (goal g-current-strategy EARLYC-XBOWS))
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 370)
        (set-goal g-desired-future-wood-vils 290)
        (set-goal g-desired-future-gold-vils 260)
        (set-goal g-desired-future-stone-vils 80)
        )

    ;-------------
    ;   Genghis
    ;-------------
        
        (defrule
        (goal g-current-strategy FC-GENGHIS)
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 24)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 13)
        (set-goal g-desired-future-wood-vils 11)
        )

        (defrule
        (goal g-current-strategy FC-GENGHIS)
        (unit-type-count villager >= 25)
        ; (unit-type-count villager <= 30)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 13)
        (set-goal g-desired-future-wood-vils 11)
        (set-goal g-desired-future-gold-vils 6)
        )

        ;Switch to using gather percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy FC-GENGHIS)
        (goal g-age-status TO-CASTLE)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-desired-future-food-vils 400)   ;430
        (set-goal g-desired-future-wood-vils 370)   
        (set-goal g-desired-future-gold-vils 230)   ;200
        )
        (defrule
        (goal g-current-strategy FC-GENGHIS)
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 400)   ;46%    ;460
        (set-goal g-desired-future-wood-vils 320)   ;28%    ;280
        (set-goal g-desired-future-gold-vils 280)   ;26%    ;260
        )

        (defrule
        (goal g-current-strategy FC-GENGHIS)
        (current-age >= castle-age)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 370)
        (set-goal g-desired-future-wood-vils 290)
        (set-goal g-desired-future-gold-vils 260)
        (set-goal g-desired-future-stone-vils 80)
        )
        
    ;---------------
    ;   Boom Xbows
    ;---------------
        
        (defrule
        (goal g-current-strategy BOOMC-XBOWS)
        (unit-type-count villager >= 18)
        (unit-type-count villager <= 25)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 14)
        (set-goal g-desired-future-wood-vils 11)
        )

        (defrule
        (goal g-current-strategy BOOMC-XBOWS)
        (unit-type-count villager >= 26)
        ; (unit-type-count villager <= 30)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 15)
        (set-goal g-desired-future-wood-vils 11)
        (set-goal g-desired-future-gold-vils 4)
        )

        ;Switch to using gathering percentages (out of 1000 villagers)
        (defrule
        (goal g-current-strategy BOOMC-XBOWS)
        (goal g-age-status TO-CASTLE)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-desired-future-food-vils 500)
        (set-goal g-desired-future-wood-vils 340)
        (set-goal g-desired-future-gold-vils 160)
        )

        (defrule
        (goal g-current-strategy BOOMC-XBOWS)
        (current-age >= castle-age)
        =>
        (set-goal g-desired-future-food-vils 490)   ;53%
        (set-goal g-desired-future-wood-vils 220)   ;24%
        (set-goal g-desired-future-gold-vils 210)   ;23%
        (set-goal g-desired-future-stone-vils 80)
        )

    ;-----------------------------
    ;   Build Order Adjustments
    ;-----------------------------

        (defrule
        (up-object-type-count-total c: villager g:>= g-required-num-villager)
        (up-compare-goal g-age-status < TO-FEUDAL)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-research-cost c: feudal-age c: 1)
        )

        (defrule
        (up-object-type-count-total c: villager g:>= g-required-num-villager)
        (up-compare-goal g-age-status < TO-FEUDAL)
        (food-amount g:< g-food-cost)
        =>
        (up-modify-goal g-desired-future-food-vils c:+ 10)
        )

        (defrule
        (up-object-type-count-total c: villager g:>= g-required-num-villager)
        (current-age == feudal-age)
        (up-compare-goal g-age-status < TO-CASTLE)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-research-cost c: castle-age c: 1)
        )

        (defrule
        (up-object-type-count-total c: villager g:>= g-required-num-villager)
        (current-age == feudal-age)
        (up-compare-goal g-age-status < TO-CASTLE)
        (food-amount g:< g-food-cost)
        =>
        (up-modify-goal g-desired-future-food-vils c:+ 10)
        )

        (defrule
        (up-object-type-count-total c: villager g:>= g-required-num-villager)
        (current-age == feudal-age)
        (up-compare-goal g-age-status < TO-CASTLE)
        (gold-amount g:< g-gold-cost)
        =>
        (up-modify-goal g-desired-future-gold-vils c:+ 10)
        )

    ;-------------------------------
    ;   Post-Build Order Defaults
    ;-------------------------------

        ;These numbers are out of 1000 pop, since the villager gathering system
        ;relies on the number of future vils being larger than current villager pop
        ;the actual numbers are adjusted later to fit current population

        (defrule
        (goal g-strategy-type DRUSH)
        (current-age == feudal-age)
        (unit-type-count villager > 29)
        =>
        (set-goal g-desired-future-food-vils 600)   ;60%
        (set-goal g-desired-future-wood-vils 300)   ;30%
        (set-goal g-desired-future-gold-vils 100)   ;10%
        (set-goal g-desired-future-stone-vils 0)    ;0%
        )

        (defrule
        (goal g-strategy-type FLUSH)
        (current-age == feudal-age)
        (unit-type-count villager > 28)
        =>
        (set-goal g-desired-future-food-vils 600)   ;60%
        (set-goal g-desired-future-wood-vils 300)   ;30%
        (set-goal g-desired-future-gold-vils 100)   ;10%
        (set-goal g-desired-future-stone-vils 0)    ;0%
        )

        (defrule
        (up-compare-goal g-strategy-type != FAST-IMPERIAL)
        (current-age == castle-age)
        (unit-type-count villager <= 35)
        (up-compare-goal g-age-status >= MID-CASTLE)
        (up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 540)   ;54%
        (set-goal g-desired-future-wood-vils 230)   ;23%
        (set-goal g-desired-future-gold-vils 230)   ;23%
        (set-goal g-desired-future-stone-vils 0)
        )
        (defrule
        (up-compare-goal g-strategy-type != FAST-IMPERIAL)
        (current-age == castle-age)
        (unit-type-count villager <= 35)
        (up-compare-goal g-age-status >= MID-CASTLE)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (set-goal g-desired-future-food-vils 500)   ;54%
        (set-goal g-desired-future-wood-vils 210)   ;23%
        (set-goal g-desired-future-gold-vils 210)   ;23%
        (set-goal g-desired-future-stone-vils 80)
        )

        (defrule
        (up-compare-goal g-strategy-type != FAST-IMPERIAL)
        (current-age == castle-age)
        (unit-type-count villager > 35)
        (up-compare-goal g-age-status >= MID-CASTLE)
        =>
        (set-goal g-desired-future-food-vils 500)   ;50%
        (set-goal g-desired-future-wood-vils 300)   ;30%
        (set-goal g-desired-future-gold-vils 150)   ;15%
        (set-goal g-desired-future-stone-vils 50)   ;5%
        )

        (defrule
        (current-age == imperial-age)
        (unit-type-count villager > 35)
        =>
        (set-goal g-desired-future-food-vils 400)
        (set-goal g-desired-future-wood-vils 270)
        (set-goal g-desired-future-gold-vils 295)
        (set-goal g-desired-future-stone-vils 35)
        )

    ;-----------------------------------------------
    ;   Reduce gold miners if we have trade carts
    ;-----------------------------------------------

            (defrule
            (unit-type-count trade-cart > 0)
            =>
            (up-get-fact unit-type-count trade-cart g-temp)
            (up-modify-goal g-temp c:* 1000)
            (up-modify-goal g-temp g:%* 65) ;assume trade carts are about 65% as fast as gold miners
            (up-modify-goal g-temp c:/ 140)
            (up-modify-goal g-desired-future-gold-vils g:- g-temp)
            (up-modify-goal g-temp c:/ 2)
            (up-modify-goal g-desired-future-food-vils g:+ g-temp)
            (up-modify-goal g-desired-future-wood-vils g:+ g-temp)
            )
            
;=========================<>=========================
;				    DROP RESOURCES
;=========================<>=========================

    (load "The General 1.2/Functions/Reset Mini")

    ;Drop resources if we are low on food for villagers
    (defrule
    (not
        (can-afford-unit villager))
    (up-object-type-count-total c: villager g:< g-desired-num-villager)
    (building-type-count town-center == 1)
    (up-pending-objects c: villager <= 1)
    (current-age <= feudal-age)
    =>
    (up-full-reset-search)
    (up-find-local c: town-center c: 1)
    )

    (defrule
    (not
        (can-afford-unit villager))
    (up-object-type-count-total c: villager g:< g-desired-num-villager)
    (building-type-count town-center == 1)
    (up-pending-objects c: villager <= 1)
    (up-set-target-object search-local c: 0)
    (or
        (up-object-data object-data-progress-value >= 50)
        (up-object-data object-data-progress-type == 0))    ;not training a villager
    (unit-type-count villager-hunter > 0)
    (current-age <= feudal-age)
    =>
    (up-drop-resources food c: 10)
    )

    (defrule
    (not
        (can-afford-unit villager))
    (up-object-type-count-total c: villager g:< g-desired-num-villager)
    (building-type-count town-center == 1)
    (up-pending-objects c: villager <= 1)
    (up-set-target-object search-local c: 0)
    (or
        (up-object-data object-data-progress-value >= 75)
        (up-object-data object-data-progress-type == 0))
    (current-age <= feudal-age)
    (food-amount < 40)
    =>
    (up-drop-resources food c: 6)
    )

    (defrule
    (not
        (can-afford-unit villager))
    (up-object-type-count-total c: villager g:< g-desired-num-villager)
    (building-type-count town-center == 1)
    (up-pending-objects c: villager <= 1)
    (up-set-target-object search-local c: 0)
    (or
        (up-object-data object-data-progress-value >= 75)
        (up-object-data object-data-progress-type == 0))
    (current-age <= feudal-age)
    (food-amount >= 40)
    =>
    (up-drop-resources food c: 3)
    )

;=========================<>=========================
;		   DYNAMIC DESIRED GATHERER COUNTS
;=========================<>=========================

    (load "The General 1.2/Functions/Reset Mini")

    (defrule
    (up-timer-status t-15-sec == timer-triggered)
    =>
    (up-reset-cost-data g-total-buildings-food-needed)
    (up-reset-cost-data g-total-units-food-needed)
    (up-reset-cost-data g-food-cost)
    )

    ;------------------------
    ;   Add Building Costs
    ;------------------------

        ;TCs
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: town-center-foundation c: 1)
        )
        #load-if-defined DE-AVAILABLE
        #load-if-defined BRITON-CIV ;until bug with TC wood cost is fixed for Britons
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        =>
        (up-modify-goal g-wood-cost c:max 275)
        )
        #end-if
        #end-if
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: town-center g:< g-desired-num-town-center)
        ; (up-resource-amount amount-stone g:< g-stone-cost)
        (stone-amount < 200)
        =>
        (up-modify-goal g-total-buildings-stone-needed g:+ g-stone-cost)
        )

        ;Houses
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (population-headroom > 0)
        (housing-headroom < 15)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: house c: 2)
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Mills
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: mill g:< g-desired-num-mill)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: mill c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: mill g:< g-desired-num-mill)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 300)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Mining Camps
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: mining-camp g:< g-desired-num-mining-camp)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: mining-camp c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: mining-camp g:< g-desired-num-mining-camp)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 300)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Lumber Camps
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: lumber-camp g:< g-desired-num-lumber-camp)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: lumber-camp c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: lumber-camp g:< g-desired-num-lumber-camp)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 300)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Docks
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: dock g:< g-desired-num-dock)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: dock c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: dock g:< g-desired-num-dock)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 300)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Farms
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: farm g:< g-desired-num-farm)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: farm c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-compare-goal g-usable-farm-count-total g:< g-desired-num-farm)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 300)
        =>
        (up-modify-goal g-temp g:= g-desired-num-farm)
        (up-modify-goal g-temp g:- g-usable-farm-count-total)                    ;get difference between desired farms and current farms
        (up-modify-goal g-temp c:min 7)
        (up-modify-goal g-temp g:* g-wood-cost)                          ;multiply number of extra farms wanted by farm cost (cap at 7 extra farms)
        (up-modify-goal g-total-buildings-wood-needed g:+ g-temp)
        )

        ;Blacksmiths
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: blacksmith g:< g-desired-num-blacksmith)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: blacksmith c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: blacksmith g:< g-desired-num-blacksmith)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Markets
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: market g:< g-desired-num-market)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: market c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: market g:< g-desired-num-market)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Monasteries
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: monastery g:< g-desired-num-monastery)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: monastery c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: monastery g:< g-desired-num-monastery)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Universities
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: university g:< g-desired-num-university)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: university c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: university g:< g-desired-num-university)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Wonders
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: wonder g:< g-desired-num-wonder)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: wonder c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: wonder g:< g-desired-num-wonder)
        (up-resource-amount amount-wood g:< g-wood-cost)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: wonder g:< g-desired-num-wonder)
        (up-resource-amount amount-gold g:< g-gold-cost)
        =>
        (up-modify-goal g-total-buildings-gold-needed g:+ g-gold-cost)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: wonder g:< g-desired-num-wonder)
        (up-resource-amount amount-stone g:< g-stone-cost)
        =>
        (up-modify-goal g-total-buildings-stone-needed g:+ g-stone-cost)
        )

        ;Barracks
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: barracks g:< g-desired-num-barracks)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: barracks c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: barracks g:< g-desired-num-barracks)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Ranges
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: archery-range c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Stables
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: stable g:< g-desired-num-stable)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: stable c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: stable g:< g-desired-num-stable)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Siege Workshops
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: siege-workshop c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )

        ;Watch Towers/Donjons
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-compare-goal g-tower-line g:< g-desired-num-tower)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: my-tower-type c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-compare-goal g-tower-line g:< g-desired-num-tower)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 200)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-compare-goal g-tower-line g:< g-desired-num-tower)
        ; (up-resource-amount amount-stone g:< g-stone-cost)
        (stone-amount < 300)
        =>
        (up-modify-goal g-total-buildings-stone-needed g:+ g-stone-cost)
        )

        ;Bombard Towers
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: bombard-tower g:< g-desired-num-bombard-tower)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: bombard-tower c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: bombard-tower g:< g-desired-num-bombard-tower)
        ; (up-resource-amount amount-gold g:< g-gold-cost)
        (gold-amount < 300)
        =>
        (up-modify-goal g-total-buildings-gold-needed g:+ g-gold-cost)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: bombard-tower g:< g-desired-num-bombard-tower)
        ; (up-resource-amount amount-stone g:< g-stone-cost)
        (stone-amount < 300)
        =>
        (up-modify-goal g-total-buildings-stone-needed g:+ g-stone-cost)
        )

        ;Castles
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: castle g:< g-desired-num-castle)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: castle c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: castle g:< g-desired-num-castle)
        (up-resource-amount amount-stone g:< g-stone-cost)
        =>
        (up-modify-goal g-total-buildings-stone-needed g:+ g-stone-cost)
        )

        ;Unique Buildings
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: my-unique-building g:< g-desired-num-unique-building)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: my-unique-building c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: my-unique-building g:< g-desired-num-unique-building)
        ; (up-resource-amount amount-wood g:< g-wood-cost)
        (wood-amount < 400)
        =>
        (up-modify-goal g-total-buildings-wood-needed g:+ g-wood-cost)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: my-unique-building g:< g-desired-num-unique-building)
        ; (up-resource-amount amount-gold g:< g-gold-cost)
        (gold-amount < 400)
        =>
        (up-modify-goal g-total-buildings-gold-needed g:+ g-gold-cost)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-object-type-count-total c: my-unique-building g:< g-desired-num-unique-building)
        ; (up-resource-amount amount-stone g:< g-stone-cost)
        (stone-amount < 400)
        =>
        (up-modify-goal g-total-buildings-stone-needed g:+ g-stone-cost)
        )

        ;Add Ongoing Cost of Farms
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-research-status c: ri-wheel-barrow != research-complete)
        =>
        (set-goal g-temp2 FARM-RATE)   ;default farming gather rate per minute * 100
        )

        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (research-completed ri-wheel-barrow)
        (up-research-status c: ri-hand-cart != research-complete)
        =>
        (set-goal g-temp2 FARM-WHEEL-RATE) ;farming gather rate per minute with Wheelbarrow * 100
        )

        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (research-completed ri-hand-cart)
        =>
        (set-goal g-temp2 FARM-CART-RATE)  ;farming gather rate per minute with Hand Cart * 100
        )

        ;Calculate amount of wood per minute needed to sustain farming
        ;First calculate new farms needed per minute. Get number of desired farms,
        ;calculate how much food is gathered from those farms per minute, and divide by amount of food per farm.
        ;Then, multiply by cost per farm. (Order of steps rearranged to avoid rounding errors).
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-research-status c: ri-horse-collar != research-complete)
        (nor
            (civ-selected chinese)
            (players-civ any-ally chinese))
        (up-compare-goal g-desired-num-farm > 0)
        =>
        (up-modify-goal g-temp g:= g-desired-num-farm)
        (up-modify-goal g-temp g:* g-temp2)    ;multiply by farming rate per minute
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: farm c: 1)
        (up-modify-goal g-temp g:* g-wood-cost) ;multiply by cost of farm
        (up-modify-goal g-temp c:/ 100)         ;the FARM-RATE constants are * 100
        (up-modify-goal g-temp c:/ 175)         ;divide by amount of wood per farm
        (up-modify-goal g-total-buildings-wood-needed g:+ g-temp)
        )
        
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (research-completed ri-horse-collar)
        (up-research-status c: ri-heavy-plow != research-complete)
        (nor
            (civ-selected chinese)
            (players-civ any-ally chinese))
        (up-compare-goal g-desired-num-farm > 0)
        =>
        (up-modify-goal g-temp g:= g-desired-num-farm)
        (up-modify-goal g-temp g:* g-temp2)    ;multiply by farming rate per minute
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: farm c: 1)
        (up-modify-goal g-temp g:* g-wood-cost) ;multiply by cost of farm
        (up-modify-goal g-temp c:/ 100)         ;the FARM-RATE constants are * 100
        (up-modify-goal g-temp c:/ 250)         ;divide by amount of wood per farm
        (up-modify-goal g-total-buildings-wood-needed g:+ g-temp)
        )
        
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (research-completed ri-heavy-plow)
        (up-research-status c: ri-crop-rotation != research-complete)
        (nor
            (civ-selected chinese)
            (players-civ any-ally chinese))
        (up-compare-goal g-desired-num-farm > 0)
        =>
        (up-modify-goal g-temp g:= g-desired-num-farm)
        (up-modify-goal g-temp g:* g-temp2)    ;multiply by farming rate per minute
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: farm c: 1)
        (up-modify-goal g-temp g:* g-wood-cost) ;multiply by cost of farm
        (up-modify-goal g-temp c:/ 100)         ;the FARM-RATE constants are * 100
        (up-modify-goal g-temp c:/ 375)         ;divide by amount of wood per farm
        (up-modify-goal g-total-buildings-wood-needed g:+ g-temp)
        )
        
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (research-completed ri-crop-rotation)
        (nor
            (civ-selected chinese)
            (players-civ any-ally chinese))
        (up-compare-goal g-desired-num-farm > 0)
        =>
        (up-modify-goal g-temp g:= g-desired-num-farm)
        (up-modify-goal g-temp g:* g-temp2)    ;multiply by farming rate per minute
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: farm c: 1)
        (up-modify-goal g-temp g:* g-wood-cost) ;multiply by cost of farm
        (up-modify-goal g-temp c:/ 100)         ;the FARM-RATE constants are * 100
        (up-modify-goal g-temp c:/ 550)         ;divide by amount of wood per farm
        (up-modify-goal g-total-buildings-wood-needed g:+ g-temp)
        )

        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (up-research-status c: ri-horse-collar != research-complete)
        (or
            (civ-selected chinese)
            (players-civ any-ally chinese))
        (up-compare-goal g-desired-num-farm > 0)
        =>
        (up-modify-goal g-temp g:= g-desired-num-farm)
        (up-modify-goal g-temp g:* g-temp2)    ;multiply by farming rate per minute
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: farm c: 1)
        (up-modify-goal g-temp g:* g-wood-cost) ;multiply by cost of farm
        (up-modify-goal g-temp c:/ 100)         ;the FARM-RATE constants are * 100
        (up-modify-goal g-temp c:/ 220)         ;divide by amount of wood per farm
        (up-modify-goal g-total-buildings-wood-needed g:+ g-temp)
        )
        
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (research-completed ri-horse-collar)
        (up-research-status c: ri-heavy-plow != research-complete)
        (or
            (civ-selected chinese)
            (players-civ any-ally chinese))
        (up-compare-goal g-desired-num-farm > 0)
        =>
        (up-modify-goal g-temp g:= g-desired-num-farm)
        (up-modify-goal g-temp g:* g-temp2)    ;multiply by farming rate per minute
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: farm c: 1)
        (up-modify-goal g-temp g:* g-wood-cost) ;multiply by cost of farm
        (up-modify-goal g-temp c:/ 100)         ;the FARM-RATE constants are * 100
        (up-modify-goal g-temp c:/ 295)         ;divide by amount of wood per farm
        (up-modify-goal g-total-buildings-wood-needed g:+ g-temp)
        )
        
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (research-completed ri-heavy-plow)
        (up-research-status c: ri-crop-rotation != research-complete)
        (or
            (civ-selected chinese)
            (players-civ any-ally chinese))
        (up-compare-goal g-desired-num-farm > 0)
        =>
        (up-modify-goal g-temp g:= g-desired-num-farm)
        (up-modify-goal g-temp g:* g-temp2)    ;multiply by farming rate per minute
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: farm c: 1)
        (up-modify-goal g-temp g:* g-wood-cost) ;multiply by cost of farm
        (up-modify-goal g-temp c:/ 100)         ;the FARM-RATE constants are * 100
        (up-modify-goal g-temp c:/ 420)         ;divide by amount of wood per farm
        (up-modify-goal g-total-buildings-wood-needed g:+ g-temp)
        )
        
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        (research-completed ri-crop-rotation)
        (or
            (civ-selected chinese)
            (players-civ any-ally chinese))
        (up-compare-goal g-desired-num-farm > 0)
        =>
        (up-modify-goal g-temp g:= g-desired-num-farm)
        (up-modify-goal g-temp g:* g-temp2)    ;multiply by farming rate per minute
        (up-setup-cost-data 1 g-food-cost)
        (up-add-object-cost c: farm c: 1)
        (up-modify-goal g-temp g:* g-wood-cost) ;multiply by cost of farm
        (up-modify-goal g-temp c:/ 100)         ;the FARM-RATE constants are * 100
        (up-modify-goal g-temp c:/ 595)         ;divide by amount of wood per farm
        (up-modify-goal g-total-buildings-wood-needed g:+ g-temp)
        )

    ;--------------------
    ;   Add Unit Costs
    ;--------------------

        ;Determine the resources needed per minute for each unit.

        (load "The General 1.2/Functions/Reset Mini")

        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        =>
        (up-reset-cost-data g-total-units-food-needed)
        (up-reset-cost-data g-food-cost)
        )

        ;---------------
        ;   Civilians
        ;---------------

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: villager g:< g-desired-num-villager)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: villager c: 1)
            (up-get-fact building-type-count town-center g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-food-cost g:* g-temp) ;multiply by number of TCs
            (up-modify-goal g-food-cost c:* 60)     ;60 seconds per minute
            (up-modify-goal g-food-cost c:* 100)    ;creation times are * 100
            (up-modify-goal g-food-cost c:/ VILLAGER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: trade-cart g:< g-desired-num-trade-cart)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: trade-cart c: 1)
            (up-get-fact building-type-count market g-temp) ;get number of training building
            (up-modify-goal g-temp c:* 60)     ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)    ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ TRADE-CART-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ TRADE-CART-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: fishing-ship g:< g-desired-num-fishing-ship)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: fishing-ship c: 1)
            (up-get-fact building-type-count dock g-temp)
            (up-modify-goal g-wood-cost g:* g-temp) ;multiply by number of docks
            (up-modify-goal g-wood-cost c:* 60)     ;60 seconds per minute
            (up-modify-goal g-wood-cost c:* 100)    ;creation times are * 100
            (up-modify-goal g-wood-cost c:/ FISHING-SHIP-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: trade-cog g:< g-desired-num-trade-cog)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: trade-cog c: 1)
            (up-get-fact building-type-count dock g-temp) ;get number of training building
            (up-modify-goal g-temp c:* 60)     ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)    ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ TRADE-COG-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ TRADE-COG-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

        ;--------------------
        ;   Barracks Units
        ;--------------------

            ;Militia
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: militiaman-line g:< g-desired-num-militia)
            (goal g-primary-unit militiaman)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: militiaman c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 3)     ;aim for using three buildings
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ MILITIA-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ MILITIA-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: militiaman-line g:< g-desired-num-militia)
            (goal g-support-unit militiaman)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: militiaman c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 2)     ;aim for using two buildings
            (up-modify-goal g-temp c:= 120)     ;60 seconds per minute, * 2 buildings
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ MILITIA-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ MILITIA-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: militiaman-line g:< g-desired-num-militia)
            (up-compare-goal g-primary-unit != militiaman)
            (up-compare-goal g-support-unit != militiaman)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: militiaman c: 1)
            (set-goal g-temp 1)                 ;aim for using one building
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ MILITIA-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ MILITIA-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Spearman
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: spearman-line g:< g-desired-num-spearman)
            (goal g-primary-unit spearman)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: spearman c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 3)     ;aim for using three buildings
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ SPEARMAN-TIME)  ;divide by creation time
            (up-modify-goal g-wood-cost c:/ SPEARMAN-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: spearman-line g:< g-desired-num-spearman)
            (goal g-support-unit spearman)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: spearman c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 2)     ;aim for using two buildings
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ SPEARMAN-TIME)  ;divide by creation time
            (up-modify-goal g-wood-cost c:/ SPEARMAN-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: spearman-line g:< g-desired-num-spearman)
            (up-compare-goal g-primary-unit != spearman)
            (up-compare-goal g-support-unit != spearman)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: spearman c: 1)
            (set-goal g-temp 1)                 ;aim for using three buildings
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ SPEARMAN-TIME)  ;divide by creation time
            (up-modify-goal g-wood-cost c:/ SPEARMAN-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            )

            ;Eagle Scout
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (goal g-primary-unit eagle-warrior)
            (up-research-status c: ri-eagle-warrior != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ EAGLE-SCOUT-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ EAGLE-SCOUT-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (goal g-support-unit eagle-warrior)
            (up-research-status c: ri-eagle-warrior != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ EAGLE-SCOUT-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ EAGLE-SCOUT-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (up-compare-goal g-primary-unit != eagle-warrior)
            (up-compare-goal g-support-unit != eagle-warrior)
            (up-research-status c: ri-eagle-warrior != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ EAGLE-SCOUT-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ EAGLE-SCOUT-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Eagle Warrior
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (goal g-primary-unit eagle-warrior)
            (research-completed ri-eagle-warrior)
            (up-research-status c: ri-elite-eagle-warrior != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, * 100 to adjust creation times
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-gold-cost c:/ EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (goal g-primary-unit eagle-warrior)
            (research-completed ri-eagle-warrior)
            (up-research-status c: ri-elite-eagle-warrior != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, * 100 to adjust creation times
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (goal g-support-unit eagle-warrior)
            (research-completed ri-eagle-warrior)
            (up-research-status c: ri-elite-eagle-warrior != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, * 100 to adjust creation times
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (goal g-support-unit eagle-warrior)
            (research-completed ri-eagle-warrior)
            (up-research-status c: ri-elite-eagle-warrior != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, * 100 to adjust creation times
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-gold-cost c:/ EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (up-compare-goal g-primary-unit != eagle-warrior)
            (up-compare-goal g-support-unit != eagle-warrior)
            (research-completed ri-eagle-warrior)
            (up-research-status c: ri-elite-eagle-warrior != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (up-modify-goal g-temp g:= 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Elite Eagle Warrior
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (goal g-primary-unit eagle-warrior)
            (research-completed ri-elite-eagle-warrior)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ ELITE-EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ ELITE-EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (goal g-support-unit eagle-warrior)
            (research-completed ri-elite-eagle-warrior)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ ELITE-EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ ELITE-EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
            (up-compare-goal g-primary-unit != eagle-warrior)
            (up-compare-goal g-support-unit != eagle-warrior)
            (research-completed ri-elite-eagle-warrior)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: eagle-warrior c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ ELITE-EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ ELITE-EAGLE-WARRIOR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Condottiero
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: condottiero g:< g-desired-num-condottiero)
            (goal g-primary-unit condottiero)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: condottiero c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ CONDOTTIERO-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CONDOTTIERO-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: condottiero g:< g-desired-num-condottiero)
            (goal g-support-unit condottiero)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: condottiero c: 1)
            (up-get-fact building-type-count barracks g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ CONDOTTIERO-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CONDOTTIERO-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: condottiero g:< g-desired-num-condottiero)
            (up-compare-goal g-primary-unit != condottiero)
            (up-compare-goal g-support-unit != condottiero)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: condottiero c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ CONDOTTIERO-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CONDOTTIERO-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

        ;-------------------------
        ;   Archery Range Units
        ;-------------------------

            ;Archer
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: archer-line g:< g-desired-num-archer)
            (goal g-primary-unit archer)
            (up-research-status c: ri-crossbow != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: archer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: archer-line g:< g-desired-num-archer)
            (goal g-support-unit archer)
            (up-research-status c: ri-crossbow != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: archer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: archer-line g:< g-desired-num-archer)
            (up-compare-goal g-primary-unit != archer)
            (up-compare-goal g-support-unit != archer)
            (up-research-status c: ri-crossbow != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: archer c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Crossbowman/Arbalest
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: archer-line g:< g-desired-num-archer)
            (goal g-primary-unit archer)
            (research-completed ri-crossbow)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: archer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ CROSSBOWMAN-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CROSSBOWMAN-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: archer-line g:< g-desired-num-archer)
            (goal g-support-unit archer)
            (research-completed ri-crossbow)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: archer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ CROSSBOWMAN-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CROSSBOWMAN-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: archer-line g:< g-desired-num-archer)
            (up-compare-goal g-primary-unit != archer)
            (up-compare-goal g-support-unit != archer)
            (research-completed ri-crossbow)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: archer c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ CROSSBOWMAN-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CROSSBOWMAN-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Skirmisher
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-skirmisher-line g:< g-desired-num-skirmisher)
            (goal g-primary-unit skirmisher)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: skirmisher c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ SKIRMISHER-TIME)  ;divide by creation time
            (up-modify-goal g-food-cost c:/ SKIRMISHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-skirmisher-line g:< g-desired-num-skirmisher)
            (goal g-support-unit skirmisher)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: skirmisher c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ SKIRMISHER-TIME)  ;divide by creation time
            (up-modify-goal g-food-cost c:/ SKIRMISHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-skirmisher-line g:< g-desired-num-skirmisher)
            (up-compare-goal g-primary-unit != skirmisher)
            (up-compare-goal g-support-unit != skirmisher)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: skirmisher c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ SKIRMISHER-TIME)  ;divide by creation time
            (up-modify-goal g-food-cost c:/ SKIRMISHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            ;Cavalry Archer
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
            (goal g-primary-unit cavalry-archer)
            (up-research-status c: ri-heavy-cavalry-archer != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: cavalry-archer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
            (goal g-support-unit cavalry-archer)
            (up-research-status c: ri-heavy-cavalry-archer != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: cavalry-archer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
            (up-compare-goal g-primary-unit != cavalry-archer)
            (up-compare-goal g-support-unit != cavalry-archer)
            (up-research-status c: ri-heavy-cavalry-archer != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: cavalry-archer c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Heavy Cavalry Archer
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
            (goal g-primary-unit cavalry-archer)
            (research-completed ri-heavy-cavalry-archer)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: cavalry-archer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ HEAVY-CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ HEAVY-CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
            (goal g-support-unit cavalry-archer)
            (research-completed ri-heavy-cavalry-archer)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: cavalry-archer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ HEAVY-CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ HEAVY-CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
            (up-compare-goal g-primary-unit != cavalry-archer)
            (up-compare-goal g-support-unit != cavalry-archer)
            (research-completed ri-heavy-cavalry-archer)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: cavalry-archer c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ HEAVY-CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ HEAVY-CAVALRY-ARCHER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            #load-if-defined DE-AVAILABLE

                ;Elephant Archer
                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: elephant-archer-line g:< g-desired-num-elephant-archer)
                (goal g-primary-unit elephant-archer)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: elephant-archer c: 1)
                (up-get-fact building-type-count archery-range g-temp)
                (up-modify-goal g-temp c:min 3)
                (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost c:/ ELEPHANT-ARCHER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ ELEPHANT-ARCHER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: elephant-archer-line g:< g-desired-num-elephant-archer)
                (goal g-support-unit elephant-archer)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: elephant-archer c: 1)
                (up-get-fact building-type-count archery-range g-temp)
                (up-modify-goal g-temp c:min 2)
                (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 for creation times
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost c:/ ELEPHANT-ARCHER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ ELEPHANT-ARCHER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: elephant-archer-line g:< g-desired-num-elephant-archer)
                (up-compare-goal g-primary-unit != elephant-archer)
                (up-compare-goal g-support-unit != elephant-archer)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: elephant-archer c: 1)
                (set-goal g-temp 1)
                (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost c:/ ELEPHANT-ARCHER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ ELEPHANT-ARCHER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

            #end-if

            ;Hand Cannoneer
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: hand-cannoneer g:< g-desired-num-hand-cannoneer)
            (goal g-primary-unit hand-cannoneer)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: hand-cannoneer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ HAND-CANNONEER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ HAND-CANNONEER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: hand-cannoneer g:< g-desired-num-hand-cannoneer)
            (goal g-support-unit hand-cannoneer)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: hand-cannoneer c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ HAND-CANNONEER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ HAND-CANNONEER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: hand-cannoneer g:< g-desired-num-hand-cannoneer)
            (up-compare-goal g-primary-unit != hand-cannoneer)
            (up-compare-goal g-support-unit != hand-cannoneer)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: hand-cannoneer c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ HAND-CANNONEER-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ HAND-CANNONEER-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            #load-if-defined INCAN-CIV

                ;Slinger
                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: slinger g:< g-desired-num-second-unique-unit)
                (goal g-primary-unit my-second-unique-unit)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: slinger c: 1)
                (up-get-fact building-type-count archery-range g-temp)
                (up-modify-goal g-temp c:min 3)
                (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost c:/ SLINGER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ SLINGER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: slinger g:< g-desired-num-second-unique-unit)
                (goal g-support-unit slinger)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: slinger c: 1)
                (up-get-fact building-type-count archery-range g-temp)
                (up-modify-goal g-temp c:min 2)
                (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost c:/ SLINGER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ SLINGER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: slinger g:< g-desired-num-second-unique-unit)
                (up-compare-goal g-primary-unit != slinger)
                (up-compare-goal g-support-unit != slinger)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: slinger c: 1)
                (set-goal g-temp 1)
                (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost c:/ SLINGER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ SLINGER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

            #end-if

            ;Genitour
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-genitour-line g:< g-desired-num-genitour)
            (goal g-primary-unit genitour)
            (up-research-status c: ri-elite-genitour != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: genitour c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-food-cost c:/ GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-genitour-line g:< g-desired-num-genitour)
            (goal g-support-unit genitour)
            (up-research-status c: ri-elite-genitour != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: genitour c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-food-cost c:/ GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-genitour-line g:< g-desired-num-genitour)
            (up-compare-goal g-primary-unit != genitour)
            (up-compare-goal g-support-unit != genitour)
            (up-research-status c: ri-elite-genitour != research-complete)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: genitour c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-food-cost c:/ GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            ;Elite Genitour
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-genitour-line g:< g-desired-num-genitour)
            (goal g-primary-unit genitour)
            (research-completed ri-elite-genitour)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: genitour c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ ELITE-GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-food-cost c:/ ELITE-GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-genitour-line g:< g-desired-num-genitour)
            (goal g-support-unit genitour)
            (research-completed ri-elite-genitour)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: genitour c: 1)
            (up-get-fact building-type-count archery-range g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ ELITE-GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-food-cost c:/ ELITE-GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-genitour-line g:< g-desired-num-genitour)
            (up-compare-goal g-primary-unit != genitour)
            (up-compare-goal g-support-unit != genitour)
            (research-completed ri-elite-genitour)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: genitour c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ ELITE-GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-food-cost c:/ ELITE-GENITOUR-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

        ;-------------------
        ;   Stable Units
        ;-------------------

            ;Scout Cavalry
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: scout-cavalry-line g:< g-desired-num-scout-cavalry)
            (goal g-primary-unit scout-cavalry)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: scout-cavalry c: 1)
            (up-get-fact building-type-count stable g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ SCOUT-CAVALRY-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: scout-cavalry-line g:< g-desired-num-scout-cavalry)
            (goal g-support-unit scout-cavalry)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: scout-cavalry c: 1)
            (up-get-fact building-type-count stable g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ SCOUT-CAVALRY-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: scout-cavalry-line g:< g-desired-num-scout-cavalry)
            (up-compare-goal g-primary-unit != scout-cavalry)
            (up-compare-goal g-support-unit != scout-cavalry)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: scout-cavalry c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ SCOUT-CAVALRY-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            )

            ;Knight
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: knight-line g:< g-desired-num-knight)
            (goal g-primary-unit knight)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: knight c: 1)
            (up-get-fact building-type-count stable g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ KNIGHT-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ KNIGHT-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: knight-line g:< g-desired-num-knight)
            (goal g-support-unit knight)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: knight c: 1)
            (up-get-fact building-type-count stable g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ KNIGHT-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ KNIGHT-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: knight-line g:< g-desired-num-knight)
            (up-compare-goal g-primary-unit != knight)
            (up-compare-goal g-support-unit != knight)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: knight c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ KNIGHT-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ KNIGHT-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Camel
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-camel-line g:< g-desired-num-camel)
            (goal g-primary-unit camel)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: camel c: 1)
            (up-get-fact building-type-count stable g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ CAMEL-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CAMEL-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-camel-line g:< g-desired-num-camel)
            (goal g-support-unit camel)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: camel c: 1)
            (up-get-fact building-type-count stable g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ CAMEL-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CAMEL-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-camel-line g:< g-desired-num-camel)
            (up-compare-goal g-primary-unit != camel)
            (up-compare-goal g-support-unit != camel)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: camel c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ CAMEL-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ CAMEL-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Battle Elephant
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-battle-elephant-line g:< g-desired-num-battle-elephant)
            (goal g-primary-unit battle-elephant)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: battle-elephant c: 1)
            (up-get-fact building-type-count stable g-temp)
            (up-modify-goal g-temp c:min 3)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ BATTLE-ELEPHANT-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ BATTLE-ELEPHANT-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-battle-elephant-line g:< g-desired-num-battle-elephant)
            (goal g-support-unit battle-elephant)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: battle-elephant c: 1)
            (up-get-fact building-type-count stable g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ BATTLE-ELEPHANT-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ BATTLE-ELEPHANT-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-battle-elephant-line g:< g-desired-num-battle-elephant)
            (up-compare-goal g-primary-unit != battle-elephant)
            (up-compare-goal g-support-unit != battle-elephant)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: battle-elephant c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-food-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-food-cost c:/ BATTLE-ELEPHANT-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ BATTLE-ELEPHANT-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            #load-if-defined DE-AVAILABLE

                ;Steppe Lancer
                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: steppe-lancer-line g:< g-desired-num-steppe-lancer)
                (goal g-primary-unit steppe-lancer)
                (up-research-status c: ri-elite-steppe-lancer != research-complete)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: steppe-lancer c: 1)
                (up-get-fact building-type-count stable g-temp)
                (up-modify-goal g-temp c:min 3)
                (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: steppe-lancer-line g:< g-desired-num-steppe-lancer)
                (goal g-support-unit steppe-lancer)
                (up-research-status c: ri-elite-steppe-lancer != research-complete)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: steppe-lancer c: 1)
                (up-get-fact building-type-count stable g-temp)
                (up-modify-goal g-temp c:min 2)
                (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: steppe-lancer-line g:< g-desired-num-steppe-lancer)
                (up-compare-goal g-primary-unit != steppe-lancer)
                (up-compare-goal g-support-unit != steppe-lancer)
                (up-research-status c: ri-elite-steppe-lancer != research-complete)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: steppe-lancer c: 1)
                (set-goal g-temp 1)
                (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                ;Elite Steppe Lancer
                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: steppe-lancer-line g:< g-desired-num-steppe-lancer)
                (goal g-primary-unit steppe-lancer)
                (research-completed ri-elite-steppe-lancer)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: steppe-lancer c: 1)
                (up-get-fact building-type-count stable g-temp)
                (up-modify-goal g-temp c:min 3)
                (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ ELITE-STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ ELITE-STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: steppe-lancer-line g:< g-desired-num-steppe-lancer)
                (goal g-support-unit steppe-lancer)
                (research-completed ri-elite-steppe-lancer)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: steppe-lancer c: 1)
                (up-get-fact building-type-count stable g-temp)
                (up-modify-goal g-temp c:min 2)
                (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ ELITE-STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ ELITE-STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: steppe-lancer-line g:< g-desired-num-steppe-lancer)
                (up-compare-goal g-primary-unit != steppe-lancer)
                (up-compare-goal g-support-unit != steppe-lancer)
                (research-completed ri-elite-steppe-lancer)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: steppe-lancer c: 1)
                (up-modify-goal g-temp c:= 1)
                (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ ELITE-STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ ELITE-STEPPE-LANCER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

            #end-if

            #load-if-defined GURJARAS-CIV

                ;Shrivamsha Rider
                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: shrivamsha-rider-line g:< g-desired-num-second-unique-unit)
                (goal g-primary-unit shrivamsha-rider)
                (up-research-status c: ri-elite-shrivamsha-rider != research-complete)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: shrivamsha-rider c: 1)
                (up-get-fact building-type-count stable g-temp)
                (up-modify-goal g-temp c:min 3)
                (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ SHRIVAMSHA-RIDER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ SHRIVAMSHA-RIDER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: shrivamsha-rider-line g:< g-desired-num-second-unique-unit)
                (goal g-support-unit shrivamsha-rider)
                (up-research-status c: ri-elite-shrivamsha-rider != research-complete)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: shrivamsha-rider c: 1)
                (up-get-fact building-type-count stable g-temp)
                (up-modify-goal g-temp c:min 2)
                (up-modify-goal g-temp c:* 6000)      ;60 seconds per minute, *100 to adjust creation times
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ SHRIVAMSHA-RIDER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ SHRIVAMSHA-RIDER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: shrivamsha-rider-line g:< g-desired-num-second-unique-unit)
                (up-compare-goal g-primary-unit != shrivamsha-rider)
                (up-compare-goal g-support-unit != shrivamsha-rider)
                (up-research-status c: ri-elite-shrivamsha-rider != research-complete)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: shrivamsha-rider c: 1)
                (set-goal g-temp 1)
                (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ SHRIVAMSHA-RIDER-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ SHRIVAMSHA-RIDER-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

            #end-if

        ;------------------
        ;   Castle Units
        ;------------------

            ;Unique Unit
            (defrule
            (or
                (building-type-count castle < 2)
                (up-compare-goal g-primary-unit != my-unique-unit))
            =>
            (up-jump-rule 1)
            )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: my-unique-unit c: 1)
                (up-modify-goal g-temp c:= 12000)   ;60 seconds per minute, * 2 buildings, * 100 to adjust for creation times
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ UNIQUE-UNIT-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ UNIQUE-UNIT-TIME)  ;divide by creation time
                (up-modify-goal g-wood-cost c:/ UNIQUE-UNIT-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                )

            (defrule
            (or
                (and
                    (building-type-count castle >= 2)
                    (goal g-primary-unit my-unique-unit))
                (building-type-count castle == 0))
            =>
            (up-jump-rule 1)
            )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: my-unique-unit c: 1)
                (up-modify-goal g-temp c:= 6000)     ;60 seconds per minute, * 100 to adjust for creation times
                (up-modify-goal g-food-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-food-cost c:/ UNIQUE-UNIT-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ UNIQUE-UNIT-TIME)  ;divide by creation time
                (up-modify-goal g-wood-cost c:/ UNIQUE-UNIT-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-food-needed g:+ g-food-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                )

            ;Trebuchet
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: trebuchet-set g:< g-desired-num-trebuchet)
            (building-type-count castle > 0)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: trebuchet c: 1)
            (up-modify-goal g-temp c:= 30)      ;60 seconds per minute, / 2 to cut amount to save in half
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ TREBUCHET-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ TREBUCHET-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

        ;---------------------
        ;   Monastery Units
        ;---------------------

            ;Monk
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count-total c: monk g:< g-desired-num-monk)
            (or
                (goal g-primary-unit monk)
                (goal g-support-unit monk))
            (building-type-count monastery > 0)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: monk c: 1)
            (up-get-fact building-type-count monastery g-temp)
            (up-modify-goal g-temp c:min 2)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-gold-cost c:/ MONK-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count-total c: monk g:< g-desired-num-monk)
            (nor
                (goal g-primary-unit monk)
                (goal g-support-unit monk))
            (up-compare-goal g-desired-num-monk >= 5)
            (building-type-count monastery > 0)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: monk c: 1)
            (set-goal g-temp 1)
            (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-gold-cost c:/ MONK-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            #load-if-defined SPANISH-CIV

                ;Missionary
                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count-total c: missionary g:< g-desired-num-second-unique-unit)
                (or
                    (goal g-primary-unit missionary)
                    (goal g-support-unit missionary))
                (building-type-count monastery > 0)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: missionary c: 1)
                (up-get-fact building-type-count monastery g-temp)
                (up-modify-goal g-temp c:min 2)
                (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-gold-cost c:/ MISSIONARY-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count-total c: missionary g:< g-desired-num-second-unique-unit)
                (nor
                    (goal g-primary-unit missionary)
                    (goal g-support-unit missionary))
                (up-compare-goal g-desired-num-second-unique-unit >= 5)
                (building-type-count monastery > 0)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: missionary c: 1)
                (set-goal g-temp 1)
                (up-modify-goal g-temp c:* 60)      ;60 seconds per minute
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-gold-cost c:/ MISSIONARY-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

            #end-if

        ;--------------------------
        ;   Siege Workshop Units
        ;--------------------------

            ;Battering Ram
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: battering-ram-line g:< g-desired-num-ram-type)
            (building-type-count siege-workshop > 0)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: battering-ram c: 1)
            (up-modify-goal g-temp c:= 30)      ;60 seconds per minute, / 2 to cut amount to save in half
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ BATTERING-RAM-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ BATTERING-RAM-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Mangonel
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-compare-goal g-mangonel-line g:< g-desired-num-mangonel)
            (building-type-count siege-workshop > 0)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: mangonel c: 1)
            (up-modify-goal g-temp c:= 30)      ;60 seconds per minute, / 2 to cut amount to save in half
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ MANGONEL-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ MANGONEL-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Scorpion
            (defrule
            (up-timer-status t-15-sec == timer-triggered)
            (up-object-type-count c: scorpion-line g:< g-desired-num-scorpion)
            (building-type-count siege-workshop > 0)
            =>
            (up-setup-cost-data 1 g-food-cost)
            (up-add-object-cost c: scorpion c: 1)
            (up-modify-goal g-temp c:= 30)      ;60 seconds per minute, / 2 to cut amount to save in half
            (up-modify-goal g-temp c:* 100)     ;creation times are * 100
            (up-modify-goal g-wood-cost g:* g-temp)
            (up-modify-goal g-gold-cost g:* g-temp)
            (up-modify-goal g-wood-cost c:/ SCORPION-TIME)  ;divide by creation time
            (up-modify-goal g-gold-cost c:/ SCORPION-TIME)  ;divide by creation time
            (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
            (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
            )

            ;Bombard Cannon
            #load-if-defined DE-AVAILABLE

                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: bombard-cannon-line g:< g-desired-num-bombard-cannon)
                (building-type-count siege-workshop > 0)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: bombard-cannon c: 1)
                (up-modify-goal g-temp c:= 30)      ;60 seconds per minute, / 2 to cut amount to save in half
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost c:/ BOMBARD-CANNON-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ BOMBARD-CANNON-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

            #else
                
                (defrule
                (up-timer-status t-15-sec == timer-triggered)
                (up-object-type-count c: bombard-cannon g:< g-desired-num-bombard-cannon)
                (building-type-count siege-workshop > 0)
                =>
                (up-setup-cost-data 1 g-food-cost)
                (up-add-object-cost c: bombard-cannon c: 1)
                (up-modify-goal g-temp c:= 30)      ;60 seconds per minute, / 2 to cut amount to save in half
                (up-modify-goal g-temp c:* 100)     ;creation times are * 100
                (up-modify-goal g-wood-cost g:* g-temp)
                (up-modify-goal g-gold-cost g:* g-temp)
                (up-modify-goal g-wood-cost c:/ BOMBARD-CANNON-TIME)  ;divide by creation time
                (up-modify-goal g-gold-cost c:/ BOMBARD-CANNON-TIME)  ;divide by creation time
                (up-modify-goal g-total-units-wood-needed g:+ g-wood-cost)
                (up-modify-goal g-total-units-gold-needed g:+ g-gold-cost)
                )

            #end-if

    ;------------------------
    ;   Add Costs Together
    ;------------------------

        ;Divide tech costs by 3 to deprioritize them over units
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-cost-data g-total-techs-food-needed c: 1)
        (up-modify-goal g-food-cost c:/ 3)
        (up-modify-goal g-wood-cost c:/ 3)
        (up-modify-goal g-stone-cost c:/ 3)
        (up-modify-goal g-gold-cost c:/ 3)
        (up-setup-cost-data 1 g-food-needed)
        (up-add-cost-data g-food-cost c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        =>
        (up-setup-cost-data 1 g-food-cost)
        (up-add-cost-data g-total-buildings-food-needed c: 1)
        (up-modify-goal g-food-cost c:%* 70)
        (up-modify-goal g-wood-cost c:%* 70)
        (up-modify-goal g-stone-cost c:%* 70)
        (up-modify-goal g-gold-cost c:%* 70)
        (up-modify-goal g-stone-cost c:min 200)
        (up-setup-cost-data 0 g-food-needed)
        (up-add-cost-data g-food-cost c: 1)
        )
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        =>
        (up-setup-cost-data 0 g-food-needed)
        (up-add-cost-data g-total-units-food-needed c: 1)
        )

    ;---------------------------------------------
    ;   Calculate Needed Gatherers Per Resource
    ;---------------------------------------------

        (load "The General 1.2/Functions/Reset Mini")

        ;For each resource, calculate difference between the resource stockpile and the needed
        ;resource amount. If we have excess resources over our max needed amount, then subtract
        ;this amount from the total amount of that resource we need in the next minute.
        ;Then, multiply the net total resource needed by 100 since gathering rates are 100 times
        ;larger than the real gathering rates, and divide by the gathering rate. This gives
        ;us the number of gatherers we need per resource.

        ;Food
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        =>
        (up-modify-goal g-required-num-food-vils g:= g-food-needed)
        (up-get-fact food-amount 0 g-temp)
        (up-modify-goal g-temp g:- g-max-food-needed)
        (up-modify-goal g-temp c:/ 2)   ;spread excess resources over two minutes instead of one
        (up-modify-goal g-temp c:max 0)
        (up-modify-goal g-required-num-food-vils g:- g-temp)
        (up-modify-goal g-required-num-food-vils c:max 0)
        (up-modify-goal g-required-num-food-vils c:* 100)    ;*100 to adjust gathering rates
        (up-modify-goal g-required-num-food-vils g:/ g-current-farming-gathering-rate)
        )

        ;Wood
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        =>
        (up-modify-goal g-required-num-wood-vils g:= g-wood-needed)
        (up-get-fact wood-amount 0 g-temp)
        (up-modify-goal g-temp g:- g-max-wood-needed)
        (up-modify-goal g-temp c:/ 2)   ;spread excess resources over two minutes instead of one
        (up-modify-goal g-temp c:max 0)
        (up-modify-goal g-required-num-wood-vils g:- g-temp)
        (up-modify-goal g-required-num-wood-vils c:max 0)
        (up-modify-goal g-required-num-wood-vils c:* 100)    ;*100 to adjust gathering rates
        (up-modify-goal g-required-num-wood-vils g:/ g-current-wood-gathering-rate)
        )

        ;Gold
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        =>
        (up-modify-goal g-required-num-gold-vils g:= g-gold-needed)
        (up-get-fact gold-amount 0 g-temp)
        (up-modify-goal g-temp g:- g-max-gold-needed)
        (up-modify-goal g-temp c:/ 2)   ;spread excess resources over two minutes instead of one
        (up-modify-goal g-temp c:max 0)
        (up-modify-goal g-required-num-gold-vils g:- g-temp)
        (up-modify-goal g-required-num-gold-vils c:max 0)
        (up-modify-goal g-required-num-gold-vils c:* 100)    ;*100 to adjust gathering rates
        (up-modify-goal g-required-num-gold-vils g:/ g-current-gold-gathering-rate)
        )

        ;Stone
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        =>
        (up-modify-goal g-required-num-stone-vils g:= g-stone-needed)
        (up-get-fact stone-amount 0 g-temp)
        (up-modify-goal g-temp g:- g-max-stone-needed)
        (up-modify-goal g-temp c:/ 2)   ;spread excess resources over two minutes instead of one
        (up-modify-goal g-temp c:max 0)
        (up-modify-goal g-required-num-stone-vils g:- g-temp)
        (up-modify-goal g-required-num-stone-vils c:max 0)
        (up-modify-goal g-required-num-stone-vils c:* 100)    ;*100 to adjust gathering rates
        (up-modify-goal g-required-num-stone-vils g:/ g-current-stone-gathering-rate)
        )

        ;Total
        (defrule
        (up-timer-status t-15-sec == timer-triggered)
        =>
        (up-modify-goal g-total-needed-villagers g:= g-required-num-food-vils)
        (up-modify-goal g-total-needed-villagers g:+ g-required-num-wood-vils)
        (up-modify-goal g-total-needed-villagers g:+ g-required-num-gold-vils)
        (up-modify-goal g-total-needed-villagers g:+ g-required-num-stone-vils)
        )

    ;---------------------------------------
    ;	GOAL: g-percent-dynamic-gathering
    ;---------------------------------------

        (defrule
        (or
            (and
                (up-compare-flag g-flag != FIRST-ATTACK-LAUNCHED)
                (up-compare-goal g-game-focus != DEFENSIVE))
            (or
                (unit-type-count villager < 35)
                (and
                    (unit-type-count villager >= 50)
                    (up-compare-goal g-total-needed-villagers <= 30))))	;if we have many more villagers than needed, this often means we have excess resources
        (up-compare-goal g-percent-dynamic-gathering != 0)			    ;which can easily throw off proper gathering percentages, revert to default percentages
        =>
        (set-goal g-percent-dynamic-gathering 0)
        )

        (defrule
        (or
            (up-compare-flag g-flag == FIRST-ATTACK-LAUNCHED)
            (goal g-game-focus DEFENSIVE))
        (unit-type-count villager >= 35)
        (or
            (unit-type-count villager < 50)
            (up-compare-goal g-total-needed-villagers > 30))
        (up-compare-goal g-percent-dynamic-gathering != 80)
        =>
        (set-goal g-percent-dynamic-gathering 80)
        )

    ;-------------------------------------
    ;   Adjust Desired Future Gatherers
    ;-------------------------------------

        ;Adjust future gatherers
        ;For dynamic gathering, the desired future gatherers are a combination of preset
        ;desired gatherer numbers and the dynamic gatherer numbers calculated above.
        ;The percentage of both is determined by g-percent-dynamic-gatherers.

        (load "The General 1.2/Functions/Reset Mini")

        ;Food
        (defrule
        (up-compare-goal g-percent-dynamic-gathering > 0)
        (up-compare-goal g-total-needed-villagers > 0)
        =>
        (set-goal g-temp 100)
        (up-modify-goal g-temp g:- g-percent-dynamic-gathering)
        (up-modify-goal g-desired-future-food-vils g:%* g-temp) ;reduce prior static future gatherers
        (set-goal g-temp 1000)
        (up-modify-goal g-temp g:%/ g-total-needed-villagers)   ;scale the total required villager counts to
        (up-modify-goal g-temp g:%* g-percent-dynamic-gathering);equal the total static future gatherer numbers
        (up-modify-goal g-temp2 g:= g-required-num-food-vils)
        (up-modify-goal g-temp2 g:%* g-temp)                   ;scale the required food villager count
        (up-modify-goal g-desired-future-food-vils g:+ g-temp2);add scaled required food villager count to future gatherers
        )

        ;Wood
        (defrule
        (up-compare-goal g-percent-dynamic-gathering > 0)
        (up-compare-goal g-total-needed-villagers > 0)
        =>
        (set-goal g-temp 100)
        (up-modify-goal g-temp g:- g-percent-dynamic-gathering)
        (up-modify-goal g-desired-future-wood-vils g:%* g-temp) ;reduce prior static future gatherers
        (set-goal g-temp 1000)
        (up-modify-goal g-temp g:%/ g-total-needed-villagers)   ;scale the total required villager counts to
        (up-modify-goal g-temp g:%* g-percent-dynamic-gathering);equal the total static future gatherer numbers
        (up-modify-goal g-temp2 g:= g-required-num-wood-vils)
        (up-modify-goal g-temp2 g:%* g-temp)                   ;scale the required wood villager count
        (up-modify-goal g-desired-future-wood-vils g:+ g-temp2);add scaled required wood villager count to future gatherers
        )

        ;Gold
        (defrule
        (up-compare-goal g-percent-dynamic-gathering > 0)
        (up-compare-goal g-total-needed-villagers > 0)
        =>
        (set-goal g-temp 100)
        (up-modify-goal g-temp g:- g-percent-dynamic-gathering)
        (up-modify-goal g-desired-future-gold-vils g:%* g-temp) ;reduce prior static future gatherers
        (set-goal g-temp 1000)
        (up-modify-goal g-temp g:%/ g-total-needed-villagers)   ;scale the total required villager counts to
        (up-modify-goal g-temp g:%* g-percent-dynamic-gathering);equal the total static future gatherer numbers
        (up-modify-goal g-temp2 g:= g-required-num-gold-vils)
        (up-modify-goal g-temp2 g:%* g-temp)                   ;scale the required gold villager count
        (up-modify-goal g-desired-future-gold-vils g:+ g-temp2);add scaled required gold villager count to future gatherers
        )

        ;Stone
        (defrule
        (up-compare-goal g-percent-dynamic-gathering > 0)
        (up-compare-goal g-total-needed-villagers > 0)
        =>
        (set-goal g-temp 100)
        (up-modify-goal g-temp g:- g-percent-dynamic-gathering)
        (up-modify-goal g-desired-future-stone-vils g:%* g-temp) ;reduce prior static future gatherers
        (set-goal g-temp 1000)
        (up-modify-goal g-temp g:%/ g-total-needed-villagers)   ;scale the total required villager counts to
        (up-modify-goal g-temp g:%* g-percent-dynamic-gathering);equal the total static future gatherer numbers
        (up-modify-goal g-temp2 g:= g-required-num-stone-vils)
        (up-modify-goal g-temp2 g:%* g-temp)                   ;scale the required stone villager count
        (up-modify-goal g-desired-future-stone-vils g:+ g-temp2);add scaled required food villager count to future gatherers
        )

;=========================<>=========================
;		      SET GATHERING PERCENTAGES
;=========================<>=========================

    ;Scale desired future gatherer counts if needed
    (defrule
    (true)
    =>
    (up-modify-goal g-temp g:= g-desired-future-food-vils)
    (up-modify-goal g-temp g:+ g-desired-future-wood-vils)
    (up-modify-goal g-temp g:+ g-desired-future-stone-vils)
    (up-modify-goal g-temp g:+ g-desired-future-gold-vils)
    )

    (defrule
    (up-object-type-count c: villager g:> g-temp)   ;current number of villagers > the sum of future gatherers wanted
    =>
    (up-modify-goal g-desired-future-food-vils c:+ 1)
    )

    ;Adjust future gatherers for when resources run out
    (defrule
    (up-gaia-type-count c: gold == 0)
    (up-compare-goal g-desired-future-gold-vils > 0)
    =>
    (up-modify-goal g-desired-future-wood-vils g:+ g-desired-future-gold-vils)
    (set-goal g-desired-future-gold-vils 0)
    )

    (defrule
    (up-gaia-type-count c: stone == 0)
    (up-compare-goal g-desired-future-stone-vils > 0)
    =>
    (up-modify-goal g-desired-future-wood-vils g:+ g-desired-future-stone-vils)
    (set-goal g-desired-future-stone-vils 0)
    )

    (defrule
    (up-gaia-type-count c: wood == 0)
    (up-compare-goal g-desired-future-wood-vils > 0)
    =>
    (up-modify-goal g-desired-future-food-vils g:+ g-desired-future-wood-vils)
    (set-goal g-desired-future-wood-vils 0)
    )
    
    ;Cap current gatherers to future gatherer amounts
    (defrule
    (goal g-percent-dynamic-gathering 0)
    =>
    (up-modify-goal g-desired-num-food-vils g:min g-desired-future-food-vils)
    (up-modify-goal g-desired-num-wood-vils g:min g-desired-future-wood-vils)
    (up-modify-goal g-desired-num-stone-vils g:min g-desired-future-stone-vils)
    (up-modify-goal g-desired-num-gold-vils g:min g-desired-future-gold-vils)
    (up-modify-goal g-temp g:= g-desired-num-food-vils)
    (up-modify-goal g-temp g:+ g-desired-num-wood-vils)
    (up-modify-goal g-temp g:+ g-desired-num-stone-vils)
    (up-modify-goal g-temp g:+ g-desired-num-gold-vils)
    (set-goal g-loop-counter 0)
    )

        ;Find which resource we need a new villager on
        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        =>
        (up-modify-goal g-food-cost g:= g-desired-future-food-vils)
        (up-modify-goal g-food-cost g:- g-desired-num-food-vils)
        (up-modify-goal g-food-cost g:%/ g-desired-future-food-vils)
        (up-modify-goal g-wood-cost g:= g-desired-future-wood-vils)
        (up-modify-goal g-wood-cost g:- g-desired-num-wood-vils)
        (up-modify-goal g-wood-cost g:%/ g-desired-future-wood-vils)
        )

        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        =>
        (up-modify-goal g-stone-cost g:= g-desired-future-stone-vils)
        (up-modify-goal g-stone-cost g:- g-desired-num-stone-vils)
        (up-modify-goal g-stone-cost g:%/ g-desired-future-stone-vils)
        (up-modify-goal g-gold-cost g:= g-desired-future-gold-vils)
        (up-modify-goal g-gold-cost g:- g-desired-num-gold-vils)
        (up-modify-goal g-gold-cost g:%/ g-desired-future-gold-vils)
        )

        ;Set food as default resource to place new villager on
        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-temp2 food)
        (up-modify-goal g-temp3 g:= g-food-cost)
        )

        ;If we need a wood villager more than food, set wood as resource for new villager
        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        (up-compare-goal g-wood-cost g:> g-temp3)
        =>
        (set-goal g-temp2 wood)
        (up-modify-goal g-temp3 g:= g-wood-cost)
        )

        ;If we need a gold villager more than food or wood, set gold as resource for new villager
        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        (up-compare-goal g-gold-cost g:> g-temp3)
        =>
        (set-goal g-temp2 gold)
        (up-modify-goal g-temp3 g:= g-gold-cost)
        )

        ;If we need a stone villager more than food, wood, or gold, set stone as resource for new villager
        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (up-compare-goal g-stone-cost g:> g-temp3)
        (goal g-percent-dynamic-gathering 0)
        =>
        (set-goal g-temp2 stone)
        (up-modify-goal g-temp3 g:= g-stone-cost)
        )

        ;Increase desired number of current gathers for the most urgent resource
        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        (goal g-temp2 food)
        (game-time > 10)
        =>
        (up-modify-goal g-desired-num-food-vils c:+ 1)
        )

        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        (goal g-temp2 wood)
        (game-time > 10)
        =>
        (up-modify-goal g-desired-num-wood-vils c:+ 1)
        )

        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        (goal g-temp2 stone)
        (game-time > 10)
        =>
        (up-modify-goal g-desired-num-stone-vils c:+ 1)
        )

        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        (goal g-temp2 gold)
        (game-time > 10)
        =>
        (up-modify-goal g-desired-num-gold-vils c:+ 1)
        )

        ;Recalculate desired gatherer numbers to see if we need to assign another villager
        (defrule
        (or
            (up-object-type-count c: villager g:> g-previous-villager-count)
            (and
                (timer-triggered t-15-sec)
                (or
                    (goal g-age-status TO-FEUDAL)
                    (goal g-age-status TO-CASTLE))))
        (up-object-type-count c: villager g:> g-temp)   ;we need to assign new villagers
        (goal g-percent-dynamic-gathering 0)
        (up-compare-goal g-loop-counter < 30)
        =>
        (up-modify-goal g-temp g:= g-desired-num-food-vils)
        (up-modify-goal g-temp g:+ g-desired-num-wood-vils)
        (up-modify-goal g-temp g:+ g-desired-num-stone-vils)
        (up-modify-goal g-temp g:+ g-desired-num-gold-vils)
        (up-modify-goal g-loop-counter c:+ 1)
        (up-jump-rule -11)
        )

    ;Set gatherer percentages when not using dynamic gathering
    (defrule
    (goal g-percent-dynamic-gathering 0)
    =>
    (up-get-fact unit-type-count villager g-previous-villager-count)
    (up-modify-sn sn-food-gatherer-percentage g:= g-desired-num-food-vils)
    (up-modify-sn sn-food-gatherer-percentage g:%/ g-previous-villager-count)
    (up-modify-sn sn-wood-gatherer-percentage g:= g-desired-num-wood-vils)
    (up-modify-sn sn-wood-gatherer-percentage g:%/ g-previous-villager-count)
    (up-modify-sn sn-stone-gatherer-percentage g:= g-desired-num-stone-vils)
    (up-modify-sn sn-stone-gatherer-percentage g:%/ g-previous-villager-count)
    (up-modify-sn sn-gold-gatherer-percentage g:= g-desired-num-gold-vils)
    (up-modify-sn sn-gold-gatherer-percentage g:%/ g-previous-villager-count)
    )
    
    ;If we are done with the build order or we are using dynamic gathering, future gatherer counts are out of 1000.
    ;If this isn't the case, skip the rule.
    (defrule
    (goal g-percent-dynamic-gathering 0)
    (up-compare-goal g-desired-future-food-vils < 250)
    (up-compare-goal g-desired-future-wood-vils < 250)
    (up-compare-goal g-desired-future-stone-vils < 250)
    (up-compare-goal g-desired-future-gold-vils < 250)
    =>
    (up-jump-rule 1)
    )

    ;Future gatherer counts are out of 1000, so just divide by 10 and set gathering % to this number
    (defrule
    (true)
    =>
    (up-modify-goal g-temp g:= g-desired-future-food-vils)
    (up-modify-goal g-temp c:/ 10)
    (up-modify-sn sn-food-gatherer-percentage g:= g-temp)
    (up-modify-goal g-temp g:= g-desired-future-wood-vils)
    (up-modify-goal g-temp c:/ 10)
    (up-modify-sn sn-wood-gatherer-percentage g:= g-temp)
    (up-modify-goal g-temp g:= g-desired-future-gold-vils)
    (up-modify-goal g-temp c:/ 10)
    (up-modify-sn sn-gold-gatherer-percentage g:= g-temp)
    (up-modify-goal g-temp g:= g-desired-future-stone-vils)
    (up-modify-goal g-temp c:/ 10)
    (up-modify-sn sn-stone-gatherer-percentage g:= g-temp)
    )

    ;Make sure percentages sum to 100%
    (defrule
    (true)
    =>
    (up-modify-goal g-temp s:= sn-food-gatherer-percentage)
    (up-modify-goal g-temp s:+ sn-wood-gatherer-percentage)
    (up-modify-goal g-temp s:+ sn-stone-gatherer-percentage)
    (up-modify-goal g-temp s:+ sn-gold-gatherer-percentage)
    (set-goal g-temp2 100)
    (up-modify-goal g-temp2 g:%/ g-temp)
    (up-modify-sn sn-food-gatherer-percentage g:%* g-temp2)
    (up-modify-sn sn-wood-gatherer-percentage g:%* g-temp2)
    (up-modify-sn sn-stone-gatherer-percentage g:%* g-temp2)
    (up-modify-sn sn-gold-gatherer-percentage g:%* g-temp2)
    )

    (defrule
    (timer-triggered t-15-sec)
    (up-compare-goal g-percent-dynamic-gathering > 0)
    =>
    (up-get-fact unit-type-count villager g-desired-num-food-vils)
    (up-modify-goal g-desired-num-food-vils s:%* sn-food-gatherer-percentage)
    (up-get-fact unit-type-count villager g-desired-num-wood-vils)
    (up-modify-goal g-desired-num-wood-vils s:%* sn-wood-gatherer-percentage)
    (up-get-fact unit-type-count villager g-desired-num-gold-vils)
    (up-modify-goal g-desired-num-gold-vils s:%* sn-gold-gatherer-percentage)
    (up-get-fact unit-type-count villager g-desired-num-stone-vils)
    (up-modify-goal g-desired-num-stone-vils s:%* sn-stone-gatherer-percentage)
    )