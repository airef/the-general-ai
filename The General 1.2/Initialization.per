;Initialization.per

;=========================<>=========================
;				     DEFINITIONS
;=========================<>=========================

	;----------------------
	;	Custom Constants
	;----------------------

		;Generic Constants
		(defconst NO 0)
		(defconst YES 1)
		(defconst OFF 0)
		(defconst ON 1)
		(defconst NONE 0)
		(defconst PENDING -1)

		;Attack Constants
		; (defconst NONE 0)
		(defconst MELEE-ATTACK 1)
		(defconst PIERCE-ATTACK 2)

		;Armor Constants
		; (defconst NONE 0)
		(defconst INFANTRY-ARMOR 1)
		(defconst ARCHER-ARMOR 2)
		(defconst CAVALRY-ARMOR 3)

		;Chat Constants
		#load-if-not-defined UP-HUMAN-IN-GAME
		(defconst TAUNT-PLAYER any-computer)
		(defconst THIS-ANY-TAUNT-PLAYER this-any-computer)
		#else
		(defconst TAUNT-PLAYER any-human-ally)
		(defconst THIS-ANY-TAUNT-PLAYER this-any-human-ally)
		#end-if

		;Language IDs
		(defconst lang-id-town-center 5164)

		;Number of Players
		#load-if-defined UP-1-PLAYER-GAME
		(defconst MAX-PLAYERS 1)
		#end-if
		#load-if-defined UP-2-PLAYER-GAME
		(defconst MAX-PLAYERS 2)
		#end-if
		#load-if-defined UP-3-PLAYER-GAME
		(defconst MAX-PLAYERS 3)
		#end-if
		#load-if-defined UP-4-PLAYER-GAME
		(defconst MAX-PLAYERS 4)
		#end-if
		#load-if-defined UP-5-PLAYER-GAME
		(defconst MAX-PLAYERS 5)
		#end-if
		#load-if-defined UP-6-PLAYER-GAME
		(defconst MAX-PLAYERS 6)
		#end-if
		#load-if-defined UP-7-PLAYER-GAME
		(defconst MAX-PLAYERS 7)
		#end-if
		#load-if-defined UP-8-PLAYER-GAME
		(defconst MAX-PLAYERS 8)
		#end-if

		#load-if-defined DRAVIDIANS-CIV
		(defconst my-unique-ship thirisadai)
		(defconst my-elite-unique-ship thirisadai)
		(defconst my-unique-ship-line thirisadai)
		#end-if
		#load-if-defined KOREAN-CIV
		(defconst my-unique-ship turtle-ship)
		(defconst my-elite-unique-ship elite-turtle-ship)
		(defconst my-unique-ship-line turtle-ship-line)
		#end-if
		#load-if-defined PORTUGUESE-CIV
		(defconst my-unique-ship caravel)
		(defconst my-elite-unique-ship elite-caravel)
			#load-if-defined DE-AVAILABLE
			(defconst my-unique-ship-line caravel-line)
			#else
			(defconst my-unique-ship-line caravel)
			#end-if
		#end-if
		#load-if-defined VIKING-CIV
		(defconst my-unique-ship longboat)
		(defconst my-elite-unique-ship elite-longboat)
		(defconst my-unique-ship-line longboat-line)
		#end-if
		#load-if-not-defined DRAVIDIANS-CIV
		#load-if-not-defined KOREAN-CIV
		#load-if-not-defined PORTUGUESE-CIV
		#load-if-not-defined VIKING-CIV
		(defconst my-unique-ship 0)
		(defconst my-elite-unique-ship 0)
		(defconst my-unique-ship-line 0)
		#end-if
		#end-if
		#end-if
		#end-if

		#load-if-defined BURGUNDIANS-CIV
		(defconst my-second-unique-unit flemish-militia-trained)
		(defconst my-second-elite-unique-unit flemish-militia-trained)
		(defconst my-second-unique-unit-line flemish-militia-trained)
		#end-if
		#load-if-defined GURJARAS-CIV
		(defconst my-second-unique-unit shrivamsha-rider)
		(defconst my-second-elite-unique-unit elite-shrivamsha-rider)
		(defconst my-second-unique-unit-line shrivamsha-rider-line)
		#end-if
		#load-if-defined INCAN-CIV
		(defconst my-second-unique-unit slinger)
		(defconst my-second-elite-unique-unit slinger)
		(defconst my-second-unique-unit-line slinger)
		#end-if
		#load-if-defined SPANISH-CIV
		(defconst my-second-unique-unit missionary)
		(defconst my-second-elite-unique-unit missionary)
		(defconst my-second-unique-unit-line missionary)
		#end-if
		#load-if-defined TATARS-CIV
		(defconst my-second-unique-unit flaming-camel)
		(defconst my-second-elite-unique-unit flaming-camel)
		(defconst my-second-unique-unit-line flaming-camel)
		#end-if
		#load-if-not-defined BURGUNDIANS-CIV
		#load-if-not-defined GURJARAS-CIV
		#load-if-not-defined INCAN-CIV
		#load-if-not-defined SPANISH-CIV
		#load-if-not-defined TATARS-CIV
		(defconst my-second-unique-unit petard)
		(defconst my-second-elite-unique-unit petard)
		(defconst my-second-unique-unit-line petard)
		#end-if
		#end-if
		#end-if
		#end-if
		#end-if

		#load-if-defined SICILIANS-CIV
		(defconst my-tower-type donjon)
		#else
		(defconst my-tower-type watch-tower)
		#end-if

		#load-if-not-defined BENGALIS-CIV
		#load-if-not-defined DRAVIDIANS-CIV
		#load-if-not-defined GURJARAS-CIV
		#load-if-not-defined HINDUSTANIS-CIV
		(defconst my-ram-type feudal-battering-ram)
		(defconst my-ram-line battering-ram-line)
		#end-if
		#end-if
		#end-if
		#end-if
		#load-if-defined BENGALIS-CIV
		(defconst my-ram-type armored-elephant)
		(defconst my-ram-line armored-elephant-line)
		#end-if
		#load-if-defined DRAVIDIANS-CIV
		(defconst my-ram-type armored-elephant)
		(defconst my-ram-line armored-elephant-line)
		#end-if
		#load-if-defined GURJARAS-CIV
		(defconst my-ram-type armored-elephant)
		(defconst my-ram-line armored-elephant-line)
		#end-if
		#load-if-defined HINDUSTANIS-CIV
		(defconst my-ram-type armored-elephant)
		(defconst my-ram-line armored-elephant-line)
		#end-if

		#load-if-defined BULGARIANS-CIV
		(defconst my-unique-building krepost)
		#end-if
		#load-if-defined HINDUSTANIS-CIV
		(defconst my-unique-building caravanserai)
		#end-if
		#load-if-defined PORTUGUESE-CIV
		(defconst my-unique-building feitoria)
		#end-if
		#load-if-not-defined BULGARIANS-CIV
		#load-if-not-defined HINDUSTANIS-CIV
		#load-if-not-defined PORTUGUESE-CIV
		(defconst my-unique-building 0)
		#end-if
		#end-if
		#end-if

		(defconst NOMAD-TC-RADIUS 8)

	;----------------------
	;	String Constants
	;----------------------

		;Text Comparison	
		(defconst TEXT-GG "gg")
		(defconst TEXT-GG2 "gg?")
		(defconst TEXT-WILLIAM-WALLACE "William Wallace")

		;Taunts
		(defconst TAUNT-DESIRED-OBJECT "Desire: %s")
		(defconst TAUNT-AMOUNT "Amount: %d")
		(defconst TAUNT-236-AGE-STATUS "Age Status: %d")
		(defconst TAUNT-238-ENEMY-MILITARY-COUNTS "Enemy has %s")
		(defconst TAUNT-241 "Game Focus: %d")
		(defconst TAUNT-245-ATTACK-STATUS "Attack Status: %d")
		(defconst TAUNT-245-ATTACKING "Attacking?: %d")
		(defconst TAUNT-246-SAVING "Saving for %s")
		(defconst TAUNT-246-PRIMARY-UNIT-TECH-PROGRESS "Primary Unit Progress: %d")
		(defconst TAUNT-246-SUPPORT-UNIT-TECH-PROGRESS "Support Unit Progress: %d")
		(defconst TAUNT-246-ECO-TECH-PROGRESS "Eco Progress: %d")
			; (defconst TAUNT-250-DRUSH "I will DRUSH the enemy.")
			; (defconst TAUNT-250-DOUCHE "I will douche the enemy.")
			; (defconst TAUNT-250-RANGER "I'm using the RANGER strategy.")
			; (defconst TAUNT-250-RANGER2 "I will attack the enemy with archers.")
			; (defconst TAUNT-250-GUERILLA "I'm using the GUERILLA flush strategy.")
			; (defconst TAUNT-250-GUERILLA2 "I will attack the enemy with archers and skirmishers.")
			; (defconst TAUNT-250-SKIRMMETA "I'm using the SKIRMMETA flush strategy.")
			; (defconst TAUNT-250-SKIRMMETA2 "I will attack the enemy with skirmishers.")
			; (defconst TAUNT-250-LATHER "I'm using the LATHER flush strategy.")
			; (defconst TAUNT-250-LATHER2 "I will attack the enemy with m@a.")
			; (defconst TAUNT-250-VULTURE "I'm using the VULTURE flush strategy.")
			; (defconst TAUNT-250-VULTURE2 "I will attack the enemy with scouts.")
			; (defconst TAUNT-250-EYRIES "I'm using the EYRIES flush strategy.")
			; (defconst TAUNT-250-EYRIES2 "I will attack the enemy with eagle warriors.")
			; (defconst TAUNT-250-GOEMUL "I'm using the GOEMUL trush strategy.")
			; (defconst TAUNT-250-FULL-ARCHERS "I'm going FULL ARCHERS in Feudal.")
			; (defconst TAUNT-250-FULL-RANGED "I'm going FULL RANGED units in Feudal.")
			; (defconst TAUNT-250-FULL-SKIRMS "I'm going FULL SKIRMS in Feudal.")
			; (defconst TAUNT-250-FULL-SCOUTS "I'm going FULL SCOUTS in Feudal.")
			; (defconst TAUNT-250-SCOUT-SKIRM "I'm going SCOUTS and SKIRMS in Feudal.")
			; (defconst TAUNT-250-FULL-MAA "I'm going FULL MAN-AT-ARMS in Feudal.")
			; (defconst TAUNT-250-FULL-EAGLES "I'm going FULL EAGLES in Feudal.")
			; (defconst TAUNT-250-STRONGBOW "I'm using the STRONGBOW fc strategy.")
			; (defconst TAUNT-250-STRONGBOW2 "I will attack the enemy with xbows.")
			; (defconst TAUNT-250-KRUSH "I'm using the KRUSH fc strategy.")
			; (defconst TAUNT-250-KRUSH2 "I will attack the enemy with knights.")
			; (defconst TAUNT-250-EAGLES-REVENGE "I'm using the EAGLES REVENGE fc strategy.")
			; (defconst TAUNT-250-EAGLES-REVENGE2 "I will attack the enemy with eagle warriors.")
			; (defconst TAUNT-250-CRUSH "I'm using the CRUSH fc strategy.")
			; (defconst TAUNT-250-CRUSH2 "I will attack the enemy with camels.")
			; (defconst TAUNT-250-DEMON "I'm using the DEMON fc strategy.")
			; (defconst TAUNT-250-DEMON2 "I will attack the enemy with monks.")
			; (defconst TAUNT-250-CASTLE-DROP "I'm using the CASTLE DROP fc strategy.")
			; (defconst TAUNT-250-EARLYC-XBOWS "I'm using xbows in early Castle Age.")
			; (defconst TAUNT-250-EARLYC-KNIGHTS "I'm using knights in early Castle Age.")
			; (defconst TAUNT-250-EARLYC-EAGLES "I'm using eagle warriors in early Castle Age.")
			; (defconst TAUNT-250-EARLYC-CAMELS "I'm using camels in early Castle Age.")
			; (defconst TAUNT-250-MIDC-XBOWS "I'm using xbows in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-KNIGHTS "I'm using knights in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-EAGLES "I'm using eagle warriors in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-CAMELS "I'm using camels in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-CAV-ARCHERS "I'm using cav archers in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-CIRCUS "I'm using battle eles in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-UNIQUE "I'm using unique units in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-MONKS "I'm using monks in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-SWORDS "I'm using long swords in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-PIKES "I'm using pikes in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-SKIRMS "I'm using elite skirms in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-LIGHT "I'm using light cav in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-LANCERS "I'm using steppe lancers in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-SLINGERS "I'm using slingers in mid Castle Age.")
			; (defconst TAUNT-250-MIDC-GENITOURS "I'm using genitours in mid Castle Age.")
			; (defconst TAUNT-250-FI-SNIPER "I'm using the SNIPER fast imp strategy.")
			; (defconst TAUNT-250-FI-SNIPER2 "I will attack the enemy with hand cannoneers and bombard cannons.")
			; (defconst TAUNT-250-FI-FARMERTRON "I'm using the FARMERTRON fast imp strategy.")
			; (defconst TAUNT-250-FI-FARMERTRON2 "I will attack the enemy with champions.")
			; (defconst TAUNT-250-FI-AGEOFSTONEWALLS "I'm using the AGEOFSTONEWALLS fast imp strategy.")
			; (defconst TAUNT-250-FI-AGEOFSTONEWALLS2 "I will attack the enemy with elite eagle warriors.")
			; (defconst TAUNT-250-EARLYI-EL-DORADO "I'm using the EL DORADO early imp strategy.")
			; (defconst TAUNT-250-EARLYI-PALASTORM "I'm using the PALASTORM early imp strategy.")
			; (defconst TAUNT-250-EARLYI-ARBINGER "I'm using the ARBINGER of death early imp strategy.")
			; (defconst TAUNT-250-EARLYI-CAMELSTORM "I'm using the CAMELSTORM early imp strategy.")
			; (defconst TAUNT-250-EARLYI-CHAMPFLOOD "I'm using the CHAMPFLOOD early imp strategy.")
			; (defconst TAUNT-250-EARLYI-CIRCUS-STOMP "I'm using the CIRCUS STOMP early imp strategy.")
			; (defconst TAUNT-250-EARLYI-UNIQUE "I'm using unique units in early imperial.")
			; (defconst TAUNT-250-EARLYI-HORDE "I'm using the HORDE early imp strategy.")
			; (defconst TAUNT-250-MIDI-EAGLES "I'm using eagle warriors in mid imperial.")
			; (defconst TAUNT-250-MIDI-PALADINS "I'm using cavaliers/paladins in mid imperial.")
			; (defconst TAUNT-250-MIDI-CAMELS "I'm using heavy/imp camels in mid imperial.")
			; (defconst TAUNT-250-MIDI-ARBS "I'm using arbalests in mid imperial.")
			; (defconst TAUNT-250-MIDI-CAV-ARCHERS "I'm using heavy cav archers in mid imperial.")
			; (defconst TAUNT-250-MIDI-CIRCUS "I'm using elite battle eles in mid imperial.")
			; (defconst TAUNT-250-MIDI-CHAMPIONS "I'm using champions in mid imperial.")
			; (defconst TAUNT-250-MIDI-UNIQUE "I'm using unique units in mid imperial.")
			; (defconst TAUNT-250-MIDI-HALBS "I'm using halbs in mid imperial.")
			; (defconst TAUNT-250-MIDI-CONDOS "I'm using condos in mid imperial.")
			; (defconst TAUNT-250-MIDI-SKIRMS "I'm using elite skirms in mid imperial.")
			; (defconst TAUNT-250-MIDI-CANNONEERS "I'm using hand cannoneers in mid imperial.")
			; (defconst TAUNT-250-MIDI-SLINGERS "I'm using slingers in mid imperial.")
			; (defconst TAUNT-250-MIDI-GENITOURS "I'm using genitours in mid imperial.")
			; (defconst TAUNT-250-MIDI-HUSSARS "I'm using hussars in mid imperial.")
			; (defconst TAUNT-250-MIDI-LANCERS "I'm using steppe lancers in mid imperial.")
			; (defconst TAUNT-250-MIDI-MONKS "I'm using monks in mid imperial.")
			; (defconst TAUNT-250-BOOMC-KNIGHTS "I will boom into knights.")
			; (defconst TAUNT-250-BOOMC-CAMELS "I will boom into camels.")
			; (defconst TAUNT-250-BOOMC-XBOWS "I will boom into xbows.")
			; (defconst TAUNT-250-BOOMC-EAGLES "I will boom into eagle warriors.")
			; (defconst TAUNT-250-BOOMI-IMPERIAL "I will boom to the Imperial Age.")
			; (defconst TAUNT-250-LATEI-CHAMPIONS "I am using champions to conserve gold.")
			; (defconst TAUNT-250-LATEI-UNIQUE "I am using unique units to conserve gold.")
			; (defconst TAUNT-250-LATEI-TRASHBOWS "I am using Persian xbows to conserve gold.")
			; (defconst TAUNT-250-LATEI-TRASHKIRMS "I am using skirmishers to conserve gold.")
			; (defconst TAUNT-250-LATEI-TRASHALBS "I am using halberdiers to conserve gold.")
			; (defconst TAUNT-250-LATEI-TRASHUSSARS "I am using hussars to conserve gold.")
			; (defconst TAUNT-250-LATEI-TRASHGENS "I am using genitours to conserve gold.")
			; (defconst TAUNT-250-LATEI-HUSSARS "I am using hussars to conserve gold.")
			; (defconst TAUNT-250-PRIMARY-UNIT "Primary unit: %s")
			; (defconst TAUNT-250-SUPPORT-UNIT "Support unit: %s")
			; (defconst TAUNT-250-NO-PRIMARY-UNIT "Primary unit: None")
			; (defconst TAUNT-250-NO-SUPPORT-UNIT "Support unit: None")
			; (defconst TAUNT-250-ENEMY "The General by Leif Ericson.")

		;Functions
		(defconst CHAT-LOCAL-LIST-NOT-EMPTY "local list not empty")
		(defconst CHAT-RESET-GROUP-0 "Reset Group 0")

		;Army Comp
		; (defconst CHAT-ADJUST-FOR-BUILDINGS-COMPLETE "Adjust for buildings complete: %d")
		; (defconst CHAT-ADJUST-FOR-TECHS-COMPLETE "Adjust for techs complete: %d")
		; (defconst CHAT-ADJUST-FOR-TECHS-NOT-AVAILABLE "Adjust for techs not available: %d")
		(defconst CHAT-COUNTER-TYPE "Counter adj type: %d")
		(defconst CHAT-COUNTER-ENEMY-TYPE "Counter enemy unit: %d")
		(defconst CHAT-COUNTER-ENEMY-CAMEL-ARCHER "Counter enemy camel archers")
		(defconst CHAT-COUNTER-SUPPORT-TYPE "Countering with: %d")
		(defconst CHAT-COUNTER-AMOUNT "Counter score adjustment: %d")

		;Army DUC
		(defconst CHAT-LOG-ENTRY "---Log Entry---")
		(defconst CHAT-LOG-TIME "Log Time: %d")
		(defconst CHAT-LOG-PLAYER "Log Player: %d")
		(defconst CHAT-LOOP-ID "Loop #%d Start")
		(defconst CHAT-LOOP-PASS "Loop Pass %d")
		(defconst CHAT-CREATE-GROUP "Create Group %d")
		(defconst CHAT-COMBINE-GROUPS "Combine groups %d")
		(defconst CHAT-EXPLORE-AROUND-TOWN "Explore around town, group %d")
		(defconst CHAT-SET-NEW-DESTINATION "Set New Destination, ver %d")
		(defconst CHAT-SET-NEW-DESTINATION-X "New Destination X: %d")
		(defconst CHAT-SET-NEW-DESTINATION-Y "New Destination Y: %d")
		(defconst CHAT-NEW-SCOUT-POINT "Group %d new scout point")
		(defconst CHAT-NEW-SCOUT-POINT-X "New Scout Point X: %d")
		(defconst CHAT-NEW-SCOUT-POINT-Y "New Scout Point Y: %d")
		(defconst CHAT-GROUP-IN-RANGE "group %d in range")
		(defconst CHAT-GROUP-DIED "Group %d died")
		(defconst CHAT-AVOID-OBJECT "Get group %d away from scary object")
		(defconst CHAT-AVOIDANCE-COUNTER "Avoidance counter: %d")
		(defconst CHAT-OBJECTS-FOUND-CHECKPOINT "Objects Found Checkpoint: %d")
		(defconst CHAT-OBJECTS-FOUND-LOCAL "Local Found: %d")
		(defconst CHAT-OBJECTS-FOUND-REMOTE "Remote Found: %d")
		(defconst CHAT-UNITS-FOUND "Units found: %d")
		(defconst CHAT-UNITS-FOUND-BY-GROUP "Units found by Group: %d")
		(defconst CHAT-NEW-TARGET "New Target, group %d")
		(defconst CHAT-NEW-TARGET-ID "New Target ID: %d")
		(defconst CHAT-INCREASE-DESTINATION-TIME "Increase destination time: %d")
		(defconst CHAT-GROUP-LOCATION-INACCESSIBLE "Group %d location inaccessible")
		(defconst CHAT-GATHER-GROUP "gather group %d")
		(defconst CHAT-SEND-UNIT-TO-JOIN-GROUP "Send unit to join group %d")
		(defconst CHAT-SET-MAIN-GROUP "Set main group: %d")
        (defconst CHAT-GROUP-SIZE "Group size: %d")
        (defconst CHAT-GROUP-SIZE-DUC "Group size from DUC search: %d")
        (defconst CHAT-FLAG "Group flag value: %d")
        (defconst CHAT-TYPE-FLAG "Group type flag value: %d")
        (defconst CHAT-ACTION "Group action: %d")
        (defconst CHAT-TARGET-OBJECT "Group target object ID: %d")
        (defconst CHAT-DESTINATION-TIME "Group destination time: %d")
        (defconst CHAT-AVOIDANCE-COUNTER "Group avoidance counter: %d")
        (defconst CHAT-LOCATION-X "Group x-location: %d")
        (defconst CHAT-LOCATION-Y "Group y-location: %d")
        (defconst CHAT-DESTINATION-X "Group x-destination: %d")
        (defconst CHAT-DESTINATION-Y "Group y-destination: %d")

		;Building Construction
		(defconst CHAT-BUILD-BACKUP-BUILDING "Build Backup %s")
		(defconst CHAT-BUILD-BACKUP-TC-GOLD "Build Town Center with gold backup rules")
		(defconst CHAT-BUILD-BACKUP-TC-WOOD "Build Town Center with wood backup rules")
		(defconst CHAT-BUILD-LINE "Build Line %s")
		(defconst CHAT-BUILD-POINT-NORMAL "DUC place point normal %d")
		(defconst CHAT-BUILD-TOWER-BY-DROPSITE "Build Tower by dropsite")
		(defconst CHAT-BUILD-TOWER-BY-GATHER-POINT "Build Tower by soldier gather point")
		(defconst CHAT-CAMP-GOLD "gold camp")
		(defconst CHAT-CAMP-GOLD-INCREASE-DISTANCE "Increase gold camp dist: %d")
		(defconst CHAT-CAMP-MINING-PEACEFUL-DISTANCE "Set mining camp max dist to town size: %d")
		(defconst CHAT-CAMP-MINING-SET-DISTANCE "Set mining camp max dist: %d")
		(defconst CHAT-CAMP-MINING-MAX-DISTANCE "Set mining camp distance to max: %d")
		(defconst CHAT-CAMP-STONE "stone camp")
		(defconst CHAT-CAMP-STONE-INCREASE-DISTANCE "Increase stone camp dist: %d")
		(defconst CHAT-CAMP-WOOD-FIRST "first wood camp")
		(defconst CHAT-CAMP-WOOD-SECOND "second wood camp")
		(defconst CHAT-CAMP-WOOD-LATER "later wood camp")
		(defconst CHAT-MILL-BACKUP "backup mill")
		(defconst CHAT-MILL-FARMING "farming mill")
		(defconst CHAT-MILL-FORAGE "forage mill")
		(defconst CHAT-MILL-DEER "deer mill")
		(defconst CHAT-NO-LOCATION-FOR-GOLD-CAMP "can't find gold camp location")
		(defconst CHAT-STOP-SENDING-TC-BUILDERS "Stop sending TC builders")
		(defconst CHAT-STOP-SENDING-CASTLE-BUILDERS "Stop sending castle builders")
		(defconst CHAT-STOP-SENDING-KREPOST-BUILDERS "Stop sending krepost builders")
		(defconst CHAT-STOP-SENDING-SIEGE-WORKSHOP-BUILDERS "Stop sending siege workshop builders")
		(defconst CHAT-STOP-SENDING-UNIVERSITY-BUILDERS "Stop sending university builders")
		(defconst CHAT-STOP-SENDING-MONASTERY-BUILDERS "Stop sending monastery builders")
		(defconst CHAT-STOP-SENDING-BARRACKS-BUILDERS "Stop sending barracks builders")
		(defconst CHAT-STOP-SENDING-ARCHERY-RANGE-BUILDERS "Stop sending archery range builders")
		(defconst CHAT-STOP-SENDING-STABLE-BUILDERS "Stop sending stable builders")
		(defconst CHAT-STOP-SENDING-MARKET-BUILDERS "Stop sending market builders")
		(defconst CHAT-STOP-SENDING-BLACKSMITH-BUILDERS "Stop sending blacksmith builders")
		(defconst CHAT-STOP-SENDING-TOWER-BUILDERS "Stop sending tower builders")

		;Chat
		(defconst CHAT-DEFEATED "I'm about to be defeated. Keep on without me!")
		(defconst CHAT-GG "gg")
		(defconst CHAT-REQUEST-FOOD-FOR-VILLAGERS1 "3 No villagers to gather food, no food to train them.")
		(defconst CHAT-REQUEST-FOOD-FOR-VILLAGERS2 "Catch-22. Food please? 11")
		(defconst CHAT-REQUEST-WOOD-FOR-CAMP1 "4 Can't build LC or TC. Out of wood and can't gather it.")
		(defconst CHAT-REQUEST-WOOD-FOR-CAMP2 "Catch-22. Wood please? 11")
		(defconst CHAT-RESIGN "Well fought. We shall do battle again another day.")

		;Debug
		(defconst CHAT-NO-TARGET-PLAYER-BUILDINGS "Bug! No buildings for target player (player %d) found on map.")
		(defconst CHAT-CLOSEST-ENEMY-BUG "Closest enemy not set properly")

		;Defense
		; (defconst CHAT-CHECK-TOWN-IS-SAFE "wait to see if town is safe")
		; (defconst CHAT-TOWN-IS-SAFE "town is safe")
		; (defconst CHAT-TOWN-UNDER-ATTACK "town under attack")
		(defconst CHAT-REDUCE-TS-FOR-TOWERS "Reduce TS against trush: %d")

		;DUC
		(defconst CHAT-BOAR-RESET "reset boar-hunting")
		(defconst CHAT-BOAR-RESEND-LURER "boar lurer was retasked, send lurer again")
		(defconst CHAT-BOAR-READY-TO-LURE "ready to lure")
		(defconst CHAT-BOAR-SEARCH-FOR-BOAR "search for boar")
		(defconst CHAT-BOAR-SET-BOAR "set boar to hunt")
		(defconst CHAT-BOAR-FIND-LURER "find boar lurer")
		(defconst CHAT-BOAR-DROP-RESOURCES "drop resources before luring")
		(defconst CHAT-BOAR-TARGET-BOAR "target boar")
		(defconst CHAT-BOAR-RETREAT-LURER "retreat boar lurer to TC")
		(defconst CHAT-BOAR-GET-ASSISTANT-HUNTERS "get assistant boar hunters")
		(defconst CHAT-BOAR-ASSIST "assist hunting boar")
		(defconst CHAT-BOAR-RUNNING-AWAY "boar is running away, stop hunting")
		(defconst CHAT-BOAR-HUNTED "boar is hunted")
		(defconst CHAT-SCOUTING-AUTO "switch to auto scouting")
		(defconst CHAT-SCOUTING-POINT-FAR-AWAY "stop DUC scouting, next point far away: %d tiles")
		(defconst CHAT-SCOUTING-POINT-INACCESSIBLE "point inaccessible, find new point")
		(defconst CHAT-START-TSA-PATROL "Patrol TSA Attack")
		(defconst CHAT-TARGET-RAM-WITH-VILLAGERS "Destroying enemy ram with vils")

		;Market
		(defconst CHAT-BUY-FOOD "buy food")
		(defconst CHAT-BUY-WOOD "buy wood")
		(defconst CHAT-BUY-STONE "buy stone")
		(defconst CHAT-BUY-FOOD-EXCESS-GOLD "excess gold, buy food")
		(defconst CHAT-BUY-WOOD-EXCESS-GOLD "excess gold, buy wood")
		(defconst CHAT-BUY-STONE-EXCESS-GOLD "excess gold, buy stone")
		(defconst CHAT-BUY-FOOD-CASTLE-AGE "buy food for castle age")
		(defconst CHAT-BUY-FOOD-IMPERIAL-AGE "buy food for imperial age")
		(defconst CHAT-BUY-FOOD-TECHS "buy food for techs")
		(defconst CHAT-BUY-WOOD-TECHS "buy wood for techs/buildings")
		(defconst CHAT-BUY-STONE-TECHS "buy stone for techs/buildings")
		(defconst CHAT-SELL-FOOD "sell food")
		(defconst CHAT-SELL-WOOD "sell wood")
		(defconst CHAT-SELL-STONE "sell stone")
		(defconst CHAT-SELL-FOOD-EXCESS "excess food, sell")
		(defconst CHAT-SELL-WOOD-EXCESS "excess wood, sell")
		(defconst CHAT-SELL-STONE-EXCESS "excess stone, sell")
		(defconst CHAT-SELL-FOOD-CASTLE-AGE "sell food for castle age")
		(defconst CHAT-SELL-WOOD-CASTLE-AGE "sell wood for castle age")
		(defconst CHAT-SELL-STONE-CASTLE-AGE "sell stone for castle age")
		(defconst CHAT-SELL-FOOD-IMPERIAL-AGE "sell food for imperial age")
		(defconst CHAT-SELL-WOOD-IMPERIAL-AGE "sell wood for imperial age")
		(defconst CHAT-SELL-STONE-IMPERIAL-AGE "sell stone for imperial age")
		(defconst CHAT-SELL-STONE-EAGLES "sell stone for eagle warriors")
		(defconst CHAT-SELL-FOOD-TECHS "need gold for techs, sell food")
		(defconst CHAT-SELL-WOOD-TECHS "need gold for techs, sell wood")
		(defconst CHAT-SELL-STONE-TECHS "need gold for techs, sell stone")
		(defconst CHAT-SELL-FOOD-FOR-WOOD "need wood for techs/buildings, sell food")
		(defconst CHAT-SELL-FOOD-FOR-STONE "need stone for techs/buildings, sell food")
		(defconst CHAT-SELL-WOOD-FOR-FOOD "need food for techs, sell wood")
		(defconst CHAT-SELL-WOOD-FOR-STONE "need stone for techs/buildings, sell wood")
		(defconst CHAT-SELL-STONE-FOR-FOOD "need food for techs, sell stone")
		(defconst CHAT-SELL-STONE-FOR-WOOD "need wood for techs/buildings, sell stone")

		;Nomad
		(defconst CHAT-NOMAD-MAP-DETECTED "Nomad map detected")

		;Personality
		(defconst CHAT-CUAUHTEMOC1 "I am Cuauhtemoc.")
		(defconst CHAT-CUAUHTEMOC2 "I am Cuauhtemoc, Eagle Warrior of Tenochtitlan.")
		(defconst CHAT-CUAUHTEMOC3 "I am Cuauhtemoc, Jaguar Warrior of Tenochtitlan.")
		(defconst CHAT-CUAUHTEMOC4 "I am Cuauhtemoc, Emperor of Tenochtitlan.")
		(defconst CHAT-MONTEZUMA1 "My magicians have foretold it.")
		(defconst CHAT-MONTEZUMA2 "It is time for a garland war!")
		(defconst CHAT-EDWARD-LONGSHANKS1 "I see you don't have William Wallace to save you.")
		(defconst CHAT-EDWARD-LONGSHANKS2 "Good.")
		(defconst CHAT-EDWARD-LONGSHANKS3 "Wallace? What are you doing here?")
		(defconst CHAT-EDWARD-LONGSHANKS4 "Your'e not going to turn traitor are you, William Wallace?")
		(defconst CHAT-HENRY-V1 "For he today that sheds his blood with me shall be my brother.")
		(defconst CHAT-HENRY-V2 "I look forward to drawing our swords together, my friend.")
		(defconst CHAT-ARTHUR1 "I am Arthur, King of the Britons.")
		(defconst CHAT-LA-HIRE1 "La Hire wishes to kill something!")
		(defconst CHAT-WANG-KON1 "Want to see the might of Goryeo today?")
		(defconst CHAT-WANG-KON2 "It would be my pleasure to show you.")
		(defconst CHAT-YI-SUN-SHIN1 "No turtle ships??? Dang.")
		(defconst CHAT-VIETNAMESE1 "Vietnamese scouts are the best.")
		(defconst CHAT-VIETNAMESE2 "Found %s.")
		(defconst CHAT-VIETNAMESE3 "%s is here.")
		(defconst CHAT-VIETNAMESE4 "Send taunt 16, and I will flare enemy locations again.")
		(defconst CHAT-VIETNAMESE5 "Here are the enemy locations.")

		;Tribute
		(defconst CHAT-TRIBUTE-FOOD-FOR-VILS "Sending food to player %d for villagers")
		(defconst CHAT-TRIBUTE-WOOD-FOR-TC "Sending wood to player %d for TC")
		(defconst CHAT-TRIBUTE-STONE-FOR-TC "Sending stone to player %d for TC")
		(defconst CHAT-TRIBUTE-FOOD-FOR-BOOM "Sending food to player %d for booming")

	;---------------------------
	;	Civ Loading Constants
	;---------------------------

		#load-if-defined BRITON-CIV
			(defconst VILS-FOR-LUMBER-CAMP 6)
		#end-if

		#load-if-defined CHINESE-CIV
			(defconst VILS-FOR-LUMBER-CAMP 8)
		#end-if

		#load-if-not-defined BRITON-CIV
		#load-if-not-defined CHINESE-CIV
			(defconst VILS-FOR-LUMBER-CAMP 7)
		#end-if
		#end-if

		#load-if-defined AZTEC-CIV
			(defconst scout-unit eagle-warrior)
		#end-if
		#load-if-defined GURJARAS-CIV
			(defconst scout-unit camel-scout)
		#end-if
		#load-if-defined INCAN-CIV
			(defconst scout-unit eagle-warrior)
		#end-if
		#load-if-defined MAYAN-CIV
			(defconst scout-unit eagle-warrior)
		#end-if
		#load-if-not-defined AZTEC-CIV
		#load-if-not-defined GURJARAS-CIV
		#load-if-not-defined INCAN-CIV
		#load-if-not-defined MAYAN-CIV
			(defconst scout-unit scout-cavalry)
		#end-if
		#end-if
		#end-if
		#end-if

		#load-if-defined BENGALIS-CIV
			(defconst NUM-GENERALS 6)
		#end-if
		#load-if-defined BOHEMIANS-CIV
			(defconst NUM-GENERALS 6)
		#end-if
		#load-if-defined BYZANTINE-CIV
			(defconst NUM-GENERALS 6)
		#end-if
		#load-if-defined DRAVIDIANS-CIV
			(defconst NUM-GENERALS 6)
		#end-if
		#load-if-defined INDIAN-CIV
			#load-if-defined DE-AVAILABLE
				(defconst NUM-GENERALS 6)
			#else
				(defconst NUM-GENERALS 7)
			#end-if
		#end-if
		#load-if-defined ITALIAN-CIV
			(defconst NUM-GENERALS 6)
		#end-if
		#load-if-defined JAPANESE-CIV
			(defconst NUM-GENERALS 6)
		#end-if
		#load-if-defined SARACEN-CIV
			(defconst NUM-GENERALS 6)
		#end-if
		#load-if-defined SLAVIC-CIV
			(defconst NUM-GENERALS 6)
		#end-if

		#load-if-not-defined BENGALIS-CIV
		#load-if-not-defined BOHEMIANS-CIV
		#load-if-not-defined BYZANTINE-CIV
		#load-if-not-defined DRAVIDIANS-CIV
		#load-if-not-defined INDIAN-CIV
		#load-if-not-defined ITALIAN-CIV
		#load-if-not-defined JAPANESE-CIV
		#load-if-not-defined SARACEN-CIV
		#load-if-not-defined SLAVIC-CIV
			(defconst NUM-GENERALS 5)
		#end-if
		#end-if
		#end-if
		#end-if
		#end-if
		#end-if
		#end-if
		#end-if
		#end-if

		(load "The General 1.2/Civ Unique Constants")
		(load "The General 1.2/Civ Tech Tree Constants")

		#load-if-defined UP-GAME-WK

			(defconst SECOND-UT-AVAILABLE YES)

		#else

			(defconst SECOND-UT-AVAILABLE NO)

		#end-if
	;--------------------------------
	;	Map Size Loading Constants
	;--------------------------------

		;Unfortunately, Archipelago, Fortress, Islands, Migration, and Team Islands maps are larger than usual maps.
		;So we have to define the map sizes separately for each of these maps.
		#load-if-defined TINY-MAP
			#load-if-defined ARCHIPELAGO-MAP
			(defconst TEN-PERCENT-MAP-SIZE 14)
			(defconst TWENTY-PERCENT-MAP-SIZE 29)
			(defconst THIRTY-PERCENT-MAP-SIZE 43)
			(defconst FORTY-PERCENT-MAP-SIZE 58)
			(defconst FIFTY-PERCENT-MAP-SIZE 72)
			(defconst SIXTY-PERCENT-MAP-SIZE 86)
			(defconst SEVENTY-PERCENT-MAP-SIZE 101)
			(defconst EIGHTY-PERCENT-MAP-SIZE 115)
			(defconst NINETY-PERCENT-MAP-SIZE 130)
			(defconst HUNDRED-PERCENT-MAP-SIZE 144)
			(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 143)
			(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 216)
			#else
				#load-if-defined FORTRESS-MAP
				(defconst TEN-PERCENT-MAP-SIZE 14)
				(defconst TWENTY-PERCENT-MAP-SIZE 29)
				(defconst THIRTY-PERCENT-MAP-SIZE 43)
				(defconst FORTY-PERCENT-MAP-SIZE 58)
				(defconst FIFTY-PERCENT-MAP-SIZE 72)
				(defconst SIXTY-PERCENT-MAP-SIZE 86)
				(defconst SEVENTY-PERCENT-MAP-SIZE 101)
				(defconst EIGHTY-PERCENT-MAP-SIZE 115)
				(defconst NINETY-PERCENT-MAP-SIZE 130)
				(defconst HUNDRED-PERCENT-MAP-SIZE 144)
				(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 143)
				(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 216)
				#else
					#load-if-defined ISLANDS-MAP
					(defconst TEN-PERCENT-MAP-SIZE 14)
					(defconst TWENTY-PERCENT-MAP-SIZE 29)
					(defconst THIRTY-PERCENT-MAP-SIZE 43)
					(defconst FORTY-PERCENT-MAP-SIZE 58)
					(defconst FIFTY-PERCENT-MAP-SIZE 72)
					(defconst SIXTY-PERCENT-MAP-SIZE 86)
					(defconst SEVENTY-PERCENT-MAP-SIZE 101)
					(defconst EIGHTY-PERCENT-MAP-SIZE 115)
					(defconst NINETY-PERCENT-MAP-SIZE 130)
					(defconst HUNDRED-PERCENT-MAP-SIZE 144)
					(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 143)
					(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 216)
					#else
						#load-if-defined MIGRATION-MAP
						(defconst TEN-PERCENT-MAP-SIZE 14)
						(defconst TWENTY-PERCENT-MAP-SIZE 29)
						(defconst THIRTY-PERCENT-MAP-SIZE 43)
						(defconst FORTY-PERCENT-MAP-SIZE 58)
						(defconst FIFTY-PERCENT-MAP-SIZE 72)
						(defconst SIXTY-PERCENT-MAP-SIZE 86)
						(defconst SEVENTY-PERCENT-MAP-SIZE 101)
						(defconst EIGHTY-PERCENT-MAP-SIZE 115)
						(defconst NINETY-PERCENT-MAP-SIZE 130)
						(defconst HUNDRED-PERCENT-MAP-SIZE 144)
						(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 143)
						(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 216)
						#else
							#load-if-defined TEAM-ISLANDS-MAP
							(defconst TEN-PERCENT-MAP-SIZE 14)
							(defconst TWENTY-PERCENT-MAP-SIZE 29)
							(defconst THIRTY-PERCENT-MAP-SIZE 43)
							(defconst FORTY-PERCENT-MAP-SIZE 58)
							(defconst FIFTY-PERCENT-MAP-SIZE 72)
							(defconst SIXTY-PERCENT-MAP-SIZE 86)
							(defconst SEVENTY-PERCENT-MAP-SIZE 101)
							(defconst EIGHTY-PERCENT-MAP-SIZE 115)
							(defconst NINETY-PERCENT-MAP-SIZE 130)
							(defconst HUNDRED-PERCENT-MAP-SIZE 144)
							(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 143)
							(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 216)
							#else
								(defconst TEN-PERCENT-MAP-SIZE 12)
								(defconst TWENTY-PERCENT-MAP-SIZE 24)
								(defconst THIRTY-PERCENT-MAP-SIZE 36)
								(defconst FORTY-PERCENT-MAP-SIZE 48)
								(defconst FIFTY-PERCENT-MAP-SIZE 60)
								(defconst SIXTY-PERCENT-MAP-SIZE 72)
								(defconst SEVENTY-PERCENT-MAP-SIZE 84)
								(defconst EIGHTY-PERCENT-MAP-SIZE 96)
								(defconst NINETY-PERCENT-MAP-SIZE 108)
								(defconst HUNDRED-PERCENT-MAP-SIZE 120)
								(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 119)
								(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 180)
							#end-if
						#end-if
					#end-if
				#end-if
			#end-if
		#end-if

		#load-if-defined SMALL-MAP
			#load-if-defined ARCHIPELAGO-MAP
			(defconst TEN-PERCENT-MAP-SIZE 17)
			(defconst TWENTY-PERCENT-MAP-SIZE 34)
			(defconst THIRTY-PERCENT-MAP-SIZE 50)
			(defconst FORTY-PERCENT-MAP-SIZE 67)
			(defconst FIFTY-PERCENT-MAP-SIZE 84)
			(defconst SIXTY-PERCENT-MAP-SIZE 101)
			(defconst SEVENTY-PERCENT-MAP-SIZE 118)
			(defconst EIGHTY-PERCENT-MAP-SIZE 134)
			(defconst NINETY-PERCENT-MAP-SIZE 151)
			(defconst HUNDRED-PERCENT-MAP-SIZE 168)
			(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 167)
			(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 252)
			#else
				#load-if-defined FORTRESS-MAP
				(defconst TEN-PERCENT-MAP-SIZE 17)
				(defconst TWENTY-PERCENT-MAP-SIZE 34)
				(defconst THIRTY-PERCENT-MAP-SIZE 50)
				(defconst FORTY-PERCENT-MAP-SIZE 67)
				(defconst FIFTY-PERCENT-MAP-SIZE 84)
				(defconst SIXTY-PERCENT-MAP-SIZE 101)
				(defconst SEVENTY-PERCENT-MAP-SIZE 118)
				(defconst EIGHTY-PERCENT-MAP-SIZE 134)
				(defconst NINETY-PERCENT-MAP-SIZE 151)
				(defconst HUNDRED-PERCENT-MAP-SIZE 168)
				(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 167)
				(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 252)
				#else
					#load-if-defined ISLANDS-MAP
					(defconst TEN-PERCENT-MAP-SIZE 17)
					(defconst TWENTY-PERCENT-MAP-SIZE 34)
					(defconst THIRTY-PERCENT-MAP-SIZE 50)
					(defconst FORTY-PERCENT-MAP-SIZE 67)
					(defconst FIFTY-PERCENT-MAP-SIZE 84)
					(defconst SIXTY-PERCENT-MAP-SIZE 101)
					(defconst SEVENTY-PERCENT-MAP-SIZE 118)
					(defconst EIGHTY-PERCENT-MAP-SIZE 134)
					(defconst NINETY-PERCENT-MAP-SIZE 151)
					(defconst HUNDRED-PERCENT-MAP-SIZE 168)
					(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 167)
					(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 252)
					#else
						#load-if-defined MIGRATION-MAP
						(defconst TEN-PERCENT-MAP-SIZE 17)
						(defconst TWENTY-PERCENT-MAP-SIZE 34)
						(defconst THIRTY-PERCENT-MAP-SIZE 50)
						(defconst FORTY-PERCENT-MAP-SIZE 67)
						(defconst FIFTY-PERCENT-MAP-SIZE 84)
						(defconst SIXTY-PERCENT-MAP-SIZE 101)
						(defconst SEVENTY-PERCENT-MAP-SIZE 118)
						(defconst EIGHTY-PERCENT-MAP-SIZE 134)
						(defconst NINETY-PERCENT-MAP-SIZE 151)
						(defconst HUNDRED-PERCENT-MAP-SIZE 168)
						(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 167)
						(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 252)
						#else
							#load-if-defined TEAM-ISLANDS-MAP
							(defconst TEN-PERCENT-MAP-SIZE 17)
							(defconst TWENTY-PERCENT-MAP-SIZE 34)
							(defconst THIRTY-PERCENT-MAP-SIZE 50)
							(defconst FORTY-PERCENT-MAP-SIZE 67)
							(defconst FIFTY-PERCENT-MAP-SIZE 84)
							(defconst SIXTY-PERCENT-MAP-SIZE 101)
							(defconst SEVENTY-PERCENT-MAP-SIZE 118)
							(defconst EIGHTY-PERCENT-MAP-SIZE 134)
							(defconst NINETY-PERCENT-MAP-SIZE 151)
							(defconst HUNDRED-PERCENT-MAP-SIZE 168)
							(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 167)
							(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 252)
							#else
								(defconst TEN-PERCENT-MAP-SIZE 14)
								(defconst TWENTY-PERCENT-MAP-SIZE 29)
								(defconst THIRTY-PERCENT-MAP-SIZE 43)
								(defconst FORTY-PERCENT-MAP-SIZE 58)
								(defconst FIFTY-PERCENT-MAP-SIZE 72)
								(defconst SIXTY-PERCENT-MAP-SIZE 86)
								(defconst SEVENTY-PERCENT-MAP-SIZE 101)
								(defconst EIGHTY-PERCENT-MAP-SIZE 115)
								(defconst NINETY-PERCENT-MAP-SIZE 130)
								(defconst HUNDRED-PERCENT-MAP-SIZE 144)
								(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 143)
								(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 216)
							#end-if
						#end-if
					#end-if
				#end-if
			#end-if
		#end-if
		
		#load-if-defined MEDIUM-MAP
			#load-if-defined ARCHIPELAGO-MAP
			(defconst TEN-PERCENT-MAP-SIZE 20)
			(defconst TWENTY-PERCENT-MAP-SIZE 40)
			(defconst THIRTY-PERCENT-MAP-SIZE 60)
			(defconst FORTY-PERCENT-MAP-SIZE 80)
			(defconst FIFTY-PERCENT-MAP-SIZE 100)
			(defconst SIXTY-PERCENT-MAP-SIZE 120)
			(defconst SEVENTY-PERCENT-MAP-SIZE 140)
			(defconst EIGHTY-PERCENT-MAP-SIZE 160)
			(defconst NINETY-PERCENT-MAP-SIZE 180)
			(defconst HUNDRED-PERCENT-MAP-SIZE 200)
			(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 199)
			(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 300)
			#else
				#load-if-defined FORTRESS-MAP
				(defconst TEN-PERCENT-MAP-SIZE 20)
				(defconst TWENTY-PERCENT-MAP-SIZE 40)
				(defconst THIRTY-PERCENT-MAP-SIZE 60)
				(defconst FORTY-PERCENT-MAP-SIZE 80)
				(defconst FIFTY-PERCENT-MAP-SIZE 100)
				(defconst SIXTY-PERCENT-MAP-SIZE 120)
				(defconst SEVENTY-PERCENT-MAP-SIZE 140)
				(defconst EIGHTY-PERCENT-MAP-SIZE 160)
				(defconst NINETY-PERCENT-MAP-SIZE 180)
				(defconst HUNDRED-PERCENT-MAP-SIZE 200)
				(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 199)
				(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 300)
				#else
					#load-if-defined ISLANDS-MAP
					(defconst TEN-PERCENT-MAP-SIZE 20)
					(defconst TWENTY-PERCENT-MAP-SIZE 40)
					(defconst THIRTY-PERCENT-MAP-SIZE 60)
					(defconst FORTY-PERCENT-MAP-SIZE 80)
					(defconst FIFTY-PERCENT-MAP-SIZE 100)
					(defconst SIXTY-PERCENT-MAP-SIZE 120)
					(defconst SEVENTY-PERCENT-MAP-SIZE 140)
					(defconst EIGHTY-PERCENT-MAP-SIZE 160)
					(defconst NINETY-PERCENT-MAP-SIZE 180)
					(defconst HUNDRED-PERCENT-MAP-SIZE 200)
					(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 199)
					(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 300)
					#else
						#load-if-defined MIGRATION-MAP
						(defconst TEN-PERCENT-MAP-SIZE 20)
						(defconst TWENTY-PERCENT-MAP-SIZE 40)
						(defconst THIRTY-PERCENT-MAP-SIZE 60)
						(defconst FORTY-PERCENT-MAP-SIZE 80)
						(defconst FIFTY-PERCENT-MAP-SIZE 100)
						(defconst SIXTY-PERCENT-MAP-SIZE 120)
						(defconst SEVENTY-PERCENT-MAP-SIZE 140)
						(defconst EIGHTY-PERCENT-MAP-SIZE 160)
						(defconst NINETY-PERCENT-MAP-SIZE 180)
						(defconst HUNDRED-PERCENT-MAP-SIZE 200)
						(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 199)
						(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 300)
						#else
							#load-if-defined TEAM-ISLANDS-MAP
							(defconst TEN-PERCENT-MAP-SIZE 20)
							(defconst TWENTY-PERCENT-MAP-SIZE 40)
							(defconst THIRTY-PERCENT-MAP-SIZE 60)
							(defconst FORTY-PERCENT-MAP-SIZE 80)
							(defconst FIFTY-PERCENT-MAP-SIZE 100)
							(defconst SIXTY-PERCENT-MAP-SIZE 120)
							(defconst SEVENTY-PERCENT-MAP-SIZE 140)
							(defconst EIGHTY-PERCENT-MAP-SIZE 160)
							(defconst NINETY-PERCENT-MAP-SIZE 180)
							(defconst HUNDRED-PERCENT-MAP-SIZE 200)
							(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 199)
							(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 300)
							#else
								(defconst TEN-PERCENT-MAP-SIZE 17)
								(defconst TWENTY-PERCENT-MAP-SIZE 34)
								(defconst THIRTY-PERCENT-MAP-SIZE 50)
								(defconst FORTY-PERCENT-MAP-SIZE 67)
								(defconst FIFTY-PERCENT-MAP-SIZE 84)
								(defconst SIXTY-PERCENT-MAP-SIZE 101)
								(defconst SEVENTY-PERCENT-MAP-SIZE 118)
								(defconst EIGHTY-PERCENT-MAP-SIZE 134)
								(defconst NINETY-PERCENT-MAP-SIZE 151)
								(defconst HUNDRED-PERCENT-MAP-SIZE 168)
								(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 167)
								(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 252)
							#end-if
						#end-if
					#end-if
				#end-if
			#end-if
		#end-if
		
		#load-if-defined NORMAL-MAP
			#load-if-defined ARCHIPELAGO-MAP
			(defconst TEN-PERCENT-MAP-SIZE 22)
			(defconst TWENTY-PERCENT-MAP-SIZE 44)
			(defconst THIRTY-PERCENT-MAP-SIZE 66)
			(defconst FORTY-PERCENT-MAP-SIZE 88)
			(defconst FIFTY-PERCENT-MAP-SIZE 110)
			(defconst SIXTY-PERCENT-MAP-SIZE 132)
			(defconst SEVENTY-PERCENT-MAP-SIZE 154)
			(defconst EIGHTY-PERCENT-MAP-SIZE 176)
			(defconst NINETY-PERCENT-MAP-SIZE 198)
			(defconst HUNDRED-PERCENT-MAP-SIZE 220)
			(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 219)
			(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 330)
			#else
				#load-if-defined FORTRESS-MAP
				(defconst TEN-PERCENT-MAP-SIZE 22)
				(defconst TWENTY-PERCENT-MAP-SIZE 44)
				(defconst THIRTY-PERCENT-MAP-SIZE 66)
				(defconst FORTY-PERCENT-MAP-SIZE 88)
				(defconst FIFTY-PERCENT-MAP-SIZE 110)
				(defconst SIXTY-PERCENT-MAP-SIZE 132)
				(defconst SEVENTY-PERCENT-MAP-SIZE 154)
				(defconst EIGHTY-PERCENT-MAP-SIZE 176)
				(defconst NINETY-PERCENT-MAP-SIZE 198)
				(defconst HUNDRED-PERCENT-MAP-SIZE 220)
				(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 219)
				(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 330)
				#else
					#load-if-defined ISLANDS-MAP
					(defconst TEN-PERCENT-MAP-SIZE 22)
					(defconst TWENTY-PERCENT-MAP-SIZE 44)
					(defconst THIRTY-PERCENT-MAP-SIZE 66)
					(defconst FORTY-PERCENT-MAP-SIZE 88)
					(defconst FIFTY-PERCENT-MAP-SIZE 110)
					(defconst SIXTY-PERCENT-MAP-SIZE 132)
					(defconst SEVENTY-PERCENT-MAP-SIZE 154)
					(defconst EIGHTY-PERCENT-MAP-SIZE 176)
					(defconst NINETY-PERCENT-MAP-SIZE 198)
					(defconst HUNDRED-PERCENT-MAP-SIZE 220)
					(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 219)
					(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 330)
					#else
						#load-if-defined MIGRATION-MAP
						(defconst TEN-PERCENT-MAP-SIZE 22)
						(defconst TWENTY-PERCENT-MAP-SIZE 44)
						(defconst THIRTY-PERCENT-MAP-SIZE 66)
						(defconst FORTY-PERCENT-MAP-SIZE 88)
						(defconst FIFTY-PERCENT-MAP-SIZE 110)
						(defconst SIXTY-PERCENT-MAP-SIZE 132)
						(defconst SEVENTY-PERCENT-MAP-SIZE 154)
						(defconst EIGHTY-PERCENT-MAP-SIZE 176)
						(defconst NINETY-PERCENT-MAP-SIZE 198)
						(defconst HUNDRED-PERCENT-MAP-SIZE 220)
						(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 219)
						(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 330)
						#else
							#load-if-defined TEAM-ISLANDS-MAP
							(defconst TEN-PERCENT-MAP-SIZE 22)
							(defconst TWENTY-PERCENT-MAP-SIZE 44)
							(defconst THIRTY-PERCENT-MAP-SIZE 66)
							(defconst FORTY-PERCENT-MAP-SIZE 88)
							(defconst FIFTY-PERCENT-MAP-SIZE 110)
							(defconst SIXTY-PERCENT-MAP-SIZE 132)
							(defconst SEVENTY-PERCENT-MAP-SIZE 154)
							(defconst EIGHTY-PERCENT-MAP-SIZE 176)
							(defconst NINETY-PERCENT-MAP-SIZE 198)
							(defconst HUNDRED-PERCENT-MAP-SIZE 220)
							(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 219)
							(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 330)
							#else
								(defconst TEN-PERCENT-MAP-SIZE 20)
								(defconst TWENTY-PERCENT-MAP-SIZE 40)
								(defconst THIRTY-PERCENT-MAP-SIZE 60)
								(defconst FORTY-PERCENT-MAP-SIZE 80)
								(defconst FIFTY-PERCENT-MAP-SIZE 100)
								(defconst SIXTY-PERCENT-MAP-SIZE 120)
								(defconst SEVENTY-PERCENT-MAP-SIZE 140)
								(defconst EIGHTY-PERCENT-MAP-SIZE 160)
								(defconst NINETY-PERCENT-MAP-SIZE 180)
								(defconst HUNDRED-PERCENT-MAP-SIZE 200)
								(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 199)
								(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 300)
							#end-if
						#end-if
					#end-if
				#end-if
			#end-if
		#end-if
		
		#load-if-defined LARGE-MAP
			#load-if-defined ARCHIPELAGO-MAP
			(defconst TEN-PERCENT-MAP-SIZE 24)
			(defconst TWENTY-PERCENT-MAP-SIZE 48)
			(defconst THIRTY-PERCENT-MAP-SIZE 72)
			(defconst FORTY-PERCENT-MAP-SIZE 96)
			(defconst FIFTY-PERCENT-MAP-SIZE 120)
			(defconst SIXTY-PERCENT-MAP-SIZE 144)
			(defconst SEVENTY-PERCENT-MAP-SIZE 168)
			(defconst EIGHTY-PERCENT-MAP-SIZE 192)
			(defconst NINETY-PERCENT-MAP-SIZE 216)
			(defconst HUNDRED-PERCENT-MAP-SIZE 240)
			(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 239)
			(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 360)
			#else
				#load-if-defined FORTRESS-MAP
				(defconst TEN-PERCENT-MAP-SIZE 24)
				(defconst TWENTY-PERCENT-MAP-SIZE 48)
				(defconst THIRTY-PERCENT-MAP-SIZE 72)
				(defconst FORTY-PERCENT-MAP-SIZE 96)
				(defconst FIFTY-PERCENT-MAP-SIZE 120)
				(defconst SIXTY-PERCENT-MAP-SIZE 144)
				(defconst SEVENTY-PERCENT-MAP-SIZE 168)
				(defconst EIGHTY-PERCENT-MAP-SIZE 192)
				(defconst NINETY-PERCENT-MAP-SIZE 216)
				(defconst HUNDRED-PERCENT-MAP-SIZE 240)
				(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 239)
				(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 360)
				#else
					#load-if-defined ISLANDS-MAP
					(defconst TEN-PERCENT-MAP-SIZE 24)
					(defconst TWENTY-PERCENT-MAP-SIZE 48)
					(defconst THIRTY-PERCENT-MAP-SIZE 72)
					(defconst FORTY-PERCENT-MAP-SIZE 96)
					(defconst FIFTY-PERCENT-MAP-SIZE 120)
					(defconst SIXTY-PERCENT-MAP-SIZE 144)
					(defconst SEVENTY-PERCENT-MAP-SIZE 168)
					(defconst EIGHTY-PERCENT-MAP-SIZE 192)
					(defconst NINETY-PERCENT-MAP-SIZE 216)
					(defconst HUNDRED-PERCENT-MAP-SIZE 240)
					(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 239)
					(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 360)
					#else
						#load-if-defined MIGRATION-MAP
						(defconst TEN-PERCENT-MAP-SIZE 24)
						(defconst TWENTY-PERCENT-MAP-SIZE 48)
						(defconst THIRTY-PERCENT-MAP-SIZE 72)
						(defconst FORTY-PERCENT-MAP-SIZE 96)
						(defconst FIFTY-PERCENT-MAP-SIZE 120)
						(defconst SIXTY-PERCENT-MAP-SIZE 144)
						(defconst SEVENTY-PERCENT-MAP-SIZE 168)
						(defconst EIGHTY-PERCENT-MAP-SIZE 192)
						(defconst NINETY-PERCENT-MAP-SIZE 216)
						(defconst HUNDRED-PERCENT-MAP-SIZE 240)
						(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 239)
						(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 360)
						#else
							#load-if-defined TEAM-ISLANDS-MAP
							(defconst TEN-PERCENT-MAP-SIZE 24)
							(defconst TWENTY-PERCENT-MAP-SIZE 48)
							(defconst THIRTY-PERCENT-MAP-SIZE 72)
							(defconst FORTY-PERCENT-MAP-SIZE 96)
							(defconst FIFTY-PERCENT-MAP-SIZE 120)
							(defconst SIXTY-PERCENT-MAP-SIZE 144)
							(defconst SEVENTY-PERCENT-MAP-SIZE 168)
							(defconst EIGHTY-PERCENT-MAP-SIZE 192)
							(defconst NINETY-PERCENT-MAP-SIZE 216)
							(defconst HUNDRED-PERCENT-MAP-SIZE 240)
							(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 239)
							(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 360)
							#else
								(defconst TEN-PERCENT-MAP-SIZE 22)
								(defconst TWENTY-PERCENT-MAP-SIZE 44)
								(defconst THIRTY-PERCENT-MAP-SIZE 66)
								(defconst FORTY-PERCENT-MAP-SIZE 88)
								(defconst FIFTY-PERCENT-MAP-SIZE 110)
								(defconst SIXTY-PERCENT-MAP-SIZE 132)
								(defconst SEVENTY-PERCENT-MAP-SIZE 154)
								(defconst EIGHTY-PERCENT-MAP-SIZE 176)
								(defconst NINETY-PERCENT-MAP-SIZE 198)
								(defconst HUNDRED-PERCENT-MAP-SIZE 220)
								(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 219)
								(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 330)
							#end-if
						#end-if
					#end-if
				#end-if
			#end-if
		#end-if
		
		#load-if-defined GIANT-MAP
			#load-if-defined ARCHIPELAGO-MAP
			(defconst TEN-PERCENT-MAP-SIZE 26)
			(defconst TWENTY-PERCENT-MAP-SIZE 51)
			(defconst THIRTY-PERCENT-MAP-SIZE 77)
			(defconst FORTY-PERCENT-MAP-SIZE 102)
			(defconst FIFTY-PERCENT-MAP-SIZE 128)
			(defconst SIXTY-PERCENT-MAP-SIZE 153)
			(defconst SEVENTY-PERCENT-MAP-SIZE 179)
			(defconst EIGHTY-PERCENT-MAP-SIZE 204)
			(defconst NINETY-PERCENT-MAP-SIZE 230)
			(defconst HUNDRED-PERCENT-MAP-SIZE 255)
			(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 254)
			(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 383)
			#else
				#load-if-defined FORTRESS-MAP
				(defconst TEN-PERCENT-MAP-SIZE 26)
				(defconst TWENTY-PERCENT-MAP-SIZE 51)
				(defconst THIRTY-PERCENT-MAP-SIZE 77)
				(defconst FORTY-PERCENT-MAP-SIZE 102)
				(defconst FIFTY-PERCENT-MAP-SIZE 128)
				(defconst SIXTY-PERCENT-MAP-SIZE 153)
				(defconst SEVENTY-PERCENT-MAP-SIZE 179)
				(defconst EIGHTY-PERCENT-MAP-SIZE 204)
				(defconst NINETY-PERCENT-MAP-SIZE 230)
				(defconst HUNDRED-PERCENT-MAP-SIZE 255)
				(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 254)
				(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 383)
				#else
					#load-if-defined ISLANDS-MAP
					(defconst TEN-PERCENT-MAP-SIZE 26)
					(defconst TWENTY-PERCENT-MAP-SIZE 51)
					(defconst THIRTY-PERCENT-MAP-SIZE 77)
					(defconst FORTY-PERCENT-MAP-SIZE 102)
					(defconst FIFTY-PERCENT-MAP-SIZE 128)
					(defconst SIXTY-PERCENT-MAP-SIZE 153)
					(defconst SEVENTY-PERCENT-MAP-SIZE 179)
					(defconst EIGHTY-PERCENT-MAP-SIZE 204)
					(defconst NINETY-PERCENT-MAP-SIZE 230)
					(defconst HUNDRED-PERCENT-MAP-SIZE 255)
					(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 254)
					(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 383)
					#else
						#load-if-defined MIGRATION-MAP
						(defconst TEN-PERCENT-MAP-SIZE 26)
						(defconst TWENTY-PERCENT-MAP-SIZE 51)
						(defconst THIRTY-PERCENT-MAP-SIZE 77)
						(defconst FORTY-PERCENT-MAP-SIZE 102)
						(defconst FIFTY-PERCENT-MAP-SIZE 128)
						(defconst SIXTY-PERCENT-MAP-SIZE 153)
						(defconst SEVENTY-PERCENT-MAP-SIZE 179)
						(defconst EIGHTY-PERCENT-MAP-SIZE 204)
						(defconst NINETY-PERCENT-MAP-SIZE 230)
						(defconst HUNDRED-PERCENT-MAP-SIZE 255)
						(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 254)
						(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 383)
						#else
							#load-if-defined TEAM-ISLANDS-MAP
							(defconst TEN-PERCENT-MAP-SIZE 26)
							(defconst TWENTY-PERCENT-MAP-SIZE 51)
							(defconst THIRTY-PERCENT-MAP-SIZE 77)
							(defconst FORTY-PERCENT-MAP-SIZE 102)
							(defconst FIFTY-PERCENT-MAP-SIZE 128)
							(defconst SIXTY-PERCENT-MAP-SIZE 153)
							(defconst SEVENTY-PERCENT-MAP-SIZE 179)
							(defconst EIGHTY-PERCENT-MAP-SIZE 204)
							(defconst NINETY-PERCENT-MAP-SIZE 230)
							(defconst HUNDRED-PERCENT-MAP-SIZE 255)
							(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 254)
							(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 383)
							#else
								(defconst TEN-PERCENT-MAP-SIZE 24)
								(defconst TWENTY-PERCENT-MAP-SIZE 48)
								(defconst THIRTY-PERCENT-MAP-SIZE 72)
								(defconst FORTY-PERCENT-MAP-SIZE 96)
								(defconst FIFTY-PERCENT-MAP-SIZE 120)
								(defconst SIXTY-PERCENT-MAP-SIZE 144)
								(defconst SEVENTY-PERCENT-MAP-SIZE 168)
								(defconst EIGHTY-PERCENT-MAP-SIZE 192)
								(defconst NINETY-PERCENT-MAP-SIZE 216)
								(defconst HUNDRED-PERCENT-MAP-SIZE 240)
								(defconst HUNDRED-PERCENT-MAP-SIZE-MINUS-ONE 239)
								(defconst HUNDRED-FIFTY-PERCENT-MAP-SIZE 360)
							#end-if
						#end-if
					#end-if
				#end-if
			#end-if
		#end-if

	;-------------------------------
	;	Pop Cap Loading Constants
	;-------------------------------

		#load-if-defined POPULATION-CAP-500

			(defconst HUNDRED-PERCENT-POP 500)
			(defconst NINETY-FIVE-PERCENT-POP 475)
			(defconst NINETY-PERCENT-POP 450)
			(defconst EIGHTY-FIVE-PERCENT-POP 425)
			(defconst EIGHTY-PERCENT-POP 400)
			(defconst SEVENTY-FIVE-PERCENT-POP 375)
			(defconst SEVENTY-PERCENT-POP 350)
			(defconst SIXTY-FIVE-PERCENT-POP 325)
			(defconst SIXTY-PERCENT-POP 300)
			(defconst FIFTY-FIVE-PERCENT-POP 275)
			(defconst FIFTY-PERCENT-POP 250)
			(defconst FORTY-FIVE-PERCENT-POP 225)
			(defconst FORTY-PERCENT-POP 200)
			(defconst THIRTY-FIVE-PERCENT-POP 175)
			(defconst THIRTY-PERCENT-POP 150)
			(defconst TWENTY-FIVE-PERCENT-POP 125)
			(defconst TWENTY-PERCENT-POP 100)
			(defconst FIFTEEN-PERCENT-POP 75)
			(defconst TEN-PERCENT-POP 50)
			(defconst FIVE-PERCENT-POP 25)

		#end-if

		#load-if-defined POPULATION-CAP-400

			(defconst HUNDRED-PERCENT-POP 400)
			(defconst NINETY-FIVE-PERCENT-POP 380)
			(defconst NINETY-PERCENT-POP 360)
			(defconst EIGHTY-FIVE-PERCENT-POP 340)
			(defconst EIGHTY-PERCENT-POP 320)
			(defconst SEVENTY-FIVE-PERCENT-POP 300)
			(defconst SEVENTY-PERCENT-POP 280)
			(defconst SIXTY-FIVE-PERCENT-POP 260)
			(defconst SIXTY-PERCENT-POP 240)
			(defconst FIFTY-FIVE-PERCENT-POP 220)
			(defconst FIFTY-PERCENT-POP 200)
			(defconst FORTY-FIVE-PERCENT-POP 180)
			(defconst FORTY-PERCENT-POP 160)
			(defconst THIRTY-FIVE-PERCENT-POP 140)
			(defconst THIRTY-PERCENT-POP 120)
			(defconst TWENTY-FIVE-PERCENT-POP 100)
			(defconst TWENTY-PERCENT-POP 80)
			(defconst FIFTEEN-PERCENT-POP 60)
			(defconst TEN-PERCENT-POP 40)
			(defconst FIVE-PERCENT-POP 20)

		#end-if

		#load-if-defined POPULATION-CAP-300

			(defconst HUNDRED-PERCENT-POP 300)
			(defconst NINETY-FIVE-PERCENT-POP 285)
			(defconst NINETY-PERCENT-POP 270)
			(defconst EIGHTY-FIVE-PERCENT-POP 255)
			(defconst EIGHTY-PERCENT-POP 240)
			(defconst SEVENTY-FIVE-PERCENT-POP 225)
			(defconst SEVENTY-PERCENT-POP 210)
			(defconst SIXTY-FIVE-PERCENT-POP 195)
			(defconst SIXTY-PERCENT-POP 180)
			(defconst FIFTY-FIVE-PERCENT-POP 165)
			(defconst FIFTY-PERCENT-POP 150)
			(defconst FORTY-FIVE-PERCENT-POP 135)
			(defconst FORTY-PERCENT-POP 120)
			(defconst THIRTY-FIVE-PERCENT-POP 105)
			(defconst THIRTY-PERCENT-POP 90)
			(defconst TWENTY-FIVE-PERCENT-POP 75)
			(defconst TWENTY-PERCENT-POP 60)
			(defconst FIFTEEN-PERCENT-POP 45)
			(defconst TEN-PERCENT-POP 30)
			(defconst FIVE-PERCENT-POP 15)

		#end-if

		#load-if-defined POPULATION-CAP-250

			(defconst HUNDRED-PERCENT-POP 250)
			(defconst NINETY-FIVE-PERCENT-POP 238)
			(defconst NINETY-PERCENT-POP 225)
			(defconst EIGHTY-FIVE-PERCENT-POP 213)
			(defconst EIGHTY-PERCENT-POP 200)
			(defconst SEVENTY-FIVE-PERCENT-POP 188)
			(defconst SEVENTY-PERCENT-POP 175)
			(defconst SIXTY-FIVE-PERCENT-POP 163)
			(defconst SIXTY-PERCENT-POP 150)
			(defconst FIFTY-FIVE-PERCENT-POP 138)
			(defconst FIFTY-PERCENT-POP 125)
			(defconst FORTY-FIVE-PERCENT-POP 113)
			(defconst FORTY-PERCENT-POP 100)
			(defconst THIRTY-FIVE-PERCENT-POP 88)
			(defconst THIRTY-PERCENT-POP 75)
			(defconst TWENTY-FIVE-PERCENT-POP 63)
			(defconst TWENTY-PERCENT-POP 50)
			(defconst FIFTEEN-PERCENT-POP 38)
			(defconst TEN-PERCENT-POP 25)
			(defconst FIVE-PERCENT-POP 13)

		#end-if

		#load-if-defined POPULATION-CAP-225

			(defconst HUNDRED-PERCENT-POP 225)
			(defconst NINETY-FIVE-PERCENT-POP 214)
			(defconst NINETY-PERCENT-POP 203)
			(defconst EIGHTY-FIVE-PERCENT-POP 191)
			(defconst EIGHTY-PERCENT-POP 180)
			(defconst SEVENTY-FIVE-PERCENT-POP 169)
			(defconst SEVENTY-PERCENT-POP 158)
			(defconst SIXTY-FIVE-PERCENT-POP 146)
			(defconst SIXTY-PERCENT-POP 135)
			(defconst FIFTY-FIVE-PERCENT-POP 124)
			(defconst FIFTY-PERCENT-POP 113)
			(defconst FORTY-FIVE-PERCENT-POP 101)
			(defconst FORTY-PERCENT-POP 90)
			(defconst THIRTY-FIVE-PERCENT-POP 79)
			(defconst THIRTY-PERCENT-POP 68)
			(defconst TWENTY-FIVE-PERCENT-POP 56)
			(defconst TWENTY-PERCENT-POP 45)
			(defconst FIFTEEN-PERCENT-POP 34)
			(defconst TEN-PERCENT-POP 23)
			(defconst FIVE-PERCENT-POP 11)

		#end-if

		#load-if-defined POPULATION-CAP-200

			(defconst HUNDRED-PERCENT-POP 200)
			(defconst NINETY-FIVE-PERCENT-POP 190)
			(defconst NINETY-PERCENT-POP 180)
			(defconst EIGHTY-FIVE-PERCENT-POP 170)
			(defconst EIGHTY-PERCENT-POP 160)
			(defconst SEVENTY-FIVE-PERCENT-POP 150)
			(defconst SEVENTY-PERCENT-POP 140)
			(defconst SIXTY-FIVE-PERCENT-POP 130)
			(defconst SIXTY-PERCENT-POP 120)
			(defconst FIFTY-FIVE-PERCENT-POP 110)
			(defconst FIFTY-PERCENT-POP 100)
			(defconst FORTY-FIVE-PERCENT-POP 90)
			(defconst FORTY-PERCENT-POP 80)
			(defconst THIRTY-FIVE-PERCENT-POP 70)
			(defconst THIRTY-PERCENT-POP 60)
			(defconst TWENTY-FIVE-PERCENT-POP 50)
			(defconst TWENTY-PERCENT-POP 40)
			(defconst FIFTEEN-PERCENT-POP 30)
			(defconst TEN-PERCENT-POP 20)
			(defconst FIVE-PERCENT-POP 10)

		#end-if

		#load-if-defined POPULATION-CAP-175

			(defconst HUNDRED-PERCENT-POP 175)
			(defconst NINETY-FIVE-PERCENT-POP 166)
			(defconst NINETY-PERCENT-POP 158)
			(defconst EIGHTY-FIVE-PERCENT-POP 149)
			(defconst EIGHTY-PERCENT-POP 140)
			(defconst SEVENTY-FIVE-PERCENT-POP 131)
			(defconst SEVENTY-PERCENT-POP 123)
			(defconst SIXTY-FIVE-PERCENT-POP 114)
			(defconst SIXTY-PERCENT-POP 105)
			(defconst FIFTY-FIVE-PERCENT-POP 96)
			(defconst FIFTY-PERCENT-POP 88)
			(defconst FORTY-FIVE-PERCENT-POP 79)
			(defconst FORTY-PERCENT-POP 70)
			(defconst THIRTY-FIVE-PERCENT-POP 61)
			(defconst THIRTY-PERCENT-POP 53)
			(defconst TWENTY-FIVE-PERCENT-POP 44)
			(defconst TWENTY-PERCENT-POP 35)
			(defconst FIFTEEN-PERCENT-POP 26)
			(defconst TEN-PERCENT-POP 18)
			(defconst FIVE-PERCENT-POP 9)

		#end-if

		#load-if-defined POPULATION-CAP-150

			(defconst HUNDRED-PERCENT-POP 150)
			(defconst NINETY-FIVE-PERCENT-POP 143)
			(defconst NINETY-PERCENT-POP 135)
			(defconst EIGHTY-FIVE-PERCENT-POP 128)
			(defconst EIGHTY-PERCENT-POP 120)
			(defconst SEVENTY-FIVE-PERCENT-POP 113)
			(defconst SEVENTY-PERCENT-POP 105)
			(defconst SIXTY-FIVE-PERCENT-POP 98)
			(defconst SIXTY-PERCENT-POP 90)
			(defconst FIFTY-FIVE-PERCENT-POP 83)
			(defconst FIFTY-PERCENT-POP 75)
			(defconst FORTY-FIVE-PERCENT-POP 68)
			(defconst FORTY-PERCENT-POP 60)
			(defconst THIRTY-FIVE-PERCENT-POP 53)
			(defconst THIRTY-PERCENT-POP 45)
			(defconst TWENTY-FIVE-PERCENT-POP 38)
			(defconst TWENTY-PERCENT-POP 30)
			(defconst FIFTEEN-PERCENT-POP 23)
			(defconst TEN-PERCENT-POP 15)
			(defconst FIVE-PERCENT-POP 8)

		#end-if

		#load-if-defined POPULATION-CAP-125

			(defconst HUNDRED-PERCENT-POP 125)
			(defconst NINETY-FIVE-PERCENT-POP 119)
			(defconst NINETY-PERCENT-POP 113)
			(defconst EIGHTY-FIVE-PERCENT-POP 106)
			(defconst EIGHTY-PERCENT-POP 100)
			(defconst SEVENTY-FIVE-PERCENT-POP 94)
			(defconst SEVENTY-PERCENT-POP 88)
			(defconst SIXTY-FIVE-PERCENT-POP 81)
			(defconst SIXTY-PERCENT-POP 75)
			(defconst FIFTY-FIVE-PERCENT-POP 69)
			(defconst FIFTY-PERCENT-POP 63)
			(defconst FORTY-FIVE-PERCENT-POP 56)
			(defconst FORTY-PERCENT-POP 50)
			(defconst THIRTY-FIVE-PERCENT-POP 44)
			(defconst THIRTY-PERCENT-POP 38)
			(defconst TWENTY-FIVE-PERCENT-POP 31)
			(defconst TWENTY-PERCENT-POP 25)
			(defconst FIFTEEN-PERCENT-POP 19)
			(defconst TEN-PERCENT-POP 13)
			(defconst FIVE-PERCENT-POP 6)

		#end-if

		#load-if-defined POPULATION-CAP-100

			(defconst HUNDRED-PERCENT-POP 100)
			(defconst NINETY-FIVE-PERCENT-POP 95)
			(defconst NINETY-PERCENT-POP 90)
			(defconst EIGHTY-FIVE-PERCENT-POP 85)
			(defconst EIGHTY-PERCENT-POP 80)
			(defconst SEVENTY-FIVE-PERCENT-POP 75)
			(defconst SEVENTY-PERCENT-POP 70)
			(defconst SIXTY-FIVE-PERCENT-POP 65)
			(defconst SIXTY-PERCENT-POP 60)
			(defconst FIFTY-FIVE-PERCENT-POP 55)
			(defconst FIFTY-PERCENT-POP 50)
			(defconst FORTY-FIVE-PERCENT-POP 45)
			(defconst FORTY-PERCENT-POP 40)
			(defconst THIRTY-FIVE-PERCENT-POP 35)
			(defconst THIRTY-PERCENT-POP 30)
			(defconst TWENTY-FIVE-PERCENT-POP 25)
			(defconst TWENTY-PERCENT-POP 20)
			(defconst FIFTEEN-PERCENT-POP 15)
			(defconst TEN-PERCENT-POP 10)
			(defconst FIVE-PERCENT-POP 5)

		#end-if

		#load-if-defined POPULATION-CAP-75

			(defconst HUNDRED-PERCENT-POP 75)
			(defconst NINETY-FIVE-PERCENT-POP 71)
			(defconst NINETY-PERCENT-POP 68)
			(defconst EIGHTY-FIVE-PERCENT-POP 64)
			(defconst EIGHTY-PERCENT-POP 60)
			(defconst SEVENTY-FIVE-PERCENT-POP 56)
			(defconst SEVENTY-PERCENT-POP 53)
			(defconst SIXTY-FIVE-PERCENT-POP 49)
			(defconst SIXTY-PERCENT-POP 45)
			(defconst FIFTY-FIVE-PERCENT-POP 41)
			(defconst FIFTY-PERCENT-POP 38)
			(defconst FORTY-FIVE-PERCENT-POP 34)
			(defconst FORTY-PERCENT-POP 30)
			(defconst THIRTY-FIVE-PERCENT-POP 26)
			(defconst THIRTY-PERCENT-POP 23)
			(defconst TWENTY-FIVE-PERCENT-POP 19)
			(defconst TWENTY-PERCENT-POP 15)
			(defconst FIFTEEN-PERCENT-POP 11)
			(defconst TEN-PERCENT-POP 8)
			(defconst FIVE-PERCENT-POP 4)

		#end-if

		#load-if-defined POPULATION-CAP-50

			(defconst HUNDRED-PERCENT-POP 50)
			(defconst NINETY-FIVE-PERCENT-POP 48)
			(defconst NINETY-PERCENT-POP 45)
			(defconst EIGHTY-FIVE-PERCENT-POP 43)
			(defconst EIGHTY-PERCENT-POP 40)
			(defconst SEVENTY-FIVE-PERCENT-POP 38)
			(defconst SEVENTY-PERCENT-POP 35)
			(defconst SIXTY-FIVE-PERCENT-POP 33)
			(defconst SIXTY-PERCENT-POP 30)
			(defconst FIFTY-FIVE-PERCENT-POP 28)
			(defconst FIFTY-PERCENT-POP 25)
			(defconst FORTY-FIVE-PERCENT-POP 23)
			(defconst FORTY-PERCENT-POP 20)
			(defconst THIRTY-FIVE-PERCENT-POP 18)
			(defconst THIRTY-PERCENT-POP 15)
			(defconst TWENTY-FIVE-PERCENT-POP 13)
			(defconst TWENTY-PERCENT-POP 10)
			(defconst FIFTEEN-PERCENT-POP 8)
			(defconst TEN-PERCENT-POP 5)
			(defconst FIVE-PERCENT-POP 3)

		#end-if

		#load-if-defined POPULATION-CAP-25

			(defconst HUNDRED-PERCENT-POP 25)
			(defconst NINETY-FIVE-PERCENT-POP 24)
			(defconst NINETY-PERCENT-POP 23)
			(defconst EIGHTY-FIVE-PERCENT-POP 21)
			(defconst EIGHTY-PERCENT-POP 20)
			(defconst SEVENTY-FIVE-PERCENT-POP 19)
			(defconst SEVENTY-PERCENT-POP 18)
			(defconst SIXTY-FIVE-PERCENT-POP 16)
			(defconst SIXTY-PERCENT-POP 15)
			(defconst FIFTY-FIVE-PERCENT-POP 14)
			(defconst FIFTY-PERCENT-POP 13)
			(defconst FORTY-FIVE-PERCENT-POP 11)
			(defconst FORTY-PERCENT-POP 10)
			(defconst THIRTY-FIVE-PERCENT-POP 9)
			(defconst THIRTY-PERCENT-POP 8)
			(defconst TWENTY-FIVE-PERCENT-POP 6)
			(defconst TWENTY-PERCENT-POP 5)
			(defconst FIFTEEN-PERCENT-POP 4)
			(defconst TEN-PERCENT-POP 3)
			(defconst FIVE-PERCENT-POP 1)

		#end-if

	;------------------
	;	Define Goals
	;------------------

		;Empty goals: 219-228, 304, 387-391, 393-400
		;Empty reserved goals: 139-140, 171-173, 250, 491-498, 500-512

		(defconst g-general 1)							;The historical general selected for the AI
			;Aztecs
			(defconst ACAMAPICHTLI 101)
			(defconst AHUITZOTOL 102)
			(defconst CUAUHTEMOC 103)
			(defconst ITZCOATL 104)
			(defconst MONTEZUMA 105)
			;Bengalis
			(defconst DEVAPALA 451)
			(defconst GOPALA 452)
			(defconst JAYAPALA 453)
			(defconst SAMANTA 454)
			(defconst SHAMSUDDIN-ILYAS 455)
			(defconst SHASHANKA 456)
			;Berbers
			(defconst IDRIS-IBN-ABDALLAH 111)
			(defconst MUHAMMAD-IBN-TUMART 112)
			(defconst MUSA-IBN-NUSAYR 113)
			(defconst TARIQ-IBN-ZIYAD 114)
			(defconst YUSUF-IBN-TASHFIN 115)
			;Bohemians
			(defconst BOLESLAUS-I 461)
			(defconst JAN-HUS 462)
			(defconst JAN-ZIZKA 463)
			(defconst OTTOKAR-II 464)
			(defconst SIGISMUND 465)
			(defconst SVATOPLUK-I 466)
			;Britons
			(defconst EDWARD-LONGSHANKS 121)
			(defconst HAROLD-GODWINSON 122)
			(defconst HENRY-V 123)
			(defconst RICHARD-I 124)
			(defconst ARTHUR 125)
			;Bulgarians
			(defconst ASPARUKH 131)
			(defconst BORIS 132)
			(defconst IVAN-ASEN 133)
			(defconst IVAYLO 134)
			(defconst SIMEON 135)
			;Burgundians
			(defconst GUNDAHARIUS 451)
			(defconst JOHN-THE-FEARLESS 452)
			(defconst ODO-IV 453)
			(defconst PHILIP-THE-GOOD 454)
			(defconst RICHARD-THE-JUSTICIAR 455)
			;Burmese
			(defconst ANAWRAHTA 141)
			(defconst BAYINNAUNG 142)
			(defconst MINGYINYO 143)
			(defconst NARAPATISITHU 144)
			(defconst TABINSHWEHTI 145)
			;Byzantines
			(defconst BASIL 151)
			(defconst BELISARIUS 152)
			(defconst CONSTANTINE 153)
			(defconst HERACLIUS 154)
			(defconst JUSTINIAN 155)
			(defconst MANUEL 156)
			;Celts
			(defconst AETHELFIRTH 161)
			(defconst BRIAN-BORU 162)
			(defconst MURTAUGH-OBRIEN 163)
			(defconst ROBERT-THE-BRUCE 164)
			(defconst WILLIAM-WALLACE 165)
			;Chinese
			(defconst LI-SHI-MIN 171)
			(defconst SU-DINGFANG 172)
			(defconst YUE-FEI 173)
			(defconst ZHAO-KUANG-YING 174)
			(defconst ZHU-YUAN-ZHANG 175)
			;Cumans
			(defconst BONIAK 181)
			(defconst KOTYAN-KHAN 182)
			(defconst KONCHAK-OTRAKOVICH 183)
			(defconst SOKAL 184)
			(defconst AYEPA 185)
			;Dravidians
			(defconst AMOGHAVARSHA 471)
			(defconst GOVINDA-III 472)
			(defconst KADUNGON 473)
			(defconst KRISHNA-DEVARAYA 474)
			#load-if-defined DE-AVAILABLE
			(defconst RAJENDRA 475)
			#end-if
			(defconst VIJAYABAHU 476)
			;Ethiopians
			(defconst AMDA-SEYON 191)
			(defconst KALEB-OF-AKSUM 192)
			(defconst YEKUNO-AMLAK 193)
			(defconst YODIT 194)
			(defconst ZARA-YAQOB 195)
			;Franks
			(defconst CHARLEMAGNE 201)
			(defconst CHARLES-MARTEL 202)
			(defconst JOAN-OF-ARC 203)
			(defconst LA-HIRE 204)
			(defconst WILLIAM-THE-CONQUEROR 205)
			;Goths
			(defconst ALARIC 211)
			(defconst ATAULF 212)
			(defconst FRITIGERN 213)
			(defconst THEODORIC 214)
			(defconst WALLIA 215)
			;Gurjaras
			(defconst JAYACHANDRA 481)
			(defconst MIHIRA-BHOJA 482)
			(defconst NAGABHATA 483)
			#load-if-defined DE-AVAILABLE
			(defconst PRITHVIRAJ 484)
			#end-if
			(defconst MAHARANA-PRATAP 485)
			;Hindustanis
			#load-if-defined DE-AVAILABLE
			(defconst AKBAR 491)
			(defconst ALA-UD-DIN 492)
			(defconst BABUR 493)
			(defconst CHANDRAGUPTA 494)
			(defconst MAHMUD-GHAZNAVI 495)
			(defconst QUTB-UD-DIN-AIBAK 496)
			#end-if
			;Huns
			(defconst ATTILA 221)
			(defconst BLEDA 222)
			(defconst DENGIZICH 223)
			(defconst RUGILA 224)
			(defconst ULDIN 225)
			;Incas
			(defconst ATAHUALPA 231)
			(defconst HUAYNA-CAPAC 232)
			(defconst MANCO-CAPAC 233)
			(defconst PACHACUTI 234)
			(defconst TOPA-YUPANQUI 235)
			;Indians
			(defconst BAPPA-RAWAL 244)
			#load-if-not-defined DE-AVAILABLE
			(defconst AKBAR 241)
			(defconst ALA-UD-DIN 242)
			(defconst BABUR 243)
			(defconst CHANDRAGUPTA 245)
			(defconst PRITHVIRAJ 246)
			(defconst RAJENDRA 247)
			#end-if
			;Italians
			(defconst DOMENICO-SELVO 251)
			(defconst FRANCESCO-SFORZA 252)
			(defconst GUGLIELMO-EMBRIACO 253)
			(defconst LIUTPRAND 254)
			(defconst OTTONE-VISCONTI 255)
			(defconst PIETRO-GRADENIGO 256)
			;Japanese
			(defconst FUJIWARANO-MICHINAGA 261)
			(defconst KUSUNOKI-MASASHIGE 262)
			(defconst MINAMOTONO-YORITOMO 263)
			(defconst ODA-NOBUNAGA 264)
			(defconst TOKUGAWA-IEYASU 265)
			(defconst TOYOTOMI-HIDEYOSHI 266)
			;Khmer
			(defconst JAYAVARMAN-II 271)
			(defconst JAYAVARMAN-VII 272)
			(defconst SURYAVARMAN-I 273)
			(defconst SURYAVARMAN-II 274)
			(defconst YASOVARMAN-I 275)
			;Koreans
			(defconst CHOE-MU-SON 281)
			(defconst ULJI-MUN-TOK 282)
			(defconst WANG-KON 283)
			(defconst YI-SONG-KYE 284)
			(defconst YI-SUN-SHIN 285)
			;Lithuanians
			(defconst ALGIRDAS 291)
			(defconst GEDIMINAS 292)
			(defconst JOGAILA 293)
			(defconst MINDAUGAS 294)
			(defconst VYTAUTAS 295)
			;Magyars
			(defconst ARPAD 301)
			(defconst HUNYADI-JANOS 302)
			(defconst ISTVAN 303)
			(defconst KAROLY-ROBERT 304)
			(defconst LASZLO 305)
			;Malay
			(defconst DHARMASETU 311)
			(defconst GAJAH-MADA 312)
			(defconst HAYAM-WURUK 313)
			(defconst PARAMESWARA 314)
			(defconst RADEN-WIJAYA 315)
			;Malians
			(defconst MAHMUD-IV 321)
			(defconst MUSA 322)
			(defconst SAKURA 323)
			(defconst SOULEYMAN 324)
			(defconst SUNDJATA 325)
			;Mayans
			(defconst BALAJ-CHAN-KAWIIL 331)
			(defconst KINICH-JANAAB-PACAL 332)
			(defconst UAXACLAJUUN-UBAAH-KAWIIL 333)
			(defconst YIKIN-CHAN-KAWIIL 334)
			(defconst YUKNOOM-CHEEN 335)
			;Mongols
			(defconst GENGHIS-KHAN 341)
			(defconst KUBLAI-KHAN 342)
			(defconst KUSHLUK 343)
			(defconst OGEDEI-KHAN 344)
			(defconst SUBOTAI 345)
			;Persians
			(defconst ALA-AD-DIN-MUHAMMAD 351)
			(defconst ANUSH-TIGIN-GHARCHAI 352)
			(defconst BAHRAM 353)
			(defconst MAHMUD-GHAZNAVI 354)
			(defconst KHOSRAU 355)
			;Poles
			(defconst BOLESLAW-THE-GREAT 501)
			(defconst JAGWIGA 502)
			(defconst KAZIMIERZ-III 503)
			(defconst MIESZKO-I 504)
			(defconst ZAWISZA-CZARNY 505)
			;Portuguese
			(defconst AFONSO-DE-ALBUQUERQUE 361)
			(defconst AFONSO-HENRIQUES 362)
			(defconst FRANCISCO-DE-ALMEIDA 363)
			(defconst HENRY-THE-NAVIGATOR 364)
			(defconst NUNO-ALVARES-PEREIRA 365)
			;Saracens
			(defconst BAIBARS 371)
			(defconst ABU-BAKR 372)
			(defconst MUAWIYAH 373)
			(defconst KHALID 374)
			(defconst HARUN-AL-RASHID 375)
			(defconst SALADIN 376)
			;Sicilians
			(defconst BOHEMOND 461)
			(defconst FREDERICK-II 462)
			(defconst ROBERT-GUISCARD 463)
			(defconst ROGER-BOSSO 464)
			(defconst ROGER-II 465)
			;Slavs
			(defconst ALEXANDER-NEVSKY 381)
			(defconst IVAN-III 382)
			(defconst BOLESLAW 382)
			(defconst SVIATOSLAV 383)
			(defconst VLADIMIR 384)
			(defconst YAROSLAV 385)
			(defconst VLAD-DRACULA 386)
			;Spanish
			(defconst ALFONSO 391)
			(defconst GONZALO-PIZARRO 392)
			(defconst HERNAN-CORTEZ 393)
			(defconst RODRIGO-DIAZ 394)
			(defconst ISABELLA 395)
			;Tatars
			(defconst BATU-KHAN 401)
			(defconst KAIDU 402)
			(defconst TAMERLANE 403)
			(defconst TOKHTAMYSH-KHAN 404)
			(defconst UZBEG-KHAN 405)
			;Teutons
			(defconst CHARLES-V 411)
			(defconst FREDERICK 412)
			(defconst HENRY-THE-LION 413)
			(defconst OTTO 414)
			(defconst WINRICH-VON-KNIPRODE 415)
			;Turks
			(defconst ALP-ARSLAN 421)
			(defconst BAYAZID 422)
			(defconst OSMAN 423)
			(defconst SULEIMAN 424)
			(defconst TUGHRIL 425)
			;Vietnamese
			(defconst LE-LOI 431)
			(defconst LE-THANH-TONG 432)
			(defconst NGO-QUYEN 433)
			(defconst TRAN-NHAN-TONG 434)
			(defconst TRAN-THAI-TONG 435)
			;Vikings
			(defconst CNUT 441)
			(defconst HARALD-FAIRHAIR 443)
			(defconst HARALD-HARDRAADE 444)
			(defconst LEIF-ERICSON 445)
			(defconst OLAF-HARALDSSON 446)
		(defconst g-current-strategy 2)					;The current strategy/build order
			;Dark Age
			(defconst DARK-STRATS-START 101)
			(defconst DRUSH 101)				;drush
			(defconst DOUCHE 102)				;town center drop
			(defconst DARK-STRATS-END 200)
			;Flush
			(defconst FL-STRATS-START 201)
			(defconst FL-RANGER 201)			;Archers
			(defconst FL-GUERILLA 202)			;Archers and Skirms
			(defconst FL-SKIRMMETA 203)			;Skirms
			(defconst FL-LATHER 204)			;Man-at-Arms
			(defconst FL-VULTURE 205)			;Scouts
			(defconst FL-EYRIES 206)			;Eagle Scouts
			(defconst FL-GOEMUL 207)			;Towers
			(defconst FL-STRATS-END 300)
			;Early Feudal
			(defconst EARLYF-STRATS-START 301)
			(defconst EARLYF-STRATS-END 400)
			;Mid Feudal Age
			(defconst MIDF-STRATS-START 401)
			(defconst MIDF-FULL-ARCHERS 401)
			(defconst MIDF-FULL-RANGED 402)
			(defconst MIDF-FULL-SKIRMS 403)
			(defconst MIDF-FULL-SCOUTS 404)
			(defconst MIDF-SCOUT-SKIRM 405)
			(defconst MIDF-FULL-MAA 406)
			(defconst MIDF-FULL-EAGLES 407)
			(defconst MIDF-STRATS-END 500)
			;Fast Castle
			(defconst FC-STRATS-START 501)
			(defconst FC-STRONGBOW 501)			;xbows
			(defconst FC-KRUSH 502)				;2 stable knights
			(defconst FC-EAGLES-REVENGE 503)	;3 barracks eagle warriors (castle age)
			(defconst FC-CRUSH 504)				;2 stable camel rush
			(defconst FC-DEMON 505)				;monk rush
			(defconst FC-CASTLE-DROP 506)		;unique units
			(defconst FC-MORLEY 507)			;steppe lancers
			(defconst FC-GENGHIS 508)			;cav archers
			(defconst FC-KRUSH-30 551)			;old 2 stable knights rush, 30-vil feudal
			(defconst FC-STRATS-END 600)
			;Early Castle Age
			(defconst EARLYC-STRATS-START 601)
			(defconst EARLYC-XBOWS 601)
			(defconst EARLYC-KNIGHTS 602)
			(defconst EARLYC-EAGLES 603)
			(defconst EARLYC-CAMELS 604)
			(defconst EARLYC-STRATS-END 700)
			;Mid Castle Age
			(defconst MIDC-STRATS-START 701)
			(defconst MIDC-XBOWS 701)
			(defconst MIDC-KNIGHTS 702)
			(defconst MIDC-EAGLES 703)
			(defconst MIDC-CAMELS 704)
			(defconst MIDC-CAV-ARCHERS 705)
			(defconst MIDC-CIRCUS 706)			;Battle Elephants
			(defconst MIDC-UNIQUE 708)
			(defconst MIDC-MONKS 709)
			(defconst MIDC-SWORDS 751)
			(defconst MIDC-PIKES 752)
			(defconst MIDC-SKIRMS 753)
			(defconst MIDC-LIGHT 754)
			(defconst MIDC-LANCERS 755)
			(defconst MIDC-SLINGERS 756)
			(defconst MIDC-GENITOURS 757)
			(defconst MIDC-SHRIVAMSHA 758)
			(defconst MIDC-ELE-ARCHERS 759)
			(defconst MIDC-STRATS-END 800)
			;Fast Imperial Age
			(defconst FI-STRATS-START 801)
			(defconst FI-SNIPER 801)			;Hand Cannon/Bombard Cannon rush
			(defconst FI-FARMERTRON 802)		;champion flood
			(defconst FI-AGEOFSTONEWALLS 803)	;elite eagle warrior rush
			(defconst FI-STRATS-END 900)
			;Early Imperial Age
			(defconst EARLYI-STRATS-START 901)
			(defconst EARLYI-CHAMPFLOOD 902)	;champions
			(defconst EARLYI-EL-DORADO 903)		;elite eagle warriors
			(defconst EARLYI-ARBINGER 904)		;arbalests
			(defconst EARLYI-HORDE 905)			;heavy cav archers
			(defconst EARLYI-PALASTORM 906)		;cavaliers to paladins
			(defconst EARLYI-CAMELSTORM 907)	;heavy camels to imperial camels
			(defconst EARLYI-CIRCUS-STOMP 908)	;elite battle eles
			(defconst EARLYI-UNIQUE 909)
			(defconst EARLYI-HALBSTRIKE 951)	;halberdiers
			(defconst EARLYI-CONDOTERROR 952)	;condottierri
			(defconst EARLYI-SKIRMASSACRE 953)	;Skirmishers
			(defconst EARLYI-MUSKETEER 954)		;hand cannoneers
			(defconst EARLYI-SLINGSHOT 955)		;slinger
			(defconst EARLYI-GENITOURAID 956)	;genitours
			(defconst EARLYI-WALKING-TOWERS 957);Elephant Archers
			(defconst EARLYI-HUSSARMY 958)		;hussars
			(defconst EARLYI-STRATS-END 1000)
			;Mid Imperial Age
			(defconst MIDI-STRATS-START 1001)
			(defconst MIDI-EAGLES 1001)
			(defconst MIDI-PALADINS 1002)
			(defconst MIDI-CAMELS 1003)
			(defconst MIDI-ARBS 1004)
			(defconst MIDI-CAV-ARCHERS 1005)
			(defconst MIDI-CIRCUS 1006)
			(defconst MIDI-CHAMPIONS 1007)
			(defconst MIDI-UNIQUE 1008)
			(defconst MIDI-HALBS 1051)
			(defconst MIDI-CONDOS 1052)
			(defconst MIDI-SKIRMS 1053)
			(defconst MIDI-CANNONEERS 1054)
			(defconst MIDI-SLINGERS 1055)
			(defconst MIDI-GENITOURS 1056)
			(defconst MIDI-HUSSARS 1057)
			(defconst MIDI-LANCERS 1058)
			(defconst MIDI-MONKS 1059)
			(defconst MIDI-SHRIVAMSHA 1060)
			(defconst MIDI-ELE-ARCHERS 1061)
			(defconst MIDI-STRATS-END 1100)
			;Booming Castle Age Strats
			(defconst BOOMC-STRATS-START 1101)
			(defconst BOOMC-KNIGHTS 1101)		;boom with knights defense
			(defconst BOOMC-XBOWS 1102)			;boom with crossbowmen defense
			(defconst BOOMC-EAGLES 1103)			;boom with eagle warrior defense
			(defconst BOOMC-CAMELS 1104)			;boom with camel defense
			(defconst BOOMC-STRATS-END 1200)
			;Booming Imperial Age Strats
			(defconst BOOMI-STRATS-START 1201)
			(defconst BOOMI-IMPERIAL 1201)		;boom with just spearmen for defense
			(defconst BOOMI-STRATS-END 1300)
			;Late Imperial Age
			(defconst LATEI-STRATS-START 1301)
			(defconst LATEI-CHAMPIONS 1301)
			(defconst LATEI-UNIQUE 1302)
			(defconst LATEI-SHRIVAMSHA 1303)
			(defconst LATEI-FLEMISH 1304)
			(defconst LATEI-TRASHBOWS 1311)		;Persian crossbowmen
			(defconst LATEI-TRASHKIRMS 1312)	;Skirms, supported by halbs or scouts
			(defconst LATEI-TRASHALBS 1313)		;Halbs, supported by skirms or scouts
			(defconst LATEI-TRASHUSSARS 1314)	;Hussars, supported by skirms or halbs
			(defconst LATEI-TRASHGENS 1315)		;Genitours, supported by hussars or halbs
			(defconst LATEI-HUSSARS 1321)		;All hussars
			(defconst LATEI-STRATS-END 1400)
		(defconst g-strategy-type 3)
			;(defconst DRUSH 101)	;already defined with g-current-strategy 
			(defconst FLUSH 102)
			(defconst FAST-CASTLE 103)
			(defconst FAST-IMPERIAL 104)
		(defconst g-game-focus 4)						;What the AI is current focused on
			(defconst REBUILD 1)
			(defconst DEFENSIVE 2)
			(defconst BOOM 3)
			(defconst BALANCED 4)
			(defconst AGGRESSIVE 5)
			(defconst RESET 99)	
		(defconst g-age-status 5)
			(defconst DARK 11)
			(defconst SAVE-FOR-FEUDAL 13)
			(defconst TO-FEUDAL 14)
			(defconst EARLY-FEUDAL 21)
			(defconst MID-FEUDAL 22)
			(defconst SAVE-FOR-CASTLE 23)
			(defconst TO-CASTLE 24)
			(defconst EARLY-CASTLE 31)
			(defconst MID-CASTLE 32)
			(defconst SAVE-FOR-IMPERIAL 33)
			(defconst TO-IMPERIAL 34)
			(defconst EARLY-IMPERIAL 41)
			(defconst MID-IMPERIAL 42)
			(defconst LATE-IMPERIAL 43)	
		(defconst g-attack-status 6)					;Tracks what the status is for our attacks
			(defconst BEFORE-DARK-ATTACKS 11)
			(defconst DARK-ATTACKS 12)
			(defconst BEFORE-FEUDAL-ATTACKS 21)
			(defconst FIRST-FEUDAL-ATTACK 22)
			(defconst BEFORE-LATER-FEUDAL-ATTACKS 23)
			(defconst LATER-FEUDAL-ATTACKS 24)
			(defconst BEFORE-CASTLE-ATTACKS 31)
			(defconst FIRST-CASTLE-ATTACK 32)
			(defconst BEFORE-LATER-CASTLE-ATTACKS 33)
			(defconst LATER-CASTLE-ATTACKS 34)
			(defconst BEFORE-IMPERIAL-ATTACKS 41)
			(defconst FIRST-IMPERIAL-ATTACK 42)
			(defconst BEFORE-LATER-IMPERIAL-ATTACKS 43)
			(defconst LATER-IMPERIAL-ATTACKS 44)
		(defconst g-attack-objective 7)
			(defconst ATTACK-TARGET-ENEMY 1)
			(defconst ATTACK-POCKET 2)
			(defconst HELP-ALLY-DEFEND 3)
			(defconst HELP-ALLY-ATTACK 4)
		(defconst g-attack-coordination 8)
			; OFF = 0
			(defconst ATTACK-STARTED 1)
			(defconst SOLDIERS-GATHERED 2)
			(defconst FIND-TARGET-BUILDING 4)
			(defconst SET-TARGET-BUILDING 5)
			(defconst FIND-ATTACK-SOLDIERS 6)
			(defconst START-PATROL 7)
			(defconst TARGET-REACHED 8)
			(defconst STOP-PATROL 9)
			(defconst STOP-ATTACKING 11)
			(defconst RETREAT 12)
		(defconst g-required-attack-num 9)
		(defconst g-stop-attack-num 10)
		(defconst g-town-under-attack 11)				;Determines if the town is under attack, helps request assistance from allies
			;NO = 0
			;YES = 1
		(defconst g-attack-method-flag 12)
			(defconst USE-TSA 1)
			(defconst USE-ATTACK-GROUPS 2)
			(defconst USE-ATTACK-NOW 4)
			(defconst USE-DUC 8)

		(defconst g-enemy-buildings-in-town 13)			;Determines enemy buildings within csn-peaceful-town-size, not sn-maximum-town-size
		(defconst g-enemy-units-in-town 14)				;Determines enemy units within csn-peaceful-town-size, not sn-maximum-town-size
		(defconst g-gather-inside 15)
			(defconst UNGARRISON 2)
		(defconst g-previous-garrisonable-building-count 16)
		(defconst g-initial-chat-delay 17)
		(defconst g-get-enemy-locations 18)
			(defconst BEGIN-FINDING-PLAYERS 0)
			(defconst DONE-FINDING-PLAYERS 9)
		(defconst g-closest-enemy 19)
		(defconst g-closest-enemy-building-distance 20)
		(defconst g-nearest-enemy-defenses-distance 21)

		(defconst g-initial-strategy 22)				;The player's original strategy/build order
		(defconst g-previous-strategy 23)
		(defconst g-next-strategy 24)
		(defconst g-dark-strategy 25)					;goals 26-33 use same values as goal 2
		(defconst g-early-feudal-strategy 26)
		(defconst g-mid-feudal-strategy 27)
		(defconst g-early-castle-strategy 28)
		(defconst g-mid-castle-strategy 29)
		(defconst g-early-imperial-strategy 30)
		(defconst g-mid-imperial-strategy 31)
		(defconst g-late-imperial-strategy 32)
		
		(defconst g-resign 33)
			;0 = NO
			(defconst ASK-FOR-RES 1)
			(defconst DECIDE-TO-RESIGN 2)
			(defconst CHAT-FAREWELL 3)
			(defconst RESIGN 4)
		(defconst g-map-style 34)						;Determines the style of map
			(defconst OPEN-LAND 1)			;Arabia, etc.
			(defconst CLOSED-LAND 2)		;Black Forest, etc.
			(defconst WALLED-LAND 3)		;Arena, etc.
			(defconst MICHI 4)				;Michi (cannot reach players at beginning of the game)
			(defconst RIVERS 11)			;Rivers, Highland, etc.
			(defconst LAKES 12)				;Mediterranean, etc.
			(defconst NOMAD 21)				;Nomad (no starting TC)
			; (defconst LAND-NOMAD 22)		;Land Nomad (no starting Tc, can't afford TC at start)
			(defconst ISLANDS 31)			;Islands where multiple teams can be on same island
			(defconst TEAM-ISLANDS 32)		;Islands where teams are always on separate islands
			(defconst MIGRATION 41)			;Migration, etc.
			(defconst IMMOBILE 51)			;Stay immobile in scenarios with no villagers	

		(defconst g-food-escrow-type 35)
			;OFF = 0
			(defconst IMMEDIATE 1)
			(defconst ACCUMULATED 2)
		(defconst g-wood-escrow-type 36)
		(defconst g-stone-escrow-type 37)
		(defconst g-gold-escrow-type 38)
		
		(defconst g-true-housing-headroom 39)
		(defconst g-rule-pass-count 40)

		(defconst g-id-loop-max-objects 41)

		(defconst g-flag 42)
			(defconst SCOUT-1-TARGET-SET 1)
			(defconst SCOUT-2-TARGET-SET 2)
			(defconst SCOUT-3-TARGET-SET 4)
			(defconst FIRST-ATTACK-LAUNCHED 8)
			(defconst PROJECTILE-RETREAT 16)
			(defconst TRADED 32)
			(defconst SAVE-FOR-SUPPORT-UNIT-TECHS 64)
			(defconst ALLOW-QUEUED-VILLAGERS 128)
			(defconst PLACE-CONTROL-USED 256)
			(defconst PLACE-POINT-USED 512)
			(defconst FAR-BOAR 1024)
			(defconst BOAR-HUNTING-CONDITIONS-MET 2048)
			(defconst ENEMY-FC 4096)
			(defconst SUPER-POCKET 8192)

		(defconst g-team-partner 43)
		(defconst g-team-partner-identity 44)			;uses same constants as goal 420
		(defconst g-difficulty 45)
			(defconst EASIEST 1)
			(defconst STANDARD 2)
			(defconst MODERATE 3)
			(defconst HARD 4)
			(defconst HARDEST 5)
			(defconst EXTREME 6)
			(defconst CHEAT 7)
		(defconst g-position 46)						;determines flank/pocket position, used to communicate position with allies
			(defconst FLANK 1)					
			(defconst POCKET 2)

		(defconst g-target-enemy-x 47)					;x location of nearest target player TC, or position-flank if no target player TC found
		(defconst g-target-enemy-y 48)					;y location of nearest target player TC, or position-flank if no target player TC found
		(defconst g-gather-point-x 49)					;x location where defensive soldiers will gather, also used as retreat point
		(defconst g-gather-point-y 50)					;y location where defensive soldiers will gather, also used as retreat point
		
		(defconst g-usable-farm-count 51)
		(defconst g-usable-farm-count-total 52)
		(defconst g-current-gold-camp-total 53)
		(defconst g-current-stone-camp-total 54)

		(defconst g-tarkan-line 55)						;counts castle and stable tarkans
		(defconst g-mangonel-line 56)					;counts WK onagers with mangonels and siege onagers
		(defconst g-unique-ship-line 57)
		(defconst g-skirmisher-line 58)					;includes WK imperial skirmisher
		(defconst g-eagle-scout-line 59)				;includes WK eagle warrior
		(defconst g-genitour-line 60)
		(defconst g-battle-elephant-line 61)
		(defconst g-fire-galley-line 62)
		(defconst g-demolition-raft-line 63)
		(defconst g-tower-line 64)						;counts watch tower, guard tower, keep, and donjon
		(defconst g-camel-line 65)						;includes WK imperial camel
		(defconst g-unique-unit-line 66)
		(defconst g-siege-class 67)						;counts all siege weapons (siege-class excludes several siege weapons)

		(defconst g-scout-id 68)						;the map ID of our first scout (usually our primary scout), goal is set to -2 when dead
		; (defconst g-scout2-id 69)						;the map ID of our second scout (usually a sheep), goal is set to -1 when unused
		; (defconst g-scout3-id 70)						;the map ID of our third scout (usually a sheep), goal is set to -1 when unused
		(defconst g-scouting-status 71)					;What we are currently trying to scout
			(defconst FIND-RESOURCES 3)
			(defconst SCOUT-TOWN 4)
			(defconst ALL-RESOURCES-FOUND 5)
			(defconst PUSH-DEER 10)
			(defconst FIND-ENEMY 13)
			(defconst RESCOUT-ENEMY 14)
			(defconst AUTO-SCOUT 20)
			(defconst DONT-SCOUT 99)
		; (defconst g-scouting-distance 72)				;Distance for the scout around the town center
		; (defconst g-duc-scouting 73)					;Steps to go through for DUC scouting
		; 	(defconst START 1)
		; 	(defconst SET-POINT 2)
		; 	(defconst TARGETING-POINT 3)				;Current scout (1, 2, or 3) has been sent to a point
		; 	(defconst STOP-DUC-SCOUTING 4)				;used if DUC scouting sends scout on inefficient scouting routes
			;RESET = 99
		; (defconst g-scouting-direction 74)				;The direction the scout will scout around the TC
			; (defconst CLOCKWISE -1)
			; (defconst COUNTERCLOCKWISE 1)
			; (defconst SWITCH 2)
		; (defconst g-current-scout-goal 75)				;detects whether we're tasking scout 1, 2, or 3
		; (defconst g-current-scout-id 76)				;stores the scout ID that g-current-scout-goal is set to
		; (defconst g-scout1-target-x 77)					;x location where scout 1 is being sent
		; (defconst g-scout1-target-y 78)					;y location where scout 1 is being sent
		; (defconst g-scout2-target-x 79)					;x location where scout 2 is being sent
		; (defconst g-scout2-target-y 80)					;y location where scout 2 is being sent
		; (defconst g-scout3-target-x 81)					;x location where scout 3 is being sent
		; (defconst g-scout3-target-y 82)					;y location where scout 3 is being sent
		(defconst g-total-sheep-found 83)				;stores the total number of livestock found 
		(defconst g-current-sheep-count 84)				;stores the current number of alive livestock we have
		(defconst g-total-boar-found 85)				;stores the total number of boar found near our town
		(defconst g-current-boar-count 86)				;stores the current number of alive boar that currently exist near our town
		(defconst g-total-deer-found 87)				;stores the total number of deer found near our town
		(defconst g-current-deer-count 88)				;stores the current number of alive deer that currently exist near our town
		(defconst g-gaia-sheep-id 89)					;stores the ID of the sheep to claim
		(defconst g-current-sheep-id 90)				;stores the ID of the sheep we're currently gathering
		(defconst g-next-sheep-id 91)					;stores the ID of the sheep we will gather next
		(defconst g-backup-sheep-id 92)
		; (defconst g-claim-sheep 92)
		; 	;NO = 0
		; 	(defconst FOUND-SHEEP 1)		;found sheep to claim
		; 	(defconst SEND-SCOUT-1 2)		;scout 1 is sent to claim sheep
		; 	(defconst SEND-SCOUT-2 3)		;scout 2 is sent to claim sheep
		; 	(defconst SEND-SCOUT-3 4)		;scout 3 is sent to claim sheep
		; 	(defconst SEND-VILLAGER 5)		;villager is sent to claim sheep if we don't have scouts
		(defconst g-sheep-gather-x 93)		;x location where sheep should gather to wait to be gathered
		(defconst g-sheep-gather-y 94)		;y location where sheep should gather to wait to be gathered
		(defconst g-boar-hunt-status 95)
			(defconst MAX-BOAR-HUNT-DISTANCE 38)
			(defconst NEAR-BOAR-HUNT-DISTANCE 24)
			#load-if-not-defined MONGOL-CIV
				(defconst NEAR-BOAR-FOOD-AMOUNT-LEFT 135)
				(defconst FAR-BOAR-FOOD-AMOUNT-LEFT 160)
			#else
				(defconst NEAR-BOAR-FOOD-AMOUNT-LEFT 175)
				(defconst FAR-BOAR-FOOD-AMOUNT-LEFT 220)
			#end-if
			(defconst READY-TO-LURE 1)
			(defconst SET-BOAR-ID 2)
			(defconst DROP-LURER-RESOURCES 3)
			(defconst TARGET-BOAR 4)
			(defconst LURE-BOAR 5)
			(defconst ASSIST-HUNTING-BOAR 6)
		(defconst g-current-boar-id 96)
		(defconst g-boar-lurer-id 97)
		(defconst g-deer-pushing-status 98)				;tracks the progress of deer luring and hunting
			(defconst SEARCHED-FOR-DEER 1)
			(defconst FOUND-DEER 2)
			(defconst SENT-SCOUT-TO-DEER 3)
			(defconst CHECK-DEER-DISTANCE 4)
			(defconst FOUND-DEER-HUNTER 5)
			(defconst SHOOT-DEER 6)
		(defconst g-current-deer-id 99)					;ID of deer being lured by scout
		(defconst g-total-decaying-hunt-food 100)

		(defconst g-desired-num-military 101)
		(defconst g-desired-num-navy 102)
		(defconst g-min-military-pop 103)
		(defconst g-required-num-villager 104)
		(defconst g-desired-num-villager 105)
		(defconst g-desired-num-trade-cart 106)
		(defconst g-desired-num-militia 107)
		(defconst g-desired-num-spearman 108)
		(defconst g-desired-num-eagle-warrior 109)
		(defconst g-desired-num-condottiero 110)
		(defconst g-desired-num-archer 111)
		(defconst g-desired-num-skirmisher 112)
		(defconst g-desired-num-cavalry-archer 113)
		(defconst g-desired-num-hand-cannoneer 114)
		; (defconst g-desired-num-slinger 77)
		(defconst g-desired-num-genitour 115)
		(defconst g-desired-num-elephant-archer 116)
		(defconst g-desired-num-scout-cavalry 117)
		(defconst g-desired-num-knight 118)
		(defconst g-desired-num-camel 119)
		(defconst g-desired-num-battle-elephant 120)
		(defconst g-desired-num-steppe-lancer 121)
		(defconst g-desired-num-unique-unit 122)
		(defconst g-desired-num-second-unique-unit 123)	;flemish militia, shrivamsha rider, slinger, missionary, flaming camel, petard 
		(defconst g-desired-num-ram-type 124)
		(defconst g-desired-num-mangonel 125)
		(defconst g-desired-num-scorpion 126)
		(defconst g-desired-num-bombard-cannon 127)
		(defconst g-desired-num-trebuchet 128)
		(defconst g-desired-num-siege-tower 129)
		(defconst g-desired-num-monk 130)
		; (defconst g-desired-num-missionary 92)
		(defconst g-desired-num-fishing-ship 131)
		(defconst g-desired-num-transport-ship 132)
		(defconst g-desired-num-trade-cog 133)
		(defconst g-desired-num-galley 134)
		(defconst g-desired-num-fire-ship 135)
		(defconst g-desired-num-demolition-ship 136)
		(defconst g-desired-num-cannon-galleon 137)
		(defconst g-desired-num-unique-ship 138)
		; (defconst g- 139)	;reserved for new desired unit count type
		; (defconst g- 140)	;Ditto
		(defconst g-desired-num-infantry 141)
		(defconst g-desired-num-foot-archers 142)
		(defconst g-desired-num-cavalry-archers 143)
		(defconst g-desired-num-cavalry 144)
		(defconst g-desired-num-siege 145)
		(defconst g-desired-num-hand-cannoneers 146)
		(defconst g-desired-num-monks 147)
		(defconst g-desired-num-town-center 148)
		(defconst g-desired-num-house 149)
		(defconst g-desired-num-mill 150)
		(defconst g-desired-num-mining-camp 151)
		(defconst g-desired-num-gold-camp 152)
		(defconst g-desired-num-stone-camp 153)
		(defconst g-desired-num-lumber-camp 154)
		(defconst g-desired-num-dock 155)
		(defconst g-desired-num-farm 156)
		(defconst g-desired-num-blacksmith 157)
		(defconst g-desired-num-market 158)
		(defconst g-desired-num-monastery 159)
		(defconst g-desired-num-university 160)
		(defconst g-desired-num-wonder 161)
		(defconst g-desired-num-barracks 162)
		(defconst g-desired-num-archery-range 163)
		(defconst g-desired-num-stable 164)
		(defconst g-desired-num-siege-workshop 165)
		(defconst g-desired-num-outpost 166)
		(defconst g-desired-num-tower 167)
		(defconst g-desired-num-bombard-tower 168)
		(defconst g-desired-num-castle 169)
		; (defconst g-desired-num-krepost 133)
		(defconst g-desired-num-unique-building 170)
		; (defconst g- 171)	;reserved for new desired building type
		; (defconst g- 172)
		; (defconst g- 173)

		(defconst g-place-control-bldg 174)
		(defconst g-place-point-bldg 175)
		(defconst g-place-point-x 176)		;stores the location of where the next building should be placed with up-build place-point
		(defconst g-place-point-y 177)		;stores the location of where the next building should be placed with up-build place-point

		(defconst g-primary-unit 178)
		(defconst g-support-unit 179)
		(defconst g-previous-support-unit 180)
		(defconst g-primary-unit-class 181)
		(defconst g-support-unit-class 182)
		(defconst g-desired-num-primary-unit 183)
		(defconst g-desired-num-support-unit 184)
		(defconst g-constant-train-unit 185)
		(defconst g-desired-num-constant-train-unit 186)
		(defconst g-desired-num-constant-train-unit-goal 187)
		
		(defconst g-primary-unit-tech-progress 188)
			(defconst REQUIRED-FEUDAL-COMPLETE 21)
			(defconst PRIORITY-FEUDAL-COMPLETE 22)
			(defconst SECONDARY-FEUDAL-COMPLETE 23)
			(defconst ALL-FEUDAL-COMPLETE 24)
			(defconst REQUIRED-CASTLE-COMPLETE 31)
			(defconst PRIORITY-CASTLE-COMPLETE 32)
			(defconst SECONDARY-CASTLE-COMPLETE 33)
			(defconst ALL-CASTLE-COMPLETE 34)
			(defconst REQUIRED-IMPERIAL-COMPLETE 41)
			(defconst PRIORITY-IMPERIAL-COMPLETE 42)
			(defconst SECONDARY-IMPERIAL-COMPLETE 43)
			(defconst ALL-IMPERIAL-COMPLETE 44)
		(defconst g-support-unit-tech-progress 189)
		(defconst g-eco-tech-progress 190)
		(defconst g-current-age-primary-unit-tech-progress 191)
			(defconst INCOMPLETE 0)
			(defconst REQUIRED-COMPLETE 1)
			(defconst PRIORITY-COMPLETE 2)
			(defconst SECONDARY-COMPLETE 3)
			(defconst ALL-COMPLETE 4)
		(defconst g-current-age-support-unit-tech-progress 192)
		(defconst g-current-age-eco-tech-progress 193)
		(defconst g-militia-tech-progress 194)
		(defconst g-spearman-tech-progress 195)
		(defconst g-eagle-warrior-tech-progress 196)
		(defconst g-condottiero-tech-progress 197)
		(defconst g-archer-tech-progress 198)
		(defconst g-skirmisher-tech-progress 199)
		(defconst g-cavalry-archer-tech-progress 200)
		(defconst g-hand-cannoneer-tech-progress 201)
		(defconst g-elephant-archer-tech-progress 202)
		(defconst g-genitour-tech-progress 203)
		(defconst g-scout-cavalry-tech-progress 204)
		(defconst g-knight-tech-progress 205)
		(defconst g-camel-tech-progress 206)
		(defconst g-battle-elephant-tech-progress 207)
		(defconst g-steppe-lancer-tech-progress 208)
		(defconst g-unique-unit-tech-progress 209)
		(defconst g-second-unique-unit-tech-progress 210)
		
		(defconst g-barracks-next-unit 211)
		(defconst g-archery-range-next-unit 212)
		(defconst g-stable-next-unit 213)
		(defconst g-siege-workshop-next-unit 214)
		(defconst g-dock-next-unit 215)

		(defconst g-target-military-parity 216)			;The difference between our military pop and the military pop of the target player, > 0 means we have superiority
		(defconst g-target-pop-parity 217)				;The difference between our total pop and the total pop of the target player, > 0 means we have superiority
		(defconst g-target-age-parity 218)				;Determines whether we are ahead or behind in age, compared to our target enemy
			(defconst WE-ARE-BEHIND 0)
			(defconst WE-ARE-EQUAL 1)
			(defconst WE-ARE-AHEAD 2)
		; (defconst g- 219)
		; (defconst g- 220)
		; (defconst g- 221)
		; (defconst g- 222)
		; (defconst g- 223)
		; (defconst g- 224)
		; (defconst g- 225)
		; (defconst g- 226)
		; (defconst g- 227)
		; (defconst g- 228)
		(defconst g-enemy-swordsmen-count 229)			;militia, woad raider, throwing axeman, berserk, condottiero, kamayuk, shotel warrior, gbeto, karambit warrior, foot konnik, serjeant, obuch, flemish militia
		(defconst g-enemy-spearmen-count 230)			;spearman
		(defconst g-enemy-eagle-warriors-count 231)		;eagle warrior, ghulam
		(defconst g-enemy-foot-archers-count 232)		;archer, longbowman, chu-ko-nu, plumed archer, janissary, rattan archer
		(defconst g-enemy-skirmishers-count 233)		;skirmisher, genitour
		(defconst g-enemy-cavalry-archers-count 234)	;cavalry archer, war wagon, mangudai, conquistador, camel archer, arambai, kipchak, elephant archer, ratha
		(defconst g-enemy-hand-cannoneers-count 235)	;hand cannoneer, slinger
		(defconst g-enemy-light-cavalry-count 236)		;scout cavalry, magyar huszar, steppe lancer, shrivamsha rider
		(defconst g-enemy-heavy-cavalry-count 237)		;knight, tarkan, boyar, konnik, keshik, leitis, coustillier
		(defconst g-enemy-camels-count 238)				;camel
		(defconst g-enemy-elephants-count 239)			;battle elephant, war elephant
		(defconst g-enemy-field-siege-count 240)		;mangonel, scorpion, organ gun, ballista elephant, hussite wagon
		(defconst g-enemy-monks-count 241)				;monk, missionary
		(defconst g-enemy-jaguar-warriors-count 242)	;jaguar warrior, urumi swordsman
		(defconst g-enemy-huskarls-count 243)			;huskarl
		(defconst g-enemy-chakram-throwers-count 244)	;chakram thrower
		(defconst g-enemy-samurai-count 245)			;samurai
		(defconst g-enemy-teutonic-knights-count 246)	;teutonic knight
		(defconst g-enemy-genoese-crossbowmen-count 247);genoese crossbowman
		(defconst g-enemy-cataphracts-count 248)		;cataphract
		(defconst g-enemy-mamelukes-count 249)			;mameluke

		; (defconst g- 250)	;reserved for new enemy unit type
		
		(defconst g-max-food-needed 251)
		(defconst g-max-wood-needed 252)
		(defconst g-max-stone-needed 253)
		(defconst g-max-gold-needed 254)
		(defconst g-important-techs-food-needed 255)
		(defconst g-important-techs-wood-needed 256)
		(defconst g-important-techs-stone-needed 257)
		(defconst g-important-techs-gold-needed 258)
		(defconst g-total-units-food-needed 259)
		(defconst g-total-units-wood-needed 260)
		(defconst g-total-units-stone-needed 261)
		(defconst g-total-units-gold-needed 262)
		(defconst g-total-buildings-food-needed 263)
		(defconst g-total-buildings-wood-needed 264)
		(defconst g-total-buildings-stone-needed 265)
		(defconst g-total-buildings-gold-needed 266)
		(defconst g-total-techs-food-needed 267)
		(defconst g-total-techs-wood-needed 268)
		(defconst g-total-techs-stone-needed 269)
		(defconst g-total-techs-gold-needed 270)
		(defconst g-current-farming-gathering-rate 271)
		(defconst g-current-wood-gathering-rate 272)
		(defconst g-current-stone-gathering-rate 273)
		(defconst g-current-gold-gathering-rate 274)
		(defconst g-required-num-food-vils 275)
		(defconst g-required-num-wood-vils 276)
		(defconst g-required-num-stone-vils 277)
		(defconst g-required-num-gold-vils 278)
		(defconst g-desired-num-food-vils 279)
		(defconst g-desired-num-wood-vils 280)
		(defconst g-desired-num-stone-vils 281)
		(defconst g-desired-num-gold-vils 282)
		(defconst g-desired-future-food-vils 283)
		(defconst g-desired-future-wood-vils 284)
		(defconst g-desired-future-stone-vils 285)
		(defconst g-desired-future-gold-vils 286)
		(defconst g-previous-villager-count 287)
		(defconst g-total-needed-villagers 288)
		(defconst g-percent-dynamic-gathering 289)
		(defconst g-recent-food-gathered 290)
		(defconst g-recent-wood-gathered 291)
		(defconst g-recent-stone-gathered 292)
		(defconst g-recent-gold-gathered 293)
		(defconst g-total-food-gathered 294)
		(defconst g-total-wood-gathered 295)
		(defconst g-total-stone-gathered 296)
		(defconst g-total-gold-gathered 297)
		(defconst g-total-food-bought 298)
		(defconst g-total-wood-bought 299)
		(defconst g-total-stone-bought 300)
		(defconst g-total-gold-bought 301)

		(defconst g-escrow 302)
		(defconst g-villager-training 303)
			;OFF = 0
			(defconst LIMITED-TRAINING 1)
			(defconst TRAIN-WITHOUT-ESCROW 2)
			(defconst LIMITED-TRAIN-WITH-ESCROW 3)
			(defconst TRAIN-WITH-ESCROW 4)

		(defconst g-id-loop-min-animals 304)

		(defconst g-threat-elapsed-time 305)			;time since last attack on the map
		(defconst g-threat-player 306)					;player that last attacked us anywhere on the map
		(defconst g-threat-source-class 307)			;class of the unit that last attacked
		(defconst g-threat-target-class 308)			;class of our unit that was last attacked
		(defconst g-local-total 309)					;number of objects in local list
		(defconst g-local-last 310)						;number of objects found in last local search
		(defconst g-remote-total 311)					;number of objects in remote list
		(defconst g-remote-last 312)					;number of objects found in last remote search

		;Resource Goals: 313-324
			(defconst g-food-cost 313)
			(defconst g-wood-cost 314)
			(defconst g-stone-cost 315)
			(defconst g-gold-cost 316)
			(defconst g-food-delta 317)
			(defconst g-wood-delta 318)
			(defconst g-stone-delta 319)
			(defconst g-gold-delta 320)
			(defconst g-temp-food-cost 321)
			(defconst g-temp-wood-cost 322)
			(defconst g-temp-stone-cost 323)
			(defconst g-temp-gold-cost 324)

			;Gathering.per
			(defconst g-food-needed g-temp-food-cost)
			(defconst g-wood-needed g-temp-wood-cost)
			(defconst g-stone-needed g-temp-stone-cost)
			(defconst g-gold-needed g-temp-gold-cost)

		;Single Goals: 325-352
			(defconst g-temp 325)
			(defconst g-temp2 326)
			(defconst g-temp3 327)
			(defconst g-temp4 328)
			(defconst g-temp5 329)
			(defconst g-temp6 330)
			; (defconst g-temp7 331)
			; (defconst g-temp8 332)
			(defconst g-loop-counter 331)
			(defconst g-loop-counter2 332)
			;Following temp goals are available to be replaced by renamed goals
			(defconst g-temp9 333)
			(defconst g-temp10 334)
			(defconst g-temp11 335)
			(defconst g-temp12 336)
			(defconst g-temp13 337)
			(defconst g-temp14 338)
			(defconst g-temp15 339)
			(defconst g-temp16 340)
			(defconst g-temp17 341)
			(defconst g-temp18 342)
			(defconst g-temp19 343)
			(defconst g-temp20 344)
			(defconst g-temp21 345)
			(defconst g-temp22 346)
			(defconst g-temp23 347)
			(defconst g-temp24 348)
			(defconst g-temp25 349)
			(defconst g-temp26 350)
			(defconst g-temp27 351)
			(defconst g-temp28 352)

			;Army Micro.per
			;Universal temp goals
			(defconst g-current-group-flag-goal-id g-temp9)				;Used throughout DUC code
			(defconst g-current-group-flag g-temp10)						;Used throughout DUC code
			(defconst g-current-group-action g-temp11)					;Used throughout DUC code
			(defconst g-current-group-action-goal-id g-temp12)			;Used throughout DUC code
			(defconst g-current-group-target-object-id g-temp13)			;Used throughout DUC code
			(defconst g-current-group-target-object-goal-id g-temp14)	;Used throughout DUC code
			(defconst g-current-group-type-flag-goal-id g-temp15)		;Used throughout DUC code
			(defconst g-current-group-type-flag g-temp16)				;Used throughout DUC code
			(defconst g-current-group-destination-time g-temp17)			;Used throughout DUC code
			(defconst g-current-group-destination-time-goal-id g-temp18)	;Used throughout DUC code
			(defconst g-current-group-avoidance-counter g-temp19)		;Used throughout DUC code
			(defconst g-current-group-avoidance-counter-goal-id g-temp20);Used throughout DUC code
			;Local Attack Target temp goals
			(defconst g-current-group-smallest-range g-temp21)				;Used ONLY in Set Local Attack Target section
			(defconst g-current-group-target-selection-status g-temp22)	;Used ONLY in Set Local Attack Target section
				(defconst SKIP 3426)
				(defconst SEARCH-FOR-POTENTIAL-TARGETS 3427)
				(defconst FOUND-POTENTIAL-TARGETS 3428)
				(defconst FOUND-UNITS-TO-TARGET 3429)
				(defconst FOUND-BUILDINGS-TO-TARGET 3430)
				(defconst TARGET-UNIT-SET 3431)
				(defconst TARGET-BUILDING-SET 3432)
			(defconst g-current-group-potential-target-score g-temp23)	;Used ONLY in Set Local Attack Target section
			(defconst g-current-group-best-potential-target-score g-temp24)	;Used ONLY in Set Local Attack Target section
			(defconst g-current-group-current-target-score g-temp25)		;Used ONLY in Set Local Attack Target section
			(defconst g-current-group-potential-target-id g-temp26)		;Used ONLY in Set Local Attack Target section
			;Dangerous Object temp goals
			(defconst g-dangerous-object-id g-temp21)					;Used ONLY in Retreat From Dangerous Object sections
			(defconst g-dangerous-object-range g-temp22)					;Used in Retreat From Dangerous Object and Check if in Range of Dangerous Object sections
			(defconst g-current-group-avoidance-location-flag g-temp23)	;Used ONLY in Retreat From Dangerous Object sections
				(defconst LOC1-REACHABLE 1)
				(defconst LOC1-SAFE 2)
				(defconst LOC2-REACHABLE 4)
				(defconst LOC2-SAFE 8)
			;Combine Groups temp goals
			(defconst g-current-nearby-group g-temp21)					;Used ONLY in Combine Groups section
			(defconst g-current-nearby-group-flag g-temp22)				;Used ONLY in Combine Groups section
			(defconst g-current-nearby-group-flag-goal-id g-temp23)		;Used ONLY in Combine Groups section
			(defconst g-current-nearby-group-type-flag g-temp24)			;Used ONLY in Combine Groups section
			(defconst g-current-nearby-group-type-flag-goal-id g-temp25)	;Used ONLY in Combine Groups section
			;Set Group Destination temp goals
			(defconst g-current-group-destination-object-id g-temp21)	;Used ONLY in Set Group Destination section
			(defconst g-current-group-best-destination-score g-temp22)	;Used ONLY in Set Group Destination section
			(defconst g-current-group-destination-score g-temp23)		;Used ONLY in Set Group Destination section
			(defconst g-current-group-destination-split-goal g-temp24)	;Used ONLY in Set Group Destination section
			;Gather Group temp goals
			(defconst g-current-group-gather-status g-temp21)			;Used ONLY in Gather Group Together section

			;Army Comp.per
			(defconst g-current-unit-type g-temp9)
				(defconst SUPPORT-MILITIA 1)
				(defconst SUPPORT-SPEARMAN 2)
				(defconst SUPPORT-EAGLE-WARRIOR 3)
				(defconst SUPPORT-CONDOTTIERO 4)
				(defconst SUPPORT-ARCHER 5)
				(defconst SUPPORT-SKIRMISHER 6)
				(defconst SUPPORT-CAVALRY-ARCHER 7)
				(defconst SUPPORT-ELEPHANT-ARCHER 8)
				(defconst SUPPORT-SLINGER 9)
				(defconst SUPPORT-GENITOUR 10)
				(defconst SUPPORT-HAND-CANNONEER 11)
				(defconst SUPPORT-SCOUT-CAVALRY 12)
				(defconst SUPPORT-KNIGHT 13)
				(defconst SUPPORT-CAMEL 14)
				(defconst SUPPORT-BATTLE-ELEPHANT 15)
				(defconst SUPPORT-STEPPE-LANCER 16)
				(defconst SUPPORT-SHRIVAMSHA-RIDER 17)
				(defconst SUPPORT-UNIQUE-UNIT 18)
				(defconst SUPPORT-MONK 19)
				(defconst SUPPORT-BATTERING-RAM 20)
				(defconst SUPPORT-MANGONEL 21)
				(defconst SUPPORT-SCORPION 22)
				(defconst SUPPORT-ARMORED-ELEPHANT 23)
			(defconst g-current-unit-score g-temp10)
			(defconst g-best-unit-type g-temp11)
			(defconst g-best-unit-score g-temp12)
			(defconst g-current-unit-building g-temp13)
			(defconst g-current-unit-attack-type g-temp14)
				; (defconst NONE 0)
				; (defconst MELEE-ATTACK 1)
				; (defconst PIERCE-ATTACK 2)
			(defconst g-current-unit-armor-type g-temp15)
				; (defconst NONE 0)
				; (defconst INFANTRY-ARMOR 1)
				; (defconst ARCHER-ARMOR 2)
				; (defconst CAVALRY-ARMOR 3)

			;Attacking.per
			(defconst g-top-enemy-military-parity g-temp9)		;The difference between our military pop and the highest military pop of any enemy, > 0 means we have superiority
			(defconst g-top-enemy-pop-parity g-temp10)			;The difference between our total pop and the highest total pop of any enemy, > 0 means we have superiority

			;Buildings
			(defconst g-tc-current-score g-temp9)
			(defconst g-tc-best-score g-temp10)

			;DUC.per
			(defconst g-scout-current-score g-temp9)
			(defconst g-scout-best-score g-temp10)
			(defconst g-scout-los g-temp11)
			(defconst g-scout-radius g-temp12)
				; (defconst SCOUT-SEARCH-RADIUS 10)
			(defconst g-num-auto-scouts g-temp13)
			(defconst g-num-villager-auto-scouts g-temp14)
			(defconst g-num-sheep-scouts g-temp15)
			(defconst g-num-villager-scouts g-temp16)
			(defconst g-num-military-scouts g-temp17)


			;Escrow.per
			(defconst g-prior-wood-escrow-type g-temp9)
			(defconst g-prior-food-escrow-type g-temp10)
			(defconst g-prior-gold-escrow-type g-temp11)
			(defconst g-prior-stone-escrow-type g-temp12)

			;Goals.per
			(defconst g-total-enemy-soldier-counts g-temp9)
			(defconst g-target-army-visible g-temp10)
			(defconst g-other-enemy-armies-visible g-temp11)

			;Market Trading.per
			(defconst g-food-price g-temp9)
			(defconst g-wood-price g-temp10)
			(defconst g-stone-price g-temp11)
			
			;Strats.per
			(defconst g-late-imp-best-strategy g-temp9)
			(defconst g-late-imp-strat-score g-temp10)

				;Attacking.per
				; (defconst g-required-attack-num-reduction g-temp9)
				; (defconst g-required-attack-num-increase g-temp10)
				; (defconst g-new-tsa-size g-temp9)
				; (defconst g-projectile-player g-temp9)
				; (defconst g-projectile-tower-id g-temp10)
				; (defconst g-closest-enemy-building-distance g-temp11)

				;Building Construction.per
				; (defconst g-checkpoint g-temp9)
				; (defconst g-total-num-houses g-temp10)
				; (defconst g-loop-counter-is-odd g-temp11)
				; (defconst g-num-tiles g-temp12)
				; (defconst g-pending-houses g-temp15)
				; (defconst g-vil1-id g-temp9)
				; (defconst g-vil2-id g-temp10)
				; (defconst g-vil3-id g-temp11)
				; (defconst g-percent-desired-barracks-built g-temp12)
				; (defconst g-percent-desired-ranges-built g-temp13)
				; (defconst g-percent-desired-stables-built g-temp14)
				; (defconst g-new-houses-needed g-temp9)
				; (defconst g-current-houses g-temp11)
				; (defconst g-current-gold-mine-map-id g-temp10)
				; (defconst g-mine-distance-to-enemy g-temp10)
				; (defconst g-soldier-gather-point-distance-to-enemy g-temp11)
				; (defconst g-furthest-wood-dropsite-distance g-temp9)
				; (defconst g-furthest-mining-dropsite-distance g-temp9)
				; (defconst g-pending-farms g-temp10)
				; (defconst g-current-farms g-temp11)

				;Desired Object Counts.per
				; (defconst g-total-gold-dropsites g-temp9)
				; (defconst g-needed-gold-dropsites g-temp10)
				; (defconst g-total-stone-dropsites g-temp9)
				; (defconst g-needed-stone-dropsites g-temp10)
				; (defconst g-total-wood-dropsites g-temp9)
				; (defconst g-needed-wood-dropsites g-temp10)
				; (defconst g-num-tcs g-temp9)
				; (defconst g-num-mills g-temp10)
				; (defconst g-desired-num-siege-workshop-units g-temp9)
				; (defconst g-new-tcs-needed g-temp9)
				; (defconst g-total-desired-military-count g-temp9)
				; (defconst g-desired-military-adjustment-factor g-temp10)

				;DUC.per
				; (defconst g-current-scout-goal g-temp9)				;detects whether we're tasking scout 1, 2, or 3
				; (defconst g-current-scout-id g-temp10)				;stores the scout ID that g-current-scout-goal is set to
				; (defconst g-current-scout-noal g-temp9)				;detects whether we're tasking scout 1, 2, or 3
				; (defconst g-current-scout-um g-temp11)
				; (defconst g-cross-tiles-amount g-temp12)
				; (defconst g-adjusted-scouting-distance g-temp13)
				; (defconst g-wrong-sheep-id g-temp14)
				; (defconst g-enemy-strength-near-tc g-temp9)
				; (defconst g-our-strength-near-tc g-temp10)
				; (defconst g-building-avoidance-radius g-temp11)
				; (defconst g-projectile-retreat g-temp12)

				;Gathering.per
				; (defconst g-min-number-foragers g-temp10)
				; (defconst g-min-gold-to-sell g-temp12)
				; (defconst g-wood-needed-for-farms g-temp9)
				; (defconst g-gather-rate g-temp10)
				; (defconst g-available-training-time g-temp11)
				; (defconst g-excess-resource-amount g-temp9)
				; (defconst g-current-farming-gathering-rate g-temp10)
				; (defconst g-current-wood-gathering-rate g-temp11)
				; (defconst g-current-stone-gathering-rate g-temp12)
				; (defconst g-current-gold-gathering-rate g-temp13)
				; (defconst g-percent-static-gathering g-temp9)
				; (defconst g-total-dynamic-gathering-vils g-temp10)
				; (defconst g-total-desired-future-vils g-temp11)
				; (defconst g-calculated-desired-num-vils g-temp12)
				; (defconst g-next-villager-resource-assignment g-temp13)
				; (defconst g-food-current-to-future-villager-ratio g-temp14)
				; (defconst g-wood-current-to-future-villager-ratio g-temp15)
				; (defconst g-stone-current-to-future-villager-ratio g-temp16)
				; (defconst g-gold-current-to-future-villager-ratio g-temp17)
				; (defconst g-lowest-current-to-future-villager-ratio g-temp18)
				; (defconst g-gathering-percentage-sum g-temp19)

				;Goals.per
				; (defconst g-selected-general g-temp9)
				; (defconst g-adjusted-military-parity g-temp9)
				; (defconst g-adjusted-pop-parity g-temp10)
				; (defconst g-adjusted-peaceful-town-size g-temp9)
				; (defconst g-scout-distance-increase-timer-length g-temp9)
				; (defconst g-housing-support g-temp9)
				; (defconst g-current-pop g-temp10)
				; (defconst g-queued-pop g-temp11)
				; (defconst g-num-enemies g-temp9)
				; (defconst g-average-num-enemy-military g-temp10)
				; (defconst g-sum-enemy-military-counts g-temp11)
				; (defconst g-ratio-enemy-military g-temp12)
				; (defconst g-lowest-ally-distance g-temp9)
				; (defconst g-top-enemy-military-type g-temp9)
				; (defconst g-weighted-top-enemy-military-type g-temp10)
				; (defconst g-current-enemy-military-type-count g-temp11)
				; (defconst g-previous-total-food-gathered g-temp9)
				; (defconst g-previous-total-wood-gathered g-temp10)
				; (defconst g-previous-total-stone-gathered g-temp11)
				; (defconst g-previous-total-gold-gathered g-temp12)
				; (defconst g-percent-desired-trained g-temp9)
				; (defconst g-lowest-percent-desired-trained g-temp10)
				; (defconst g-enemy-strength-in-town g-temp9)
				; (defconst g-own-strength g-temp10)
				; (defconst g-current-garrisonable-building-count g-temp11)

				;Personality.per
				; (defconst g-initial-chat-delay g-temp10)
				; (defconst g-get-enemy-locations g-temp11)
				; 	(defconst BEGIN-FINDING-PLAYERS 0)
				; 	(defconst DONE-FINDING-PLAYERS 9)

				;Resign.per
				; (defconst g-resign g-temp9)
				; (defconst g-team-population-ratio g-temp10)

				;Strategic Numbers.per
				; (defconst g-max-tile-difference g-temp9)
				; (defconst g-temp-tile-difference g-temp10)

				;Technology Research.per
				; (defconst g-desired-num-constant-train-unit g-temp9)

				;Functions/Build Line Lumber.per (also Mining and Mill)
				; (defconst g-sub-checkpoint g-temp10)
				; (defconst g-weighted-distance g-temp11)
				; (defconst g-weighted-distance-from-tc g-temp12)

				;Functions/Build Line.per
				; (defconst g-placement-zone-size-diameter g-temp9)
				; (defconst g-building-placement-radius g-temp10)
				; (defconst g-building-clearance-size g-temp11)

		;Point Goals: 353-376
			(defconst g-point-x 353)
			(defconst g-point-y 354)
			(defconst g-point2-x 355)
			(defconst g-point2-y 356)
			(defconst g-point3-x 357)
			(defconst g-point3-y 358)
			(defconst g-point4-x 359)
			(defconst g-point4-y 360)
			;Temp points after this are available to be renamed
			(defconst g-point5-x 361)
			(defconst g-point5-y 362)
			(defconst g-point6-x 363)
			(defconst g-point6-y 364)
			(defconst g-point7-x 365)
			(defconst g-point7-y 366)
			(defconst g-point8-x 367)
			(defconst g-point8-y 368)
			(defconst g-point9-x 369)
			(defconst g-point9-y 370)
			(defconst g-point10-x 371)
			(defconst g-point10-y 372)
			(defconst g-point11-x 373)
			(defconst g-point11-y 374)
			(defconst g-point12-x 375)
			(defconst g-point12-y 376)

			;Army Micro.per
			(defconst g-current-group-location-x g-point5-x)
			(defconst g-current-group-location-y g-point5-y)
			(defconst g-current-group-location-x-goal-id g-point6-x)
			(defconst g-current-group-location-y-goal-id g-point6-y)
			(defconst g-current-group-destination-x g-point7-x)
			(defconst g-current-group-destination-y g-point7-y)
			(defconst g-current-group-destination-x-goal-id g-point8-x)
			(defconst g-current-group-destination-y-goal-id g-point8-y)
			(defconst g-dangerous-object-x g-point9-x)
			(defconst g-dangerous-object-y g-point9-y)
			(defconst g-current-nearby-group-location-x g-point10-x)
			(defconst g-current-nearby-group-location-y g-point10-y)
			(defconst g-current-nearby-group-location-x-goal-id g-point11-x)
			(defconst g-current-nearby-group-location-y-goal-id g-point11-y)
			(defconst g-dangerous-object-avoidance-location1-x g-point10-x)
    		(defconst g-dangerous-object-avoidance-location1-y g-point10-y)
			(defconst g-dangerous-object-avoidance-location2-x g-point11-x)
    		(defconst g-dangerous-object-avoidance-location2-y g-point11-y)
			(defconst g-dangerous-object-avoidance-location3-x g-point12-x)
			(defconst g-dangerous-object-avoidance-location3-y g-point12-y)

				;Building Construction.per
				; (defconst g-offset-x g-point5-x)
				; (defconst g-offset-y g-point5-y)

				; (defconst g-selected-build-location-x g-point5-x)
				; (defconst g-selected-build-location-y g-point5-y)
				; (defconst g-current-tile-to-check-x g-point6-x)
				; (defconst g-current-tile-to-check-y g-point6-y)
				; (defconst g-gold-mine-x g-point5-x)
				; (defconst g-gold-mine-y g-point5-y)
				; (defconst g-dropsite-x g-point5-x)
				; (defconst g-dropsite-y g-point5-y)

				;DUC.per
				(defconst g-offset-x g-point5-x)
				(defconst g-offset-y g-point5-y)
				(defconst g-offset2-x g-point6-x)
				(defconst g-offset2-y g-point6-y)
				; (defconst g-enemy-defensive-building-x g-point5-x)
				; (defconst g-enemy-defensive-building-y g-point5-y)
				; (defconst g-nearby-unit-x g-point6-x)
				; (defconst g-nearby-unit-y g-point6-y)
				; (defconst g-retreat-location-x g-point7-x)
				; (defconst g-retreat-location-y g-point7-y)
				; (defconst g-next-scouting-location-x g-point5-x)
				; (defconst g-next-scouting-location-y g-point5-y)
				; (defconst g-adjusted-next-scouting-location-x g-point6-x)
				; (defconst g-adjusted-next-scouting-location-y g-point6-y)
				; (defconst g-explore-point-x g-point7-x)
				; (defconst g-explore-point-y g-point7-y)
				; (defconst g-push-deer-x g-point5-x)
				; (defconst g-push-deer-y g-point5-y)
				; (defconst g-sheep-under-tc-x g-point5-x)
				; (defconst g-sheep-under-tc-y g-point5-y)

				;Strategic Numbers.per
				; (defconst g-min-x g-point5-x)
				; (defconst g-min-y g-point5-y)
				; (defconst g-max-x g-point6-x)
				; (defconst g-max-y g-point6-y)

				;Functions/Build Line.per
				; ; (defconst g-selected-build-location-x g-point5-x)
				; ; (defconst g-selected-build-location-y g-point5-y)
				; ; (defconst g-current-tile-to-check-x g-point6-x)
				;; (defconst g-current-tile-to-check-y g-point6-y)
				; (defconst g-offset-x g-point7-x)
				; (defconst g-offset-y g-point7-y)
				; (defconst g-primary-reference-x g-point5-x)
				; (defconst g-primary-reference-y	g-point5-y)

				;Functions/Build Line Lumber.per
				; (defconst g-current-tree-x g-point5-x)
				; (defconst g-current-tree-y g-point5-y)
				; (defconst g-best-tree-x g-point6-x)
				; (defconst g-best-tree-y g-point6-y)

		(defconst g-lumber-camp-construction-rule-id 377)
		(defconst g-gold-camp-construction-rule-id 378)
		(defconst g-stone-camp-construction-rule-id 379)
		(defconst g-place-point-rule-id 380)
		(defconst g-duc-micro-start-rule-id 381)
		(defconst g-duc-micro-end-rule-id 382)
		(defconst g-army-comp-start-rule-id 383)
		(defconst g-army-comp-end-rule-id 384)
		(defconst g-strats-end-rule-id 385)
		; (defconst g- 386)
		; (defconst g- 387)
		; (defconst g- 388)
		; (defconst g- 389)
		; (defconst g- 390)
		; (defconst g- 391)

		(defconst g-attacking 392)
			; NO = 0
			; YES = 1

		; (defconst g- 393)
		; (defconst g- 394)
		; (defconst g- 395)
		; (defconst g- 396)
		; (defconst g- 397)
		; (defconst g- 398)
		; (defconst g- 399)
		; (defconst g- 400)

		;Build Line goals: 401-419
			(defconst g-temp-build-line1 401)
			(defconst g-temp-build-line2 402)
			(defconst g-temp-build-line3 403)
			(defconst g-temp-build-line4 404)
			(defconst g-temp-build-line5 405)
			(defconst g-temp-build-line6 406)
			(defconst g-temp-build-line7 407)
			(defconst g-temp-build-line8 408)
			(defconst g-temp-build-line9 409)
			(defconst g-temp-build-line10 410)
			(defconst g-temp-build-line11 411)
			(defconst g-temp-build-line12 412)
			(defconst g-temp-build-line13 413)
			(defconst g-temp-build-line14 414)
			(defconst g-temp-build-line15 415)
			(defconst g-temp-build-line16 416)
			(defconst g-temp-build-line17 417)
			(defconst g-temp-build-line18 418)
			(defconst g-temp-build-line19 419)

			(defconst g-build-line-type g-temp-build-line1)					;type of method used to place buildings with Build Line, also functions as an on/off switch for Build Line construction
				(defconst BUILD-LINE-POINT-NORMAL 1)					;imitate up-build place-point for normal buildings
				(defconst BUILD-LINE-POINT-MINING-DROPSITE 2)			;imitate up-build place-point for gold and stone dropsites
				(defconst BUILD-LINE-POINT-LUMBER-DROPSITE 3)			;imitate up-build place-point for wood dropsites
				(defconst BUILD-LINE-POINT-MILL-DROPSITE 4)				;imitate up-build place-point for food dropsites
				(defconst BUILD-LINE-NORMAL 5)							;imitate up-build place-normal
				(defconst BUILD-LINE-FORWARD 6)							;imitate up-build place-forward
				(defconst BUILD-LINE-CONTROL 7)							;imitate up-build place-control
				(defconst BUILD-LINE-FARM 8)							;placement for farms
			(defconst g-build-line-bldg g-temp-build-line2)					;building to be constructed
			(defconst g-build-line-bldg-foundation g-temp-build-line3)			;foundation ID of building to be constructed (required for town centers, gates, etc.)
			(defconst g-build-line-zone-radius g-temp-build-line4)				;current radius we are checking to build the building from g-build-line-point-x
			(defconst g-build-line-max-zone-radius g-temp-build-line5)			;maximum zone radius before Build Line gives up
			; (defconst g-build-line-expand g-temp-build-line6)					;determines whether the zone radius can increase
			(defconst g-build-line-expand-direction g-temp-build-line7)		;imitates sn-placement-fail-delta
				(defconst NO-DIRECTION 0)
				(defconst TOWARD-TC 1)
				(defconst HALF-TOWARD-TC 2)
				(defconst AWAY-FROM-TC 3)
				(defconst TOWARD-TARGET 4)
				(defconst TOWARD-CENTER 5)
				(defconst AWAY-FROM-TARGET 6)
				(defconst AWAY-FROM-CENTER 7)
			(defconst g-build-line-enemy-bldg-distance g-temp-build-line8)		;distance buildings must be placed from enemy buildings		
			(defconst g-build-line-min-distance g-temp-build-line9)			;min distance the building may be constructed from the home TC			
			(defconst g-build-line-max-distance g-temp-build-line10)			;max distance the building may be constructed from the home TC
			(defconst g-build-line-escrow g-temp-build-line11)
			(defconst g-build-line-point-x g-temp-build-line12)
			(defconst g-build-line-point-y g-temp-build-line13)
			(defconst g-build-line-size g-temp-build-line14)
			(defconst g-build-line-resource-type g-temp-build-line15)			;resource type to place building by (used with up-gaia-type-count)
			(defconst g-build-line-resource-id g-temp-build-line16)				;map ID of resource found
			(defconst g-build-line-backup-resource-id g-temp-build-line17)		;used to find a second possible tree to build lumber camp nearby
			(defconst g-build-line-dropsite-distance g-temp-build-line18)		;distance new building must be from other dropsites for the same resource
			(defconst g-build-line-net-dropsite-distance g-temp-build-line19)	;tracks net camp distance of available dropsite locations. Formula: Distance to flank/center minus (2 * distance to town center)

		(defconst g-identity 420)			; A goal that assigns an ID to the AI that other AIs can detect to know the AI's identity
			(defconst DOOMSDAY 42)
			(defconst UNKNOWN 69)
			(defconst ULYSSES 69)
			(defconst ILLUMINATI 123)
			(defconst ODETTE 161) 
			(defconst PHARAON 181)
			(defconst JUGGERNAUT 275)
			(defconst CYAN 369)
			(defconst PROMI 420)
			(defconst THE-HORDE 666)
			(defconst THE-MORRIGAN 795)
			(defconst THERMOPYLAI 894)
			(defconst BRUTEFORCE 1001)
			(defconst YGGDRASIL 1111)
			(defconst REACTIONARY 1221)
			(defconst TRIBAL-WARRIOR 1234)
			(defconst RHAPSODY 1337)
			(defconst THE-GENERAL 1492)
			(defconst NAGA 1949)
			(defconst BAMBI 1982)
			(defconst DAEDRIC 2000)
			(defconst MAIAR 2001)
			(defconst MANGUDAI-ALL-IN 2012)
			(defconst SHADOW 2048)
			(defconst MELEON 2197)
			(defconst BARBARIAN 4651)
			(defconst SUBJUGATOR 5678)
			
		;Army Control Goals:
		(defconst g-before-group-flags-goal-id 420)
		(defconst g-before-group-type-flags-goal-id 426)
		(defconst g-before-group-actions-goal-id 432)
		(defconst g-before-group-target-objects-goal-id 438)
		(defconst g-before-group-locations-goal-id 443)
		(defconst g-before-group-destination-times-goal-id 468)
		(defconst g-before-group-avoidance-counters-goal-id 479)
		(defconst g-group1-flag 421)
			(defconst DANGEROUS-OBJECT-NEARBY 1)
			(defconst WITHIN-RANGE-OF-DANGEROUS-BUILDING 2)
			(defconst WITHIN-RETREAT-RANGE-OF-DANGEROUS-BUILDING 4)
			(defconst ALLOW-COMBINED-GROUPS 8)
			(defconst FOCUS-SINGLE-TARGET 16)
			(defconst FOCUS-MULTIPLE-TARGETS 32)
			(defconst USE-BOX-FORMATION 64)
			(defconst CLOCKWISE 128)
			(defconst SCOUT-MODE 256)
			(defconst RAID-MODE 512)
			(defconst ASSAULT-MODE 1024)
			(defconst MAIN-GROUP 2048)
			(defconst JOIN-MAIN-GROUP 4096)
			; (defconst  8192)    
			; (defconst  16384)   
		(defconst g-group2-flag 422)
		(defconst g-group3-flag 423)
		(defconst g-group4-flag 424)
		(defconst g-group5-flag 425)
		(defconst g-group6-flag 426)
		(defconst g-group1-type-flag 427)
			(defconst MELEE-SOLDIER-GROUP 1)
			(defconst RANGED-SOLDIER-GROUP 2)  
			(defconst RANGED-SIEGE-GROUP 4)      
			(defconst MELEE-INFANTRY-GROUP 8)
			(defconst RANGED-INFANTRY-GROUP 16)
			(defconst FOOT-ARCHER-GROUP 32)
			(defconst CAVALRY-ARCHER-GROUP 64)
			(defconst CAVALRY-GROUP 128)
			(defconst MONK-GROUP 256)
			(defconst RAM-GROUP 512)
			(defconst SCORPION-GROUP 1024)
			(defconst MANGONEL-GROUP 2048)
			(defconst CANNON-GROUP 4096)
			(defconst TREBUCHET-GROUP 8192)
			; (defconst -GROUP 16384)
			; (defconst 32768)          ;Anti-infantry sub-group type, defconsts can only be defined up to 32767
			; (defconst 65536)          ;Anti-pikemen sub-group type
			; (defconst 131072)         ;Anti-eagles sub-group type
			; (defconst 262144)         ;Anti-foot-archers sub-group type
			; (defconst 524288)         ;Anti-cav-archers sub-group type
			; (defconst 1048576)        ;Anti-skirms sub-group type
			; (defconst 2097152)        ;Anti-cavalry sub-group type
			; (defconst 4194304)        ;Anti-camels sub-group type
			; (defconst 8388608)        ;Anti-elephants sub-group type
			; (defconst 16777216)       ;Anti-siege sub-group type
			; (defconst 33554432)       ;Anti-monks sub-group type
			; (defconst 67108864)       ;Anti-gunpowder sub-group type
			; (defconst 134217728)      ;Anti-unique-units sub-group type 
			; (defconst 268435456)               
			; (defconst 536870912)               
			; (defconst 1073741824)
		(defconst g-group2-type-flag 428)
		(defconst g-group3-type-flag 429)
		(defconst g-group4-type-flag 430)
		(defconst g-group5-type-flag 431)
		(defconst g-group6-type-flag 432)
		(defconst g-group1-action 433)
			(defconst GROUP-GATHER 0)
			(defconst GROUP-MOVE 1)
			(defconst GROUP-ATTACK 2)
			(defconst GROUP-RETREAT-FROM-OBJECT 3)
		(defconst g-group2-action 434)
		(defconst g-group3-action 435)
		(defconst g-group4-action 436)
		(defconst g-group5-action 437)
		(defconst g-group6-action 438)
		(defconst g-group1-target-object-id 439)
		(defconst g-group2-target-object-id 440)
		(defconst g-group3-target-object-id 441)
		(defconst g-group4-target-object-id 442)
		(defconst g-group5-target-object-id 443)
		(defconst g-group6-target-object-id 444)
		(defconst g-group1-location-x 445)
		(defconst g-group1-location-y 446)
		(defconst g-group2-location-x 447)
		(defconst g-group2-location-y 448)
		(defconst g-group3-location-x 449)
		(defconst g-group3-location-y 450)
		(defconst g-group4-location-x 451)
		(defconst g-group4-location-y 452)
		(defconst g-group5-location-x 453)
		(defconst g-group5-location-y 454)
		(defconst g-group6-location-x 455)
		(defconst g-group6-location-y 456)
		(defconst g-group1-destination-x 457)
		(defconst g-group1-destination-y 458)
		(defconst g-group2-destination-x 459)
		(defconst g-group2-destination-y 460)
		(defconst g-group3-destination-x 461)
		(defconst g-group3-destination-y 462)
		(defconst g-group4-destination-x 463)
		(defconst g-group4-destination-y 464)
		(defconst g-group5-destination-x 465)
		(defconst g-group5-destination-y 466)
		(defconst g-group6-destination-x 467)
		(defconst g-group6-destination-y 468)
		(defconst g-group1-destination-time 469)
			(defconst MAX-DESTINATION-TIME 15)
		(defconst g-group2-destination-time 470)
		(defconst g-group3-destination-time 471)
		(defconst g-group4-destination-time 472)
		(defconst g-group5-destination-time 473)
		(defconst g-group6-destination-time 474)
		(defconst g-current-group 475)
		(defconst g-min-group-size 476)
		(defconst g-max-group-size 477)
		(defconst g-position-self-x 478)	
		(defconst g-position-self-y 479)
		(defconst g-group1-avoidance-counter 480)
		(defconst g-group2-avoidance-counter 481)
		(defconst g-group3-avoidance-counter 482)
		(defconst g-group4-avoidance-counter 483)
		(defconst g-group5-avoidance-counter 484)
		(defconst g-group6-avoidance-counter 485)
		(defconst g-recent-target1 486)
		(defconst g-recent-target2 487)
		(defconst g-recent-target3 488)
		(defconst g-recent-target4 489)
		(defconst g-recent-target5 490)
		; (defconst g- 491)	;reserved for future DUC stuff
		; (defconst g- 492)
		; (defconst g- 493)
		; (defconst g- 494)
		; (defconst g- 495)
		; (defconst g- 496)
		; (defconst g- 497)
		; (defconst g- 498)
		(defconst g-michi-cut-priority 499)	; A goal to use with allies to request cutting forests on Michi/Forest Nothing maps	
			; NO = 0
			(defconst REQUEST-PRIORITY 4535)
		; (defconst 500)
		; (defconst 501)
		; (defconst 502)
		; (defconst 503)
		; (defconst 504)
		; (defconst 505)
		; (defconst 506)
		; (defconst 507)
		; (defconst 508)
		; (defconst 509)
		; (defconst 510)
		; (defconst 511)
		; (defconst 512)

	;--------------------------------
	;	Map Type Loading Constants
	;		And Goal 7
	;--------------------------------

		;Stores the amounts of resources placed for each player on the map
		
		;Goal 7 saves the style of map that is being played
		;Initialize this here because if Immobile is selected, it needs to precede the SN initialization section.

		(defrule
		(true)
		=>
		(set-goal g-map-style PENDING)
		(disable-self)
		)

		#load-if-defined ARABIA-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style OPEN-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined ARCHIPELAGO-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 7)
			(defconst GOLD-PILE-3 0)
			(defconst STONE-PILE-1 6)
			(defconst STONE-PILE-2 6)

			(defrule
			(true)
			=>
			(set-goal g-map-style ISLANDS)
			(disable-self)
			)

		#end-if

		#load-if-defined ARENA-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style WALLED-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined BALTIC-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined BLACK-FOREST-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style CLOSED-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined COASTAL-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined CONTINENTAL-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined CRATER-LAKE-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 4)
			(defconst GOLD-PILE-2 3)
			(defconst GOLD-PILE-3 0)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined FORTRESS-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style WALLED-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined GHOST-LAKE-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style OPEN-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined GOLD-RUSH-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 4)
			(defconst GOLD-PILE-2 3)
			(defconst GOLD-PILE-3 0)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style OPEN-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined HIGHLAND-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style RIVERS)
			(disable-self)
			)

		#end-if

		#load-if-defined ISLANDS-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 7)
			(defconst GOLD-PILE-3 0)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 5)

			(defrule
			(true)
			=>
			(set-goal g-map-style TEAM-ISLANDS)
			(disable-self)
			)

		#end-if

		#load-if-defined LAND-NOMAD-MAP

			(defconst MIN-BOAR 0)
			(defconst MIN-DEER 0)
			(defconst MIN-SHEEP 0)
			(defconst MIN-STRAGGLERS 0)
			(defconst FORAGE-PILE-1 0)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 0)
			(defconst GOLD-PILE-2 0)
			(defconst GOLD-PILE-3 0)
			(defconst STONE-PILE-1 0)
			(defconst STONE-PILE-2 0)

			(defrule
			(true)
			=>
			(set-goal g-map-style NOMAD)
			(disable-self)
			)

		#end-if

		#load-if-defined MEDITERRANEAN-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined MIGRATION-MAP

			(defconst MIN-BOAR 0)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 6)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 7)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 8)
			(defconst GOLD-PILE-2 0)
			(defconst GOLD-PILE-3 0)
			(defconst STONE-PILE-1 6)
			(defconst STONE-PILE-2 0)

			(defrule
			(true)
			=>
			(set-goal g-map-style MIGRATION)
			(disable-self)
			)

		#end-if

		#load-if-defined MONGOLIA-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style OPEN-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined NOMAD-MAP

			(defconst MIN-BOAR 0)
			(defconst MIN-DEER 0)
			(defconst MIN-SHEEP 0)
			(defconst MIN-STRAGGLERS 0)
			(defconst FORAGE-PILE-1 0)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 0)
			(defconst GOLD-PILE-2 0)
			(defconst GOLD-PILE-3 0)
			(defconst STONE-PILE-1 0)
			(defconst STONE-PILE-2 0)

			(defrule
			(true)
			=>
			(set-goal g-map-style NOMAD)
			(disable-self)
			)

		#end-if

		#load-if-defined OASIS-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style CLOSED-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined RIVERS-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style RIVERS)
			(disable-self)
			)

		#end-if

		#load-if-defined SALT-MARSH-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 9)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style OPEN-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined SCANDANAVIA-MAP

			(defconst MIN-BOAR 3)
			(defconst MIN-DEER 7)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 0)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined TEAM-ISLANDS-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style TEAM-ISLANDS)
			(disable-self)
			)

		#end-if

		#load-if-defined YUCATAN-MAP

			(defconst MIN-BOAR 3)
			(defconst MIN-DEER 7)
			(defconst MIN-SHEEP 12)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 6)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style CLOSED-LAND)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-BYZANTIUM-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style ISLANDS)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-CARIBBEAN-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-ENGLAND-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style ISLANDS)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-FRANCE-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style ISLANDS)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-ITALY-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style MIGRATION)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-JUTLAND-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-MIDEAST-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-NIPPON-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style ISLANDS)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-SPAIN-MAP

			(defconst MIN-BOAR 2)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style ISLANDS)
			(disable-self)
			)

		#end-if

		#load-if-defined REAL-WORLD-TEXAS-MAP

			(defconst MIN-BOAR 5)
			(defconst MIN-DEER 3)
			(defconst MIN-SHEEP 8)
			(defconst MIN-STRAGGLERS 5)
			(defconst FORAGE-PILE-1 6)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 7)
			(defconst GOLD-PILE-2 4)
			(defconst GOLD-PILE-3 4)
			(defconst STONE-PILE-1 5)
			(defconst STONE-PILE-2 4)

			(defrule
			(true)
			=>
			(set-goal g-map-style LAKES)
			(disable-self)
			)

		#end-if

		#load-if-defined CUSTOM-MAP

			(defconst MIN-BOAR 0)
			(defconst MIN-DEER 0)
			(defconst MIN-SHEEP 0)
			(defconst MIN-STRAGGLERS 0)
			(defconst FORAGE-PILE-1 0)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 0)
			(defconst GOLD-PILE-2 0)
			(defconst GOLD-PILE-3 0)
			(defconst STONE-PILE-1 0)
			(defconst STONE-PILE-2 0)

			(defrule
			(game-time < 5)
			(building-type-count town-center > 0)
			(cc-players-unit-type-count 0 ocean-fish-class > 10)
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style ISLANDS)
			(disable-self)
			)
			
			(defrule
			(game-time < 5)
			(building-type-count town-center > 0)
			(cc-players-unit-type-count 0 ocean-fish-class < 10)
			(cc-players-unit-type-count 0 shore-fish-class > 15)
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style RIVERS)
			(disable-self)
			)

			(defrule
			(game-time < 5)
			(building-type-count town-center > 0)
			(cc-players-unit-type-count 0 ocean-fish-class == 0)
			(cc-players-unit-type-count 0 shore-fish-class == 0)
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style OPEN-LAND)
			(disable-self)
			)

			(defrule
			(game-time < 5)
			(building-type-count town-center == 0)
			; (can-build town-center)
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style NOMAD)
			; (chat-to-player my-player-number CHAT-NOMAD-MAP-DETECTED)
			(disable-self)
			)

			; (defrule
			; (game-time < 5)
			; (building-type-count town-center == 0)
			; (not
			; 	(can-build town-center))
			; (goal g-map-style PENDING)
			; =>
			; (set-goal g-map-style LAND-NOMAD)
			; ; (chat-to-player my-player-number CHAT-NOMAD-MAP-DETECTED)
			; (disable-self)
			; )

		#end-if

		#load-if-defined SCENARIO-MAP

			(defconst MIN-BOAR 0)
			(defconst MIN-DEER 0)
			(defconst MIN-SHEEP 0)
			(defconst MIN-STRAGGLERS 0)
			(defconst FORAGE-PILE-1 0)
			(defconst FORAGE-PILE-2 0)
			(defconst GOLD-PILE-1 0)
			(defconst GOLD-PILE-2 0)
			(defconst GOLD-PILE-3 0)
			(defconst STONE-PILE-1 0)
			(defconst STONE-PILE-2 0)

			(defrule
			(game-time < 5)
			(building-type-count town-center > 0)
			(cc-players-unit-type-count 0 ocean-fish-class > 10)
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style ISLANDS)
			(disable-self)
			)
			
			(defrule
			(game-time < 5)
			(building-type-count town-center > 0)
			(cc-players-unit-type-count 0 ocean-fish-class < 10)
			(cc-players-unit-type-count 0 shore-fish-class > 15)
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style RIVERS)
			(disable-self)
			)

			(defrule
			(game-time < 5)
			(building-type-count town-center > 0)
			(cc-players-unit-type-count 0 ocean-fish-class == 0)
			(cc-players-unit-type-count 0 shore-fish-class == 0)
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style OPEN-LAND)
			(disable-self)
			)

			(defrule
			(game-time < 5)
			(building-type-count town-center == 0)
			(unit-type-count villager > 0)
			; (can-build town-center)
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style NOMAD)
			(disable-self)
			)

			; (defrule
			; (game-time < 5)
			; (building-type-count town-center == 0)
			; (unit-type-count villager > 0)
			; (not
			; 	(can-build town-center))
			; (goal g-map-style PENDING)
			; =>
			; (set-goal g-map-style LAND-NOMAD)
			; (disable-self)
			; )

			(defrule
			(game-time < 5)
			(building-type-count town-center == 0)
			(building-type-count lumber-camp == 0)
			(building-type-count mill == 0)
			(building-type-count mining-camp == 0)
			(building-type-count dock == 0)
			(not
				(can-build lumber-camp))
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style IMMOBILE)
			(disable-self)
			)

			(defrule
			(game-time < 5)
			(unit-type-count villager == 0)
			(not
				(can-train villager))
			(goal g-map-style PENDING)
			=>
			(set-goal g-map-style IMMOBILE)
			(disable-self)
			)

		#end-if

		(defrule
		(goal g-map-style PENDING)
		(game-time < 5)
		(building-type-count town-center > 0)
		(cc-players-unit-type-count 0 ocean-fish-class > 10)
		=>
		(set-goal g-map-style ISLANDS)
		(disable-self)
		)
		
		(defrule
		(goal g-map-style PENDING)
		(game-time < 5)
		(building-type-count town-center > 0)
		(cc-players-unit-type-count 0 ocean-fish-class < 10)
		(cc-players-unit-type-count 0 shore-fish-class > 15)
		=>
		(set-goal g-map-style RIVERS)
		(disable-self)
		)

		(defrule
		(goal g-map-style PENDING)
		(game-time < 5)
		(building-type-count town-center > 0)
		(cc-players-unit-type-count 0 ocean-fish-class == 0)
		(cc-players-unit-type-count 0 shore-fish-class == 0)
		=>
		(set-goal g-map-style OPEN-LAND)
		(disable-self)
		)

		(defrule
		(goal g-map-style PENDING)
		(game-time < 5)
		(building-type-count town-center == 0)
		(unit-type-count villager > 0)
		; (can-build town-center)
		=>
		(set-goal g-map-style NOMAD)
		(disable-self)
		)

		; (defrule
		; (goal g-map-style PENDING)
		; (game-time < 5)
		; (building-type-count town-center == 0)
		; (unit-type-count villager > 0)
		; (not
		; 	(can-build town-center))
		; =>
		; (set-goal g-map-style LAND-NOMAD)
		; (disable-self)
		; )

		(defrule
		(goal g-map-style PENDING)
		(game-time < 5)
		(building-type-count town-center == 0)
		(building-type-count lumber-camp == 0)
		(building-type-count mill == 0)
		(building-type-count mining-camp == 0)
		(building-type-count dock == 0)
		(not
			(can-build lumber-camp))
		=>
		(set-goal g-map-style IMMOBILE)
		(disable-self)
		)

		(defrule
		(goal g-map-style PENDING)
		(game-time < 5)
		(unit-type-count villager == 0)
		(not
			(can-train villager))
		=>
		(set-goal g-map-style IMMOBILE)
		(disable-self)
		)

		;If playing a scenario where troops should stay still, set strategic numbers and run no other code
		(defrule
		(goal g-map-style IMMOBILE)	;this rule has FACTS and ACTIONS to keep VILLAGERS still
		=>
		(set-strategic-number sn-maximum-food-drop-distance 0)
		(set-strategic-number sn-maximum-wood-drop-distance 0)
		(set-strategic-number sn-maximum-gold-drop-distance 0)
		(set-strategic-number sn-maximum-hunt-drop-distance 0)
		(set-strategic-number sn-maximum-stone-drop-distance 0)
		(set-strategic-number sn-food-gatherer-percentage 0)
		(set-strategic-number sn-wood-gatherer-percentage 0)
		(set-strategic-number sn-gold-gatherer-percentage 0)
		(set-strategic-number sn-stone-gatherer-percentage 0)
		(set-strategic-number sn-cap-civilian-explorers 0)
		(set-strategic-number sn-percent-civilian-explorers 0)
		; (up-reset-scouts)
		(up-reset-unit c: any-objects)
		(disable-self)
		)

		(defrule	;this rule has FACTS and ACTIONS to keep TROOPS still
		(goal g-map-style IMMOBILE)
		=>
		(set-strategic-number sn-percent-enemy-sighted-response 100)
		(set-strategic-number sn-hits-before-alliance-change 25)
		(set-strategic-number sn-number-explore-groups 0)
		(set-strategic-number sn-percent-attack-soldiers 0)
		(set-strategic-number sn-task-ungrouped-soldiers 0)
		(set-strategic-number sn-number-attack-groups 0)
		(set-strategic-number sn-enemy-sighted-response-distance 5)
		(set-strategic-number sn-total-number-explorers 0)
		(set-strategic-number sn-relic-return-distance 0)
		(disable-self)
		)

		;Skip to end of AI every cycle
		(defrule
		(goal g-map-style IMMOBILE)
		=>
		(up-jump-rule 10000)
		)

	;------------------------------
	;	Define Strategic Numbers
	;------------------------------

		(defconst sn-attack-coordination 47)
		(defconst sn-special-attack-influence2 110)
		(defconst sn-special-attack-influence3 111)

		;Custom SNs
		(defconst csn-peaceful-town-size 399)
		(defconst csn-countering-preference 400)

		(defconst csn-desired-num-military 401)
		(defconst csn-desired-num-navy 402)
		(defconst csn-min-military-pop 403)
		(defconst csn-required-num-villager 404)
		(defconst csn-desired-num-villager 405)
		(defconst csn-desired-num-trade-cart 406)
		(defconst csn-desired-num-militia 407)
		(defconst csn-desired-num-spearman 408)
		(defconst csn-desired-num-eagle-warrior 409)
		(defconst csn-desired-num-condottiero 410)
		(defconst csn-desired-num-archer 411)
		(defconst csn-desired-num-skirmisher 412)
		(defconst csn-desired-num-cavalry-archer 413)
		(defconst csn-desired-num-hand-cannoneer 414)
		(defconst csn-desired-num-genitour 415)
		(defconst csn-desired-num-elephant-archer 416)
		(defconst csn-desired-num-scout-cavalry 417)
		(defconst csn-desired-num-knight 418)
		(defconst csn-desired-num-camel 419)
		(defconst csn-desired-num-battle-elephant 420)
		(defconst csn-desired-num-steppe-lancer 421)
		(defconst csn-desired-num-unique-unit 422)
		(defconst csn-desired-num-second-unique-unit 423)	;flemish militia, shrivamsha rider, slinger, missionary, flaming camel, petard 
		(defconst csn-desired-num-ram-type 424)
		(defconst csn-desired-num-mangonel 425)
		(defconst csn-desired-num-scorpion 426)
		(defconst csn-desired-num-bombard-cannon 427)
		(defconst csn-desired-num-trebuchet 428)
		(defconst csn-desired-num-siege-tower 429)
		(defconst csn-desired-num-monk 430)
		(defconst csn-desired-num-fishing-ship 431)
		(defconst csn-desired-num-transport-ship 432)
		(defconst csn-desired-num-trade-cog 433)
		(defconst csn-desired-num-galley 434)
		(defconst csn-desired-num-fire-ship 435)
		(defconst csn-desired-num-demolition-ship 436)
		(defconst csn-desired-num-cannon-galleon 437)
		(defconst csn-desired-num-unique-ship 438)
		; (defconst csn- 439)	;reserved for new desired unit count type
		; (defconst csn- 440)	;Ditto

		(defconst csn-desired-num-infantry 441)
		(defconst csn-desired-num-foot-archers 442)
		(defconst csn-desired-num-cavalry-archers 443)
		(defconst csn-desired-num-cavalry 444)
		(defconst csn-desired-num-siege 445)
		(defconst csn-desired-num-hand-cannoneers 446)
		(defconst csn-desired-num-monks 447)
		(defconst csn-desired-num-town-center 448)
		(defconst csn-desired-num-house 449)
		(defconst csn-desired-num-mill 450)
		(defconst csn-desired-num-mining-camp 451)
		(defconst csn-desired-num-gold-camp 452)
		(defconst csn-desired-num-stone-camp 453)
		(defconst csn-desired-num-lumber-camp 454)
		(defconst csn-desired-num-dock 455)
		(defconst csn-desired-num-farm 456)
		(defconst csn-desired-num-blacksmith 457)
		(defconst csn-desired-num-market 458)
		(defconst csn-desired-num-monastery 459)
		(defconst csn-desired-num-university 460)
		(defconst csn-desired-num-wonder 461)
		(defconst csn-desired-num-barracks 462)
		(defconst csn-desired-num-archery-range 463)
		(defconst csn-desired-num-stable 464)
		(defconst csn-desired-num-siege-workshop 465)
		(defconst csn-desired-num-outpost 466)
		(defconst csn-desired-num-tower 467)
		(defconst csn-desired-num-bombard-tower 468)
		(defconst csn-desired-num-castle 469)
		(defconst csn-desired-num-unique-building 470)
		; (defconst csn- 471)
		; (defconst csn- 472)
		; (defconst csn- 473)
		; (defconst csn- 474)
		; (defconst csn- 475)
		; (defconst csn- 476)
		; (defconst csn- 477)

		(defconst csn-primary-unit 478)
		(defconst csn-support-unit 479)
		(defconst csn-previous-support-unit 480)
		(defconst csn-primary-unit-class 481)
		(defconst csn-support-unit-class 482)
		(defconst csn-desired-num-primary-unit 483)
		(defconst csn-desired-num-support-unit 484)
		(defconst csn-constant-train-unit 485)
		(defconst csn-desired-num-constant-train-unit 486)
		(defconst csn-desired-num-constant-train-unit-goal 487)
		(defconst csn-primary-unit-tech-progress 488)
			(defconst REQUIRED-FEUDAL-COMPLETE 21)
			(defconst PRIORITY-FEUDAL-COMPLETE 22)
			(defconst SECONDARY-FEUDAL-COMPLETE 23)
			(defconst ALL-FEUDAL-COMPLETE 24)
			(defconst REQUIRED-CASTLE-COMPLETE 31)
			(defconst PRIORITY-CASTLE-COMPLETE 32)
			(defconst SECONDARY-CASTLE-COMPLETE 33)
			(defconst ALL-CASTLE-COMPLETE 34)
			(defconst REQUIRED-IMPERIAL-COMPLETE 41)
			(defconst PRIORITY-IMPERIAL-COMPLETE 42)
			(defconst SECONDARY-IMPERIAL-COMPLETE 43)
			(defconst ALL-IMPERIAL-COMPLETE 44)
		(defconst csn-support-unit-tech-progress 489)
		(defconst csn-eco-tech-progress 490)
		(defconst csn-current-age-primary-unit-tech-progress 491)
			(defconst INCOMPLETE 0)
			(defconst REQUIRED-COMPLETE 1)
			(defconst PRIORITY-COMPLETE 2)
			(defconst SECONDARY-COMPLETE 3)
			(defconst ALL-COMPLETE 4)
		(defconst csn-current-age-support-unit-tech-progress 492)
		(defconst csn-current-age-eco-tech-progress 493)
		(defconst csn-militia-tech-progress 494)
		(defconst csn-spearman-tech-progress 495)
		(defconst csn-eagle-warrior-tech-progress 496)
		(defconst csn-condottiero-tech-progress 497)
		(defconst csn-archer-tech-progress 498)
		(defconst csn-skirmisher-tech-progress 499)
		(defconst csn-cavalry-archer-tech-progress 500)
		(defconst csn-hand-cannoneer-tech-progress 501)
		(defconst csn-elephant-archer-tech-progress 502)
		(defconst csn-genitour-tech-progress 503)
		(defconst csn-scout-cavalry-tech-progress 504)
		(defconst csn-knight-tech-progress 505)
		(defconst csn-camel-tech-progress 506)
		(defconst csn-battle-elephant-tech-progress 507)
		(defconst csn-steppe-lancer-tech-progress 508)
		(defconst csn-unique-unit-tech-progress 509)
		(defconst csn-second-unique-unit-tech-progress 510)
		; (defconst csn- 511)

	;-------------------
	;	Define Timers
	;-------------------

		(defconst t-5-sec 1)
		(defconst t-10-sec 2)
		(defconst t-15-sec 3)
		(defconst t-30-sec 4)
		(defconst t-60-sec 5)
		(defconst t-120-sec 6)
		(defconst t-town-under-attack 7)
		(defconst t-scout-distance-increase 8)
		; (defconst t-change-scouting-direction 9)
		(defconst t-villager-explore-timer 10)
		(defconst t-deer-luring 11)
		(defconst t-boar-hunt 12)
		(defconst t-lumber-camp-increase 13)
		(defconst t-resign 14)
		(defconst t-projectile-retreat 15)
			(defconst PROJECTILE-RETREAT-TIME 5)
		(defconst t-first-attack 16)
		; (defconst t-attack-size-increase 17)
			(defconst INCREASE-TIME 90)
		;(defconst t-adjust-gathering 12)
		;	(defconst ADJUST-GATHERING-TIMER-LENGTH 15)
		;(defconst t-res-gather-amount 17)
		;	(defconst T-GATHER-AMOUNT-LENGTH 120)
		(defconst t-build-line-lumber-camp 18)
		(defconst t-spread-soldiers 19)
		(defconst t-attack-patrol 20)
		(defconst t-enemy-in-town 21)
		(defconst t-tribute 22)
		(defconst t-strategy-switch 23)
		(defconst t-villager-training-delay 24)
		(defconst t-dead-builders 25)
		;(defconst t- 26)
		;(defconst t- 27)
		;(defconst t- 28)
		;(defconst t- 29)
		;(defconst t- 30)
		;(defconst t- 31)
		;(defconst t- 32)
		;(defconst t- 33)
		;(defconst t- 34)
		;(defconst t- 35)
		;(defconst t- 36)
		;(defconst t- 37)
		;(defconst t- 38)
		;(defconst t- 39)
		;(defconst t- 40)
		;(defconst t- 41)
		;(defconst t- 42)
		;(defconst t- 43)
		;(defconst t- 44)
		;(defconst t- 45)
		;(defconst t- 46)
		;(defconst t- 47)
		;(defconst t- 48)
		;(defconst t- 49)
		;(defconst t- 50)



;=========================<>=========================
;				    INITIALIZATION
;=========================<>=========================

	;-------------------------------------
	;	Loop Rules - do every rule pass
	;-------------------------------------

        (load "The General 1.2/Functions/Reset")

		(defrule
		(true)
		=>
		(set-goal g-place-point-x PENDING)
		(set-goal g-place-point-y PENDING)
		(up-modify-flag g-flag c:- TRADED)
		)

		(defrule
		(building-type-count-total town-center > 0)
		=>
		(up-full-reset-search)
		(up-find-local c: town-center c: 5)
		(up-filter-status c: status-pending c: list-active)
		(up-find-status-local c: town-center-foundation c: 5)
		(up-clean-search search-local -1 search-order-asc)
		(up-clean-search search-local object-data-id search-order-asc)
		)

		(defrule
		(building-type-count-total town-center > 0)
		(up-set-target-object search-local c: 0)
		=>
		(up-get-point position-object g-position-self-x)
		)

        (load "The General 1.2/Functions/Reset")

        (defrule
        (up-compare-goal g-position-self-x < 0)
        =>
        (up-full-reset-search)
        (up-find-local c: villager-class c: 20)
        (up-get-search-state g-local-total)
        (set-goal g-loop-counter 0)
        (up-get-point position-zero g-point-x)
        (up-get-point position-zero g-point2-x)
        ; (chat-to-all "calculate new position self")
        )

            (defrule
            (up-compare-goal g-position-self-x < 0)
            (up-compare-goal g-local-total > 0)
            (up-compare-goal g-loop-counter < 20)
            (up-set-target-object search-local g: g-loop-counter)
            =>
            (up-get-point position-object g-point2-x)
            ; (up-chat-data-to-all "Loop %d" g: g-loop-counter)
            ; (up-chat-data-to-all "X %d" g: g-point2-x)
            ; (up-chat-data-to-all "Y %d" g: g-point2-y)
            (up-add-point g-point-x g-point2-x c: 1)
            (up-modify-goal g-loop-counter c:+ 1)
            (up-jump-rule -1)
            )

        (defrule
        (up-compare-goal g-position-self-x < 0)
        (up-compare-goal g-local-total > 0)
        (up-compare-goal g-point-x > 0)
        =>
        (up-modify-goal g-point-x g:/ g-local-total)
        (up-modify-goal g-point-y g:/ g-local-total)
		(up-modify-goal g-point-x c:max THIRTY-PERCENT-MAP-SIZE)
		(up-modify-goal g-point-y c:max THIRTY-PERCENT-MAP-SIZE)
		(up-modify-goal g-point-x c:min SEVENTY-PERCENT-MAP-SIZE)
		(up-modify-goal g-point-y c:min SEVENTY-PERCENT-MAP-SIZE)
        (up-copy-point g-position-self-x g-point-x)
        ; (up-chat-data-to-all "X %d" g: g-position-self-x)
        ; (up-chat-data-to-all "Y %d" g: g-position-self-y)
        ; (up-send-flare g-position-self-x)
        )

		;Set Target Player
		(load "The General 1.2/Functions/Reset Mini")

		;If helping ally, set target player to -1 to encourage helping allies (does this work?)
		(defrule
		(goal g-attack-objective HELP-ALLY-DEFEND)
		(up-compare-sn sn-target-player-number != -1)
		=>
		(up-modify-sn sn-target-player-number c:= -1)
		)

		;If no enemy building found, set target player randomly
		(defrule
		(or
			(players-building-count every-enemy <= 0)
			(up-compare-goal g-closest-enemy <= 0))
		(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
		(or
			(up-compare-goal g-game-focus != DEFENSIVE)
			(goal g-enemy-units-in-town 0))
		(up-compare-sn sn-target-player-number <= 0)
		=>
		(up-find-player enemy find-random g-temp)
		(up-modify-sn sn-target-player-number g:= g-temp)
		)

		;If enemy building found, set target to be closest enemy
		(defrule
		(players-building-count any-enemy > 0)
		(up-compare-goal g-closest-enemy > 0)
		(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
		(or
			(up-compare-goal g-game-focus != DEFENSIVE)
			(goal g-enemy-units-in-town 0))
		(up-compare-sn sn-target-player-number g:!= g-closest-enemy)
		=>
		(up-modify-sn sn-target-player-number g:= g-closest-enemy)
		)

		(load "The General 1.2/Functions/Reset Mini")

		;If under attack, set target player as the player attacking us instead
		(defrule
		(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
		(up-compare-goal g-game-focus == DEFENSIVE)
		(up-compare-goal g-enemy-units-in-town > 0)
		=>
		(set-strategic-number sn-focus-player-number 1)
		(set-goal g-temp2 PENDING)	;Player with most soldiers
		(set-goal g-temp3 0)		;Highest player soldier count in our town
		)

			(defrule
			(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
			(up-compare-goal g-game-focus == DEFENSIVE)
			(up-compare-goal g-enemy-units-in-town > 0)
			(nand
				(player-in-game focus-player)
				(stance-toward focus-player enemy))
			(up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
			=>
			(up-modify-sn sn-focus-player-number c:+ 1)
			(up-jump-rule -1)
			)

			(defrule
			(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
			(up-compare-goal g-game-focus == DEFENSIVE)
			(up-compare-goal g-enemy-units-in-town > 0)
			(up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
			=>
			(up-modify-goal g-temp s:= csn-peaceful-town-size)
			(up-modify-goal g-temp c:* 2)	;increase distance to search for enemy buildings by 200% because csn-peaceful-town-size...
			(up-modify-goal g-temp c:min 30)	;...is measured as a square around the TC, not a circle
			(up-full-reset-search)				
			(up-set-target-point g-position-self-x)	
			(up-filter-distance c: -1 g: g-temp)	;search for buildings within csn-peaceful-town-size
			(up-filter-include cmdid-military -1 -1 -1)
			(up-find-remote c: any-objects c: 40)
			(up-get-search-state g-local-total)
			)

			(defrule
			(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
			(up-compare-goal g-game-focus == DEFENSIVE)
			(up-compare-goal g-enemy-units-in-town > 0)
			(up-compare-sn sn-focus-player-number <= MAX-PLAYERS)
			(up-compare-goal g-remote-total g:> g-temp3)
			=>
			(up-modify-goal g-temp2 s:= sn-focus-player-number)
			(up-modify-goal g-temp3 g:= g-remote-total)
			)

			(defrule
			(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
			(up-compare-goal g-game-focus == DEFENSIVE)
			(up-compare-goal g-enemy-units-in-town > 0)
			(up-compare-sn sn-focus-player-number < MAX-PLAYERS)
			=>
			(up-modify-sn sn-focus-player-number c:+ 1)
			(up-jump-rule -4)
			)

		(defrule
		(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
		(up-compare-goal g-game-focus == DEFENSIVE)
		(up-compare-goal g-enemy-units-in-town > 0)
		(up-compare-goal g-temp2 > 0)
		(up-compare-sn sn-target-player-number g:!= g-temp2)
		=>
		(up-modify-sn sn-target-player-number g:= g-temp2)
		(up-chat-data-to-player my-player-number "p%d is attacking us, switch target" s: sn-target-player-number)
		)

		;If defensive, but didn't find any enemy units in the town, fall back to other options above
		(defrule
		(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
		(up-compare-goal g-game-focus == DEFENSIVE)
		(up-compare-goal g-enemy-units-in-town > 0)
		(up-compare-goal g-temp2 <= 0)
		(or
			(players-building-count every-enemy <= 0)
			(up-compare-goal g-closest-enemy <= 0))
		=>
		(up-find-player enemy find-random g-temp)
		(up-modify-sn sn-target-player-number g:= g-temp)
		)

		(defrule
		(up-compare-goal g-attack-objective != HELP-ALLY-DEFEND)
		(up-compare-goal g-game-focus == DEFENSIVE)
		(up-compare-goal g-enemy-units-in-town > 0)
		(up-compare-goal g-temp2 <= 0)
		(players-building-count any-enemy > 0)
		(up-compare-goal g-closest-enemy > 0)
		=>
		(up-modify-sn sn-target-player-number g:= g-closest-enemy)
		)

		;Set Target Player Position
		(defrule
		(or
			(up-compare-goal g-closest-enemy <= 0)
			(players-building-count target-player == 0))
		=>
		(up-get-point position-flank g-target-enemy-x)
		)

		(load "The General 1.2/Functions/Reset Mini")

		(defrule
		(up-compare-goal g-closest-enemy > 0)
		(players-building-count target-player > 0)
		=>
		(up-full-reset-search)
		(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
		(up-find-remote c: town-center c: 5)
		(up-clean-search search-remote object-data-id search-order-asc)
		)

		(defrule
		(up-compare-goal g-closest-enemy > 0)
		(players-building-count target-player > 0)
		(up-set-target-object search-remote c: 0)
		=>
		(up-get-point position-object g-target-enemy-x)
		)

		(defrule
		(up-compare-goal g-closest-enemy > 0)
		(players-building-count target-player > 0)
		(not
			(up-set-target-object search-remote c: 0))
		=>
		(up-get-point position-target g-target-enemy-x)
		)

		;Check for dead builders

		(load "The General 1.2/Functions/Reset Mini")

		(defrule
		(true)
		=>
		(up-full-reset-search)
		(up-filter-status c: status-down c: list-active)	;find only dying builders
		(up-find-status-local c: female-builder c: 1)
		(up-find-status-local c: male-builder c: 1)
		(up-get-search-state g-local-total)
		)

		(defrule
		(up-compare-goal g-local-total > 0)
		=>
		(enable-timer t-dead-builders 30)
		)

	;----------------------
	;	Initialize Goals
	;----------------------

		(defrule
		(true)
		=>
		(set-goal g-town-under-attack NO)
		(set-goal g-attacking NO)
		(set-goal g-identity THE-GENERAL)
		(set-goal g-michi-cut-priority NO)
		(set-goal g-game-focus RESET)
		(set-goal g-attack-status BEFORE-DARK-ATTACKS)
		(set-goal g-enemy-buildings-in-town 0)
		(set-goal g-enemy-units-in-town 0)
		(set-goal g-target-military-parity 0)
		(set-goal g-target-pop-parity 0)
		(disable-self)
		)

		(defrule
		(true)
		=>
		(set-goal g-target-age-parity WE-ARE-EQUAL)
		(set-goal g-total-sheep-found 0)
		(set-goal g-current-sheep-count 0)
		(set-goal g-total-boar-found 0)
		(set-goal g-current-boar-count 0)
		(set-goal g-total-deer-found 0)
		(set-goal g-current-deer-count 0)
		(set-goal g-escrow with-escrow)
		(disable-self)
		)

		(defrule
		(true)
		=>
		(set-goal g-desired-num-food-vils 0)
		(set-goal g-desired-num-wood-vils 0)
		(set-goal g-desired-num-stone-vils 0)
		(set-goal g-desired-num-gold-vils 0)
		(set-goal g-resign NO)
		(set-goal g-eco-tech-progress 0)
		(set-goal g-percent-dynamic-gathering 0)
		(set-goal g-gather-inside NO)
		(set-goal g-primary-unit-tech-progress 0)
		(set-goal g-support-unit-tech-progress 0)
		(set-goal g-primary-unit-class 0)
		(set-goal g-support-unit-class 0)
		(set-goal g-primary-unit 0)
		(set-goal g-support-unit 0)
		(disable-self)
		)

		(defrule
		(true)
		=>
		(up-reset-cost-data g-total-techs-food-needed)
		(up-reset-cost-data g-total-buildings-food-needed)
		(up-reset-cost-data g-total-units-food-needed)
		(up-reset-cost-data g-recent-food-gathered)
		(up-reset-cost-data g-total-food-gathered)
		(up-reset-cost-data g-total-food-bought)
		(set-goal g-attack-coordination OFF)
		(set-goal g-constant-train-unit 0)
		(set-goal g-id-loop-max-objects HUNDRED-PERCENT-MAP-SIZE)
		(up-modify-goal g-id-loop-max-objects c:* HUNDRED-PERCENT-MAP-SIZE)
		(up-modify-goal g-id-loop-max-objects c:+ 200)
		(set-goal g-required-attack-num 6)
		(set-goal g-stop-attack-num 4)
		(up-copy-point g-gather-point-x g-position-self-x)
		(disable-self)
		)

		(defrule
		(true)
		=>
		(set-goal g-barracks-next-unit 0)
		(set-goal g-archery-range-next-unit 0)
		(set-goal g-stable-next-unit 0)
		(set-goal g-siege-workshop-next-unit 0)
		(set-goal g-dock-next-unit 0)
		(set-goal g-current-gold-camp-total 0)
		(set-goal g-current-stone-camp-total 0)
		(set-goal g-usable-farm-count 0)
		(set-goal g-usable-farm-count-total 0)
		(disable-self)
		)

		(defrule
		(true)
		=>
		(set-goal g-flag 0)
		(up-modify-flag g-flag c:+ ALLOW-QUEUED-VILLAGERS)
		(set-goal g-group1-flag 0)
		(set-goal g-group2-flag 0)
		(set-goal g-group3-flag 0)
		(set-goal g-group4-flag 0)
		(set-goal g-group5-flag 0)
		(set-goal g-group6-flag 0)
		(set-goal g-group1-type-flag 0)
		(set-goal g-group2-type-flag 0)
		(set-goal g-group3-type-flag 0)
		(set-goal g-group4-type-flag 0)
		(set-goal g-group5-type-flag 0)
		(set-goal g-group6-type-flag 0)
		(disable-self)
		)

		(defrule
		(true)
		=>
		(set-goal g-group1-action PENDING)
		(set-goal g-group2-action PENDING)
		(set-goal g-group3-action PENDING)
		(set-goal g-group4-action PENDING)
		(set-goal g-group5-action PENDING)
		(set-goal g-group6-action PENDING)
		(set-goal g-group1-target-object-id PENDING)
		(set-goal g-group2-target-object-id PENDING)
		(set-goal g-group3-target-object-id PENDING)
		(set-goal g-group4-target-object-id PENDING)
		(set-goal g-group5-target-object-id PENDING)
		(set-goal g-group6-target-object-id PENDING)
		(disable-self)
		)

		(defrule
		(true)
		=>
		(set-goal g-group1-destination-time 0)
		(set-goal g-group2-destination-time 0)
		(set-goal g-group3-destination-time 0)
		(set-goal g-group4-destination-time 0)
		(set-goal g-group5-destination-time 0)
		(set-goal g-group6-destination-time 0)
		(set-goal g-group1-avoidance-counter 0)
		(set-goal g-group2-avoidance-counter 0)
		(set-goal g-group3-avoidance-counter 0)
		(set-goal g-group4-avoidance-counter 0)
		(set-goal g-group5-avoidance-counter 0)
		(set-goal g-group6-avoidance-counter 0)
		(disable-self)
		)

	;--------------------
	;	Initialize SNs
	;--------------------

		;Custom SNs
		(defrule
		(true)
		=>
		(set-strategic-number csn-countering-preference 50)
		(disable-self)
		)

		
		;Exploration SNs												;Default SN Value
		(defrule
		(true)
		=>
		(set-strategic-number sn-percent-civilian-explorers 0)			;34
		(set-strategic-number sn-cap-civilian-explorers 0)				;2
		(set-strategic-number sn-minimum-civilian-explorers 0)			;0
		(set-strategic-number sn-percent-exploration-required 0)		;100
		(set-strategic-number sn-number-explore-groups 0)				;0
		(set-strategic-number sn-total-number-explorers 1)				;4
		(set-strategic-number sn-blot-size 10)							;15
		(set-strategic-number sn-percent-half-exploration 100)			;30
		;(set-strategic-number sn-home-exploration-time 300)			;300
		(disable-self)
		)
		;Unchanged Exploration SNs:
		;sn-blot-exploration-map
		;sn-number-enemy-objects-required 		default=10



		;Building Construction SNs
		(defrule
		(true)
		=>
		(set-strategic-number sn-percent-civilian-builders 100)			;0
		(set-strategic-number sn-cap-civilian-builders 200)				;2
		(set-strategic-number sn-camp-max-distance 0)					;25
		(set-strategic-number sn-mill-max-distance 20)					;100
		(set-strategic-number sn-required-forest-tiles 20)				;10
		(set-strategic-number sn-initial-exploration-required 0)		;2
		(set-strategic-number sn-random-placement-factor 0)			;50
		(set-strategic-number sn-enable-new-building-system 1)			;0
		(set-strategic-number sn-percent-building-cancellation 30)		;100
		(set-strategic-number sn-object-repair-level 20547)				;1		;20547 = wonders, castles, monasteries, town centers, docks, towers, siege
		(set-strategic-number sn-dropsite-separation-distance 6)		;10
		(set-strategic-number sn-mining-camp-max-distance 20)			;0
		(set-strategic-number sn-allow-adjacent-dropsites 1)			;0
		(set-strategic-number sn-ignore-tower-elevation 1) 				;0
		(disable-self)
		)
		(defrule
		(true)
		=>
		(set-strategic-number sn-disable-builder-assistance 1)			;0
		(disable-self)
		)
		;Unchanged Building Construction SNs:
		;sn-number-forward-builders
		;sn-preferred-mill-placement
		;sn-lumber-camp-max-distance 			0
		;sn-town-center-placement 				0
		;sn-disable-tower-priority 				0
		;sn-placement-to-center 				0
		;sn-placement-zone-size 				20
		;sn-placement-fail-delta 				0
		;sn-unexplored-construction 			0



		;Gathering SNs
		(defrule
		(true)
		=>
		(set-strategic-number sn-percent-civilian-gatherers 100)		;66
		(set-strategic-number sn-maximum-wood-drop-distance 30)			;-1	
		(set-strategic-number sn-maximum-food-drop-distance 8)			;-1	
		(set-strategic-number sn-maximum-fish-boat-drop-distance 30)	;-1
		(set-strategic-number sn-maximum-gold-drop-distance 20)			;-1			
		(set-strategic-number sn-maximum-stone-drop-distance 20)		;-1
		(set-strategic-number sn-retask-gather-amount 0)				;20
		(set-strategic-number sn-max-retask-gather-amount 30000)		;40
		(set-strategic-number sn-food-dropsite-distance 6)				;3
		(set-strategic-number sn-wood-dropsite-distance 8)				;3
		(set-strategic-number sn-preferred-trade-distance 200)			;100
		(set-strategic-number sn-livestock-to-town-center 1)			;0
		(set-strategic-number sn-stone-dropsite-distance 200)			;3
		(disable-self)
		)
		;Unchanged Gathering SNs:
		;sn-cap-civilian-gatherers
		;sn-food-gatherer-percentage
		;sn-gold-gatherer-percentage
		;sn-stone-gatherer-percentage
		;sn-wood-gatherer-percentage
		;sn-gold-dropsite-distance
		;sn-defer-dropsite-update 				0

		;Hunting SNs
		(defrule
		(true)
		=>
		(set-strategic-number sn-maximum-hunt-drop-distance 4)			;-1
		(set-strategic-number sn-enable-boar-hunting 2)					;1
		(set-strategic-number sn-minimum-boar-hunt-group-size 0)		;5
		(set-strategic-number sn-minimum-boar-lure-group-size 1000)		;0
		(set-strategic-number sn-boar-lure-destination 0)				;0
		(disable-self)
		)
		;Unchanged Hunting SNs:
		;sn-minimum-number-hunters				0


		;Attack SNs
		(defrule
		(true)
		=>
		(set-strategic-number sn-percent-attack-soldiers 0)				;75
		(set-strategic-number sn-scale-minimum-attack-group-size 0)		;1
		(set-strategic-number sn-garrison-rams 0)						;1
		(disable-self)
		)
		;Unchanged Attack SNs:
		;sn-number-attack-groups
		;sn-minimum-attack-group-size
		;sn-maximum-attack-group-size
		;sn-attack-group-gather-spacing
		;sn-group-form-distance
		;sn-scale-maximum-attack-group-size
		;sn-attack-group-size-randomness
		;sn-scaling-frequency
		;sn-initial-attack-delay
		;sn-initial-attack-delay-type



		;Defense SNs
		(defrule
		(true)
		=>
		(set-strategic-number sn-maximum-town-size 10)					;20
		(set-strategic-number sn-percent-enemy-sighted-response 100)	;50
		(set-strategic-number sn-enemy-sighted-response-distance 5)	;25
		(set-strategic-number sn-safe-town-size 10)						;255
		(set-strategic-number csn-peaceful-town-size 10)
		(set-strategic-number sn-number-civilian-militia 4)				;10
		(set-strategic-number sn-disable-sighted-response-cap 1)		;0
		(set-strategic-number sn-minimum-town-size 0)					;12
		(set-strategic-number sn-sentry-distance 0)						;12
		(set-strategic-number sn-sentry-distance-variation 0)			;2
		(disable-self)
		)
		;Unchanged Defense SNs:
		;sn-ignore-attack-group-under-attack
		;sn-maximum-gaia-attack-response
		;sn-allow-civilian-defense
		;sn-gather-defense-units
		;sn-allow-civilian-offense 				0
		;sn-disable-defend-groups 				0
		;sn-disable-villager-garrison 			0
		;sn-disable-trade-evasion				0



		;Navy SNs
		(defrule
		(true)
		=>
		(set-strategic-number sn-percent-attack-boats 0)				;75
		(set-strategic-number sn-minimum-water-body-size-for-dock 200)	;300
		(set-strategic-number sn-dock-placement-mode -1)				;0
		(set-strategic-number sn-dock-proximity-factor 1000)			;10000
		(set-strategic-number sn-dock-training-filter 1)					;0
		(set-strategic-number sn-warship-targeting-mode 1)				;0
		(disable-self)
		)
		;Unchanged Navy SNs:
		;sn-number-boat-attack-groups
		;sn-minimum-boat-attack-group-size
		;sn-maximum-boat-attack-group-size
		;sn-dock-avoidance-factor				1000



		;Attack Coordination SNs
		(defrule
		(true)
		=>
		(set-strategic-number sn-attack-intelligence 1)					;0
		(set-strategic-number sn-task-ungrouped-soldiers 0)				;1
		(set-strategic-number sn-attack-winning-player 0)				;1
		(set-strategic-number sn-attack-coordination 2)					;-1
		(set-strategic-number sn-enable-patrol-attack 1)				;0
		(up-find-player enemy find-random g-temp)
		(up-modify-sn sn-target-player-number g:= g-temp)				;0
		(set-strategic-number sn-enable-offensive-priority 1)			;0
		(set-strategic-number sn-disable-attack-groups 1)				;0
		(set-strategic-number sn-local-targeting-mode 1)				;0
		(disable-self)
		)
		;Unchanged Attack Coordination SNs:
		;sn-group-commander-selection-method
		;sn-group-leader-defense-distance
		;sn-special-attack-type1
		;sn-special-attack-type2
		;sn-special-attack-type3
		;sn-special-attack-influence1
		;sn-special-attack-influence2
		;sn-special-attack-influence3
		;sn-gather-idle-soldiers-at-center
		;sn-focus-player-number
		;sn-building-targeting-mode
		;sn-wall-targeting-mode 				0
		;sn-free-siege-targeting 				0
		;sn-number-tasked-units 				0
		;sn-attack-winning-player-factor 		default=25



		;Other SNs
		(defrule
		(true)
		=>
		(set-strategic-number sn-zero-priority-distance 12)				;50
		(set-strategic-number sn-consecutive-idle-unit-limit 1)			;15
		(set-strategic-number sn-sentry-distance 0)						;12
		(set-strategic-number sn-sentry-distance-variation 0)			;2
		(set-strategic-number sn-number-garrison-units 40)				;0
		(set-strategic-number sn-livestock-defend-priority 1)			;0
		(set-strategic-number sn-do-not-scale-for-difficulty-level 1)	;0
		(set-strategic-number sn-enable-research-queue 1)
		(set-difficulty-parameter ability-to-maintain-distance 100)
		(set-difficulty-parameter ability-to-dodge-missiles 0)
		(disable-self)
		)
		;Unchanged Other SNs:
		;sn-coop-share-information				1
		;sn-enable-training-queue 				0
		;sn-maximum-garrison-fill 				0
		;sn-filter-under-attack					0
		;sn-target-point-adjustment 			0

	;----------------------
	;	Initialize Escrow
	;----------------------

		(defrule
		(true)
		=>
		(set-escrow-percentage wood 0)
		(set-escrow-percentage gold 0)
		(set-escrow-percentage food 0)
		(set-escrow-percentage stone 0)
		(disable-self)
		)