;Building Construction.per

(load "The General 3.1/Functions/Reset")

;=========================<>=========================
;				      BUILD LINE
;=========================<>=========================

	;-----------
	;	Setup
	;-----------

		(defrule
		(true)
		=>
		(set-goal g-place-point-used NO)
		(set-goal g-place-control-used NO)
		(set-goal g-build-line-bldg 0)
		(set-goal g-build-line-bldg-foundation 0)
		(set-goal g-build-line-type PENDING)
		)
	
	;--------------------
	;	Initial Houses
	;--------------------

		#load-if-not-defined HUN-CIV
		#load-if-not-defined CHINESE-CIV

			(load "The General 3.1/Functions/Reset")

			(defrule
			(can-build house)
			(building-type-count town-center > 0)
			(unit-type-count villager >= 2)
			(building-type-count-total house < 2)
			=>
			(up-copy-point g-point-x g-position-self-x)
			(up-modify-goal g-point-x c:- 6)
			(up-modify-goal g-point-y c:- 6)
			(up-copy-point g-point2-x g-point-x)
			(set-goal g-temp 8943)
			(up-get-fact building-type-count-total house g-temp-2)
			(set-goal i 1)
			)

				;Check if house can be built at this spot and that no villagers are at this spot
				(defrule
				(goal g-temp 8943)
				(up-compare-goal g-temp-2 < 2)	;we have < 2 houses
				(up-can-build-line 0 g-point-x c: house)
				(not
					(up-point-contains g-point2-x c: villager-class))
				(up-modify-goal g-point2-x c:- 1)
				(not
					(up-point-contains g-point2-x c: villager-class))
				(up-modify-goal g-point2-y c:- 1)
				(not
					(up-point-contains g-point2-x c: villager-class))
				(up-modify-goal g-point2-x c:+ 1)
				(not
					(up-point-contains g-point2-x c: villager-class))
				=>
				(set-goal g-temp 8944)
				(up-jump-rule 2)
				)

				(defrule
				(goal g-temp 8943)			;can't build house at current spot, try another location
				(up-compare-goal g-temp-2 < 2)	;we have < 2 houses
				(up-modify-goal j g:= i)
				(up-modify-goal j c:mod 2)
				(goal j 0)					;goal i is even
				(up-compare-goal i < 25)
				=>
				(up-copy-point g-point-x g-position-self-x)
				(up-modify-goal g-point-x c:- 6)
				(up-modify-goal g-point-y c:- 6)
				(up-modify-goal g-temp-3 g:= i)
				(up-modify-goal g-temp-3 c:/ 2)
				(up-modify-goal g-point-y g:+ g-temp-3)	;move next point SE one tile each iteration
				(up-copy-point g-point2-x g-point-x)
				(up-modify-goal i c:+ 1)
				(up-jump-rule -2)
				)

				(defrule
				(goal g-temp 8943)			;can't build house at current spot, try another location
				(up-compare-goal g-temp-2 < 2)	;we have < 2 houses
				(up-modify-goal j g:= i)
				(up-modify-goal j c:mod 2)
				(goal j 1)					;goal i is odd
				(up-compare-goal i < 25)
				=>
				(up-copy-point g-point-x g-position-self-x)
				(up-modify-goal g-point-x c:- 6)
				(up-modify-goal g-point-y c:- 6)
				(up-modify-goal g-temp-3 g:= i)
				(up-modify-goal g-temp-3 c:+ 1)
				(up-modify-goal g-temp-3 c:/ 2)
				(up-modify-goal g-point-x g:+ g-temp-3)	;move next point NE one tile each iteration
				(up-copy-point g-point2-x g-point-x)
				(up-modify-goal i c:+ 1)
				(up-jump-rule -3)
				)

				(defrule
				(goal g-temp 8944)
				=>
				(up-set-target-point g-point-x)
				(up-full-reset-search)
				(up-filter-distance c: -1 c: 2)
				(up-find-local c: villager-class c: 1)
				(up-get-search-state g-local-total)
				)

				(defrule
				(goal g-temp 8944)
				(up-compare-goal g-local-total == 0)
				=>
				(set-goal g-temp 8943)
				(up-jump-rule -4)
				)

				(defrule
				(goal g-temp 8944)
				(up-compare-goal g-local-total > 0)
				=>
				(set-goal g-temp 8945)
				)
					
				(defrule
				(goal g-temp 8945)
				(can-build house)
				; (up-pending-objects c: house < 2)
				(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
				(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
				(up-modify-goal g-food-cost g:- g-wood-cost)
				(up-compare-goal g-food-cost < 2)
				(up-compare-goal g-temp-2 < 2)
				=>
				(up-build-line g-point-x g-point-x c: house)
				(set-goal g-temp 8943)
				(up-modify-goal g-temp-2 c:+ 1)
				(up-modify-goal i c:+ 5)
				(up-jump-rule -6)
				)				

			;Just in case two houses haven't been placed yet, start from right side of TC instead
			(defrule
			(can-build house)
			(building-type-count town-center > 0)
			(unit-type-count villager >= 2)
			(building-type-count-total house < 2)
			=>
			(up-copy-point g-point-x g-position-self-x)
			(up-modify-goal g-point-x c:+ 6)
			(up-modify-goal g-point-y c:+ 6)
			(up-copy-point g-point2-x g-point-x)
			(set-goal g-temp 8946)
			(set-goal i 1)
			)

				;Check if house can be built at this spot and that no villagers are at this spot
				(defrule
				(goal g-temp 8946)
				(up-compare-goal g-temp-2 < 2)	;we have < 2 houses
				(up-can-build-line 0 g-point-x c: house)
				(not
					(up-point-contains g-point2-x c: villager-class))
				(up-modify-goal g-point2-x c:- 1)
				(not
					(up-point-contains g-point2-x c: villager-class))
				(up-modify-goal g-point2-y c:- 1)
				(not
					(up-point-contains g-point2-x c: villager-class))
				(up-modify-goal g-point2-x c:+ 1)
				(not
					(up-point-contains g-point2-x c: villager-class))
				=>
				(set-goal g-temp 8947)
				(up-jump-rule 2)
				)

				(defrule
				(goal g-temp 8946)			;can't build house at current spot, try another location
				(up-compare-goal g-temp-2 < 2)	;we have < 2 houses
				(up-modify-goal j g:= i)
				(up-modify-goal j c:mod 2)
				(goal j 0)					;goal i is even
				(up-compare-goal i < 25)
				=>
				(up-copy-point g-point-x g-position-self-x)
				(up-modify-goal g-point-x c:+ 6)
				(up-modify-goal g-point-y c:+ 6)
				(up-modify-goal g-temp-3 g:= i)
				(up-modify-goal g-temp-3 c:/ -2)
				(up-modify-goal g-point-y g:+ g-temp-3)	;move next point NW one tile each iteration
				(up-copy-point g-point2-x g-point-x)
				(up-modify-goal i c:+ 1)
				(up-jump-rule -2)
				)

				(defrule
				(goal g-temp 8946)			;can't build house at current spot, try another location
				(up-compare-goal g-temp-2 < 2)	;we have < 2 houses
				(up-modify-goal j g:= i)
				(up-modify-goal j c:mod 2)
				(goal j 1)					;goal i is odd
				(up-compare-goal i < 25)
				=>
				(up-copy-point g-point-x g-position-self-x)
				(up-modify-goal g-point-x c:+ 6)
				(up-modify-goal g-point-y c:+ 6)
				(up-modify-goal g-temp-3 g:= i)
				(up-modify-goal g-temp-3 c:+ 1)
				(up-modify-goal g-temp-3 c:/ -2)
				(up-modify-goal g-point-x g:+ g-temp-3)	;move next point SE one tile each iteration
				(up-copy-point g-point2-x g-point-x)
				(up-modify-goal i c:+ 1)
				(up-jump-rule -3)
				)

				(defrule
				(goal g-temp 8947)
				=>
				(up-set-target-point g-point-x)
				(up-full-reset-search)
				(up-filter-distance c: -1 c: 3)
				(up-find-local c: villager-class c: 1)
				(up-get-search-state g-local-total)
				)

				(defrule
				(goal g-temp 8947)
				(up-compare-goal g-local-total == 0)
				=>
				(set-goal g-temp 8946)
				(up-jump-rule -4)
				)

				(defrule
				(goal g-temp 8947)
				(up-compare-goal g-local-total != 0)
				=>
				(set-goal g-temp 8948)
				)
					
				(defrule
				(goal g-temp 8948)
				(can-build house)
				; (up-pending-objects c: house < 2)
				(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
				(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
				(up-modify-goal g-food-cost g:- g-wood-cost)
				(up-compare-goal g-food-cost < 2)
				(up-compare-goal g-temp-2 < 2)
				=>
				(up-build-line g-point-x g-point-x c: house)
				(set-goal g-temp 8946)
				(up-modify-goal g-temp-2 c:+ 1)
				(up-modify-goal i c:+ 5)
				(up-jump-rule -6)
				)

			#load-if-not-defined INCAN-CIV

				(load "The General 3.1/Functions/Reset")

				(defrule
				(building-type-count house < 2)
				; (up-pending-objects c: house < 2)
				(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
				(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
				(up-modify-goal g-food-cost g:- g-wood-cost)
				(up-compare-goal g-food-cost < 2)
				=>
				(up-assign-builders c: house c: 1)
				)

				(defrule
				(building-type-count house < 2)
				(building-type-count-total house >= 2)
				(game-time > 2)
				(game-time <= 10)
				=>
				(up-assign-builders c: house c: 3)
				)

				(defrule
				(building-type-count house < 2)
				(building-type-count-total house >= 2)
				(game-time > 10)
				=>
				(up-assign-builders c: house c: 1)
				)

			#end-if

			(load "The General 3.1/Functions/Reset")

			;Assign starting villagers to houses
			(defrule
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 0)
			; (up-pending-objects c: house > 0)
			(unit-type-count villager >= 3)
			(game-time < 2)
			=>
			(set-goal i 0)
			(up-full-reset-search)
			(up-find-local c: villager-class c: 3)
			(up-set-target-object search-local c: 0)
			(up-get-object-data object-data-id g-temp)
			(up-set-target-object search-local c: 1)
			(up-get-object-data object-data-id g-temp-2)
			(up-set-target-object search-local c: 2)
			(up-get-object-data object-data-id g-temp-3)
			)

			(defrule
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 0)
			; (up-pending-objects c: house > 0)
			(unit-type-count villager >= 3)
			(up-set-target-by-id g: g-temp)
			(game-time < 2)
			=>
			(up-get-point position-object g-point-x)
			(up-set-target-point g-point-x)
			(up-full-reset-search)
			(up-filter-status c: status-pending c: list-active)
			(set-strategic-number sn-focus-player-number my-player-number)
			(up-find-status-remote c: house c: 2)
			(up-clean-search search-remote object-data-distance search-order-asc)
			)

			(defrule
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 0)
			; (up-pending-objects c: house > 0)
			(unit-type-count villager >= 3)
			(up-add-object-by-id search-local g: g-temp)
			(up-set-target-object search-local c: 0)
			(up-set-target-object search-remote c: 0)
			(game-time < 2)
			=>
			(up-target-objects 1 action-default -1 -1)
			)

			(defrule
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 0)
			; (up-pending-objects c: house > 0)
			(unit-type-count villager >= 3)
			(up-set-target-by-id g: g-temp-2)
			(game-time < 2)
			=>
			(up-get-point position-object g-point-x)
			(up-set-target-point g-point-x)
			(up-full-reset-search)
			(up-filter-status c: status-pending c: list-active)
			(set-strategic-number sn-focus-player-number my-player-number)
			(up-find-status-remote c: house c: 2)
			(up-clean-search search-remote object-data-distance search-order-asc)
			)

			(defrule
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 0)
			; (up-pending-objects c: house > 0)
			(unit-type-count villager >= 3)
			(up-add-object-by-id search-local g: g-temp-2)
			(up-set-target-object search-local c: 0)
			(up-set-target-object search-remote c: 0)
			(game-time < 2)
			=>
			(up-target-objects 1 action-default -1 -1)
			)

			(defrule
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 0)
			; (up-pending-objects c: house > 0)
			(unit-type-count villager >= 3)
			(up-set-target-by-id g: g-temp-3)
			(game-time < 2)
			=>
			(up-get-point position-object g-point-x)
			(up-set-target-point g-point-x)
			(up-full-reset-search)
			(up-filter-status c: status-pending c: list-active)
			(set-strategic-number sn-focus-player-number my-player-number)
			(up-find-status-remote c: house c: 2)
			(up-clean-search search-remote object-data-distance search-order-asc)
			)

			(defrule
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 0)
			; (up-pending-objects c: house > 0)
			(unit-type-count villager >= 3)
			(up-add-object-by-id search-local g: g-temp-3)
			(up-set-target-object search-local c: 0)
			(up-set-target-object search-remote c: 0)
			(game-time < 2)
			=>
			(up-target-objects 1 action-default -1 -1)
			)

			;Make sure both starting houses are being built at the same time
			(defrule
			(building-type-count house < 2)
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 1)
			; (up-pending-objects c: house > 1)
			(game-time > 4)
			=>
			(up-full-reset-search)
			(up-modify-sn sn-focus-player-number c:= my-player-number)
			(up-filter-status c: status-pending c: list-active)
			(up-find-status-remote c: house c: 2)
			(up-remove-objects search-remote object-data-tasks-count > 0)	;remove houses that are being built
			)

			(defrule
			(building-type-count house < 2)
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 0)
			; (up-pending-objects c: house > 0)
			(up-set-target-object search-remote c: 0)
			(game-time > 4)
			=>
			(up-get-point position-object g-point-x)
			(up-set-target-point g-point-x)
			(up-reset-search 1 1 0 0)
			(up-reset-filters)
			(up-find-local c: villager-class c: 20)
			(up-clean-search search-local object-data-distance search-order-asc)
			)

			(defrule
			(building-type-count house < 2)
			(up-get-fact building-type-count-total house g-food-cost)	;using g-food-cost merely as a temp goal
			(up-get-fact building-type-count house g-wood-cost)			;using g-wood-cost merely as a temp goal
			(up-modify-goal g-food-cost g:- g-wood-cost)
			(up-compare-goal g-food-cost > 0)
			; (up-pending-objects c: house > 0)
			(up-set-target-object search-remote c: 0)
			(up-set-target-object search-local c: 0)
			(game-time > 4)
			=>
			(up-remove-objects search-local object-data-index > 0)
			(up-target-objects 0 action-default -1 -1)
			)

		#end-if
		#end-if

	;-----------------
	;	First Tower
	;-----------------

		; #load-if-not-defined SICILIANS-CIV

		; 	(load "The General 3.1/Functions/Reset")

		; 	(defrule
		; 	(goal g-town-under-attack NO)
		; 	=>
		; 	(up-assign-builders c: watch-tower c: 2)
		; 	)

		; 	(defrule
		; 	(goal g-town-under-attack YES)
		; 	(unit-type-count 225 == 0)	;dead male builder
		; 	(unit-type-count 213 == 0)	;dead female builder
		; 	=>
		; 	(up-assign-builders c: watch-tower c: 1)
		; 	)

		; 	(defrule
		; 	(goal g-town-under-attack YES)
		; 	(or
		; 		(unit-type-count 225 > 0)	;dead male builder
		; 		(unit-type-count 213 > 0))	;dead female builder
		; 	=>
		; 	(up-assign-builders c: watch-tower c: 0)
		; 	)

		; 	;Build watch tower near soldier gather point. Prefer to build by mining camp, lumber camp, or mill if they are nearby.
		; 	(defrule
		; 	(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)
		; 	(up-compare-goal g-watch-tower-line == 0)
		; 	(can-build-with-escrow watch-tower)
		; 	(up-pending-objects c: watch-tower < 1)
		; 	(goal g-place-point-used NO)
		; 	(up-compare-goal g-gather-point-x > 0)
		; 	(up-point-distance g-gather-point-x g-position-self-x > 5)
		; 	=>
		; 	(up-set-target-point g-gather-point-x)
		; 	(up-full-reset-search)
		; 	(up-filter-distance c: -1 c: 12)
		; 	(up-find-local c: mining-camp c: 40)
		; 	(up-find-local c: lumber-camp c: 40)
		; 	(up-find-local c: mill c: 40)
		; 	(up-set-target-point g-target-enemy-x)
		; 	(up-clean-search search-local object-data-distance search-order-asc)
		; 	(set-goal g-temp-3 9986)
		; 	)
			
		; 	;No dropsite nearby, decide to build near g-gather-point-x
		; 	(defrule
		; 	(goal g-temp-3 9986)
		; 	(can-build-with-escrow watch-tower)
		; 	(not
		; 		(up-set-target-object search-local c: 0))
		; 	=>
		; 	(set-goal g-temp-3 9988)
		; 	)
			
		; 	;Dropsite nearby, check if it's closer than g-gather-point-x
		; 	(defrule
		; 	(goal g-temp-3 9986)
		; 	(can-build-with-escrow watch-tower)
		; 	(up-set-target-object search-local c: 0)
		; 	=>
		; 	(up-get-point position-object g-point-x)
		; 	(up-set-target-point g-target-enemy-x)
		; 	(up-get-point-distance g-point-x g-target-enemy-x g-temp) ;distance from dropsite to target enemy
		; 	(up-modify-goal g-temp c:- 8)							  ;prefer dropsite even if it's further away from enemy
		; 	(up-get-point-distance g-gather-point-x g-target-enemy-x g-temp-2) ;distance from soldier gather point to target enemy
		; 	(set-goal g-temp-3 9987)
		; 	)
			
		; 	;If dropsite is closer, build near dropsite
		; 	(defrule
		; 	(goal g-temp-3 9987)
		; 	(can-build-with-escrow watch-tower)
		; 	(up-set-target-object search-local c: 0)
		; 	(up-compare-goal g-temp g:<= g-temp-2)
		; 	=>
		; 	(up-copy-point g-build-line-point-x g-point-x)
		; 	(up-lerp-tiles g-build-line-point-x g-target-enemy-x c: 2)
		; 	(set-goal g-build-line-bldg watch-tower)
		; 	(set-goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		; 	(chat-to-player my-player-number CHAT-BUILD-TOWER-BY-DROPSITE)
		; 	(up-send-flare g-build-line-point-x)
		; 	)

		; 	;Dropsite isn't closer, build near g-gather-point-x
		; 	(defrule
		; 	(goal g-temp-3 9987)
		; 	(can-build-with-escrow watch-tower)
		; 	(up-set-target-object search-local c: 0)
		; 	(up-compare-goal g-temp g:> g-temp-2)
		; 	=>
		; 	(set-goal g-temp-3 9988)
		; 	)
			
		; 	;Build near g-target-point-x
		; 	(defrule
		; 	(goal g-temp-3 9988)
		; 	(can-build-with-escrow watch-tower)
		;	(up-compare-goal g-place-control-rule-id > 0)
		; 	=>
		; 	(up-copy-point g-build-line-point-x g-gather-point-x)
		; 	(up-lerp-tiles g-build-line-point-x g-target-enemy-x c: 3)
		; 	(set-goal g-build-line-bldg watch-tower)
		; 	(set-goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		; 	(chat-to-player my-player-number CHAT-BUILD-TOWER-BY-GATHER-POINT)
		; 	(up-jump-direct g: g-place-control-rule-id)
		; 	)

		; 	(defrule
		; 	(goal g-build-line-bldg watch-tower)
		; 	(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		; 	=>
		; 	(set-goal g-build-line-enemy-bldg-distance 10)
		; 	(set-goal g-build-line-zone-radius 0)
		; 	(set-goal g-build-line-max-zone-radius 4)
		; 	(set-goal g-build-line-escrow with-escrow)
		; 	(set-goal g-build-line-allow-beyond-town YES)
		; 	(set-goal g-build-line-expand-direction NO-DIRECTION)
		; 	)

		; 	(defrule
		; 	(up-compare-goal g-build-line-type != PENDING)
		; 	(up-compare-goal g-build-line-rule-id > 0)
		; 	=>
		; 	(up-jump-direct g: g-build-line-rule-id)
		; 	)

		; #end-if

	;----------------------------
	;	Go to Build Line Mills
	;----------------------------

		(defrule
		; (up-timer-status t-5-sec != timer-running)
		(up-compare-goal g-mill-construction-rule-id > 0)
		=>
		(up-jump-direct g: g-mill-construction-rule-id)
		)

	;-------------
	;	Wonders
	;-------------

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: wonder g:< g-desired-num-wonder)
		(can-build-with-escrow wonder)
		(up-pending-objects c: wonder < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg wonder)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		)

		(defrule
		(goal g-build-line-bldg wonder)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 15)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance -27)
		(set-goal g-build-line-escrow with-escrow)
		(up-modify-sn sn-placement-zone-size c:= 15)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: wonder c: 50)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;------------------
	;	Town Centers
	;------------------

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(building-type-count-total town-center == 1)
		(up-pending-objects c: town-center < 2)
		=>
		(set-goal g-build-line-bldg town-center)
		(set-goal g-build-line-type BUILD-LINE-POINT-MINING-DROPSITE)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 5)
		(set-goal g-build-line-resource-type gold)
		(set-goal g-build-line-dropsite-distance 8)
		(set-goal g-build-line-enemy-bldg-distance 45)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(building-type-count-total town-center != 1)
		(up-pending-objects c: town-center < 2)
		=>
		(set-goal g-build-line-bldg town-center)
		(set-goal g-build-line-type BUILD-LINE-POINT-LUMBER-DROPSITE)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 7)
		(set-goal g-build-line-resource-type wood)
		(set-goal g-build-line-dropsite-distance 12)
		(set-goal g-build-line-enemy-bldg-distance 45)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(wood-amount > 300)
		(up-pending-objects c: town-center < 2)
		=>
		(set-goal g-build-line-bldg town-center)
		(set-goal g-build-line-type BUILD-LINE-POINT-LUMBER-DROPSITE)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 7)
		(set-goal g-build-line-resource-type wood)
		(set-goal g-build-line-dropsite-distance 12)
		(set-goal g-build-line-enemy-bldg-distance 45)
		)

		(defrule
		(goal g-build-line-bldg town-center)
		(or
			(current-age <= castle-age)
			(population <= FIFTY-PERCENT-POP))
		=>
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-max-distance 70)
		)

		(defrule
		(goal g-build-line-bldg town-center)
		(current-age == imperial-age)
		(population >= FIFTY-PERCENT-POP)
		=>
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-max-distance -1)
		)
		
		(defrule
		(up-object-type-count c: town-center g:< g-desired-num-town-center)
		(can-afford-building town-center)
		(up-pending-objects c: town-center <= 1)
		=>
		(up-assign-builders c: town-center-foundation c: 4)
		)
		
		(defrule
		(up-object-type-count c: town-center g:< g-desired-num-town-center)
		(can-afford-building town-center)
		(up-pending-objects c: town-center > 1)
		=>
		(up-assign-builders c: town-center-foundation c: 8)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)
		
	;------------
	;	Castle
	;------------

		(defrule
		(goal g-build-line-bldg 0)
		; (up-object-type-count-total c: castle g:< g-desired-num-castle)
		(can-build-with-escrow castle)
		(up-pending-objects c: castle < 1)
		(building-type-count-total castle == 0)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg castle)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-control-bldg-distance 15)
		)

		(defrule
		(goal g-build-line-bldg 0)
		; (up-object-type-count-total c: castle g:< g-desired-num-castle)
		(can-build-with-escrow castle)
		(up-pending-objects c: castle < 1)
		(building-type-count-total castle > 0)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg castle)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(up-modify-goal g-build-line-control-bldg-distance s:= custom-sn-peaceful-town-size)
		)

		(defrule
		(goal g-build-line-bldg castle)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 10)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-escrow with-escrow)
		(up-modify-sn sn-placement-zone-size c:= 8)
		(set-strategic-number sn-placement-fail-delta 1)
		(up-assign-builders c: castle c: 4)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;------------
	;	Krepost
	;------------

		#load-if-defined BULGARIANS-CIV

			(defrule
			(goal g-build-line-bldg 0)
			(up-object-type-count-total c: krepost g:< g-desired-num-krepost)
			(can-build-with-escrow krepost)
			(up-pending-objects c: krepost < 1)
			(building-type-count-total krepost == 0)
			(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
			=>
			(set-goal g-build-line-bldg krepost)
			(set-goal g-build-line-type BUILD-LINE-CONTROL)
			(set-goal g-build-line-control-bldg-distance 15)
			)

			(defrule
			(goal g-build-line-bldg 0)
			(up-object-type-count-total c: krepost g:< g-desired-num-krepost)
			(can-build-with-escrow krepost)
			(up-pending-objects c: krepost < 1)
			(building-type-count-total krepost > 0)
			(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
			=>
			(set-goal g-build-line-bldg krepost)
			(set-goal g-build-line-type BUILD-LINE-CONTROL)
			(up-modify-goal g-build-line-control-bldg-distance s:= custom-sn-peaceful-town-size)
			)

			(defrule
			(goal g-build-line-bldg krepost)
			(goal g-build-line-type BUILD-LINE-CONTROL)
			=>
			(set-goal g-build-line-enemy-bldg-distance 10)
			(set-goal g-build-line-player my-player-number)
			(set-goal g-build-line-control-bldg -1)
			(set-goal g-build-line-escrow with-escrow)
			(up-modify-sn sn-placement-zone-size c:= 8)
			(set-strategic-number sn-placement-fail-delta 1)
			(up-assign-builders c: krepost c: 4)
			)

			(defrule
			(up-compare-goal g-build-line-type != PENDING)
			(up-compare-goal g-build-line-rule-id > 0)
			=>
			(up-jump-direct g: g-build-line-rule-id)
			)

		#end-if

	;--------------------
	;	Siege Workshop
	;--------------------

		(defrule
		(up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
		(or
			(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
			(goal g-game-focus AGGRESSIVE))
		(can-build-with-escrow siege-workshop)
		(up-pending-objects c: siege-workshop < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg siege-workshop)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		)

		(defrule
		(goal g-build-line-bldg siege-workshop)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 10)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance 10)
		(set-goal g-build-line-escrow with-escrow)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: siege-workshop c: 1)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;----------------
	;	University
	;----------------

		(defrule
		(up-object-type-count-total c: university g:< g-desired-num-university)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(can-build-with-escrow university)
		(up-pending-objects c: university < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg university)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		)

		(defrule
		(goal g-build-line-bldg university)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 12)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance -10)
		(set-goal g-build-line-escrow with-escrow)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: university c: 1)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;---------------
	;	Monastery
	;---------------

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: monastery g:< g-desired-num-monastery)
		(goal g-primary-unit monk)
		(can-build-with-escrow monastery)
		(up-pending-objects c: monastery < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		(up-compare-goal g-desired-num-monks >= 3)
		=>
		(set-goal g-build-line-bldg monastery)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-enemy-bldg-distance 12)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance -10)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: monastery c: 1)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: monastery g:< g-desired-num-monastery)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(can-build-with-escrow monastery)
		(up-pending-objects c: monastery < 1)
		; (building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		; (up-compare-goal g-desired-num-monks >= 3)
		=>
		(set-goal g-build-line-bldg monastery)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		)

		(defrule
		(goal g-build-line-bldg monastery)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 12)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance -10)
		(set-goal g-build-line-escrow with-escrow)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: monastery c: 1)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;--------------
	;	Barracks
	;--------------

		(defrule
		(goal g-build-line-bldg 0)
		(or
			(goal g-game-focus AGGRESSIVE)
			(or
				(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
				(building-type-count-total barracks == 0)))
		(goal g-primary-unit-class infantry-class)
		(up-compare-goal g-primary-unit != my-unique-unit)
		(up-object-type-count-total c: barracks g:< g-desired-num-barracks)
		(building-type-count-total barracks < 2)
		(can-build-with-escrow barracks)
		(up-pending-objects c: barracks < 1)
		; (building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg barracks)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-get-fact building-type-count-total barracks g-temp)
		(up-modify-goal g-temp g:%/ g-desired-num-barracks)
		=>
		(up-get-fact building-type-count-total archery-range g-temp-2)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-archery-range)
		(up-get-fact building-type-count-total stable g-temp-3)
		(up-modify-goal g-temp-3 g:%/ g-desired-num-stable)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(building-type-count-total archery-range == 0)
		=>
		(set-goal g-temp-2 100)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(building-type-count-total stable == 0)
		=>
		(set-goal g-temp-3 100)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: barracks g:< g-desired-num-barracks)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(up-compare-goal g-temp g:<= g-temp-2)
		(up-compare-goal g-temp g:<= g-temp-3)
		(can-build-with-escrow barracks)
		=>
		(set-goal g-build-line-bldg barracks)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		;Without Escrow
		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: barracks g:< g-desired-num-barracks)
		(can-build barracks)
		(up-pending-objects c: barracks < 1)
		=>
		(set-goal g-build-line-bldg barracks)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow without-escrow)
		)

		(defrule
		(goal g-build-line-bldg barracks)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 10)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance 7)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: barracks c: 1)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;-------------------
	;	Archery Range
	;-------------------

		(defrule
		(true)
		=>
		(up-assign-builders c: archery-range c: 1)
		)

		(defrule
		(goal g-strategy-type FAST-CASTLE)
		(building-type-count archery-range == 0)
		(current-age == feudal-age)
		=>
		(up-assign-builders c: archery-range c: 2)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(or
			(goal g-primary-unit archer)
			(goal g-primary-unit skirmisher))
		(or
			(goal g-game-focus AGGRESSIVE)
			(or
				(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
				(building-type-count-total archery-range == 0)))
		(up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
		(building-type-count-total archery-range < 2)
		(can-build-with-escrow archery-range)
		(up-pending-objects c: archery-range < 1)
		; (building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg archery-range)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(or
			(goal g-primary-unit cavalry-archer)
			(goal g-primary-unit hand-cannoneer))
		(or
			(goal g-game-focus AGGRESSIVE)
			(or
				(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
				(building-type-count-total archery-range == 0)))
		(up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
		(building-type-count-total archery-range < 2)
		(can-build-with-escrow archery-range)
		(up-pending-objects c: archery-range < 1)
		; (building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg archery-range)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(or
			(goal g-primary-unit slinger)
			(goal g-primary-unit genitour))
		(up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
		(building-type-count-total archery-range < 2)
		(can-build-with-escrow archery-range)
		(up-pending-objects c: archery-range < 1)
		; (building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg archery-range)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-compare-goal g-desired-num-archery-range > 0)
		(building-type-count-total archery-range == 0)
		(or
			(building-type-count-total stable > 0)
			(up-compare-goal g-primary-unit-class != cavalry-class))
		(can-build-with-escrow archery-range)
		(up-pending-objects c: archery-range < 1)
		; (building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg archery-range)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-get-fact building-type-count-total archery-range g-temp)
		(up-modify-goal g-temp g:%/ g-desired-num-archery-range)
		=>
		(up-get-fact building-type-count-total barracks g-temp-2)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-barracks)
		(up-get-fact building-type-count-total stable g-temp-3)
		(up-modify-goal g-temp-3 g:%/ g-desired-num-stable)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(building-type-count-total barracks == 0)
		=>
		(set-goal g-temp-2 100)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(building-type-count-total stable == 0)
		=>
		(set-goal g-temp-3 100)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(up-object-type-count-total c: university g:>= g-desired-num-university)
		(up-compare-goal g-temp g:<= g-temp-2)
		(up-compare-goal g-temp g:<= g-temp-3)
		(can-build-with-escrow archery-range)
		(up-pending-objects c: archery-range < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg archery-range)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		;Without Escrow
		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
		(can-build archery-range)
		(up-pending-objects c: archery-range < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg archery-range)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow without-escrow)
		)

		(defrule
		(goal g-build-line-bldg archery-range)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 10)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance 7)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;------------
	;	Stable
	;------------

		(defrule
		(true)
		=>
		(up-assign-builders c: stable c: 1)
		)

		(defrule
		(goal g-strategy-type FAST-CASTLE)
		(building-type-count stable == 0)
		(current-age == feudal-age)
		=>
		(up-assign-builders c: stable c: 2)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(goal g-primary-unit-class cavalry-class)
		(up-compare-goal g-primary-unit != my-unique-unit)
		(or
			(goal g-game-focus AGGRESSIVE)
			(or
				(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
				(building-type-count-total stable == 0)))
		(up-object-type-count-total c: stable g:< g-desired-num-stable)
		(building-type-count-total stable < 2)
		(can-build-with-escrow stable)
		(up-pending-objects c: stable < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg stable)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-compare-goal g-desired-num-stable > 0)
		(building-type-count-total stable == 0)
		(or
			(building-type-count archery-range > 0)
			(up-compare-goal g-desired-num-archery-range == 0))
		(can-build-with-escrow stable)
		(up-pending-objects c: stable < 1)
		; (building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg stable)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-get-fact building-type-count-total stable g-temp)
		(up-modify-goal g-temp g:%/ g-desired-num-stable)
		=>
		(up-get-fact building-type-count-total archery-range g-temp-2)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-archery-range)
		(up-get-fact building-type-count-total barracks g-temp-3)
		(up-modify-goal g-temp-3 g:%/ g-desired-num-barracks)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(building-type-count-total archery-range == 0)
		=>
		(set-goal g-temp-2 100)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(building-type-count-total barracks == 0)
		=>
		(set-goal g-temp-3 100)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: stable g:< g-desired-num-stable)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(up-compare-goal g-temp g:<= g-temp-2)
		(up-compare-goal g-temp g:<= g-temp-3)
		(can-build-with-escrow stable)
		(up-pending-objects c: stable < 1)
		; (building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg stable)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-escrow with-escrow)
		)

		;Without Escrow
		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: stable g:< g-desired-num-stable)
		(can-build stable)
		(up-pending-objects c: stable < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg stable)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-enemy-bldg-distance 10)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance 7)
		(set-goal g-build-line-escrow without-escrow)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: stable c: 1)
		)

		(defrule
		(goal g-build-line-bldg stable)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 10)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance 7)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;------------
	;	Market
	;------------

		(defrule
		(current-age >= feudal-age)
		=>
		(up-assign-builders c: market c: 1)
		(up-setup-cost-data 1 g-food-cost)
		(up-add-object-cost c: town-center-foundation c: 1)
		)

		(defrule
		(goal g-strategy-type FAST-CASTLE)
		(building-type-count market == 0)
		(current-age == feudal-age)
		=>
		(up-assign-builders c: market c: 2)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: market g:< g-desired-num-market)
		(wood-amount g:>= g-wood-cost)	;cost of town center
		(building-type-count-total market == 0)
		(can-build-with-escrow market)
		(up-pending-objects c: market < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg market)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-control-bldg-distance -7)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-to-center 1)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: market g:< g-desired-num-market)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(building-type-count-total market == 0)
		(can-build-with-escrow market)
		(up-pending-objects c: market < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg market)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-control-bldg-distance -7)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-to-center 1)
		)

		(defrule
		(goal g-build-line-bldg 0)
		(up-object-type-count-total c: market g:< g-desired-num-market)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(building-type-count-total market >= 1)
		(can-build-with-escrow market)
		(up-pending-objects c: market < 1)
		; (building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg market)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		(set-goal g-build-line-control-bldg-distance HUNDRED-PERCENT-MAP-SIZE)
		(up-modify-sn sn-placement-zone-size c:= 0)
		(set-strategic-number sn-placement-to-center 1)
		(set-strategic-number sn-placement-fail-delta 0)
		)

		(defrule
		(goal g-build-line-bldg market)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 15)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(up-assign-builders c: market c: 1)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;----------------
	;	Blacksmith
	;----------------

		(defrule
		(up-object-type-count-total c: blacksmith g:< g-desired-num-blacksmith)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(or
			(goal g-desired-num-barracks 0)
			(building-type-count-total barracks > 0))
		(can-build-with-escrow blacksmith)
		(up-pending-objects c: blacksmith < 1)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg blacksmith)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		)

		(defrule
		(goal g-build-line-bldg blacksmith)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 12)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance -7)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: blacksmith c: 2)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;-------------------
	;	Bombard Tower
	;-------------------

		(defrule
		(up-object-type-count-total c: bombard-tower g:< g-desired-num-bombard-tower)
		(can-build bombard-tower)
		(up-pending-objects c: bombard-tower < 2)
		(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
		=>
		(set-goal g-build-line-bldg bombard-tower)
		(set-goal g-build-line-type BUILD-LINE-CONTROL)
		)

		(defrule
		(goal g-build-line-bldg bombard-tower)
		(goal g-build-line-type BUILD-LINE-CONTROL)
		=>
		(set-goal g-build-line-enemy-bldg-distance 10)
		(set-goal g-build-line-player my-player-number)
		(set-goal g-build-line-control-bldg -1)
		(set-goal g-build-line-control-bldg-distance 22)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 1)
		(up-assign-builders c: bombard-tower c: 1)
		)

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

	;-----------------
	;	Watch Tower
	;-----------------

		#load-if-not-defined SICILIANS-CIV

			(defrule
			(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)
			(up-compare-goal g-watch-tower-line > 0)
			(can-build watch-tower)
			(up-pending-objects c: watch-tower < 2)
			(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
			=>
			(set-goal g-build-line-bldg watch-tower)
			(set-goal g-build-line-type BUILD-LINE-CONTROL)
			)

			(defrule
			(goal g-build-line-bldg watch-tower)
			(goal g-build-line-type BUILD-LINE-CONTROL)
			=>
			(set-goal g-build-line-enemy-bldg-distance 10)
			(set-goal g-build-line-player my-player-number)
			(set-goal g-build-line-control-bldg -1)
			(set-goal g-build-line-control-bldg-distance 22)
			(up-modify-sn sn-placement-zone-size c:= 5)
			(set-strategic-number sn-placement-fail-delta 1)
			(up-assign-builders c: watch-tower c: 1)
			)

			(defrule
			(up-compare-goal g-build-line-type != PENDING)
			(up-compare-goal g-build-line-rule-id > 0)
			=>
			(up-jump-direct g: g-build-line-rule-id)
			)

		#end-if

	;------------
	;	Donjon
	;------------

		#load-if-defined SICILIANS-CIV

			(defrule
			(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)	;g-watch-tower-line counts donjons
			(up-compare-goal g-watch-tower-line > 0)
			(can-build watch-tower)
			(up-pending-objects c: watch-tower < 2)
			(building-type-count town-center > 0)		;important condition for up-set-placement to work (I think)
			=>
			(set-goal g-build-line-bldg watch-tower)
			(set-goal g-build-line-type BUILD-LINE-CONTROL)
			)

			(defrule
			(goal g-build-line-bldg donjon)
			(goal g-build-line-type BUILD-LINE-CONTROL)
			=>
			(set-goal g-build-line-enemy-bldg-distance 10)
			(set-goal g-build-line-player my-player-number)
			(set-goal g-build-line-control-bldg -1)
			(set-goal g-build-line-control-bldg-distance 22)
			(up-modify-sn sn-placement-zone-size c:= 5)
			(set-strategic-number sn-placement-fail-delta 1)
			(up-assign-builders c: donjon c: 1)
			)

			(defrule
			(up-compare-goal g-build-line-type != PENDING)
			(up-compare-goal g-build-line-rule-id > 0)
			=>
			(up-jump-direct g: g-build-line-rule-id)
			)

		#end-if

	;------------
	;	Houses
	;------------

		#load-if-not-defined HUN-CIV

			(load "The General 3.1/Functions/Reset")
		
			;get number of additional houses needed (stored in g-temp)
			(defrule
			(true)
			=>
			(up-modify-goal g-temp g:= g-desired-num-house)
			(up-get-fact building-type-count house g-temp-2)
			(up-get-fact building-type-count-total house g-temp-3)
			(up-modify-goal g-temp g:- g-temp-2)
			(up-modify-goal g-temp-3 g:- g-temp-2)
			(up-modify-goal g-temp c:max 0)
			)

			(defrule
			(up-compare-goal g-temp >= 2)
			(building-type-count house >= 2)
			=>
			(up-assign-builders c: house g: g-temp)
			)

			(defrule
			(up-compare-goal g-temp < 2)
			(building-type-count house >= 2)
			=>
			(up-assign-builders c: house c: 1)
			)

			(defrule
			(up-object-type-count-total c: house g:< g-desired-num-house)
			(can-build-with-escrow house)
			; (up-pending-objects c: house g:< g-temp)
			(up-compare-goal g-temp-3 g:< g-temp)
			(game-time > 5)
			=>
			(set-goal g-build-line-bldg house)
			(set-goal g-build-line-type BUILD-LINE-CONTROL)
			(set-goal g-build-line-enemy-bldg-distance 15)
			(set-goal g-build-line-player my-player-number)
			(set-goal g-build-line-control-bldg -1)
			(set-goal g-build-line-control-bldg-distance 7)
			(set-strategic-number sn-placement-fail-delta 0)
			(set-strategic-number sn-placement-zone-size 5)
			)

		#end-if

	;----------------------------------------
	;	Go to Load Build Line Code Section
	;----------------------------------------

		(defrule
		(up-compare-goal g-build-line-type != PENDING)
		(up-compare-goal g-build-line-rule-id > 0)
		=>
		(up-jump-direct g: g-build-line-rule-id)
		)

;=========================<>=========================
;				 LOAD BUILD LINE CODE
;=========================<>=========================

	(defrule
	(true)
	=>
	(up-get-rule-id g-build-line-rule-id)
	(disable-self)
	)

	(defrule
	(goal g-build-line-type PENDING)
	(up-compare-goal g-mill-construction-rule-id > 0)
	=>
	(up-jump-direct g: g-mill-construction-rule-id)
	)

	(defrule
	(up-compare-goal g-build-line-type != PENDING)
	=>
	(up-store-type-name g: g-build-line-bldg)
	(up-chat-data-to-self CHAT-BUILD-LINE c: 7031232)
	)

	(load "The General 3.1/Functions/Build Line")

	(defrule
	(up-compare-sn sn-placement-to-center == 1)
	=>
	(up-modify-sn sn-placement-to-center c:= 0)
	)

;=========================<>=========================
;				      DROPSITES
;=========================<>=========================

	; -----------
	; 	Setup
	; -----------

		(defrule
		(true)
		=>
		(set-goal g-place-point-used NO)
		(set-goal g-place-control-used NO)
		(set-goal g-build-line-bldg 0)
		(set-goal g-build-line-bldg-foundation 0)
		(set-goal g-build-line-type PENDING)
		)

	;-----------
	;	Mills
	;-----------

		(defrule
		(true)
		=>
		(up-get-rule-id g-mill-construction-rule-id)
		(disable-self)
		)

		;Reset
		(defrule
		(or
			(up-compare-goal g-build-line-bldg != PENDING)
			(up-compare-goal g-build-line-type != PENDING))
		=>
		(set-goal g-build-line-bldg PENDING)
		(set-goal g-build-line-type PENDING)
		)

		;Foraging mill
		(defrule
		(up-object-type-count-total c: mill g:< g-desired-num-mill)
		(up-pending-objects c: mill == 0)
		; (or
		; 	(unit-type-count villager-forager >= 2)
		; 	(unit-type-count villager >= 14))
		(dropsite-min-distance food < 20)
		(can-build mill)
		(game-time < 900)
		=>
		(set-goal g-build-line-bldg mill)
		(set-goal g-build-line-resource-type forage-class)
		(set-goal g-build-line-max-distance 25)
		; (chat-to-player my-player-number CHAT-MILL-FORAGE)
		)

		;Hunting mill
		(defrule
		(strategic-number sn-preferred-mill-placement == 1)
		(up-object-type-count-total c: mill g:< g-desired-num-mill)
		(up-pending-objects c: mill == 0)
		(dropsite-min-distance deer-hunting >= 5)
		(dropsite-min-distance deer-hunting <= 20)
		(can-build mill)
		=>
		(set-goal g-build-line-bldg mill)
		(set-goal g-build-line-resource-type deer-class)
		(set-goal g-build-line-max-distance 40)
		; (chat-to-player my-player-number CHAT-MILL-DEER)
		)

		(defrule
		(goal g-build-line-bldg mill)
		=>
		(set-goal g-build-line-type BUILD-LINE-POINT-MILL-DROPSITE)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 6)
		(set-goal g-build-line-dropsite-distance 6)
		(set-goal g-build-line-enemy-bldg-distance 25)
		)
	
		(defrule
		(goal g-build-line-type PENDING)
		(up-compare-goal g-mc-construction-rule-id > 0)
		=>
		(up-jump-direct g: g-mc-construction-rule-id)
		)

		(load "The General 3.1/Functions/Build Line Mill")

		(defrule
		(up-compare-sn sn-placement-to-center == 1)
		=>
		(up-modify-sn sn-placement-to-center c:= 0)
		)

	;------------------
	;	Mining Camps
	;------------------

		(defrule
		(true)
		=>
		(up-get-rule-id g-mc-construction-rule-id)
		(disable-self)
		)

		;Reset
		(defrule
		(or
			(up-compare-goal g-build-line-bldg != PENDING)
			(up-compare-goal g-build-line-type != PENDING))
		=>
		(set-goal g-build-line-bldg PENDING)
		(set-goal g-build-line-type PENDING)
		)

		;Gold Camp
		(defrule
		(up-compare-goal g-current-gold-camp-total g:< g-desired-num-gold-camp)
		(up-pending-objects c: mining-camp == 0)
		(dropsite-min-distance gold < 255)
		(can-build-with-escrow mining-camp)
		=>
		(set-goal g-build-line-bldg mining-camp)
		(set-goal g-build-line-type BUILD-LINE-POINT-MINING-DROPSITE)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 6)
		(set-goal g-build-line-resource-type gold)
		(set-goal g-build-line-dropsite-distance 7)
		(set-goal g-build-line-enemy-bldg-distance 25)
		; (chat-to-player my-player-number CHAT-CAMP-GOLD)
		)

		(load "The General 3.1/Functions/Reset")
		
		;Go through all gold mines on the map and
		;find available gold mines to see if we can build gold camp
		(defrule
		(goal g-build-line-bldg mining-camp)
		(goal g-build-line-resource-type gold)
        =>
        (set-goal i 0)
		(set-goal g-temp 97969)
        )

			(defrule
			(goal g-build-line-bldg mining-camp)
			(goal g-build-line-resource-type gold)
			(not
				(up-set-target-by-id g: i))
			(up-compare-goal i g:< g-map-size-squared)
			(goal g-temp 97969)
			=>
			(up-modify-goal i c:+ 1)
			(up-jump-rule -1)
			)

			(defrule
			(goal g-build-line-bldg mining-camp)
			(goal g-build-line-resource-type gold)
			(up-compare-goal i g:< g-map-size-squared)
			(goal g-temp 97969)
            (up-set-target-by-id g: i)
            (up-get-object-data object-data-point-x g-point-x)
            (up-get-object-data object-data-point-y g-point-y)
            (or
            	(up-object-data object-data-type != gold-mine)
				(up-point-explored g-point-x == explored-no))
			=>
			(up-modify-goal i c:+ 1)
			(up-full-reset-search)
			(up-jump-rule -2)
			)

            (defrule
			(goal g-build-line-bldg mining-camp)
			(goal g-build-line-resource-type gold)
			(up-compare-goal i g:< g-map-size-squared)
			(goal g-temp 97969)
            (up-set-target-by-id g: i)
            (up-get-object-data object-data-point-x g-point-x)
            (up-get-object-data object-data-point-y g-point-y)
            =>
			(up-set-target-point g-point-x)
			(up-full-reset-search)
			(up-filter-distance c: -1 g: g-build-line-dropsite-distance)
			(up-find-local c: town-center c: 1)
			(up-find-local c: mining-camp c: 1)
			(up-get-search-state g-local-total)
            )

			(defrule
			(goal g-build-line-bldg mining-camp)
			(goal g-build-line-resource-type gold)
            (up-set-target-by-id g: i)
			(up-compare-goal i g:< g-map-size-squared)
			(goal g-temp 97969)
			(up-compare-goal g-local-total > 0)
            =>
			(up-full-reset-search)
            (up-modify-goal i c:+ 1)
            (up-jump-rule -4)
			)

			(defrule
			(goal g-build-line-bldg mining-camp)
			(goal g-build-line-resource-type gold)
            (up-set-target-by-id g: i)
			(up-compare-goal i g:< g-map-size-squared)
			(goal g-local-total 0)
			(goal g-temp 97969)
			=>
			(up-get-object-data object-data-id g-temp-2)
			(set-strategic-number sn-focus-player-number 1)
			(up-set-target-point g-point-x)
			(set-goal g-temp 97970)
			)

				;Search for enemy units or buildings nearby
				(defrule
				(goal g-build-line-bldg mining-camp)
				(goal g-build-line-resource-type gold)
				(up-set-target-by-id g: i)
				(goal g-temp 97970)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				=>
				(up-full-reset-search)
				(up-filter-distance c: -1 c: 12)
				(up-find-remote c: all-units-class c: 1)
				(up-filter-distance c: -1 g: g-build-line-enemy-bldg-distance)
				(up-filter-include cmdid-military-building -1 -1 -1)
				(up-find-remote c: all-units-class c: 1)
				(up-filter-include -1 -1 -1 -1)
				(up-find-remote c: town-center c: 1)
				(up-get-search-state g-local-total)
				)

				(defrule
				(goal g-build-line-bldg mining-camp)
				(goal g-build-line-resource-type gold)
				(up-set-target-by-id g: i)
				(up-compare-goal i g:< g-map-size-squared)
				(goal g-temp 97970)
				(player-in-game focus-player)
				(stance-toward focus-player enemy)
				(up-compare-goal g-remote-total > 0)
				=>
				(up-modify-goal i c:+ 1)
				(up-full-reset-search)
				(set-goal g-temp 97969)
				(up-jump-rule -7)
				)

				(defrule
				(goal g-build-line-bldg mining-camp)
				(goal g-build-line-resource-type gold)
				(up-set-target-by-id g: i)
				(up-compare-goal i g:< g-map-size-squared)
				(goal g-temp 97970)
				(up-compare-sn sn-focus-player-number < 8)
				=>
				(up-modify-sn sn-focus-player-number c:+ 1)
				(up-jump-rule -3)
				)

		(defrule
		(up-compare-goal g-temp != 97970)
		(goal g-build-line-bldg mining-camp)
		(goal g-build-line-resource-type gold)
		=>
		(set-goal g-build-line-bldg 0)
		(set-goal g-build-line-resource-type PENDING)
		(set-goal g-build-line-type PENDING)
		; (chat-local-to-self CHAT-NO-LOCATION-FOR-GOLD-CAMP)
		)

		(defrule
		(up-compare-goal g-current-gold-camp-total g:< g-desired-num-gold-camp)
		(goal g-build-line-bldg mining-camp)
		=>
		(set-goal g-build-line-max-distance 255)
		)

		(defrule
		(up-compare-goal g-current-gold-camp-total g:< g-desired-num-gold-camp)
		(goal g-build-line-bldg mining-camp)
		(building-type-count-total town-center < 2)
		(goal g-current-gold-camp-total 2)
		=>
		(set-goal g-build-line-max-distance 55)
		)

		(defrule
		(up-compare-goal g-current-gold-camp-total g:< g-desired-num-gold-camp)
		(goal g-build-line-bldg mining-camp)
		(building-type-count-total town-center < 2)
		(goal g-current-gold-camp-total 1)
		=>
		(set-goal g-build-line-max-distance 45)
		)

		(defrule
		(up-compare-goal g-current-gold-camp-total g:< g-desired-num-gold-camp)
		(goal g-build-line-bldg mining-camp)
		(building-type-count-total town-center < 2)
		(up-compare-goal g-current-gold-camp-total < 1)
		=>
		(set-goal g-build-line-max-distance 30)
		)
	
		(defrule
		(goal g-build-line-type PENDING)
		(up-compare-goal g-stone-camp-construction-rule-id > 0)
		=>
		(up-jump-direct g: g-stone-camp-construction-rule-id)
		)

		(load "The General 3.1/Functions/Build Line Mining")

		;If failed to place gold TC, then place wood TC instead
		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-MINING-DROPSITE)
		(up-compare-goal g-build-line-resource-type != wood)
		(goal g-build-line-bldg town-center)
		(up-pending-objects g: g-build-line-bldg == 0)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		=>		
		(set-goal g-build-line-dropsite-distance 12)
		(set-goal g-build-line-enemy-bldg-distance 45)
		(set-goal g-build-line-max-distance -1)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-type BUILD-LINE-POINT-LUMBER-DROPSITE)
		(set-goal g-build-line-resource-type wood)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 7)
		; (chat-to-player my-player-number CHAT-BUILD-BACKUP-TC-WOOD)
		)

		(load "The General 3.1/Functions/Build Line Lumber")

		(defrule
		(true)
		=>
		(up-get-rule-id g-stone-camp-construction-rule-id)
		(disable-self)
		)

		;Reset
		(defrule
		(or
			(up-compare-goal g-build-line-bldg != PENDING)
			(up-compare-goal g-build-line-type != PENDING))
		=>
		(set-goal g-build-line-bldg PENDING)
		(set-goal g-build-line-type PENDING)
		)

		;Stone Camp
		(defrule
		(up-compare-goal g-current-stone-camp-total g:< g-desired-num-stone-camp)
		(up-pending-objects c: mining-camp == 0)
		(dropsite-min-distance stone < 255)
		(can-build-with-escrow mining-camp)
		=>
		(set-goal g-build-line-bldg mining-camp)
		(set-goal g-build-line-type BUILD-LINE-POINT-MINING-DROPSITE)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 6)
		(set-goal g-build-line-resource-type stone)
		(set-goal g-build-line-dropsite-distance 6)
		(set-goal g-build-line-enemy-bldg-distance 25)
		; (chat-to-player my-player-number CHAT-CAMP-STONE)
		)

		(defrule
		(up-compare-goal g-current-stone-camp-total g:< g-desired-num-stone-camp)
		(goal g-build-line-bldg mining-camp)
		=>
		(set-goal g-build-line-max-distance 255)
		)

		(defrule
		(up-compare-goal g-current-stone-camp-total g:< g-desired-num-stone-camp)
		(goal g-build-line-bldg mining-camp)
		(building-type-count-total town-center < 2)
		(goal g-current-stone-camp-total 1)
		=>
		(set-goal g-build-line-max-distance 45)
		)

		(defrule
		(up-object-type-count-total c: mining-camp g:< g-desired-num-mining-camp)
		(goal g-build-line-bldg mining-camp)
		(building-type-count-total town-center < 2)
		(up-compare-goal g-current-stone-camp-total < 1)
		=>
		(set-goal g-build-line-max-distance 30)
		)
	
		(defrule
		(goal g-build-line-type PENDING)
		(up-compare-goal g-lc-construction-rule-id > 0)
		=>
		(up-jump-direct g: g-lc-construction-rule-id)
		)

		(load "The General 3.1/Functions/Build Line Mining")

		(defrule
		(up-compare-sn sn-placement-to-center == 1)
		=>
		(up-modify-sn sn-placement-to-center c:= 0)
		)

	;------------------
	;	Lumber Camps
	;------------------

		(defrule
		(true)
		=>
		(up-get-rule-id g-lc-construction-rule-id)
		(disable-self)
		)

		;Reset
		(defrule
		(or
			(up-compare-goal g-build-line-bldg != PENDING)
			(up-compare-goal g-build-line-type != PENDING))
		=>
		(set-goal g-build-line-bldg PENDING)
		(set-goal g-build-line-type PENDING)
		)

		(defrule
		(goal g-build-line-bldg lumber-camp)
		(building-type-count lumber-camp == 0)
		=>
		(up-assign-builders c: lumber-camp c: 0)	;use DUC builder assignment for first lumber camp
		)

		(defrule
		(goal g-build-line-bldg lumber-camp)
		(building-type-count lumber-camp > 0)
		=>
		(up-assign-builders c: lumber-camp c: 1)
		)

		(defrule
		(up-object-type-count-total c: lumber-camp g:< g-desired-num-lumber-camp)
		(up-pending-objects c: lumber-camp == 0)
		(dropsite-min-distance wood < 255)
		(can-build-with-escrow lumber-camp)
		(up-timer-status t-build-line-lumber-camp != timer-running)
		(building-type-count-total lumber-camp == 0)
		=>
		(set-goal g-build-line-bldg lumber-camp)
		(set-goal g-build-line-type BUILD-LINE-POINT-LUMBER-DROPSITE)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 6)
		(set-goal g-build-line-resource-type wood)
		(set-goal g-build-line-dropsite-distance 8)
		(set-goal g-build-line-enemy-bldg-distance 25)
		; (chat-to-player my-player-number CHAT-CAMP-WOOD-FIRST)
		)
		
		(defrule
		(up-object-type-count-total c: lumber-camp g:< g-desired-num-lumber-camp)
		(up-pending-objects c: lumber-camp == 0)
		(dropsite-min-distance wood < 255)
		(can-build-with-escrow lumber-camp)
		(up-timer-status t-build-line-lumber-camp != timer-running)
		(building-type-count-total lumber-camp == 1)
		=>
		(set-goal g-build-line-bldg lumber-camp)
		(set-goal g-build-line-type BUILD-LINE-POINT-LUMBER-DROPSITE)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 6)
		(set-goal g-build-line-resource-type wood)
		(set-goal g-build-line-dropsite-distance 15)
		(set-goal g-build-line-enemy-bldg-distance 25)
		; (chat-to-player my-player-number CHAT-CAMP-WOOD-SECOND)
		)

		(defrule
		(up-object-type-count-total c: lumber-camp g:< g-desired-num-lumber-camp)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-pending-objects c: lumber-camp == 0)
		(dropsite-min-distance wood < 255)
		(can-build-with-escrow lumber-camp)
		(building-type-count lumber-camp >= 2)
		(up-timer-status t-build-line-lumber-camp != timer-running)
		=>
		(set-goal g-build-line-bldg lumber-camp)
		(set-goal g-build-line-type BUILD-LINE-POINT-LUMBER-DROPSITE)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 6)
		(set-goal g-build-line-resource-type wood)
		(set-goal g-build-line-dropsite-distance 8)
		(set-goal g-build-line-enemy-bldg-distance 25)
		; (chat-to-player my-player-number CHAT-CAMP-WOOD-LATER)
		)
	
		(defrule
		(goal g-build-line-type PENDING)
		(up-compare-goal g-place-point-rule-id > 0)
		=>
		(up-jump-direct g: g-place-point-rule-id)
		)

		(load "The General 3.1/Functions/Build Line Lumber")

		(defrule
		(up-compare-sn sn-placement-to-center == 1)
		=>
		(up-modify-sn sn-placement-to-center c:= 0)
		)

;=========================<>=========================
;				     PLACE POINT
;=========================<>=========================

	;-----------------
	;	Get Rule Id
	;-----------------

		(defrule
		(true)
		=>
		(up-get-rule-id g-place-point-rule-id)
		(disable-self)
		)

	;-----------------
	;	Watch Tower
	;-----------------

		; (defrule
		; (up-timer-status t-10-sec == timer-running)
		; (up-compare-goal g-place-control-rule-id > 0)
		; =>
		; (up-jump-direct g: g-place-control-rule-id)
		; )

		#load-if-not-defined SICILIANS-CIV

			(load "The General 3.1/Functions/Reset")

			(defrule
			(goal g-town-under-attack NO)
			=>
			(up-assign-builders c: watch-tower c: 2)
			)

			(defrule
			(goal g-town-under-attack YES)
			(unit-type-count 225 == 0)	;dead male builder
			(unit-type-count 213 == 0)	;dead female builder
			=>
			(up-assign-builders c: watch-tower c: 1)
			)

			(defrule
			(goal g-town-under-attack YES)
			(or
				(unit-type-count 225 > 0)	;dead male builder
				(unit-type-count 213 > 0))	;dead female builder
			=>
			(up-assign-builders c: watch-tower c: 0)
			)

			;Build watch tower near closest dropsite to enemy. Also prioritize tower near soldier gather point.
			(defrule
			(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)
			(up-compare-goal g-watch-tower-line == 0)
			(can-build-with-escrow watch-tower)
			(up-pending-objects c: watch-tower < 1)
			(goal g-place-point-used NO)
			(up-compare-goal g-gather-point-x > 0)
			(up-point-distance g-gather-point-x g-position-self-x > 5)
			=>
			(up-full-reset-search)
			(up-find-local c: mining-camp c: 10)
			(up-find-local c: lumber-camp c: 10)
			(up-find-local c: mill c: 5)
			(set-goal g-temp-3 9986)
			(set-goal i 0)		;loop counter
			(set-goal g-temp 0)	;score of best dropsite
			)

				;Loop through each dropsite and see which one has the best location
				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow watch-tower)
				(up-set-target-object search-local g: i)
				(up-object-data object-data-type == mining-camp)
				=>
				(set-goal g-temp-2 500)		;score of current dropsite
				(up-get-point position-object g-point-x)
				(up-get-point-distance g-point-x g-target-enemy-x g-temp-4)
				(up-modify-goal g-temp-4 c:* 3)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				(up-get-point-distance g-point-x g-gather-point-x g-temp-4)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				)
				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow watch-tower)
				(up-set-target-object search-local g: i)
				(up-object-data object-data-type == lumber-camp)
				=>
				(set-goal g-temp-2 480)
				(up-get-point position-object g-point-x)
				(up-get-point-distance g-point-x g-target-enemy-x g-temp-4)
				(up-modify-goal g-temp-4 c:* 3)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				(up-get-point-distance g-point-x g-gather-point-x g-temp-4)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				)
				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow watch-tower)
				(up-set-target-object search-local g: i)
				(up-object-data object-data-type == mill)
				=>
				(set-goal g-temp-2 440)
				(up-get-point position-object g-point-x)
				(up-get-point-distance g-point-x g-target-enemy-x g-temp-4)
				(up-modify-goal g-temp-4 c:* 3)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				(up-get-point-distance g-point-x g-gather-point-x g-temp-4)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				)

				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow watch-tower)
				(up-set-target-object search-local g: i)
				(up-compare-goal g-temp-2 g:> g-temp)
				=>
				(up-get-object-data object-data-id j)
				(up-modify-goal g-temp g:= g-temp-2)
				)

				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow watch-tower)
				(up-compare-goal i < 25)
				=>
				(up-modify-goal i c:+ 1)
				(up-jump-rule -5)
				)
			
			;Dropsite nearby, check if it's closer than g-gather-point-x
			(defrule
			(goal g-temp-3 9986)
			(can-build-with-escrow watch-tower)
			(up-set-target-by-id g: j)
			(up-compare-goal g-place-control-rule-id > 0)
			=>
			(up-get-point position-object g-point-x)
			(up-lerp-tiles g-point-x g-target-enemy-x c: 2)
			(up-copy-point g-place-point-x g-point-x)
			(up-set-target-point g-place-point-x)
			(set-goal g-place-point-used YES)
			(set-strategic-number sn-placement-fail-delta 0)
			(up-build place-point g-escrow c: watch-tower)
			; (chat-to-player my-player-number CHAT-BUILD-TOWER-BY-DROPSITE)
			; (up-send-flare g-place-point-x)
			(up-jump-direct g: g-place-control-rule-id)
			)

		#end-if

	;------------
	;	Donjon
	;------------

		#load-if-defined SICILIANS-CIV

			(load "The General 3.1/Functions/Reset")

			(defrule
			(goal g-town-under-attack NO)
			=>
			(up-assign-builders c: donjon c: 2)
			)

			(defrule
			(goal g-town-under-attack YES)
			(unit-type-count 225 == 0)	;dead male builder
			(unit-type-count 213 == 0)	;dead female builder
			=>
			(up-assign-builders c: donjon c: 1)
			)

			(defrule
			(goal g-town-under-attack YES)
			(or
				(unit-type-count 225 > 0)	;dead male builder
				(unit-type-count 213 > 0))	;dead female builder
			=>
			(up-assign-builders c: donjon c: 0)
			)

			;Build watch tower near closest dropsite to enemy. Also prioritize tower near soldier gather point.
			(defrule
			(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)
			(up-compare-goal g-watch-tower-line == 0)
			(can-build-with-escrow donjon)
			(up-pending-objects c: donjon < 1)
			(goal g-place-point-used NO)
			(up-compare-goal g-gather-point-x > 0)
			(up-point-distance g-gather-point-x g-position-self-x > 5)
			=>
			(up-full-reset-search)
			(up-find-local c: mining-camp c: 10)
			(up-find-local c: lumber-camp c: 10)
			(up-find-local c: mill c: 5)
			(set-goal g-temp-3 9986)
			(set-goal i 0)		;loop counter
			(set-goal g-temp 0)	;score of best dropsite
			)

				;Loop through each dropsite and see which one has the best location
				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow donjon)
				(up-set-target-object search-local g: i)
				(up-object-data object-data-type == mining-camp)
				=>
				(set-goal g-temp-2 500)		;score of current dropsite
				(up-get-point position-object g-point-x)
				(up-get-point-distance g-point-x g-target-enemy-x g-temp-4)
				(up-modify-goal g-temp-4 c:* 3)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				(up-get-point-distance g-point-x g-gather-point-x g-temp-4)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				)
				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow donjon)
				(up-set-target-object search-local g: i)
				(up-object-data object-data-type == lumber-camp)
				=>
				(set-goal g-temp-2 480)
				(up-get-point position-object g-point-x)
				(up-get-point-distance g-point-x g-target-enemy-x g-temp-4)
				(up-modify-goal g-temp-4 c:* 3)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				(up-get-point-distance g-point-x g-gather-point-x g-temp-4)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				)
				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow donjon)
				(up-set-target-object search-local g: i)
				(up-object-data object-data-type == mill)
				=>
				(set-goal g-temp-2 440)
				(up-get-point position-object g-point-x)
				(up-get-point-distance g-point-x g-target-enemy-x g-temp-4)
				(up-modify-goal g-temp-4 c:* 3)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				(up-get-point-distance g-point-x g-gather-point-x g-temp-4)
				(up-modify-goal g-temp-2 g:- g-temp-4)
				)

				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow donjon)
				(up-set-target-object search-local g: i)
				(up-compare-goal g-temp-2 g:> g-temp)
				=>
				(up-get-object-data object-data-id j)
				(up-modify-goal g-temp g:= g-temp-2)
				)

				(defrule
				(goal g-temp-3 9986)
				(can-build-with-escrow donjon)
				(up-compare-goal i < 25)
				=>
				(up-modify-goal i c:+ 1)
				(up-jump-rule -5)
				)
			
			;Dropsite nearby, check if it's closer than g-gather-point-x
			(defrule
			(goal g-temp-3 9986)
			(can-build-with-escrow donjon)
			(up-set-target-by-id g: j)
			(up-compare-goal g-place-control-rule-id > 0)
			=>
			(up-get-point position-object g-point-x)
			(up-lerp-tiles g-point-x g-target-enemy-x c: 2)
			(up-copy-point g-place-point-x g-point-x)
			(up-set-target-point g-place-point-x)
			(set-goal g-place-point-used YES)
			(set-strategic-number sn-placement-fail-delta 0)
			(up-build place-point g-escrow c: donjon)
			; (chat-to-player my-player-number CHAT-BUILD-TOWER-BY-DROPSITE)
			; (up-send-flare g-place-point-x)
			(up-jump-direct g: g-place-control-rule-id)
			)

		#end-if

;=========================<>=========================
;				    PLACE CONTROL
;=========================<>=========================

	;-----------------
	;	Get Rule Id
	;-----------------

		(defrule
		(true)
		=>
		(up-get-rule-id g-place-control-rule-id)
		(disable-self)
		)

	;-----------------
	;	Town Center
	;-----------------

		(load "The General 3.1/Functions/Reset")

		(defrule
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(up-pending-objects c: town-center < 2)
		=>
		(up-full-reset-search)
		(up-set-target-point g-position-self-x)
		(up-find-local c: town-center c: 10)
		(up-find-local c: lumber-camp c: 40)
		(up-clean-search search-local object-data-distance search-order-desc)
		)

		(defrule
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(up-pending-objects c: town-center < 2)
		(building-type-count-total town-center < 3)
		(up-set-target-object search-local c: 0)
		=>
		(up-set-target-point g-position-self-x)
		(up-get-object-data object-data-distance g-temp)
		(up-modify-sn sn-lumber-camp-max-distance g:= g-temp)
		(up-modify-sn sn-lumber-camp-max-distance c:+ 10)
		(up-modify-sn sn-lumber-camp-max-distance c:max 12)
		(up-modify-sn sn-lumber-camp-max-distance c:min 24)
		)

		(defrule
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(up-pending-objects c: town-center < 2)
		(building-type-count-total town-center >= 3)
		(up-set-target-object search-local c: 0)
		=>
		(up-set-target-point g-position-self-x)
		(up-get-object-data object-data-distance g-temp)
		(up-modify-sn sn-lumber-camp-max-distance g:= g-temp)
		(up-modify-sn sn-lumber-camp-max-distance c:+ 10)
		(up-modify-sn sn-lumber-camp-max-distance c:max 25)
		(up-modify-sn sn-lumber-camp-max-distance c:min 50)
		)

		(load "The General 3.1/Functions/Reset")

		(defrule
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(building-type-count-total town-center == 1)
		(up-pending-objects c: town-center < 2)
		=>
		(up-full-reset-search)
		(up-set-target-point g-position-self-x)
		(up-find-local c: town-center c: 10)
		(up-find-local c: mining-camp c: 40)
		(up-clean-search search-local object-data-distance search-order-desc)
		)

		(defrule
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(building-type-count-total town-center == 1)
		(up-pending-objects c: town-center < 2)
		(up-set-target-object search-local c: 0)
		=>
		(up-set-target-point g-position-self-x)
		(up-get-object-data object-data-distance g-temp)
		(up-modify-sn sn-mining-camp-max-distance g:= g-temp)
		(up-modify-sn sn-mining-camp-max-distance c:+ 10)
		(up-modify-sn sn-mining-camp-max-distance c:max 12)
		(up-modify-sn sn-mining-camp-max-distance c:min 24)
		)

		(defrule
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(building-type-count-total town-center == 1)
		(up-compare-goal g-current-gold-camp-total < 2)
		(up-pending-objects c: town-center < 2)
		=>
		(set-strategic-number sn-dropsite-separation-distance 8)
		(set-strategic-number sn-town-center-placement mining-camp)
		(set-strategic-number sn-stone-dropsite-distance 200)
		(up-assign-builders c: town-center-foundation c: 4)
		(release-escrow wood)
		(release-escrow stone)
		(build town-center)
		; (chat-to-player my-player-number CHAT-BUILD-BACKUP-TC-GOLD)
		)

		(defrule
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(or
			(wood-amount > 300)
			(building-type-count-total town-center != 1))
		(up-pending-objects c: town-center < 2)
		=>
		(set-strategic-number sn-dropsite-separation-distance 8)
		(set-strategic-number sn-town-center-placement lumber-camp)
		(up-assign-builders c: town-center-foundation c: 4)
		(release-escrow wood)
		(release-escrow stone)
		(build town-center)
		; (chat-to-player my-player-number CHAT-BUILD-BACKUP-TC-WOOD)
		)

		(defrule
		(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
		(or
			(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
			(can-afford-building watch-tower))
		(can-build-with-escrow town-center)
		(building-type-count-total town-center == 1)
		(up-compare-goal g-current-gold-camp-total >= 2)
		(up-pending-objects c: town-center < 2)
		=>
		(set-strategic-number sn-dropsite-separation-distance 8)
		(set-strategic-number sn-town-center-placement lumber-camp)
		(up-assign-builders c: town-center-foundation c: 4)
		(release-escrow wood)
		(release-escrow stone)
		(build town-center)
		; (chat-to-player my-player-number CHAT-BUILD-BACKUP-TC-WOOD)
		)

	;---------------------------------
	;	Skip Place Control if no TC
	;---------------------------------
		
		;Default is to place buildings with up-build-line
		;Only allow backup place-control rules to run every 10 seconds
		; (defrule
		; (up-timer-status t-5-sec == timer-running)
		; (up-compare-goal g-place-forward-rule-id > 0)
		; =>
		; (up-jump-direct g: g-place-forward-rule-id)
		; )

		(defrule
		(building-type-count town-center == 0)	;most of the up-set-placement-data commands below rely on a TC
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-jump-direct g: g-place-forward-rule-id)
		)
	
	;-------------
	;	Wonders
	;-------------

		(defrule
		(up-object-type-count-total c: wonder g:< g-desired-num-wonder)
		(can-build-with-escrow wonder)
		(up-pending-objects c: wonder < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-set-placement-data my-player-number -1 c: -25)
		(up-modify-sn sn-placement-zone-size c:= 15)
		(up-assign-builders c: wonder c: 45)
		(release-escrow wood)
		(release-escrow gold)
		(release-escrow stone)
		(up-build place-control 0 c: wonder)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: wonder)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		
	;------------
	;	Castle
	;------------

		(defrule
		(up-object-type-count-total c: castle g:< g-desired-num-castle)
		(can-build-with-escrow castle)
		(up-pending-objects c: castle < 1)
		(building-type-count-total castle == 0)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-set-placement-data my-player-number -1 c: 13)
		(set-strategic-number sn-placement-zone-size 8)
		(set-strategic-number sn-placement-fail-delta 1)
		(up-assign-builders c: castle c: 4)
		(up-build place-control g-escrow c: castle)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: castle)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		(defrule
		(up-object-type-count-total c: castle g:< g-desired-num-castle)
		(can-build-with-escrow castle)
		(up-pending-objects c: castle < 1)
		(building-type-count-total castle > 0)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-set-placement-data my-player-number -1 s: custom-sn-peaceful-town-size)
		(up-modify-sn sn-placement-zone-size c:= 8)
		(set-strategic-number sn-placement-fail-delta 1)
		(up-assign-builders c: castle c: 4)
		(up-build place-control g-escrow c: castle)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: castle)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)
		
	;-------------
	;	Krepost
	;-------------

		#load-if-defined BULGARIANS-CIV

			(defrule
			(up-object-type-count-total c: krepost g:< g-desired-num-krepost)
			(can-build-with-escrow krepost)
			(up-pending-objects c: krepost < 1)
			(building-type-count-total krepost == 0)
			(up-compare-goal g-place-forward-rule-id > 0)
			=>
			(up-set-placement-data my-player-number -1 c: 13)
			(set-strategic-number sn-placement-zone-size 8)
			(set-strategic-number sn-placement-fail-delta 1)
			(up-assign-builders c: krepost c: 4)
			(up-build place-control g-escrow c: krepost)
			(up-jump-direct g: g-place-forward-rule-id)
			(up-store-type-name c: krepost)
			; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
			)

			(defrule
			(up-object-type-count-total c: krepost g:< g-desired-num-krepost)
			(can-build-with-escrow krepost)
			(up-pending-objects c: krepost < 1)
			(building-type-count-total krepost > 0)
			(up-compare-goal g-place-forward-rule-id > 0)
			=>
			(up-set-placement-data my-player-number -1 s: custom-sn-peaceful-town-size)
			(up-modify-sn sn-placement-zone-size c:= 8)
			(set-strategic-number sn-placement-fail-delta 1)
			(up-assign-builders c: krepost c: 4)
			(up-build place-control g-escrow c: krepost)
			(up-jump-direct g: g-place-forward-rule-id)
			(up-store-type-name c: krepost)
			; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
			)

		#end-if

	;--------------------
	;	Siege Workshop
	;--------------------

		(defrule
		(up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
		(or
			(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
			(goal g-game-focus AGGRESSIVE))
		(can-build-with-escrow siege-workshop)
		(up-pending-objects c: siege-workshop < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus != DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: 8)
		)

		(defrule
		(up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
		(or
			(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
			(goal g-game-focus AGGRESSIVE))
		(can-build-with-escrow siege-workshop)
		(up-pending-objects c: siege-workshop < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(goal g-game-focus DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		)

		(defrule
		(up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
		(or
			(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
			(goal g-game-focus AGGRESSIVE))
		(can-build-with-escrow siege-workshop)
		(up-pending-objects c: siege-workshop < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: siege-workshop c: 1)
		(up-build place-control g-escrow c: siege-workshop)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: siege-workshop)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

	;----------------
	;	University
	;----------------

		(defrule
		(up-object-type-count-total c: university g:< g-desired-num-university)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(can-build-with-escrow university)
		(up-pending-objects c: university < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: university c: 1)
		(up-build place-control g-escrow c: university)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: university)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

	;---------------
	;	Monastery
	;---------------

		(defrule
		(up-object-type-count-total c: monastery g:< g-desired-num-monastery)
		(goal g-primary-unit monk)
		(can-build-with-escrow monastery)
		(up-pending-objects c: monastery < 1)
		(up-compare-goal g-desired-num-monks > 0)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control g-escrow c: monastery)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: monastery)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		(defrule
		(up-object-type-count-total c: monastery g:< g-desired-num-monastery)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(up-object-type-count-total c: university g:>= g-desired-num-university)
		(can-build-with-escrow monastery)
		(up-pending-objects c: monastery < 1)
		(up-compare-goal g-desired-num-monks > 0)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control g-escrow c: monastery)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: monastery)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

	;--------------
	;	Barracks
	;--------------

		(load "The General 3.1/Functions/Reset")

		(defrule
		(or
			(goal g-game-focus AGGRESSIVE)
			(or
				(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
				(building-type-count-total barracks == 0)))
		(goal g-primary-unit-class infantry-class)
		(up-compare-goal g-primary-unit != my-unique-unit)
		(up-object-type-count-total c: barracks g:< g-desired-num-barracks)
		(building-type-count-total barracks < 2)
		(can-build-with-escrow barracks)
		(up-pending-objects c: barracks < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(set-goal i 573428)
		(up-store-type-name c: barracks)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		(defrule
		(true)
		=>
		(set-goal g-temp 100)
		(set-goal g-temp-2 100)
		(set-goal g-temp-3 100)
		)

		(defrule
		(up-compare-goal g-desired-num-barracks > 0)
		=>
		(up-get-fact building-type-count-total barracks g-temp)
		(up-modify-goal g-temp g:%/ g-desired-num-barracks)
		)

		(defrule
		(up-compare-goal g-desired-num-archery-range > 0)
		=>
		(up-get-fact building-type-count-total archery-range g-temp-2)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-archery-range)
		)

		(defrule
		(up-compare-goal g-desired-num-stable > 0)
		=>
		(up-get-fact building-type-count-total stable g-temp-3)
		(up-modify-goal g-temp-3 g:%/ g-desired-num-stable)
		)

		(defrule
		(up-object-type-count-total c: barracks g:< g-desired-num-barracks)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(up-compare-goal g-temp g:<= g-temp-2)
		(up-compare-goal g-temp g:<= g-temp-3)
		(can-build-with-escrow barracks)
		(up-pending-objects c: barracks < 2)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(set-goal i 573428)
		(up-store-type-name c: barracks)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		;With Escrow
		(defrule
		(goal i 573428)
		(can-build-with-escrow barracks)
		(up-pending-objects c: barracks < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus != DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: 5)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: barracks c: 1)
		(up-build place-control g-escrow c: barracks)
		(up-jump-direct g: g-place-forward-rule-id)
		)
		(defrule
		(goal i 573428)
		(can-build-with-escrow barracks)
		(up-pending-objects c: barracks < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus == DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: barracks c: 1)
		(up-build place-control g-escrow c: barracks)
		(up-jump-direct g: g-place-forward-rule-id)
		)

		;Without Escrow
		(defrule
		(up-object-type-count-total c: barracks g:< g-desired-num-barracks)
		(can-build barracks)
		(up-pending-objects c: barracks < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus != DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: 5)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: barracks c: 1)
		(up-build place-control 0 c: barracks)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: barracks)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)
		(defrule
		(up-object-type-count-total c: barracks g:< g-desired-num-barracks)
		(can-build barracks)
		(up-pending-objects c: barracks < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus == DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: barracks c: 1)
		(up-build place-control 0 c: barracks)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: barracks)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

	;-------------------
	;	Archery Range
	;-------------------

		(load "The General 3.1/Functions/Reset")

		(defrule
		(true)
		=>
		(up-assign-builders c: archery-range c: 1)
		)

		(defrule
		(goal g-strategy-type FAST-CASTLE)
		(building-type-count archery-range == 0)
		(current-age == feudal-age)
		=>
		(up-assign-builders c: archery-range c: 2)
		)

		(defrule
		(or
			(up-object-type-count-total c: archery-range g:>= g-desired-num-archery-range)
			(or
				(building-type-count-total archery-range >= 2)
				(or
					(not
						(can-build-with-escrow archery-range))
					(or
						(up-pending-objects c: archery-range >= 1)
						(or
							(building-type-count town-center == 0)
							(up-compare-goal g-place-forward-rule-id <= 0))))))
		=>
		(up-jump-rule 2)
		)

			(defrule
			(or
				(goal g-primary-unit archer)
				(or
					(goal g-primary-unit skirmisher)
					(goal g-primary-unit cavalry-archer)))
			(or
				(goal g-game-focus AGGRESSIVE)
				(or
					(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
					(building-type-count-total archery-range == 0)))
			=>
			(set-goal i 573429)
			(up-store-type-name c: archery-range)
			; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
			)

			(defrule
			(or
				(goal g-primary-unit hand-cannoneer)
				(or
					(goal g-primary-unit slinger)
					(goal g-primary-unit genitour)))
			(or
				(goal g-game-focus AGGRESSIVE)
				(or
					(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
					(building-type-count-total archery-range == 0)))
			=>
			(set-goal i 573429)
			(up-store-type-name c: archery-range)
			; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
			)

		(defrule
		(up-compare-goal g-desired-num-archery-range > 0)
		(building-type-count-total archery-range == 0)
		(or
			(building-type-count-total stable > 0)
			(up-compare-goal g-primary-unit-class != cavalry-class))
		(can-build-with-escrow archery-range)
		(up-pending-objects c: archery-range < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(set-goal i 573429)
		(up-store-type-name c: archery-range)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		(defrule
		(true)
		=>
		(set-goal g-temp 100)
		(set-goal g-temp-2 100)
		(set-goal g-temp-3 100)
		)

		(defrule
		(up-compare-goal g-desired-num-barracks > 0)
		=>
		(up-get-fact building-type-count-total barracks g-temp)
		(up-modify-goal g-temp g:%/ g-desired-num-barracks)
		)

		(defrule
		(up-compare-goal g-desired-num-archery-range > 0)
		=>
		(up-get-fact building-type-count-total archery-range g-temp-2)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-archery-range)
		)

		(defrule
		(up-compare-goal g-desired-num-stable > 0)
		=>
		(up-get-fact building-type-count-total stable g-temp-3)
		(up-modify-goal g-temp-3 g:%/ g-desired-num-stable)
		)

		(defrule
		(up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(up-object-type-count-total c: university g:>= g-desired-num-university)
		(up-compare-goal g-temp-2 g:<= g-temp)
		(up-compare-goal g-temp-2 g:<= g-temp-3)
		(can-build-with-escrow archery-range)
		(up-pending-objects c: archery-range < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(set-goal i 573429)
		(up-store-type-name c: archery-range)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		;With Escrow
		(defrule
		(goal i 573429)
		(can-build-with-escrow archery-range)
		(up-pending-objects c: archery-range < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus != DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: 5)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control g-escrow c: archery-range)
		(up-jump-direct g: g-place-forward-rule-id)
		)
		(defrule
		(goal i 573429)
		(can-build-with-escrow archery-range)
		(up-pending-objects c: archery-range < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus == DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control g-escrow c: archery-range)
		(up-jump-direct g: g-place-forward-rule-id)
		)

		;Without Escrow
		(defrule
		(up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
		(can-build archery-range)
		(up-pending-objects c: archery-range < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus != DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: 5)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control 0 c: archery-range)
		(up-jump-direct g: g-place-forward-rule-id)
		)
		(defrule
		(up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
		(can-build archery-range)
		(up-pending-objects c: archery-range < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus == DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control 0 c: archery-range)
		(up-jump-direct g: g-place-forward-rule-id)
		)

	;------------
	;	Stable
	;------------

		(load "The General 3.1/Functions/Reset")

		(defrule
		(true)
		=>
		(up-assign-builders c: stable c: 1)
		)

		(defrule
		(goal g-strategy-type FAST-CASTLE)
		(building-type-count stable == 0)
		(current-age == feudal-age)
		=>
		(up-assign-builders c: stable c: 2)
		)

		(defrule
		(goal g-primary-unit-class cavalry-class)
		(up-compare-goal g-primary-unit != my-unique-unit)
		(or
			(goal g-game-focus AGGRESSIVE)
			(or
				(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
				(building-type-count-total stable == 0)))
		(up-object-type-count-total c: stable g:< g-desired-num-stable)
		(building-type-count-total stable < 2)
		(can-build-with-escrow stable)
		(up-pending-objects c: stable < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(set-goal i 573430)
		(up-store-type-name c: stable)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		(defrule
		(up-compare-goal g-desired-num-stable > 0)
		(building-type-count-total stable == 0)
		(or
			(building-type-count archery-range > 0)
			(up-compare-goal g-desired-num-archery-range == 0))
		(can-build-with-escrow stable)
		(up-pending-objects c: stable < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(set-goal i 573430)
		(up-store-type-name c: stable)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		(defrule
		(true)
		=>
		(set-goal g-temp 100)
		(set-goal g-temp-2 100)
		(set-goal g-temp-3 100)
		)

		(defrule
		(up-compare-goal g-desired-num-barracks > 0)
		=>
		(up-get-fact building-type-count-total barracks g-temp)
		(up-modify-goal g-temp g:%/ g-desired-num-barracks)
		)

		(defrule
		(up-compare-goal g-desired-num-archery-range > 0)
		=>
		(up-get-fact building-type-count-total archery-range g-temp-2)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-archery-range)
		)

		(defrule
		(up-compare-goal g-desired-num-stable > 0)
		=>
		(up-get-fact building-type-count-total stable g-temp-3)
		(up-modify-goal g-temp-3 g:%/ g-desired-num-stable)
		)

		(defrule
		(up-object-type-count-total c: stable g:< g-desired-num-stable)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(up-compare-goal g-temp-3 g:<= g-temp)
		(up-compare-goal g-temp-3 g:<= g-temp-2)
		(can-build-with-escrow stable)
		(up-pending-objects c: stable < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(set-goal i 573430)
		(up-store-type-name c: stable)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		;With Escrow
		(defrule
		(goal i 573430)
		(can-build-with-escrow stable)
		(up-pending-objects c: stable < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus != DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: 5)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control g-escrow c: stable)
		(up-jump-direct g: g-place-forward-rule-id)
		)
		(defrule
		(goal i 573430)
		(can-build-with-escrow stable)
		(up-pending-objects c: stable < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus == DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control g-escrow c: stable)
		(up-jump-direct g: g-place-forward-rule-id)
		)

		;Without Escrow
		(defrule
		(up-object-type-count-total c: stable g:< g-desired-num-stable)
		(can-build stable)
		(up-pending-objects c: stable < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus != DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: 5)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: stable c: 1)
		(up-build place-control 0 c: stable)
		(up-jump-direct g: g-place-forward-rule-id)
		)
		(defrule
		(up-object-type-count-total c: stable g:< g-desired-num-stable)
		(can-build stable)
		(up-pending-objects c: stable < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus == DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-assign-builders c: stable c: 1)
		(up-build place-control 0 c: stable)
		(up-jump-direct g: g-place-forward-rule-id)
		)

	;------------
	;	Market
	;------------

		(defrule
		(current-age >= feudal-age)
		=>
		(up-assign-builders c: market c: 1)
		(up-setup-cost-data 1 g-food-cost)
		(up-add-object-cost c: town-center-foundation c: 1)
		)

		(defrule
		(goal g-strategy-type FAST-CASTLE)
		(building-type-count market == 0)
		(current-age == feudal-age)
		=>
		(up-assign-builders c: market c: 2)
		)

		(defrule
		(up-object-type-count-total c: market g:< g-desired-num-market)
		(or
			(wood-amount g:>= g-wood-cost)	;cost of town center
			(and
				(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
				(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)))
		(building-type-count-total market == 0)
		(can-build-with-escrow market)
		(up-pending-objects c: market < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus != DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -5)
		)

		(defrule
		(up-object-type-count-total c: market g:< g-desired-num-market)
		(or
			(wood-amount g:>= g-wood-cost)	;cost of town center
			(and
				(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
				(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)))
		(building-type-count-total market == 0)
		(can-build-with-escrow market)
		(up-pending-objects c: market < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(goal g-game-focus DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		)

		(defrule
		(up-object-type-count-total c: market g:< g-desired-num-market)
		(or
			(wood-amount g:>= g-wood-cost)	;cost of town center
			(and
				(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
				(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)))
		(building-type-count-total market == 0)
		(can-build-with-escrow market)
		(up-pending-objects c: market < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control g-escrow c: market)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: market)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

		(defrule
		(up-object-type-count-total c: market g:< g-desired-num-market)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(building-type-count-total market >= 1)
		(can-build-with-escrow market)
		(up-pending-objects c: market < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(set-strategic-number sn-placement-to-center 1)
		(set-strategic-number sn-placement-zone-size 5)
		(up-set-placement-data my-player-number -1 c: -128)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control g-escrow c: market)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: market)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

	;----------------
	;	Blacksmith
	;----------------

		(defrule
		(true)
		=>
		(up-assign-builders c: blacksmith c: 1)
		)

		(defrule
		(current-age == feudal-age)
		(up-compare-goal g-strategy-type >= FAST-CASTLE)
		=>
		(up-assign-builders c: blacksmith c: 2)
		)

		(defrule
		(up-object-type-count-total c: blacksmith g:< g-desired-num-blacksmith)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(or
			(goal g-desired-num-barracks 0)
			(building-type-count-total barracks > 0))
		(can-build-with-escrow blacksmith)
		(up-pending-objects c: blacksmith < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(up-compare-goal g-game-focus != DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: 5)
		)

		(defrule
		(up-object-type-count-total c: blacksmith g:< g-desired-num-blacksmith)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(or
			(goal g-desired-num-barracks 0)
			(building-type-count-total barracks > 0))
		(can-build-with-escrow blacksmith)
		(up-pending-objects c: blacksmith < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		(goal g-game-focus DEFENSIVE)
		=>
		(up-set-placement-data my-player-number -1 c: -8)
		)

		(defrule
		(up-object-type-count-total c: blacksmith g:< g-desired-num-blacksmith)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(or
			(goal g-desired-num-barracks 0)
			(building-type-count-total barracks > 0))
		(can-build-with-escrow blacksmith)
		(up-pending-objects c: blacksmith < 1)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 0)
		(up-build place-control g-escrow c: blacksmith)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: blacksmith)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

	;-------------------
	;	Bombard Tower
	;-------------------

		(defrule
		(up-object-type-count-total c: bombard-tower g:< g-desired-num-bombard-tower)
		(can-build bombard-tower)
		(up-pending-objects c: bombard-tower < 2)
		(up-compare-goal g-place-forward-rule-id > 0)
		=>
		(up-set-placement-data my-player-number -1 c: 20)
		(up-modify-sn sn-placement-zone-size c:= 5)
		(set-strategic-number sn-placement-fail-delta 1)
		(up-assign-builders c: bombard-tower c: 1)
		(up-build place-control 0 c: bombard-tower)
		(up-jump-direct g: g-place-forward-rule-id)
		(up-store-type-name c: bombard-tower)
		; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		)

	;-----------------
	;	Watch Tower
	;-----------------

		; #load-if-not-defined SICILIANS-CIV

		; 	(defrule
		; 	(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)
		; 	(up-compare-goal g-watch-tower-line > 0)
		; 	(can-build watch-tower)
		; 	(up-pending-objects c: watch-tower < 2)
		; 	(up-compare-goal g-place-forward-rule-id > 0)
		; 	=>
		; 	(up-set-placement-data my-player-number -1 c: 20)
		; 	(up-modify-sn sn-placement-zone-size c:= 5)
		; 	(set-strategic-number sn-placement-fail-delta 1)
		; 	(up-assign-builders c: watch-tower c: 1)
		; 	(up-build place-control 0 c: watch-tower)
		; 	(up-jump-direct g: g-place-forward-rule-id)
		; 	(up-store-type-name c: watch-tower)
		; 	; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		; 	)

		; #end-if

	;------------
	;	Donjon
	;------------

		; #load-if-defined SICILIANS-CIV

		; 	(defrule
		; 	(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)	;g-watch-tower-line counts donjons
		; 	(up-compare-goal g-watch-tower-line > 0)
		; 	(can-build watch-tower)
		; 	(up-pending-objects c: watch-tower < 2)
		; 	(up-compare-goal g-place-forward-rule-id > 0)
		; 	=>
		; 	(up-set-placement-data my-player-number -1 c: 20)
		; 	(up-modify-sn sn-placement-zone-size c:= 5)
		; 	(set-strategic-number sn-placement-fail-delta 1)
		; 	(up-assign-builders c: watch-tower c: 1)
		; 	(up-build place-control 0 c: watch-tower)
		; 	(up-jump-direct g: g-place-forward-rule-id)
		; 	(up-store-type-name c: donjon)
		; 	; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
		; 	)

		; #end-if

	;-----------
	;	House
	;-----------

		#load-if-not-defined HUN-CIV
	
			;get number of additional houses needed (stored in g-temp)
			(defrule
			(true)
			=>
			(up-modify-goal g-temp g:= g-desired-num-house)
			(up-get-fact building-type-count house g-temp-2)
			(up-get-fact building-type-count-total house g-temp-3)
			(up-modify-goal g-temp g:- g-temp-2)
			(up-modify-goal g-temp-3 g:- g-temp-2)
			(up-modify-goal g-temp c:max 0)
			)

			(defrule
			(up-compare-goal g-temp >= 2)
			(building-type-count house >= 2)
			=>
			(up-assign-builders c: house g: g-temp)
			)

			(defrule
			(up-compare-goal g-temp < 2)
			(building-type-count house >= 2)
			=>
			(up-assign-builders c: house c: 1)
			)

			(defrule
			(up-object-type-count-total c: house g:< g-desired-num-house)
			(can-build-with-escrow house)
			; (up-pending-objects c: house g:< g-temp)
			(up-compare-goal g-temp-3 g:< g-temp)
			(game-time > 5)
			(up-compare-goal g-game-focus != DEFENSIVE)
			=>
			(up-set-placement-data my-player-number -1 c: 5)
			(set-strategic-number sn-placement-fail-delta 0)
			)

			(defrule
			(up-object-type-count-total c: house g:< g-desired-num-house)
			(can-build-with-escrow house)
			; (up-pending-objects c: house g:< g-temp)
			(up-compare-goal g-temp-3 g:< g-temp)
			(game-time > 5)
			(goal g-game-focus DEFENSIVE)
			=>
			(up-set-placement-data my-player-number -1 c: -5)
			(set-strategic-number sn-placement-fail-delta 0)
			)

			(defrule
			(up-object-type-count-total c: house g:< g-desired-num-house)
			(can-build-with-escrow house)
			; (up-pending-objects c: house g:< g-temp)
			(up-compare-goal g-temp-3 g:< g-temp)
			(game-time > 5)
			=>
			(set-strategic-number sn-placement-zone-size 5)
			(up-build place-control g-escrow c: house)
			(up-store-type-name c: house)
			; (up-chat-data-to-player my-player-number CHAT-BUILD-BACKUP-BUILDING c: 7031232)
			)

		#end-if

;=========================<>=========================
;				    PLACE FORWARD
;=========================<>=========================

	;-----------------
	;	Get Rule Id
	;-----------------

		(defrule
		(true)
		=>
		(up-get-rule-id g-place-forward-rule-id)
		(disable-self)
		)

	;--------------------
	;	Siege Workshop
	;--------------------

		; (defrule
		; (up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
		; (goal g-game-focus AGGRESSIVE)
		; (can-build-with-escrow siege-workshop)
		; (up-pending-objects c: siege-workshop < 1)
		; (military-population >= 12)
		; (up-compare-goal g-target-military-parity >= 8)
		; (up-compare-goal g-target-pop-parity >= 20)
		; (goal g-attacking YES)
		; =>
		; (up-assign-builders c: siege-workshop c: 2)
		; (up-build place-forward g-escrow c: siege-workshop)
		; )

;=========================<>=========================
;				     PLACE NORMAL
;=========================<>=========================

	;----------
	;	Mill
	;----------

		;Farming mill
		(defrule
		(up-object-type-count-total c: mill g:< g-desired-num-mill)
		(up-pending-objects c: mill == 0)
		(unit-type-count villager-forager == 0)
		(current-age >= feudal-age)
		(up-compare-goal g-usable-farm-count > 4)
		(can-build mill)
		=>
		(set-strategic-number sn-preferred-mill-placement 0)
		(up-assign-builders c: mill c: 1)
		(set-strategic-number sn-allow-adjacent-dropsites 1)
		(build mill)
		; (chat-to-player my-player-number CHAT-MILL-FARMING)
		)

		;Backup mill
		(defrule
		(up-object-type-count-total c: mill g:< g-desired-num-mill)
		(or
			(up-compare-goal g-desired-num-farm > 0)
			(up-compare-goal g-age-status >= SAVE-FOR-FEUDAL))
		(building-type-count-total mill == 0)
		(up-pending-objects c: mill == 0)
		(can-build mill)
		=>
		(set-strategic-number sn-preferred-mill-placement 0)
		(up-assign-builders c: mill c: 1)
		(set-strategic-number sn-allow-adjacent-dropsites 1)
		(build mill)
		; (chat-to-player my-player-number CHAT-MILL-BACKUP)
		)

	;-----------
	;	Farms
	;-----------

		(load "The General 3.1/Functions/Reset")

		;Dark Age
		(defrule
		(current-age == dark-age)
		(building-type-count-total lumber-camp > 0)
		(can-build farm)
		(up-compare-goal g-usable-farm-count-total g:< g-desired-num-farm)
		(up-pending-objects c: farm < 2)
		(wood-amount > 275)
		(idle-farm-count == 0)
		=>
		(build farm)
		)

		(defrule
		(current-age == dark-age)
		(building-type-count-total lumber-camp > 0)
		(can-build farm)
		(up-compare-goal g-usable-farm-count-total g:< g-desired-num-farm)
		(up-pending-objects c: farm < 2)
		(up-object-type-count-total c: lumber-camp g:>= g-desired-num-lumber-camp)
		(up-object-type-count-total c: mining-camp g:>= g-desired-num-mining-camp)
		(up-object-type-count-total c: barracks g:>= g-desired-num-barracks)
		(up-object-type-count-total c: dock g:>= g-desired-num-dock)
		(idle-farm-count == 0)
		=>
		(build farm)
		)

		;Feudal Age
		(defrule
		(current-age == feudal-age)
		(building-type-count-total lumber-camp > 0)
		(can-build farm)
		(up-compare-goal g-usable-farm-count-total g:< g-desired-num-farm)
		(up-pending-objects c: farm < 2)
		(or
			(up-research-status c: ri-horse-collar != research-available)
			(goal g-strategy-type FAST-CASTLE))
		(wood-amount > 275)
		(idle-farm-count == 0)
		=>
		(build farm)
		)

		(defrule
		(current-age == feudal-age)
		(up-object-type-count-total c: lumber-camp g:>= g-desired-num-lumber-camp)
		(up-object-type-count-total c: mining-camp g:>= g-desired-num-mining-camp)
		(up-object-type-count-total c: barracks g:>= g-desired-num-barracks)
		(up-object-type-count-total c: dock g:>= g-desired-num-dock)
		(up-object-type-count-total c: archery-range g:>= g-desired-num-archery-range)
		(up-object-type-count-total c: stable g:>= g-desired-num-stable)
		(up-object-type-count-total c: blacksmith g:>= g-desired-num-blacksmith)
		(up-object-type-count-total c: market g:>= g-desired-num-market)
		=>
		(set-goal g-temp-2 1234)
		)

		(defrule
		(goal g-temp-2 1234)
		(current-age == feudal-age)
		(building-type-count-total lumber-camp > 0)
		(can-build farm)
		(up-pending-objects c: farm < 2)
		(up-compare-goal g-usable-farm-count-total g:< g-desired-num-farm)
		(or
			(up-research-status c: ri-horse-collar != research-available)
			(goal g-strategy-type FAST-CASTLE))
		(idle-farm-count == 0)
		=>
		(build farm)
		)

		;Castle/Imperial Age
		(defrule
		(current-age >= castle-age)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(can-build-with-escrow farm)
		(up-pending-objects c: farm < 3)
		(up-compare-goal g-usable-farm-count-total g:< g-desired-num-farm)
		(idle-farm-count == 0)
		=>
		(up-build place-normal g-escrow c: farm)
		)

		(defrule
		(current-age >= castle-age)
		(building-type-count-total lumber-camp > 0)
		(can-build farm)
		(up-pending-objects c: farm < 3)
		(up-compare-goal g-usable-farm-count-total g:< g-desired-num-farm)
		(or
			(up-research-status c: ri-horse-collar > research-available)
			(up-compare-goal g-usable-farm-count < 4))
		(idle-farm-count == 0)
		=>
		(build farm)
		)

		(defrule
		(up-pending-objects c: farm > 0)
		=>
		(up-get-fact building-type-count-total farm g-temp)
		(up-get-fact building-type-count farm g-temp-2)
		(up-modify-goal g-temp g:- g-temp-2)
		(up-assign-builders c: farm g: g-temp)
		)

		(defrule
		(idle-farm-count > 2)
		=>
		(up-delete-distant-farms c: 12)
		)

	;----------
	;	Dock
	;----------

		(defrule
		(up-object-type-count-total c: dock g:< g-desired-num-dock)
		(up-object-type-count-total c: barracks g:>= g-desired-num-barracks)
		(up-object-type-count-total c: town-center g:>= g-desired-num-town-center)
		(up-object-type-count-total c: siege-workshop g:>= g-desired-num-siege-workshop)
		(can-build dock)
		(up-pending-objects c: dock < 1)
		=>
		(build dock)
		)

	;-------------
	;	Outpost
	;-------------

		(defrule
		(up-object-type-count-total c: outpost g:< g-desired-num-outpost)
		(can-build outpost)
		(up-pending-objects c: outpost < 1)
		=>
		(build outpost)
		)