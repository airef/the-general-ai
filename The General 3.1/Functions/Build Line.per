;=========================<>=========================
;				        SETUP
;=========================<>=========================

	(load "The General 3.1/Functions/Reset")

	(defrule
	(up-compare-goal g-build-line-bldg != 0)
	(up-compare-goal g-build-line-bldg != town-center)
	(up-compare-goal g-build-line-bldg != gate)
	=>
	(up-modify-goal g-build-line-bldg-foundation g:= g-build-line-bldg)
	)

	(defrule
	(goal g-build-line-bldg town-center)
	=>
	(set-goal g-build-line-bldg-foundation town-center-foundation)
	)

	(defrule
	(goal g-build-line-bldg gate)
	=>
	(set-goal g-build-line-bldg-foundation gate-ascending)	;Needs to be changed later to account for direction, but this is a placeholder for now
	)

	(defrule
	(or
		(goal g-build-line-bldg palisade-wall)
		(goal g-build-line-bldg stone-wall-line))
	=>
	(set-goal g-build-line-size 0)		;one less than actual size to allow for buildings to be built adjacent to walls
	)

	(defrule
	(or
		(goal g-build-line-bldg watch-tower)
		(or
			(goal g-build-line-bldg bombard-tower)
			(or
				(goal g-build-line-bldg outpost)
				; (or
					; (goal g-build-line-bldg palisade-gate)
					(goal g-build-line-bldg gate))));)
	=>
	(set-goal g-build-line-size 1)
	)

	(defrule
	(or
		(goal g-build-line-bldg house)
		(or
			(goal g-build-line-bldg mill)
			(or
				(goal g-build-line-bldg mining-camp)
				(or
					(goal g-build-line-bldg lumber-camp)
					(or
						(goal g-build-line-bldg donjon)
						(goal g-build-line-bldg farm))))))	;one less than actual size to allow for buildings to be built adjacent to farms
	=>
	(set-goal g-build-line-size 2)
	)

	(defrule
	(or
		(goal g-build-line-bldg dock)
		(or
			(goal g-build-line-bldg blacksmith)
			(or
				(goal g-build-line-bldg monastery)
				(or
					(goal g-build-line-bldg barracks)
					(or
						(goal g-build-line-bldg archery-range)
						(or
							(goal g-build-line-bldg stable)
							(goal g-build-line-bldg krepost)))))))
	=>
	(set-goal g-build-line-size 3)
	)

	(defrule
	(or
		(goal g-build-line-bldg market)
		(or
			(goal g-build-line-bldg university)
			(or
				(goal g-build-line-bldg siege-workshop)
				(goal g-build-line-bldg castle))))
	=>
	(set-goal g-build-line-size 4)
	)

	(defrule
	(goal g-build-line-bldg wonder)
	=>
	(set-goal g-build-line-size 5)
	)

	(defrule
	(goal g-build-line-bldg town-center)
	=>
	(set-goal g-build-line-size 8)	;bigger than actual size to allow space for farms
	)

	(defrule
	(true)
	=>
	(up-modify-goal g-build-line-min-distance g:= g-build-line-size)
	(up-modify-goal g-build-line-min-distance c:/ 2)
	(up-modify-goal g-build-line-min-distance c:+ 5)
	(set-goal g-build-line-min-separation 1)
	)

	(defrule
	(goal g-build-line-type BUILD-LINE-CONTROL)
	(or
		(goal g-town-under-attack YES)
		(up-compare-goal g-enemy-units-in-town >= 3))
	(strategic-number sn-placement-to-center == 0)
	(up-compare-goal g-build-line-control-bldg-distance > 0)
	(up-compare-goal g-build-line-bldg != watch-tower)
	(up-compare-goal g-build-line-bldg != bombard-tower)
	(up-compare-goal g-build-line-bldg != castle)
	(up-compare-goal g-build-line-bldg != krepost)
	(up-compare-goal g-build-line-bldg != donjon)
	=>
	(up-modify-goal g-build-line-control-bldg-distance c:* -1)
	)

;=========================<>=========================
;		             PLACE NORMAL
;=========================<>=========================

	(load "The General 3.1/Functions/Reset")

	;Initialize loop variables
	(defrule
	(goal g-build-line-type BUILD-LINE-NORMAL)
	(building-type-count town-center > 0)
	(game-time > 5)
	=>
	(set-goal i 0)
	(set-goal j 0)
	)

	;Randomize x within custom-sn-peaceful-town-size
	(defrule
	(goal g-build-line-type BUILD-LINE-NORMAL)
	(building-type-count town-center > 0)
	(game-time > 5)
	=>
	(generate-random-number 1000)
	(up-get-fact random-number 0 g-point-x)
	(up-modify-goal g-temp s:= custom-sn-peaceful-town-size)
	(up-modify-goal g-temp c:+ 2)
	(up-modify-goal g-temp c:* 2)
	(up-modify-goal g-point-x g:mod g-temp)
	(up-modify-goal g-point-x s:- custom-sn-peaceful-town-size)
	)

	;Check if x coordinate is too close to TC
	(defrule
	(goal g-build-line-type BUILD-LINE-NORMAL)
	(building-type-count town-center > 0)
	(game-time > 5)
	(up-compare-goal i < 10)
	(up-modify-goal g-temp g:neg g-build-line-min-distance)
	(up-compare-goal g-point-x g:>= g-temp)
	(up-compare-goal g-point-x g:< g-build-line-min-distance)
	=>
	(set-goal g-point-x PENDING)
	(up-modify-goal i c:+ 1)
	(up-jump-rule -1)
	)

	;Randomize y within custom-sn-peaceful-town-size
	(defrule
	(goal g-build-line-type BUILD-LINE-NORMAL)
	(building-type-count town-center > 0)
	(game-time > 5)
	=>
	(generate-random-number 1000)
	(up-get-fact random-number 0 g-point-y)
	(up-modify-goal g-temp s:= custom-sn-peaceful-town-size)
	(up-modify-goal g-temp c:+ 2)
	(up-modify-goal g-temp c:* 2)
	(up-modify-goal g-point-y g:mod g-temp)
	(up-modify-goal g-point-y s:- custom-sn-peaceful-town-size)
	)

	;Check if y coordinate is too close to TC
	(defrule
	(goal g-build-line-type BUILD-LINE-NORMAL)
	(building-type-count town-center > 0)
	(game-time > 5)
	(up-compare-goal j < 10)
	(up-modify-goal g-temp g:neg g-build-line-min-distance)
	(up-compare-goal g-point-y g:>= g-temp)
	(up-compare-goal g-point-y g:< g-build-line-min-distance)
	=>
	(set-goal g-point-y PENDING)
	(up-modify-goal j c:+ 1)
	(up-jump-rule -1)
	)

	;Set starting point
	(defrule
	(goal g-build-line-type BUILD-LINE-NORMAL)
	(building-type-count town-center > 0)
	(game-time > 5)
	(up-compare-goal i < 10)
	(up-compare-goal j < 10)
	=>
	(up-add-point g-point-x g-position-self-x c: 1)
	(up-copy-point g-build-line-point-x g-point-x)
	(set-goal g-build-line-type BUILD-LINE-POINT-NORMAL)
	(set-goal g-build-line-expand-direction NO-DIRECTION)
	(set-goal g-build-line-zone-radius 0)
	(set-goal g-build-line-max-zone-radius 10)
	(set-goal g-build-line-allow-beyond-town NO)
	)

;=========================<>=========================
;		            PLACE CONTROL
;=========================<>=========================

	(load "The General 3.1/Functions/Reset")

	;----------------------------------
	;	Find primary reference point
	;----------------------------------

		;Reference is my TC
		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		(goal g-build-line-player my-player-number)
		(goal g-build-line-control-bldg -1)
		(building-type-count town-center > 0)
		=>
		(up-copy-point g-point-x g-position-self-x)
		)

		;Reference is another building owned by us
		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		(goal g-build-line-player my-player-number)
		(up-compare-goal g-build-line-control-bldg != -1)
		=>
		(up-full-reset-search)
		(up-find-local g: g-build-line-control-bldg c: 1)
		)

		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		(goal g-build-line-player my-player-number)
		(up-compare-goal g-build-line-control-bldg != -1)
		(up-set-target-object search-local c: 0)
		=>
		(up-get-point position-object g-point-x)
		)

		;Reference is another player's TC
		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		(up-compare-goal g-build-line-player != my-player-number)
		(goal g-build-line-control-bldg -1)
		=>
		(up-modify-sn sn-focus-player-number g:= g-build-line-player)
		(up-full-reset-search)
		(up-find-remote c: town-center c: 1)
		)

		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		(up-compare-goal g-build-line-player != my-player-number)
		(goal g-build-line-control-bldg -1)
		(up-set-target-object search-remote c: 0)
		=>
		(up-get-point position-object g-point-x)
		)

		;Reference is another player's building
		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		(up-compare-goal g-build-line-player != my-player-number)
		(up-compare-goal g-build-line-control-bldg != -1)
		=>
		(up-modify-sn sn-focus-player-number g:= g-build-line-player)
		(up-full-reset-search)
		(up-find-remote g: g-build-line-control-bldg c: 1)
		)

		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		(up-compare-goal g-build-line-player != my-player-number)
		(up-compare-goal g-build-line-control-bldg != -1)
		(up-set-target-object search-remote c: 0)
		=>
		(up-get-point position-object g-point-x)
		)

	;-----------------------------------------------------
	;	Find random point within sn-placement-zone-size
	;-----------------------------------------------------

		;Randomize x within sn-placement-zone-size
		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		=>
		(generate-random-number 1000)
		(up-get-fact random-number 0 g-point2-x)
		(up-modify-goal g-temp s:= sn-placement-zone-size)
		(up-modify-goal g-temp c:* 2)
		(up-modify-goal g-point2-x g:mod g-temp)
		(up-modify-goal g-point2-x s:- sn-placement-zone-size)
		)

		;Randomize y within sn-placement-zone-size
		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		=>
		(generate-random-number 1000)
		(up-get-fact random-number 0 g-point2-y)
		(up-modify-goal g-temp s:= sn-placement-zone-size)
		(up-modify-goal g-temp c:* 2)
		(up-modify-goal g-point2-y g:mod g-temp)
		(up-modify-goal g-point2-y s:- sn-placement-zone-size)
		)

		;Set point
		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		=>
		(up-add-point g-point-x g-point2-x c: 1)
		)

	;---------------------------------------------
	;	Lerp to find center point to build from
	;---------------------------------------------
		
		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		(strategic-number sn-placement-to-center == 0)
		=>
		(up-lerp-tiles g-point-x g-target-enemy-x g: g-build-line-control-bldg-distance)
		(up-copy-point g-build-line-point-x g-point-x)
		(set-goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(set-goal g-build-line-expand-direction NO-DIRECTION)
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 10)
		(set-goal g-build-line-allow-beyond-town YES)
		)
		
		(defrule
		(goal g-build-line-type BUILD-LINE-CONTROL)
		(game-time > 5)
		(strategic-number sn-placement-to-center == 1)
		=>
		(up-get-point position-center g-point2-x)
		(up-lerp-tiles g-point-x g-point2-x g: g-build-line-control-bldg-distance)
		(up-copy-point g-build-line-point-x g-point-x)
		(set-goal g-build-line-type BUILD-LINE-POINT-NORMAL)		;Use the normal Place Point code since we have calculated
		(set-goal g-build-line-expand-direction NO-DIRECTION)		;the point to start building from
		(set-goal g-build-line-zone-radius 0)
		(set-goal g-build-line-max-zone-radius 10)
		(set-goal g-build-line-allow-beyond-town YES)
		)

;=========================<>=========================
;		         PLACE POINT - NORMAL (also places place-normal and place-control)
;=========================<>=========================

	(load "The General 3.1/Functions/Reset")

	;Debug chat
	; (defrule
	; (goal g-build-line-type BUILD-LINE-POINT-NORMAL)
	; (up-can-build g-build-line-escrow g: g-build-line-bldg)
	; =>
	; (up-chat-data-to-self CHAT-BUILD-POINT-NORMAL g: g-build-line-bldg)
	; )
	
	(defrule
	(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
	=>
	(up-modify-goal i g:neg g-build-line-zone-radius)
	(up-modify-goal j g:neg g-build-line-zone-radius)
	(set-goal g-build-line-zone-radius 0)
	)
	
	;Store bottom right corner of the available build zone into g-point-x
	(defrule
	(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
	(up-can-build g-build-line-escrow g: g-build-line-bldg)
	(up-compare-goal g-build-line-point-x > -1)
	(up-compare-goal g-build-line-point-y > -1)
	=>
	(up-copy-point g-point-x g-build-line-point-x)
	(up-modify-goal g-point-x g:+ g-build-line-zone-radius)
	(up-modify-goal g-point-y g:+ g-build-line-zone-radius)
	)

		;Search for new building spot if enemy units or buildings are nearby
		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(building-type-count town-center > 0)
		=>
		(set-strategic-number sn-focus-player-number 1)
		(up-set-target-point g-point-x)
		)
		
			;Search for enemy units and military buildings
			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(building-type-count town-center > 0)
			(stance-toward focus-player enemy)
			=>
			(up-full-reset-search)
			(up-filter-distance c: -1 c: 12)
			(up-find-remote c: all-units-class c: 1)
			(up-reset-filters)
			(up-filter-distance c: -1 g: g-build-line-enemy-bldg-distance)
			(up-filter-include cmdid-military-building -1 -1 -1)
			(up-find-remote c: all-units-class c: 1)
			)
			
			;Search for enemy economic buildings
			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(building-type-count town-center > 0)
			(stance-toward focus-player enemy)
			=>
			(up-reset-filters)
			(up-filter-distance c: -1 g: g-build-line-enemy-bldg-distance)
			(up-find-remote c: town-center c: 1)
			(up-get-search-state g-local-total)
			)
			
			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(building-type-count town-center > 0)
			(stance-toward focus-player enemy)
			(up-compare-goal g-remote-total > 0)		;found enemy units or buildings nearby
			=>
			(up-jump-rule 10)
			)
			
			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(building-type-count town-center > 0)
			(up-compare-sn sn-focus-player-number < 8)
			=>
			(up-modify-sn sn-focus-player-number c:+ 1)
			(up-jump-rule -4)
			)

		;Make sure no TC is within min distance (square distance, not circular)
		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(building-type-count town-center > 0)
		=>
		(up-full-reset-search)
		(up-find-local c: town-center c: 40)
		(up-copy-point g-point2-x g-point-x)
		(up-modify-goal g-point2-x g:+ g-build-line-min-distance)
		(up-modify-goal g-point2-y g:+ g-build-line-min-distance)
		(up-remove-objects search-local object-data-point-x g:> g-point2-x)
		(up-remove-objects search-local object-data-point-y g:> g-point2-y)
		(up-copy-point g-point2-x g-point-x)
		(up-modify-goal g-point2-x g:- g-build-line-min-distance)
		(up-modify-goal g-point2-y g:- g-build-line-min-distance)
		(up-remove-objects search-local object-data-point-x g:<= g-point2-x)
		(up-remove-objects search-local object-data-point-y g:<= g-point2-y)
		(up-get-search-state g-local-total)
		)

		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(building-type-count town-center > 0)
		(up-compare-goal g-local-total > 0)
		=>
		(up-jump-rule 7)
		)

		;Make sure building space is available around spot
		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(up-compare-goal g-build-line-min-separation >= 1)
		(building-type-count town-center > 0)
		=>
		(up-modify-goal g-temp g:= g-build-line-size)
		(up-modify-goal g-temp c:z/ 2)
		(up-modify-goal g-temp c:+ 1)
		(up-copy-point g-point2-x g-point-x)
		(up-modify-goal g-point2-x g:- g-temp)
		(up-modify-goal g-point2-y g:- g-temp)
		(set-goal g-food-cost 0)	;simply used as a temp goal
		(set-goal g-wood-cost 0)	;simply used as a temp goal
		(up-modify-goal g-temp-2 g:= g-build-line-size)
		(up-modify-goal g-temp-2 c:+ 1)
		)

			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(up-compare-goal g-build-line-min-separation >= 1)
			(building-type-count town-center > 0)
			(up-compare-goal g-food-cost g:<= g-temp-2)
			(up-compare-goal g-wood-cost g:<= g-temp-2)
			(not
				(up-can-build-line g-build-line-escrow g-point2-x c: palisade-wall))
			=>
			(up-jump-rule 5)
			)

			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(up-compare-goal g-build-line-min-separation >= 1)
			(building-type-count town-center > 0)
			(up-compare-goal g-food-cost g:<= g-temp-2)
			(up-compare-goal g-wood-cost g:<= g-temp-2)
			(up-can-build-line g-build-line-escrow g-point2-x c: palisade-wall)
			=>
			(up-modify-goal g-food-cost c:+ 1)
			(up-copy-point g-point2-x g-point-x)
			(up-modify-goal g-point2-x g:- g-temp)
			(up-modify-goal g-point2-y g:- g-temp)
			(up-modify-goal g-point2-x g:+ g-food-cost)
			(up-modify-goal g-point2-y g:+ g-wood-cost)
			(up-jump-rule -2)
			)

			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(up-compare-goal g-build-line-min-separation >= 1)
			(building-type-count town-center > 0)
			(up-compare-goal g-wood-cost g:<= g-temp-2)
			=>
			(set-goal g-food-cost 0)
			(up-modify-goal g-wood-cost c:+ 1)
			(up-copy-point g-point2-x g-point-x)
			(up-modify-goal g-point2-x g:- g-temp)
			(up-modify-goal g-point2-y g:- g-temp)
			(up-modify-goal g-point2-x g:+ g-food-cost)
			(up-modify-goal g-point2-y g:+ g-wood-cost)
			(up-jump-rule -3)
			)

		;Check if point is within custom-sn-peaceful-town-size
		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(building-type-count town-center > 0)
		(goal g-build-line-allow-beyond-town NO)
		=>
		(up-modify-goal g-temp s:= custom-sn-peaceful-town-size)
		(up-modify-goal g-temp c:+ 2)
		(up-modify-goal g-temp-2 g:= g-temp)	;g-temp and g-temp-2 now form a point: (custom-sn-peaceful-town-size + 2, custom-sn-peaceful-town-size + 2)
		(up-copy-point g-point2-x g-position-self-x)
		(up-copy-point g-point3-x g-position-self-x)
		(up-add-point g-point2-x g-temp c: -1)	;subtract [custom-sn-peaceful-town-size + 2] from the g-point2-x coordinates
		(up-add-point g-point3-x g-temp c: 1)	;add [custom-sn-peaceful-town-size + 2] to the g-point3-x coordinates
		)

		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(building-type-count town-center > 0)
		(goal g-build-line-allow-beyond-town NO)
		(or
			(up-compare-goal g-point-x g:>= g-point2-x)
			(up-compare-goal g-point-x g:< g-point3-x))
		(or
			(up-compare-goal g-point-y g:>= g-point2-y)
			(up-compare-goal g-point-y g:< g-point3-y))
		=>
		(up-jump-rule 1)
		)
	
			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(up-compare-goal g-build-line-point-x > -1)
			(up-compare-goal g-build-line-point-y > -1)
			(up-point-explored g-point-x != explored-no)
			(up-can-build-line g-build-line-escrow g-point-x g: g-build-line-bldg-foundation)
			=>
			(up-build-line g-point-x g-point-x g: g-build-line-bldg-foundation)
			(up-jump-rule 6)
			)
		
		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(up-compare-goal g-build-line-point-x > -1)
		(up-compare-goal g-build-line-point-y > -1)
		(up-compare-goal i g:< g-build-line-zone-radius)
		=>
		(up-modify-goal i c:+ 1)
		(up-copy-point g-point-x g-build-line-point-x)
		(up-modify-goal g-point-x g:- i)
		(up-modify-goal g-point-y g:- j)
		(up-bound-point g-point-x g-point-x)
		(up-jump-rule -14)
		)
		
		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(up-compare-goal j g:< g-build-line-zone-radius)
		=>
		(up-modify-goal j c:+ 1)
		(up-modify-goal i g:neg g-build-line-zone-radius)
		(up-copy-point g-point-x g-build-line-point-x)
		(up-modify-goal g-point-x g:- i)
		(up-modify-goal g-point-y g:- j)
		(up-bound-point g-point-x g-point-x)
		(up-jump-rule -15)
		)
		
		;If expansion away from TC is desired, lerp 1 tile away from TC
		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(up-compare-goal g-build-line-point-x > -1)
		(up-compare-goal g-build-line-point-y > -1)
		(up-compare-goal g-build-line-zone-radius g:< g-build-line-max-zone-radius)
		(goal g-build-line-expand-direction AWAY-FROM-TC)
		(building-type-count town-center > 0)
		=>
		(up-lerp-tiles g-build-line-point-x g-position-self-x c: -1)
		(up-bound-point g-build-line-point-x g-build-line-point-x)
		(up-jump-rule 2)
		)
		
			;If half expansion toward TC is desired, only expand every other zone increase.
			;Do this by dividing the zone radius by 2, and expand only if the remainder is 0.
			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(up-compare-goal g-build-line-point-x > -1)
			(up-compare-goal g-build-line-point-y > -1)
			(up-compare-goal g-build-line-zone-radius g:< g-build-line-max-zone-radius)
			=>
			(up-modify-goal g-temp-2 g:= g-build-line-zone-radius)
			(up-modify-goal g-temp-2 c:mod 2)
			)
			
			(defrule
			(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
			(up-can-build g-build-line-escrow g: g-build-line-bldg)
			(up-compare-goal g-build-line-point-x > -1)
			(up-compare-goal g-build-line-point-y > -1)
			(up-compare-goal g-build-line-zone-radius g:< g-build-line-max-zone-radius)
			(goal g-temp-2 0)	;lerp tiles only when remainder is 0
			(goal g-build-line-expand-direction HALF-TOWARD-TC)
			(building-type-count town-center > 0)
			=>
			(up-lerp-tiles g-build-line-point-x g-position-self-x c: 1)
			(up-bound-point g-build-line-point-x g-build-line-point-x)
			)
		
		(defrule
		(goal g-build-line-type BUILD-LINE-POINT-NORMAL)
		(up-can-build g-build-line-escrow g: g-build-line-bldg)
		(up-compare-goal g-build-line-point-x > -1)
		(up-compare-goal g-build-line-point-y > -1)
		(up-compare-goal g-build-line-zone-radius g:< g-build-line-max-zone-radius)
		=>
		(up-modify-goal g-build-line-zone-radius c:+ 1)
		(up-modify-goal i g:neg g-build-line-zone-radius)
		(up-modify-goal j g:neg g-build-line-zone-radius)
		(up-jump-rule -20)
		)

