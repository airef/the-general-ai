;=========================<>=========================
;				  CONSTANT TRAIN UNIT
;=========================<>=========================

	;AI will try to train this unit constantly

	(defrule
	(true)
	=>
	(up-get-indirect-goal g: g-desired-num-constant-train-unit-goal g-desired-num-constant-train-unit)
	(set-strategic-number sn-enable-training-queue 1)
	)

	(defrule
	(up-compare-goal g-constant-train-unit != 0)
	(up-object-type-count-total g: g-constant-train-unit g:< g-desired-num-constant-train-unit)
	(up-can-train g-escrow g: g-constant-train-unit)
	=>
	(up-train g-escrow g: g-constant-train-unit)
	)

	(defrule
	(true)
	=>
	(set-strategic-number sn-enable-training-queue 0)
	)

;=========================<>=========================
;				      CIVILIANS
;=========================<>=========================

	;---------------
	;	Villagers
	;---------------

		(defrule
		(goal g-allow-queued-villagers YES)
		(strategic-number sn-enable-training-queue != 1)
		=>
		(set-strategic-number sn-enable-training-queue 1)
		)

		(defrule
		(goal g-allow-queued-villagers NO)
		(strategic-number sn-enable-training-queue != 0)
		=>
		(set-strategic-number sn-enable-training-queue 0)
		)

		(defrule
		(goal g-villager-training TRAIN-WITH-ESCROW)
		(can-train-with-escrow villager)
		=>
		(up-train g-escrow c: villager)
		)

		(defrule
		(goal g-villager-training LIMITED-TRAIN-WITH-ESCROW)
		(food-amount >= 100)
		; (up-pending-objects c: villager g:< g-max-working-town-centers)
		(can-train-with-escrow villager)
		=>
		(up-train g-escrow c: villager)
		)

		(defrule
		(goal g-villager-training TRAIN-WITHOUT-ESCROW)
		; (up-pending-objects c: villager g:< g-max-working-town-centers)
		(can-train villager)
		=>
		(train villager)
		)

		(defrule
		(goal g-villager-training LIMITED-TRAINING)
		; (up-pending-objects c: villager g:< g-max-working-town-centers)
		(food-amount > 100)
		(can-train villager)
		=>
		(train villager)
		)

	;-------------------
	;	Fishing Ships
	;-------------------

		(defrule
		(up-object-type-count-total c: fishing-ship g:< g-desired-num-fishing-ship)
		; (up-pending-objects c: fishing-ship g:< g-max-working-docks)
		(can-train-with-escrow fishing-ship)
		=>
		(up-train g-escrow c: fishing-ship)
		)

	;-----------------
	;	Trade Units
	;-----------------

		#load-if-not-defined ITALIAN-CIV

			;----------------
			;	Trade Cogs
			;----------------

				(defrule
				(goal g-game-focus BOOM)
				(up-object-type-count-total c: trade-cog g:< g-desired-num-trade-cog)
				; (up-pending-objects c: trade-cart g:< g-max-working-markets)
				(up-research-status c: ri-caravan >= research-pending)
				(can-train-with-escrow trade-cog)
				=>
				(up-train g-escrow c: trade-cog)
				)

				(defrule
				(up-compare-goal g-game-focus != BOOM)
				(up-object-type-count-total c: trade-cog g:< g-desired-num-trade-cog)
				; (up-pending-objects c: trade-cog g:< g-max-working-docks)
				(up-research-status c: ri-caravan >= research-pending)
				(can-train trade-cog)
				=>
				(train trade-cog)
				)

			;-----------------
			;	Trade Carts
			;-----------------

				(defrule
				(goal g-game-focus BOOM)
				(up-object-type-count-total c: trade-cart g:< g-desired-num-trade-cart)
				; (up-pending-objects c: trade-cart g:< g-max-working-markets)
				(can-train-with-escrow trade-cart)
				(up-compare-goal g-enemy-units-in-town < 10)
				(up-research-status c: ri-caravan >= research-pending)
				=>
				(up-train g-escrow c: trade-cart)
				)

				(defrule
				(up-compare-goal g-game-focus != BOOM)
				(up-object-type-count-total c: trade-cart g:< g-desired-num-trade-cart)
				; (up-pending-objects c: trade-cart g:< g-max-working-markets)
				(can-train trade-cart)
				(up-compare-goal g-enemy-units-in-town < 10)
				(up-research-status c: ri-caravan >= research-pending)
				=>
				(train trade-cart)
				)

		#else

			;----------------
			;	Trade Cogs
			;----------------

				(defrule
				(goal g-game-focus BOOM)
				(up-object-type-count-total c: trade-cog g:< g-desired-num-trade-cog)
				; (up-pending-objects c: trade-cart g:< g-max-working-markets)
				(up-research-status c: ri-caravan >= research-pending)
				(or
					(up-research-status c: my-unique-research >= research-pending)
					(building-type-count castle == 0))
				(can-train-with-escrow trade-cog)
				=>
				(up-train g-escrow c: trade-cog)
				)

				(defrule
				(up-compare-goal g-game-focus != BOOM)
				(up-object-type-count-total c: trade-cog g:< g-desired-num-trade-cog)
				; (up-pending-objects c: trade-cog g:< g-max-working-docks)
				(up-research-status c: ri-caravan >= research-pending)
				(or
					(up-research-status c: my-unique-research >= research-pending)
					(building-type-count castle == 0))
				(can-train trade-cog)
				=>
				(train trade-cog)
				)

			;-----------------
			;	Trade Carts
			;-----------------

				(defrule
				(goal g-game-focus BOOM)
				(up-object-type-count-total c: trade-cart g:< g-desired-num-trade-cart)
				; (up-pending-objects c: trade-cart g:< g-max-working-markets)
				(can-train-with-escrow trade-cart)
				(up-compare-goal g-enemy-units-in-town < 10)
				(up-research-status c: ri-caravan >= research-pending)
				(or
					(up-research-status c: my-unique-research >= research-pending)
					(building-type-count castle == 0))
				=>
				(up-train g-escrow c: trade-cart)
				)

				(defrule
				(up-compare-goal g-game-focus != BOOM)
				(up-object-type-count-total c: trade-cart g:< g-desired-num-trade-cart)
				; (up-pending-objects c: trade-cart g:< g-max-working-markets)
				(can-train trade-cart)
				(up-compare-goal g-enemy-units-in-town < 10)
				(up-research-status c: ri-caravan >= research-pending)
				(or
					(up-research-status c: my-unique-research >= research-pending)
					(building-type-count castle == 0))
				=>
				(train trade-cart)
				)
			
		#end-if

;=========================<>=========================
;				       MILITARY
;=========================<>=========================

	;-------------------
	;	Siege Weapons
	;-------------------

		#load-if-defined DE-AVAILABLE

			(defrule
			(goal g-siege-workshop-next-unit bombard-cannon)
			(goal g-town-under-attack NO)
			(up-object-type-count-total c: bombard-cannon-line g:< g-desired-num-bombard-cannon)
			; (up-pending-objects c: bombard-cannon-line g:< g-max-working-siege-workshops)
			(can-train-with-escrow bombard-cannon-line)
			=>
			(up-train g-escrow c: bombard-cannon-line)
			)

		#else

			(defrule
			(goal g-siege-workshop-next-unit bombard-cannon)
			(goal g-town-under-attack NO)
			(up-object-type-count-total c: bombard-cannon g:< g-desired-num-bombard-cannon)
			; (up-pending-objects c: bombard-cannon g:< g-max-working-siege-workshops)
			(can-train-with-escrow bombard-cannon)
			=>
			(up-train g-escrow c: bombard-cannon)
			)

		#end-if

		(defrule
		(or
			(and
				(goal g-town-under-attack NO)
				(military-population g:>= g-min-military-pop))
			(players-unit-type-count any-enemy unpacked-trebuchet-class >= 2))
		(up-object-type-count-total c: trebuchet-set g:< g-desired-num-trebuchet)
		; (up-pending-objects c: trebuchet g:< g-max-working-castles)
		(can-train-with-escrow trebuchet)
		=>
		(up-train g-escrow c: trebuchet)
		)

		(defrule
		(up-compare-goal g-siege-workshop-next-unit != 0)
		(or
			(goal g-siege-workshop-next-unit battering-ram-line)
			(not
				(up-can-train g-escrow g: g-siege-workshop-next-unit)))
		(or
			(players-unit-type-count any-enemy unpacked-trebuchet-class >= 2)
			(goal g-attacking YES))
		(up-object-type-count-total c: battering-ram-line g:< g-desired-num-battering-ram)
		; (up-pending-objects c: battering-ram-line g:< g-max-working-siege-workshops)
		(can-train-with-escrow battering-ram-line)
		=>
		(up-train g-escrow c: battering-ram-line)
		)

		(defrule
		(up-compare-goal g-siege-workshop-next-unit != 0)
		(or
			(goal g-siege-workshop-next-unit battering-ram-line)
			(not
				(up-can-train g-escrow g: g-siege-workshop-next-unit)))
		(up-compare-goal g-enemy-units-in-town < 15)
		(military-population g:>= g-min-military-pop)
		(up-object-type-count-total c: battering-ram-line g:< g-desired-num-battering-ram)
		; (up-pending-objects c: battering-ram-line g:< g-max-working-siege-workshops)
		(can-train-with-escrow battering-ram-line)
		=>
		(up-train g-escrow c: battering-ram-line)
		)

		(defrule
		(goal g-siege-workshop-next-unit mangonel)
		(up-compare-goal g-mangonel-line g:< g-desired-num-mangonel)
		; (up-pending-objects c: mangonel-line g:< g-max-working-siege-workshops)
		; (up-pending-objects c: wk-onager g:< g-max-working-siege-workshops)
		(can-train-with-escrow mangonel)
		=>
		(up-train g-escrow c: mangonel)
		)

		(defrule
		(goal g-siege-workshop-next-unit scorpion-line)
		(goal g-town-under-attack NO)
		(up-object-type-count-total c: scorpion-line g:< g-desired-num-scorpion)
		; (up-pending-objects c: scorpion-line g:< g-max-working-siege-workshops)
		(can-train-with-escrow scorpion)
		(unit-type-count-total scorpion-line == 0)
		=>
		(up-train g-escrow c: mangonel)
		)

		(defrule
		(goal g-siege-workshop-next-unit scorpion-line)
		(goal g-town-under-attack NO)
		(up-object-type-count-total c: scorpion-line g:< g-desired-num-scorpion)
		; (up-pending-objects c: scorpion-line g:< g-max-working-siege-workshops)
		(can-train scorpion)
		=>
		(train scorpion)
		)

	;----------
	;	Navy
	;----------
	
		(defrule
		(goal g-dock-next-unit cannon-galleon-line)
		(up-object-type-count-total c: cannon-galleon-line g:< g-desired-num-cannon-galleon)
		; (up-pending-objects c: cannon-galleon-line g:< g-max-working-docks)
		(can-train cannon-galleon-line)
		=>
		(train cannon-galleon-line)
		)

		(defrule
		(goal g-dock-next-unit demolition-ship-line)
		(up-compare-goal g-demolition-raft-line g:< g-desired-num-demolition-ship)
		; (up-pending-objects c: demolition-ship-line g:< g-max-working-docks)
		; (up-pending-objects c: demolition-raft g:< g-max-working-docks)
		; (up-pending-objects c: demolition-ship-wk g:< g-max-working-docks)
		(can-train demolition-ship)
		=>
		(train demolition-ship)
		)

		(defrule
		(goal g-dock-next-unit fire-ship-line)
		(up-compare-goal g-fire-galley-line g:< g-desired-num-fire-ship)
		; (up-pending-objects c: fire-ship-line g:< g-max-working-docks)
		; (up-pending-objects c: fire-galley g:< g-max-working-docks)
		; (up-pending-objects c: fire-ship-wk g:< g-max-working-docks)
		(can-train fire-ship)
		=>
		(train fire-ship)
		)

		(defrule
		(goal g-dock-next-unit galley-line)
		(up-object-type-count-total c: galley-line g:< g-desired-num-galley)
		; (up-pending-objects c: galley-line g:< g-max-working-docks)
		(can-train galley-line)
		=>
		(train galley-line)
		)

		(defrule
		(goal g-dock-next-unit transport-ship)
		(up-object-type-count-total c: transport-ship g:< g-desired-num-transport-ship)
		; (up-pending-objects c: transport-ship g:< g-max-working-docks)
		(can-train transport-ship)
		=>
		(train transport-ship)
		)

		#load-if-defined KOREAN-CIV

			(defrule
			(goal g-dock-next-unit turtle-ship-line)
			(up-object-type-count-total c: turtle-ship-line g:< g-desired-num-unique-ship)
			; (up-pending-objects c: turtle-ship-line g:< g-max-working-docks)
			(can-train turtle-ship-line)
			=>
			(train turtle-ship-line)
			)

		#end-if

		#load-if-defined PORTUGUESE-CIV

			(defrule
			(goal g-dock-next-unit caravel)
			(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
			; (up-pending-objects c: caravel g:< g-max-working-docks)
			; (up-pending-objects c: elite-caravel g:< g-max-working-docks)
			(can-train caravel)
			=>
			(train caravel)
			)

		#end-if

		#load-if-defined VIKING-CIV

			(defrule
			(goal g-dock-next-unit longboat-line)
			(up-object-type-count-total c: longboat-line g:< g-desired-num-unique-ship)
			; (up-pending-objects c: longboat-line g:< g-max-working-docks)
			(can-train longboat-line)
			=>
			(train longboat-line)
			)

		#end-if

	;------------------
	;	Unique Units
	;------------------

		#load-if-not-defined GOTHIC-CIV
			#load-if-not-defined HUN-CIV

				(defrule
				(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
				(goal g-unique-unit-line 0)
				(can-train-with-escrow my-unique-unit)
				=>
				(up-train g-escrow c: my-unique-unit)
				)

				(defrule
				(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
				; (up-pending-objects c: my-unique-unit-line g:< g-max-working-castles)
				; (up-pending-objects c: my-elite-unique-unit g:< g-max-working-castles)
				(can-train my-unique-unit)
				=>
				(train my-unique-unit)
				)
				
			#end-if
		#end-if

		#load-if-defined GOTHIC-CIV

			(defrule
			(up-compare-goal g-desired-num-unique-unit > 0)
			(unit-type-count-total huskarl-set == 0)
			(can-train-with-escrow barracks-huskarl)
			=>
			(up-train g-escrow c: barracks-huskarl)
			)

			(defrule
			(up-compare-goal g-desired-num-unique-unit > 0)
			(unit-type-count-total huskarl-set == 0)
			(can-train-with-escrow huskarl-line)
			=>
			(up-train g-escrow c: huskarl-line)
			)

			(defrule
			(up-object-type-count-total c: huskarl-set g:< g-desired-num-unique-unit)
			; (up-pending-objects c: barracks-huskarl g:< g-max-working-barracks)
			; (up-pending-objects c: barracks-elite-huskarl g:< g-max-working-barracks)
			(can-train barracks-huskarl)
			=>
			(train barracks-huskarl)
			)

			(defrule
			(up-object-type-count-total c: huskarl-set g:< g-desired-num-unique-unit)
			; (up-pending-objects c: my-unique-unit-line g:< g-max-working-castles)
			(up-train-site-ready c: huskarl)
			(can-train huskarl-line)
			=>
			(train huskarl-line)
			)

		#end-if

		#load-if-defined HUN-CIV
			#load-if-defined UP-GAME-WK

				(defrule
				(up-compare-goal g-desired-num-unique-unit > 0)
				(unit-type-count-total tarkan-line == 0)
				(unit-type-count-total stable-tarkan == 0)
				(unit-type-count-total elite-stable-tarkan == 0)
				(can-train-with-escrow stable-tarkan)
				=>
				(up-train g-escrow c: stable-tarkan)
				)

				(defrule
				(up-compare-goal g-desired-num-unique-unit > 0)
				(unit-type-count-total tarkan-line == 0)
				(unit-type-count-total stable-tarkan == 0)
				(unit-type-count-total elite-stable-tarkan == 0)
				(can-train-with-escrow tarkan-line)
				=>
				(up-train g-escrow c: tarkan-line)
				)

				(defrule
				(up-compare-goal g-tarkan-line g:< g-desired-num-unique-unit)
				; (up-pending-objects c: my-unique-unit-line g:< g-max-working-castles)
				(up-train-site-ready c: tarkan)
				(can-train tarkan-line)
				=>
				(train tarkan-line)
				)

				(defrule
				(up-compare-goal g-tarkan-line g:< g-desired-num-unique-unit)
				; (up-pending-objects c: stable-tarkan g:< g-max-working-stables)
				; (up-pending-objects c: elite-stable-tarkan g:< g-max-working-stables)
				(not
					(up-train-site-ready c: tarkan))
				(can-train stable-tarkan)
				=>
				(train stable-tarkan)
				)

			#else

				(defrule
				(up-compare-goal g-desired-num-unique-unit > 0)
				(unit-type-count-total tarkan-line == 0)
				(can-train-with-escrow tarkan-line)
				=>
				(up-train g-escrow c: tarkan-line)
				)
			
				(defrule
				(up-compare-goal g-tarkan-line g:< g-desired-num-unique-unit)
				; (up-pending-objects c: my-unique-unit-line g:< g-max-working-castles)
				(up-train-site-ready c: tarkan)
				(can-train tarkan-line)
				=>
				(train tarkan-line)
				)

			#end-if
		#end-if

		#load-if-not-defined CUMANS-CIV

			(defrule
			(can-train mercenary-kipchak)
			=>
			(train mercenary-kipchak)
			)

		#end-if

	;-------------
	;	Cavalry
	;-------------

		(defrule
		(up-compare-goal g-desired-num-battle-elephant > 0)
		(up-compare-goal g-battle-elephant-line == 0)
		(can-train-with-escrow battle-elephant)
		=>
		(up-train g-escrow c: battle-elephant)
		)

		(defrule
		(goal g-stable-next-unit battle-elephant)
		(up-compare-goal g-battle-elephant-line g:< g-desired-num-battle-elephant)
		; (up-pending-objects c: battle-elephant-line g:< g-max-working-stables)
		; (up-pending-objects c: battle-elephant g:< g-max-working-stables)
		; (up-pending-objects c: elite-battle-elephant g:< g-max-working-stables)
		(can-train battle-elephant)
		=>
		(train battle-elephant)
		)

		(defrule
		(up-compare-goal g-desired-num-knight > 0)
		(unit-type-count-total knight-line == 0)
		(can-train-with-escrow knight-line)
		=>
		(up-train g-escrow c: knight-line)
		)

		(defrule
		(goal g-stable-next-unit knight-line)
		(up-object-type-count-total c: knight-line g:< g-desired-num-knight)
		; (up-pending-objects c: knight-line g:< g-max-working-stables)
		(can-train knight-line)
		=>
		(train knight-line)
		)

		(defrule
		(up-compare-goal g-desired-num-camel > 0)
		(up-compare-goal g-camel-line == 0)
		(can-train-with-escrow camel)
		=>
		(up-train g-escrow c: camel)
		)

		(defrule
		(goal g-stable-next-unit camel)
		(up-object-type-count-total g: g-camel-line g:< g-desired-num-camel)
		; (up-pending-objects c: camel-line g:< g-max-working-stables)
		; (up-pending-objects c: imperial-camel g:< g-max-working-stables)
		(can-train camel)
		=>
		(train camel)
		)

		(defrule
		(up-compare-goal g-desired-num-steppe-lancer > 0)
		(unit-type-count-total steppe-lancer-line == 0)
		(can-train-with-escrow steppe-lancer-line)
		=>
		(up-train g-escrow c: steppe-lancer-line)
		)

		(defrule
		(goal g-stable-next-unit steppe-lancer-line)
		(up-object-type-count-total c: steppe-lancer-line g:< g-desired-num-steppe-lancer)
		; (up-pending-objects c: steppe-lancer-line g:< g-max-working-stables)
		(can-train steppe-lancer-line)
		=>
		(train steppe-lancer-line)
		)

		(defrule
		(up-compare-goal g-desired-num-scout-cavalry > 0)
		(unit-type-count-total scout-cavalry-line == 0)
		(can-train-with-escrow scout-cavalry-line)
		(or
			(current-age < imperial-age)
			(or
				(up-research-status c: ri-light-cavalry >= research-pending)
				(up-compare-const LIGHT-CAVALRY-AVAILABLE == NO)))
		=>
		(up-train g-escrow c: scout-cavalry-line)
		)

		(defrule
		(goal g-stable-next-unit scout-cavalry-line)
		(up-object-type-count-total c: scout-cavalry-line g:< g-desired-num-scout-cavalry)
		; (up-pending-objects c: scout-cavalry-line g:< g-max-working-stables)
		(can-train scout-cavalry-line)
		(or
			(current-age < imperial-age)
			(or
				(up-research-status c: ri-light-cavalry >= research-pending)
				(up-compare-const LIGHT-CAVALRY-AVAILABLE == NO)))
		=>
		(train scout-cavalry-line)
		)

	;-----------
	;	Monks
	;-----------

		(defrule
		(up-compare-goal g-desired-num-monk > 0)
		(unit-type-count-total monk == 0)
		(can-train-with-escrow monk)
		=>
		(up-train g-escrow c: monk)
		)

		(defrule
		(up-object-type-count-total c: monk-set g:< g-desired-num-monk)
		; (up-pending-objects c: monk g:< g-max-working-monasteries)
		(can-train monk)
		=>
		(train monk)
		)

		#load-if-defined SPANISH-CIV

			(defrule
			(up-compare-goal g-desired-num-missionary > 0)
			(unit-type-count-total missionary == 0)
			(can-train-with-escrow missionary)
			=>
			(up-train g-escrow c: missionary)
			)

			(defrule
			(up-object-type-count-total c: missionary g:< g-desired-num-missionary)
			; (up-pending-objects c: missionary g:< g-max-working-monasteries)
			(can-train missionary)
			=>
			(train missionary)
			)
			
		#end-if

	;-------------
	;	Archers
	;-------------

		(defrule
		(up-compare-goal g-desired-num-cavalry-archer > 0)
		(unit-type-count-total cavalry-archer-line == 0)
		(can-train-with-escrow cavalry-archer-line)
		=>
		(up-train g-escrow c: cavalry-archer-line)
		)

		(defrule
		(up-compare-goal g-archery-range-next-unit != 0)
		(or
			(goal g-archery-range-next-unit cavalry-archer-line)
			(not
				(up-can-train 0 g: g-archery-range-next-unit)))
		(up-object-type-count-total c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
		; (up-pending-objects c: cavalry-archer-line g:< g-max-working-archery-ranges)
		(can-train cavalry-archer-line)
		=>
		(train cavalry-archer-line)
		)

		(defrule
		(up-compare-goal g-desired-num-hand-cannoneer > 0)
		(unit-type-count-total hand-cannoneer == 0)
		(can-train-with-escrow hand-cannoneer)
		=>
		(up-train g-escrow c: hand-cannoneer)
		)

		(defrule
		(up-compare-goal g-archery-range-next-unit != 0)
		(or
			(goal g-archery-range-next-unit hand-cannoneer)
			(not
				(up-can-train 0 g: g-archery-range-next-unit)))
		(up-object-type-count-total c: hand-cannoneer g:< g-desired-num-hand-cannoneer)
		; (up-pending-objects c: hand-cannoneer g:< g-max-working-archery-ranges)
		(can-train hand-cannoneer)
		=>
		(train hand-cannoneer)
		)

		#load-if-defined INCAN-CIV

			(defrule
			(up-compare-goal g-desired-num-slinger > 0)
			(unit-type-count-total slinger == 0)
			(can-train-with-escrow slinger)
			=>
			(up-train g-escrow c: slinger)
			)

			(defrule
			(up-compare-goal g-archery-range-next-unit != 0)
			(or
				(goal g-archery-range-next-unit slinger)
				(not
					(up-can-train 0 g: g-archery-range-next-unit)))
			(up-object-type-count-total c: slinger g:< g-desired-num-slinger)
			; (up-pending-objects c: slinger g:< g-max-working-archery-ranges)
			(can-train slinger)
			=>
			(train slinger)
			)

		#end-if

		(defrule
		(up-compare-goal g-desired-num-archer > 0)
		(unit-type-count-total archer-line == 0)
		(can-train-with-escrow archer-line)
		(or
			(current-age < imperial-age)
			(or
				(up-research-status c: ri-crossbow >= research-pending)
				(up-compare-const CROSSBOWMAN-AVAILABLE == NO)))
		=>
		(up-train g-escrow c: archer-line)
		)

		(defrule
		(up-compare-goal g-archery-range-next-unit != 0)
		(or
			(goal g-archery-range-next-unit archer-line)
			(not
				(up-can-train 0 g: g-archery-range-next-unit)))
		(up-object-type-count-total c: archer-line g:< g-desired-num-archer)
		; (up-pending-objects c: archer-line g:< g-max-working-archery-ranges)
		(can-train archer-line)
		(or
			(current-age < imperial-age)
			(or
				(up-research-status c: ri-crossbow >= research-pending)
				(up-compare-const CROSSBOWMAN-AVAILABLE == NO)))
		=>
		(train archer-line)
		)

		(defrule
		(up-compare-goal g-desired-num-genitour > 0)
		(up-compare-goal g-genitour-line == 0)
		(can-train-with-escrow genitour-placeholder)
		=>
		(up-train g-escrow c: genitour-placeholder)
		)
		
		(defrule
		(up-compare-goal g-archery-range-next-unit != 0)
		(or
			(goal g-archery-range-next-unit genitour-placeholder)
			(not
				(up-can-train 0 g: g-archery-range-next-unit)))
		(up-compare-goal g-genitour-line g:< g-desired-num-genitour)
		; (up-pending-objects c: genitour-line g:< g-max-working-archery-ranges)
		; (up-pending-objects c: genitour g:< g-max-working-archery-ranges)
		; (up-pending-objects c: elite-genitour g:< g-max-working-archery-ranges)
		; (up-pending-objects c: genitour-placeholder g:< g-max-working-archery-ranges)
		(can-train genitour-placeholder)
		=>
		(train genitour-placeholder)
		)

		(defrule
		(up-compare-goal g-desired-num-skirmisher > 0)
		(up-compare-goal g-skirmisher-line == 0)
		(can-train-with-escrow skirmisher-line)
		(or
			(current-age < imperial-age)
			(or
				(up-research-status c: ri-elite-skirmisher >= research-pending)
				(up-compare-const ELITE-SKIRMISHER-AVAILABLE == NO)))
		=>
		(up-train g-escrow c: skirmisher-line)
		)

		(defrule
		(up-compare-goal g-archery-range-next-unit != 0)
		(or
			(goal g-archery-range-next-unit skirmisher)
			(not
				(up-can-train 0 g: g-archery-range-next-unit)))
		(up-compare-goal g-skirmisher-line g:< g-desired-num-skirmisher)
		; (up-pending-objects c: skirmisher-line g:< g-max-working-archery-ranges)
		; (up-pending-objects c: imperial-skirmisher g:< g-max-working-archery-ranges)
		(can-train skirmisher)
		(or
			(current-age < imperial-age)
			(or
				(up-research-status c: ri-elite-skirmisher >= research-pending)
				(up-compare-const ELITE-SKIRMISHER-AVAILABLE == NO)))
		=>
		(train skirmisher)
		)

	;--------------
	;	Infantry
	;--------------

		(defrule
		(up-compare-goal g-desired-num-condottiero > 0)
		(unit-type-count-total condottiero == 0)
		(can-train-with-escrow condottiero)
		=>
		(up-train g-escrow c: condottiero)
		)

		(defrule
		(up-compare-goal g-barracks-next-unit != 0)
		(or
			(goal g-barracks-next-unit condottiero-placeholder)
			(not
				(up-can-train 0 g: g-barracks-next-unit)))
		(up-object-type-count-total c: condottiero g:< g-desired-num-condottiero)
		; (up-pending-objects c: condottiero g:< g-max-working-barracks)
		; (up-pending-objects c: condottiero-placeholder g:< g-max-working-barracks)
		(can-train condottiero-placeholder)
		=>
		(train condottiero-placeholder)
		)

		(defrule
		(up-compare-goal g-desired-num-eagle-warrior > 0)
		(up-compare-goal g-eagle-scout-line == 0)
		(can-train-with-escrow eagle-warrior)
		=>
		(up-train g-escrow c: eagle-warrior)
		)

		(defrule
		(up-compare-goal g-barracks-next-unit != 0)
		(or
			(goal g-barracks-next-unit eagle-warrior)
			(not
				(up-can-train 0 g: g-barracks-next-unit)))
		(up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
		; (up-pending-objects c: eagle-warrior-line g:< g-max-working-barracks)
		; (up-pending-objects c: heavy-eagle-warrior g:< g-max-working-barracks)
		(can-train eagle-warrior)
		=>
		(train eagle-warrior)
		)

		(defrule
		(up-compare-goal g-desired-num-militia > 0)
		(unit-type-count-total militiaman-line == 0)
		(can-train-with-escrow militiaman-line)
		(or
			(current-age < imperial-age)
			(up-research-status c: ri-long-swordsman >= research-pending))
		(or
			(current-age < castle-age)
			(up-research-status c: ri-man-at-arms >= research-pending))
		=>
		(up-train g-escrow c: militiaman-line)
		)

		(defrule
		(up-compare-goal g-barracks-next-unit != 0)
		(or
			(goal g-barracks-next-unit militiaman-line)
			(not
				(up-can-train 0 g: g-barracks-next-unit)))
		(up-object-type-count-total c: militiaman-line g:< g-desired-num-militia)
		; (up-pending-objects c: militiaman-line g:< g-max-working-barracks)
		(can-train militiaman-line)
		(or
			(current-age < imperial-age)
			(up-research-status c: ri-long-swordsman >= research-pending))
		(or
			(current-age < castle-age)
			(up-research-status c: ri-man-at-arms >= research-pending))
		=>
		(train militiaman-line)
		)

		(defrule
		(up-compare-goal g-desired-num-spearman > 0)
		(unit-type-count-total spearman-line == 0)
		(can-train-with-escrow spearman-line)
		(or
			(current-age < imperial-age)
			(or
				(up-research-status c: ri-pikeman >= research-pending)
				(up-compare-const PIKEMAN-AVAILABLE == NO)))
		=>
		(up-train g-escrow c: spearman-line)
		)

		(defrule
		(up-compare-goal g-barracks-next-unit != 0)
		(or
			(goal g-barracks-next-unit spearman-line)
			(not
				(up-can-train 0 g: g-barracks-next-unit)))
		(up-object-type-count-total c: spearman-line g:< g-desired-num-spearman)
		; (up-pending-objects c: spearman-line g:< g-max-working-barracks)
		(can-train spearman-line)
		(or
			(current-age < imperial-age)
			(or
				(up-research-status c: ri-pikeman >= research-pending)
				(up-compare-const PIKEMAN-AVAILABLE == NO)))
		=>
		(train spearman-line)
		)