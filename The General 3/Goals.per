

    (load "The General 3.1/Functions/Reset")

;-----------------------
;	GOAL 1: g-general
;-----------------------

	;Use the number of trees on the map as a makeshift random number generator that is the same for all players.
	;This number will be used to assign a general to each player to ensure that two generals of the same name aren't (likely) chosen.

	(defrule
	(goal g-general PENDING)
	=>
	(up-get-fact cc-gaia-type-count tree-class g-temp)		;Get number of forest trees on map as a universal seed for randomization
	(up-get-fact player-number my-player-number g-temp-2)	;Store the player number
	(up-modify-goal g-temp g:+ g-temp-2)					;add player number (g-temp-2) to the number of trees on the map (g-temp)
	(up-modify-goal g-temp c:mod NUM-GENERALS)				;Get the mod by the number of different generals available for the civ
	(up-modify-goal g-general g:= g-temp)					;Set g-general to the result
	)

	;Set the name of each general based on g-general calculated above.
	#load-if-defined AZTEC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ACAMAPICHTLI)
		(up-change-name "General Acamapichtli")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general AHUITZOTOL)
		(up-change-name "General Ahuitzotol")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general CUAUHTEMOC)
		(up-change-name "General Cuauhtemoc")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ITZCOATL)
		(up-change-name "General Itzcoatl")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general MONTEZUMA)
		(up-change-name "General Montezuma")
		(disable-self)
		)

	#end-if

	#load-if-defined BERBERS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general IDRIS-IBN-ABDALLAH)
		(up-change-name "Gen. Idris ibn Abdallah")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general MUHAMMAD-IBN-TUMART)
		(up-change-name "Gen. Muhammad ibn Tumart")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MUSA-IBN-NUSAYR)
		(up-change-name "General Musa ibn Nusayr")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general TARIQ-IBN-ZIYAD)
		(up-change-name "General Tariq ibn Ziyad")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YUSUF-IBN-TASHFIN)
		(up-change-name "Gen. Yusuf ibn Tashfin")
		(disable-self)
		)
		
	#end-if

	#load-if-defined BRITON-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general EDWARD-LONGSHANKS)
		(up-change-name "Gen. Edward Longshanks")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general HAROLD-GODWINSON)
		(up-change-name "General Harold Godwinson")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HENRY-V)
		(up-change-name "General Henry V")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general RICHARD-I)
		(up-change-name "General Richard I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ARTHUR)
		(up-change-name "General Arthur")
		(disable-self)
		)

	#end-if

	#load-if-defined BULGARIANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ASPARUKH)
		(up-change-name "General Asparukh")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BORIS)
		(up-change-name "General Boris I Mikhail")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general IVAN-ASEN)
		(up-change-name "General Ivan Asen II")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general IVAYLO)
		(up-change-name "General Ivaylo")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general SIMEON)
		(up-change-name "General Simeon")
		(disable-self)
		)
		
	#end-if

	#load-if-defined BURGUNDIANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general GUNDAHARIUS)
		(up-change-name "General Gundaharius")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general JOHN-THE-FEARLESS)
		(up-change-name "General John the Fearless")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general ODO-IV)
		(up-change-name "General Odo IV")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general PHILIP-THE-GOOD)
		(up-change-name "General Philip the Good")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general RICHARD-THE-JUSTICIAR)
		(up-change-name "General Richard the Justiciar")
		(disable-self)
		)
		
	#end-if

	#load-if-defined BURMESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ANAWRAHTA)
		(up-change-name "General Anawrahta")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BAYINNAUNG)
		(up-change-name "General Bayinnaung")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MINGYINYO)
		(up-change-name "General Mingyinyo")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general NARAPATISITHU)
		(up-change-name "General Napapatisithu")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TABINSHWEHTI)
		(up-change-name "General Tabinshwehti")
		(disable-self)
		)
		
	#end-if

	#load-if-defined BYZANTINE-CIV

		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BASIL)
		(up-change-name "General Basil")
		(disable-self)
		)

		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BELISARIUS)
		(up-change-name "General Belisarius")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general CONSTANTINE)
		(up-change-name "General Constantine")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general HERACLIUS)
		(up-change-name "General Heraclius")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general JUSTINIAN)
		(up-change-name "General Justinian")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general MANUEL)
		(up-change-name "General Manuel Komnenos")
		(disable-self)
		)

	#end-if

	#load-if-defined CELTIC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general AETHELFIRTH)
		(up-change-name "General Aethelfirth")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BRIAN-BORU)
		(up-change-name "General Brian Boru")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MURTAUGH-OBRIEN)
		(up-change-name "General Murtaugh O'Brien")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ROBERT-THE-BRUCE)
		(up-change-name "General Robert the Bruce")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general WILLIAM-WALLACE)
		(up-change-name "General William Wallace")
		(disable-self)
		)

	#end-if

	#load-if-defined CHINESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general LI-SHI-MIN)
		(up-change-name "General Li Shi-min")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general SU-DINGFANG)
		(up-change-name "General Su Dingfang")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general YUE-FEI)
		(up-change-name "General Yue Fei")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ZHAO-KUANG-YING)
		(up-change-name "General Zhao Kuang-Ying")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ZHU-YUAN-ZHANG)
		(up-change-name "General Zhu Yuan-zhang")
		(disable-self)
		)

	#end-if

	#load-if-defined CUMANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BONIAK)
		(up-change-name "General Boniak")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KOTYAN-KHAN)
		(up-change-name "General Kotyan Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general KONCHAK-OTRAKOVICH)
		(up-change-name "General Konchak")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general SOKAL)
		(up-change-name "General Sokal")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general AYEPA)
		(up-change-name "General Ayepa Khan")
		(disable-self)
		)
		
	#end-if

	#load-if-defined ETHIOPIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general AMDA-SEYON)
		(up-change-name "General Amda Seyon")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KALEB-OF-AKSUM)
		(up-change-name "General Kaleb of Aksum")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general YEKUNO-AMLAK)
		(up-change-name "General Yekuno Amlak")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general YODIT)
		(up-change-name "General Yodit")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ZARA-YAQOB)
		(up-change-name "General Zara Yaqob")
		(disable-self)
		)
		
	#end-if

	#load-if-defined FRANKISH-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general CHARLEMAGNE)
		(up-change-name "General Charlemagne")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general CHARLES-MARTEL)
		(up-change-name "General Charles Martel")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general JOAN-OF-ARC)
		(up-change-name "General Joan of Arc")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general LA-HIRE)
		(up-change-name "General La Hire")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general WILLIAM-THE-CONQUEROR)
		(up-change-name "General William I")
		(disable-self)
		)

	#end-if

	#load-if-defined GOTHIC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALARIC)
		(up-change-name "General Alaric")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ATAULF)
		(up-change-name "General Ataulf")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general FRITIGERN)
		(up-change-name "General Fritigern")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general THEODORIC)
		(up-change-name "General Theodoric")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general WALLIA)
		(up-change-name "General Wallia")
		(disable-self)
		)

	#end-if

	#load-if-defined HUN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ATTILA)
		(up-change-name "General Attila")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BLEDA)
		(up-change-name "General Bleda")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general DENGIZICH)
		(up-change-name "General Dengizich")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general RUGILA)
		(up-change-name "General Rugila")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ULDIN)
		(up-change-name "General Uldin")
		(disable-self)
		)

	#end-if

	#load-if-defined INCAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ATAHUALPA)
		(up-change-name "General Atahualpa")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general HUAYNA-CAPAC)
		(up-change-name "General Huayna Capac")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MANCO-CAPAC)
		(up-change-name "General Manco Capac")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general PACHACUTI)
		(up-change-name "General Pachacuti")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TOPA-YUPANQUI)
		(up-change-name "General Topa Yupanqui")
		(disable-self)
		)

	#end-if

	#load-if-defined INDIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general AKBAR)
		(up-change-name "General Akbar")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ALA-UD-DIN)
		(up-change-name "General Ala-ud-din")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general BABUR)
		(up-change-name "General Babur")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general BAPPA-RAWAL)
		(up-change-name "General Bappa Rawal")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general CHANDRAGUPTA)
		(up-change-name "General Chandragupta")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general PRITHVIRAJ)
		(up-change-name "General Prithviraj")
		(disable-self)
		)
			
		(defrule
		(goal g-general 6)
		=>
		(set-goal g-general RAJENDRA)
		(up-change-name "General Rajendra")
		(disable-self)
		)
		
	#end-if

	#load-if-defined ITALIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general DOMENICO-SELVO)
		(up-change-name "General Domenico Selvo")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general FRANCESCO-SFORZA)
		(up-change-name "General Francesco Sforza")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general GUGLIELMO-EMBRIACO)
		(up-change-name "Gen. Guglielmo Embriaco")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general LIUTPRAND)
		(up-change-name "General Liutprand")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general OTTONE-VISCONTI)
		(up-change-name "General Ottone Visconti")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general PIETRO-GRADENIGO)
		(up-change-name "General Pietro Gradenigo")
		(disable-self)
		)
		
	#end-if

	#load-if-defined JAPANESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general FUJIWARANO-MICHINAGA)
		(up-change-name "Gen. Fujiwara Michinaga")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KUSUNOKI-MASASHIGE)
		(up-change-name "Gen. Kusunoki Masashige")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MINAMOTONO-YORITOMO)
		(up-change-name "Gen. Minamotono Yoritomo")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ODA-NOBUNAGA)
		(up-change-name "General Oda Nobunaga")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TOKUGAWA-IEYASU)
		(up-change-name "Gen. Tokugawa Ieyasu")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general TOYOTOMI-HIDEYOSHI)
		(up-change-name "Gen. Toyotomi Hideyoshi")
		(disable-self)
		)

	#end-if

	#load-if-defined KHMER-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general JAYAVARMAN-II)
		(up-change-name "General Jayavarman II")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general JAYAVARMAN-VII)
		(up-change-name "General Jayavarman VII")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general SURYAVARMAN-I)
		(up-change-name "General Suryavarman I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general SURYAVARMAN-II)
		(up-change-name "General Suryavarman II")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YASOVARMAN-I)
		(up-change-name "General Yasovarman I")
		(disable-self)
		)
		
	#end-if

	#load-if-defined KOREAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general CHOE-MU-SON)
		(up-change-name "General Ch'oe Mu-son")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ULJI-MUN-TOK)
		(up-change-name "General Ulji Mun-tok")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general WANG-KON)
		(up-change-name "General Wang Kon")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general YI-SONG-KYE)
		(up-change-name "General Yi Song-kye")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YI-SUN-SHIN)
		(up-change-name "General Yi Sun-shin")
		(disable-self)
		)

	#end-if

	#load-if-defined LITHUANIANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALGIRDAS)
		(up-change-name "General Algirdas")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general GEDIMINAS)
		(up-change-name "General Gediminas")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general JOGAILA)
		(up-change-name "General Jagaila")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general MINDAUGAS)
		(up-change-name "General Mindaugas")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general VYTAUTAS)
		(up-change-name "General Vytautus")
		(disable-self)
		)
		
	#end-if

	#load-if-defined MAGYAR-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ARPAD)
		(up-change-name "General Arpad")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general HUNYADI-JANOS)
		(up-change-name "General Hunyadi Janos")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general ISTVAN)
		(up-change-name "General Istvan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general KAROLY-ROBERT)
		(up-change-name "General Karoly Robert")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general LASZLO)
		(up-change-name "General Laszlo")
		(disable-self)
		)
		
	#end-if

	#load-if-defined MALAY-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general DHARMASETU)
		(up-change-name "General Dharmasetu")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general GAJAH-MADA)
		(up-change-name "General Gajah Mada")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HAYAM-WURUK)
		(up-change-name "General Hayam Wuruk")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general PARAMESWARA)
		(up-change-name "General Parameswara")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general RADEN-WIJAYA)
		(up-change-name "General Raden Wijaya")
		(disable-self)
		)
		
	#end-if

	#load-if-defined MALIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general MAHMUD-IV)
		(up-change-name "General Mahmud IV")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general MUSA)
		(up-change-name "General Musa")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general SAKURA)
		(up-change-name "General Sakura")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general SOULEYMAN)
		(up-change-name "General Souleyman")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general SUNDJATA)
		(up-change-name "General Sundjata")
		(disable-self)
		)
		
	#end-if

	#load-if-defined MAYAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BALAJ-CHAN-KAWIIL)
		(up-change-name "Gen. B'alaj Chan K'awiil")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KINICH-JANAAB-PACAL)
		(up-change-name "Gen. Kinich Janaab Pacal")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general UAXACLAJUUN-UBAAH-KAWIIL)
		(up-change-name "Gen. Uaxaclajuun Ub'aah K'awiil")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general YIKIN-CHAN-KAWIIL)
		(up-change-name "Gen. Yik'in Chan K'awiil")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YUKNOOM-CHEEN)
		(up-change-name "Gen. Yuknoom Che'en II")
		(disable-self)
		)

	#end-if

	#load-if-defined MONGOL-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general GENGHIS-KHAN)
		(up-change-name "General Genghis Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KUBLAI-KHAN)
		(up-change-name "General Kublai Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general KUSHLUK)
		(up-change-name "General Kushluk")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general OGEDEI-KHAN)
		(up-change-name "General Ogedei Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general SUBOTAI)
		(up-change-name "General Subotai")
		(disable-self)
		)

	#end-if

	#load-if-defined PERSIAN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALA-AD-DIN-MUHAMMAD)
		(up-change-name "Gen. Ala ad-Din Muhammad")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ANUSH-TIGIN-GHARCHAI)
		(up-change-name "Gen. Anush Tigin Gharchai")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general BAHRAM)
		(up-change-name "General Bahram V")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general MAHMUD-GHAZNAVI)
		(up-change-name "General Mahmud Ghaznavi")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general KHOSRAU)
		(up-change-name "General Khosrau I")
		(disable-self)
		)

	#end-if

	#load-if-defined PORTUGUESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general AFONSO-DE-ALBUQUERQUE)
		(up-change-name "Gen. Afonso de Albuquerque")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general AFONSO-HENRIQUES)
		(up-change-name "General Afonso Henriques")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general FRANCISCO-DE-ALMEIDA)
		(up-change-name "Gen. Francisco de Almeida")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general HENRY-THE-NAVIGATOR)
		(up-change-name "Gen. Henry the Navigator")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general NUNO-ALVARES-PEREIRA)
		(up-change-name "Gen. Nuno Alvares Pereira")
		(disable-self)
		)
		
	#end-if

	#load-if-defined SARACEN-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BAIBARS)
		(up-change-name "General Baibars")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general ABU-BAKR)
		(up-change-name "General Abu Bakr")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general MUAWIYAH)
		(up-change-name "General Muawiyah I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general KHALID)
		(up-change-name "General Khalid")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general HARUN-AL-RASHID)
		(up-change-name "General Harun al-Rashid")
		(disable-self)
		)
			
		(defrule
		(goal g-general 5)
		=>
		(set-goal g-general SALADIN)
		(up-change-name "General Saladin")
		(disable-self)
		)

	#end-if

	#load-if-defined SICILIANS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BOHEMOND)
		(up-change-name "General Bohemond")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general FREDERICK-II)
		(up-change-name "General Frederick II")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general ROBERT-GUISCARD)
		(up-change-name "General Robert Guiscard")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general ROGER-BOSSO)
		(up-change-name "General Roger Bosso")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ROGER-II)
		(up-change-name "General Roger II")
		(disable-self)
		)

	#end-if

	#load-if-defined SLAVIC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALEXANDER-NEVSKY)
		(up-change-name "General Alexander Nevski")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BOLESLAW)
		(up-change-name "General Boleslaw")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general SVIATOSLAV)
		(up-change-name "General Sviatoslav")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general VLADIMIR)
		(up-change-name "General Vladimir")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general YAROSLAV)
		(up-change-name "General Yaroslav")
		(disable-self)
		)
		
	#end-if

	#load-if-defined SPANISH-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALFONSO)
		(up-change-name "General Alfonso VI")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general GONZALO-PIZARRO)
		(up-change-name "General Gonzalo Pizarro")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HERNAN-CORTEZ)
		(up-change-name "General Hernan Cortez")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general RODRIGO-DIAZ)
		(up-change-name "General Rodrigo Diaz")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general ISABELLA)
		(up-change-name "General Isabella")
		(disable-self)
		)

	#end-if

	#load-if-defined TATARS-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general BATU-KHAN)
		(up-change-name "General Batu Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general KAIDU)
		(up-change-name "General Kaidu")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general TAMERLANE)
		(up-change-name "General Tamerlane")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general TOKHTAMYSH-KHAN)
		(up-change-name "General Tokhtamysh Khan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general UZBEG-KHAN)
		(up-change-name "General Uzbeg Khan")
		(disable-self)
		)
		
	#end-if

	#load-if-defined TEUTONIC-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general CHARLES-V)
		(up-change-name "General Charles V")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general FREDERICK)
		(up-change-name "General Frederick I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HENRY-THE-LION)
		(up-change-name "General Henry the Lion")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general OTTO)
		(up-change-name "General Otto I")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general WINRICH-VON-KNIPRODE)
		(up-change-name "General Winrich")
		(disable-self)
		)

	#end-if

	#load-if-defined TURKISH-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general ALP-ARSLAN)
		(up-change-name "General Alp Arslan")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general BAYAZID)
		(up-change-name "General Bayazid")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general OSMAN)
		(up-change-name "General Osman")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general SULEIMAN)
		(up-change-name "General Suleiman")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TUGHRIL)
		(up-change-name "General Tughril")
		(disable-self)
		)

	#end-if

	#load-if-defined VIETNAMESE-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general LE-LOI)
		(up-change-name "General Le Loi")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general LE-THANH-TONG)
		(up-change-name "General Le Thanh Tong")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general NGO-QUYEN)
		(up-change-name "General Ngo Quyen")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general TRAN-NHAN-TONG)
		(up-change-name "General Tran Nhan Tong")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general TRAN-THAI-TONG)
		(up-change-name "General Tran Thai Tong")
		(disable-self)
		)
	#end-if

	#load-if-defined VIKING-CIV
			
		(defrule
		(goal g-general 0)
		=>
		(set-goal g-general CNUT)
		(up-change-name "General Cnut")
		(disable-self)
		)
			
		(defrule
		(goal g-general 1)
		=>
		(set-goal g-general HARALD-FAIRHAIR)
		(up-change-name "General Harald Fairhair")
		(disable-self)
		)
			
		(defrule
		(goal g-general 2)
		=>
		(set-goal g-general HARALD-HARDRAADE)
		(up-change-name "General Harald Hardraade")
		(disable-self)
		)
			
		(defrule
		(goal g-general 3)
		=>
		(set-goal g-general LEIF-ERICSON)
		(up-change-name "General Leif Ericson")
		(disable-self)
		)
			
		(defrule
		(goal g-general 4)
		=>
		(set-goal g-general OLAF-HARALDSSON)
		(up-change-name "General Olaf Haraldsson")
		(disable-self)
		)
	#end-if

;------------------------
;	GOAL 2: g-current-strategy 
;------------------------

	;---------------------
	;	Main Strategies
	;---------------------

		;Select the starting strategy. This will eventually be different according to the general, but for now it's just based on civ and flank/pocket
		#load-if-defined AZTEC-CIV
			
			(load "The General 3.1/Strats/Aztecs")

		#end-if

		#load-if-defined BERBERS-CIV
			
			(load "The General 3.1/Strats/Berbers")

		#end-if

		#load-if-defined BRITON-CIV
			
			(load "The General 3.1/Strats/Britons")

		#end-if

		#load-if-defined BULGARIANS-CIV
			
			(load "The General 3.1/Strats/Bulgarians")

		#end-if

		#load-if-defined BURGUNDIANS-CIV
			
			(load "The General 3.1/Strats/Burgundians")

		#end-if

		#load-if-defined BURMESE-CIV
			
			(load "The General 3.1/Strats/Burmese")

		#end-if
		
		#load-if-defined BYZANTINE-CIV
			
			(load "The General 3.1/Strats/Byzantines")

		#end-if

		#load-if-defined CELTIC-CIV
			
			(load "The General 3.1/Strats/Celts")

		#end-if

		#load-if-defined CHINESE-CIV
			
			(load "The General 3.1/Strats/Chinese")

		#end-if

		#load-if-defined CUMANS-CIV
			
			(load "The General 3.1/Strats/Cumans")

		#end-if

		#load-if-defined ETHIOPIAN-CIV
			
			(load "The General 3.1/Strats/Ethiopians")

		#end-if

		#load-if-defined FRANKISH-CIV
			
			(load "The General 3.1/Strats/Franks")

		#end-if

		#load-if-defined GOTHIC-CIV
			
			(load "The General 3.1/Strats/Goths")

		#end-if

		#load-if-defined HUN-CIV
			
			(load "The General 3.1/Strats/Huns")

		#end-if

		#load-if-defined INCAN-CIV
			
			(load "The General 3.1/Strats/Incas")

		#end-if

		#load-if-defined INDIAN-CIV
			
			(load "The General 3.1/Strats/Indians")

		#end-if

		#load-if-defined ITALIAN-CIV
			
			(load "The General 3.1/Strats/Italians")

		#end-if

		#load-if-defined JAPANESE-CIV
			
			(load "The General 3.1/Strats/Japanese")

		#end-if

		#load-if-defined KHMER-CIV
			
			(load "The General 3.1/Strats/Khmer")

		#end-if

		#load-if-defined KOREAN-CIV
			
			(load "The General 3.1/Strats/Koreans")

		#end-if

		#load-if-defined LITHUANIANS-CIV
			
			(load "The General 3.1/Strats/Lithuanians")

		#end-if

		#load-if-defined MAGYAR-CIV
			
			(load "The General 3.1/Strats/Magyars")

		#end-if

		#load-if-defined MALAY-CIV
			
			(load "The General 3.1/Strats/Malay")

		#end-if

		#load-if-defined MALIAN-CIV
			
			(load "The General 3.1/Strats/Malians")

		#end-if

		#load-if-defined MAYAN-CIV
			
			(load "The General 3.1/Strats/Mayans")

		#end-if

		#load-if-defined MONGOL-CIV
			
			(load "The General 3.1/Strats/Mongols")

		#end-if

		#load-if-defined PERSIAN-CIV
			
			(load "The General 3.1/Strats/Persians")

		#end-if

		#load-if-defined PORTUGUESE-CIV
			
			(load "The General 3.1/Strats/Portuguese")

		#end-if

		#load-if-defined SARACEN-CIV
			
			(load "The General 3.1/Strats/Saracens")

		#end-if

		#load-if-defined SICILIANS-CIV
			
			(load "The General 3.1/Strats/Sicilians")

		#end-if

		#load-if-defined SLAVIC-CIV
			
			(load "The General 3.1/Strats/Slavs")

		#end-if

		#load-if-defined SPANISH-CIV
			
			(load "The General 3.1/Strats/Spanish")

		#end-if

		#load-if-defined TATARS-CIV
			
			(load "The General 3.1/Strats/Tatars")

		#end-if

		#load-if-defined TEUTONIC-CIV
			
			(load "The General 3.1/Strats/Teutons")

		#end-if

		#load-if-defined TURKISH-CIV
			
			(load "The General 3.1/Strats/Turks")

		#end-if

		#load-if-defined VIETNAMESE-CIV
			
			(load "The General 3.1/Strats/Vietnamese")

		#end-if

		#load-if-defined VIKING-CIV
			
			(load "The General 3.1/Strats/Vikings")

		#end-if

	;-----------------------
	;	Update Strategies
	;-----------------------

		(defrule
		(current-age == dark-age)
		(up-compare-goal g-current-strategy g:!= g-dark-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		(up-modify-goal g-current-strategy g:= g-dark-strategy)
		(up-modify-goal g-next-strategy g:= g-early-feudal-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		(set-goal g-support-unit 0)
		)

		(defrule
		(up-compare-goal g-age-status == EARLY-FEUDAL)
		(up-compare-goal g-current-strategy g:!= g-early-feudal-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		(up-modify-goal g-current-strategy g:= g-early-feudal-strategy)
		(up-modify-goal g-next-strategy g:= g-mid-feudal-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		(set-goal g-support-unit 0)
		)

		(defrule
		(current-age == feudal-age)
		(up-compare-goal g-age-status >= MID-FEUDAL)
		(up-compare-goal g-current-strategy g:!= g-mid-feudal-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		(up-modify-goal g-current-strategy g:= g-mid-feudal-strategy)
		(up-modify-goal g-next-strategy g:= g-early-castle-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		(set-goal g-support-unit 0)
		)

		(defrule
		(up-compare-goal g-age-status == EARLY-CASTLE)
		(up-compare-goal g-current-strategy g:!= g-early-castle-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		(up-modify-goal g-current-strategy g:= g-early-castle-strategy)
		(up-modify-goal g-next-strategy g:= g-mid-castle-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		(set-goal g-support-unit 0)
		)

		(defrule
		(current-age == castle-age)
		(up-compare-goal g-age-status >= MID-CASTLE)
		(up-compare-goal g-current-strategy g:!= g-mid-castle-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		(up-modify-goal g-current-strategy g:= g-mid-castle-strategy)
		(up-modify-goal g-next-strategy g:= g-early-imperial-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		(set-goal g-support-unit 0)
		)

		(defrule
		(up-compare-goal g-age-status == EARLY-IMPERIAL)
		(up-compare-goal g-current-strategy g:!= g-early-imperial-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		(up-modify-goal g-current-strategy g:= g-early-imperial-strategy)
		(up-modify-goal g-next-strategy g:= g-mid-imperial-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		(set-goal g-support-unit 0)
		)

		(defrule
		(up-compare-goal g-age-status == MID-IMPERIAL)
		(up-compare-goal g-current-strategy g:!= g-mid-imperial-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		(up-modify-goal g-current-strategy g:= g-mid-imperial-strategy)
		(up-modify-goal g-next-strategy g:= g-mid-imperial-strategy)	;Mid-Imp is our last planned strategy (hopefully we don't have to go to late imp)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		)

		(defrule
		(up-compare-goal g-age-status == LATE-IMPERIAL)
		(up-compare-goal g-current-strategy g:!= g-late-imperial-strategy)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		(up-modify-goal g-current-strategy g:= g-late-imperial-strategy)
		(up-modify-goal g-next-strategy g:= g-late-imperial-strategy)
		(up-modify-goal g-previous-support-unit g:= g-support-unit)
		)

		(defrule
		(up-compare-goal g-previous-strategy < 101)
		=>
		(up-modify-goal g-previous-strategy g:= g-current-strategy)
		)

;--------------------------------
;	GOAL 3: g-initial-strategy
;--------------------------------

	(defrule
	(up-compare-goal g-current-strategy > 0)
	=>
	(up-modify-goal g-initial-strategy g:= g-current-strategy)
	(disable-self)
	)

;--------------------------
;	GOAL 4: g-game-focus
;--------------------------

    (load "The General 3.1/Functions/Reset")

	;What the AI is current focused on

	;-----------
	;	Reset
	;-----------

		(defrule
		(true)
		=>
		(set-goal g-game-focus PENDING)
		)

	;-------------
	;	Rebuild
	;-------------

		#load-if-defined TEST-BEFORE-USING

			;Rebuild if we have no TC
			(defrule
			(up-compare-goal g-current-strategy != DOUCHE)
			(or
				(game-time > 600)
				(and
					(game-time > 300)
					(goal g-map-style NO)))
			(building-type-count-total town-center == 0)
			=>
			(set-goal g-game-focus REBUILD)
			)

			;If top enemy military pop and total pop are both more than twice our military and total pop, time to rebuild
			;Check if top enemy player has at least twice as much military and total pop as us
			;Example: if top enemy has 52 military and we have 23, g-top-player-military-parity will be -29
			;Calculation: multiply -29 by negative 1 and compare to 23 => enemy has more than twice the military pop
			(defrule
			(game-time > 300)
			(up-compare-goal g-top-enemy-military-parity < 0)
			(up-compare-goal g-top-enemy-pop-parity < 0)
			(up-modify-goal g-temp g:neg g-top-enemy-military-parity)	;multiply military parity by negative 1 and store in g-temp
			(up-modify-goal g-temp-2 g:neg g-top-enemy-pop-parity)		;multiply total pop parity by negative 1 and store in g-temp-2
			(military-population g:< g-temp)	;our military is less than half of top enemy
			(population g:< g-temp-2)			;our total pop is less than half of top enemy
			(civilian-population < 40)
			(or
				(current-age > dark-age)
				(or
					(game-time > 600)
					(and
						(game-time > 300)
						(goal g-map-style NO))))
			=>
			(set-goal g-game-focus REBUILD)
			)

		#end-if

	;---------------
	;	Defensive
	;---------------

		;If enemy units are in town, determine military advantage based on multiple variables, store in g-temp
		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(goal g-town-under-attack YES)
		=>
		(up-modify-goal g-temp g:= g-attacker-military-parity)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(goal g-town-under-attack NO)
		=>
		(up-modify-goal g-temp g:= g-target-military-parity)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(building-type-count castle > 0)
		=>
		(up-modify-goal g-temp c:+ 8)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(up-building-type-in-town c: castle > 0)
		(goal g-attacking NO)
		=>
		(up-modify-goal g-temp c:- 15)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(goal g-target-age-parity WE-ARE-AHEAD)
		=>
		(up-modify-goal g-temp c:+ 10)
		)

		(defrule
		(up-compare-goal g-enemy-units-in-town >= 2)
		(goal g-target-age-parity WE-ARE-BEHIND)
		=>
		(up-modify-goal g-temp c:- 10)
		)

		;Focus on defending if enemy is attacking with large enough numbers
		(defrule
		(goal g-game-focus PENDING)
		(up-compare-goal g-enemy-units-in-town >= 2)
		(up-compare-goal g-enemy-units-in-town <= 5)
		(up-compare-goal g-temp <= -5)
		(up-get-fact military-population 0 g-temp-2)
		(up-modify-goal g-temp-2 c:/ -4)
		(up-compare-goal g-temp g:<= g-temp-2)	;calculated military advantage < -25% of our military population
		=>
		(set-goal g-game-focus DEFENSIVE)
		)

		(defrule
		(goal g-game-focus PENDING)
		(up-compare-goal g-enemy-units-in-town >= 6)
		(up-compare-goal g-enemy-units-in-town <= 10)
		(up-compare-goal g-temp <= 0)			;calculated military advantage < 0
		=>
		(set-goal g-game-focus DEFENSIVE)
		)

		(defrule
		(goal g-game-focus PENDING)
		(up-compare-goal g-enemy-units-in-town >= 11)
		(up-compare-goal g-temp <= 5)
		(up-get-fact military-population 0 g-temp-2)
		(up-modify-goal g-temp-2 c:/ 4)
		(up-compare-goal g-temp g:<= g-temp-2)	;calculated military advantage < 25% of our military population
		=>
		(set-goal g-game-focus DEFENSIVE)
		)

		;Not currently attacked by many soldiers, but a threat from the enemy seems imminent
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position FLANK)
		(up-compare-goal g-enemy-units-in-town < 2)
		(or
			(up-compare-goal g-target-military-parity < -8)
			(and
				(goal g-town-under-attack YES)
				(up-compare-goal g-attacker-military-parity < -5)))
		(military-population < 12)
		=>
		(set-goal g-game-focus DEFENSIVE)
		)

	;----------
	;	Boom
	;----------

		;Boom if we fell behind in population and we have a strong ally
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position FLANK)
		(up-modify-goal g-temp c:neg TWENTY-FIVE-PERCENT-POP)
		(up-compare-goal g-top-enemy-pop-parity g:<= g-temp)	;top enemy has > 50 pop more than us (in 200 pop game)
		(up-compare-goal g-top-enemy-military-parity < 0)		;top enemy has more military than us
		(players-population any-ally >= EIGHTY-PERCENT-POP)		;we have a stronger ally that can support us
		=>
		(set-goal g-game-focus BOOM)
		)

		;Boom if we fell behind in both military and economy
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position FLANK)
		(up-compare-goal g-target-military-parity < 0)
		(up-compare-goal g-target-pop-parity g:< g-target-military-parity)	;also behind in civilian pop
		(up-compare-goal g-primary-unit-tech-progress >= PRIORITY-CASTLE-COMPLETE)
		(up-compare-goal g-target-age-parity != WE-ARE-AHEAD)
		=>
		(set-goal g-game-focus BOOM)
		)

		;Boom if we gained map control
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position FLANK)
		(up-compare-goal g-target-military-parity > 10)
		(up-compare-goal g-target-pop-parity g:> g-target-military-parity)	;also ahead in civilian pop
		(up-compare-goal g-target-pop-parity > 20)
		(up-compare-goal g-primary-unit-tech-progress >= PRIORITY-CASTLE-COMPLETE)
		(up-compare-goal g-age-status >= MID-CASTLE)
		(up-timer-status t-first-attack != timer-running)
		=>
		(set-goal g-game-focus BOOM)
		)

	;----------------
	;	Aggressive
	;----------------

		;Focus on military if boom is complete
		(defrule
		(goal g-game-focus PENDING)
		(goal g-position POCKET)
		(up-compare-goal g-primary-unit-tech-progress >= PRIORITY-IMPERIAL-COMPLETE)
		(up-compare-goal g-support-unit-tech-progress >= PRIORITY-IMPERIAL-COMPLETE)
		(up-modify-goal g-temp g:= g-desired-num-villager)
		(up-modify-goal g-temp c:- 10)
		(up-object-type-count c: villager g:>= g-temp)	;>= 10 less than desired villager numbers
		=>
		(set-goal g-game-focus AGGRESSIVE)
		)

	;--------------
	;	Defaults
	;--------------

		(defrule
		(goal g-game-focus PENDING)
		; (goal g-position FLANK)
		=>
		(set-goal g-game-focus AGGRESSIVE)
		)

		; (defrule
		; (goal g-game-focus PENDING)
		; (goal g-position POCKET)
		; =>
		; (set-goal g-game-focus BOOM)
		; )

		(defrule
		(goal g-game-focus PENDING)
		=>
		(set-goal g-game-focus AGGRESSIVE)
		)

;----------------------------
;	GOAL 5: g-age-status
;----------------------------

	(load "The General 3.1/Functions/Reset")

		(defrule
		(true)
		=>
		(set-goal g-age-status PENDING)
		(up-get-threat-data g-threat-elapsed-time g-threat-player g-threat-source-class g-threat-target-class)	;gets data of the most threat from anywhere on the map
		(up-modify-sn sn-focus-player-number g:= g-threat-player)	;the player that most recently attacked us
		)

	;--------------
	;	Dark Age
	;--------------

		(defrule
		(up-research-status c: feudal-age == research-pending)
		=>
		(set-goal g-age-status TO-FEUDAL)
		)

		(defrule
		(current-age == dark-age)
		(up-compare-goal g-age-status < SAVE-FOR-FEUDAL)
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:- 2)
		(or
			(up-object-type-count-total c: villager g:>= g-temp)
			(goal g-town-under-attack YES))
		(current-age-time > 5)	;wait until g-required-num-villager is set
		=>
		(set-goal g-age-status SAVE-FOR-FEUDAL)
		)

		(defrule
		(current-age == dark-age)
		(goal g-age-status PENDING)
		=>
		(set-goal g-age-status DARK)
		)

	;----------------
	;	Feudal Age
	;----------------

		(defrule
		(up-research-status c: castle-age == research-pending)
		=>
		(set-goal g-age-status TO-CASTLE)
		)

		(defrule
		(current-age == feudal-age)
		(up-compare-goal g-age-status < SAVE-FOR-CASTLE)
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:- 4)
		(or
			(up-object-type-count-total c: villager g:>= g-temp)
			(and
				(players-current-age focus-player >= castle-age)
				(goal g-town-under-attack YES)))
		(current-age-time > 5)	;wait until g-required-num-villager is set
		=>
		(set-goal g-age-status SAVE-FOR-CASTLE)
		)

		(defrule
		(current-age == feudal-age)
		(up-compare-goal g-age-status < MID-FEUDAL)
		(or
			(up-compare-goal g-attack-status >= FIRST-FEUDAL-ATTACK)
			(current-age-time >= 300))
		=>
		(set-goal g-age-status MID-FEUDAL)
		)

		(defrule
		(current-age == feudal-age)
		(goal g-age-status PENDING)
		=>
		(set-goal g-age-status EARLY-FEUDAL)
		)

	;----------------
	;	Castle Age
	;----------------

		(defrule
		(up-research-status c: imperial-age == research-pending)
		=>
		(set-goal g-age-status TO-IMPERIAL)
		)

		(defrule
		(current-age == castle-age)
		(up-compare-goal g-age-status < SAVE-FOR-IMPERIAL)
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:- 5)
		(or
			(up-object-type-count-total c: villager g:>= g-temp)
			(and
				(players-current-age focus-player >= imperial-age)
				(goal g-town-under-attack YES)))
		(current-age-time > 5)	;wait until g-required-num-villager is set
		=>
		(set-goal g-age-status SAVE-FOR-IMPERIAL)
		)

		(defrule
		(current-age == castle-age)
		(up-compare-goal g-age-status < MID-CASTLE)
		(or
			(up-compare-goal g-attack-status >= FIRST-CASTLE-ATTACK)
			(current-age-time >= 450))
		=>
		(set-goal g-age-status MID-CASTLE)
		)

		(defrule
		(current-age == castle-age)
		(goal g-age-status PENDING)
		=>
		(set-goal g-age-status EARLY-CASTLE)
		)

	;------------------
	;	Imperial Age
	;------------------

		(defrule
		(current-age == imperial-age)
		(up-compare-goal g-age-status < LATE-IMPERIAL)
		(unit-type-count trade-cart < 6)
		(or
			(up-compare-goal g-recent-gold-gathered < 50)
			(up-gaia-type-count c: gold < 10))
		=>
		(set-goal g-age-status LATE-IMPERIAL)
		)

		(defrule
		(current-age == imperial-age)
		(up-compare-goal g-age-status < MID-IMPERIAL)
		(or
			(up-compare-goal g-attack-status >= FIRST-IMPERIAL-ATTACK)
			(current-age-time >= 450))
		=>
		(set-goal g-age-status MID-IMPERIAL)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-age-status PENDING)
		=>
		(set-goal g-age-status EARLY-IMPERIAL)
		)

;-----------------------------
;	GOAL 6: g-team-position
;-----------------------------

    (load "The General 3.1/Functions/Reset")

	;Determines the position within the team

	#load-if-defined UP-1-PLAYER-TEAM	;No team coordination

		(defrule
		(game-time > 5)
		=>
		(set-goal g-team-position SOLO)
		(disable-self)
		)

	#end-if

	#load-if-defined UP-2-PLAYER-TEAM	;Play as 2v2

		(defrule
		(game-time > 5)
		=>
		(set-goal g-team-position FLANK-NO-POCKET)
		(disable-self)
		)

	#end-if

	#load-if-not-defined UP-1-PLAYER-TEAM
	#load-if-not-defined UP-2-PLAYER-TEAM

		(defrule
		(game-time > 5)
		(goal g-position 1)	;flank
		=>
		(set-goal g-team-position FLANK)
		(disable-self)
		)
		
		(defrule
		(game-time > 5)
		(goal g-position 2)	;pocket
		=>
		(set-goal g-team-position POCKET)
		(disable-self)
		)

		#load-if-defined UP-POCKET-POSITION
			;If pocket, determine if we are super-pocket. This is when a pocket player is in between two other pocket players.
			(defrule
			(game-time > 10)
			=>
			(up-find-player ally find-closest g-temp)
			(up-modify-sn sn-focus-player-number g:= g-temp)
			(disable-self)
			)

			(defrule
			(game-time > 10)
			(up-allied-goal focus-player g-position == 2)	;closest ally is pocket
			=>
			(up-find-player ally find-closest g-temp)
			(up-find-next-player ally find-closest g-temp)	;find second-closest ally
			(up-modify-sn sn-focus-player-number g:= g-temp)
			(set-goal g-temp-2 123)
			(disable-self)
			)

			(defrule
			(goal g-temp-2 123)
			(game-time > 10)
			(up-allied-goal focus-player g-position == 2)	;second-closest ally is pocket
			=>
			(set-goal g-team-position SUPER-POCKET)
			(disable-self)
			)
		
		#end-if
	#end-if
	#end-if

;----------------------------------------
;	GOAL 11: g-town-under-attack
;		Also g-enemy-buildings-in-town
;		Also g-enemy-units-in-town
;----------------------------------------

    (load "The General 3.1/Functions/Reset")

	;Determines if the town is under attack, helps request assistance from allies

	(defrule
	(true)
	=>
	(set-strategic-number sn-focus-player-number 1)
	(set-goal g-enemy-buildings-in-town 0)
	(set-goal g-enemy-units-in-town 0)
	)

		;Loop through all in-game enemies and count their buildings and units

		(defrule
		(player-in-game focus-player)
		(not
			(stance-toward focus-player ally))	;self is also considered an ally, so this rule won't count our own buildings
		=>
		(up-modify-goal g-temp s:= custom-sn-peaceful-town-size)
		(up-modify-goal g-temp c:min 40)
		(up-modify-goal g-temp c:%* 150)	;increase distance to search for enemy buildings by 150% because custom-sn-peaceful-town-size...
		(up-full-reset-search)				;...is measured as a square around the TC, not a circle
		(up-set-target-point g-position-self-x)	
		(up-filter-distance c: -1 g: g-temp)	;search for buildings within custom-sn-peaceful-town-size
		(up-find-remote c: building-class c: 40)
		(up-find-remote c: tower-class c: 40)
		(up-filter-status c: status-pending c: list-active)	;find buildings and towers under construction
		(up-find-status-remote c: building-class c: 40)
		(up-find-status-remote c: tower-class c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-enemy-buildings-in-town g:+ g-remote-total)
		)

		(defrule
		(player-in-game focus-player)
		(not
			(stance-toward focus-player ally))
		=>
		(up-modify-goal g-temp s:= custom-sn-peaceful-town-size)
		(up-modify-goal g-temp c:min 40)
		(up-modify-goal g-temp c:%* 150)	
		(up-full-reset-search)
		(up-set-target-point g-position-self-x)
		(up-filter-distance c: -1 g: g-temp)
		(up-filter-exclude cmdid-military-building -1 -1 building-class)
		(up-find-remote c: all-units-class c: 40)
		(up-get-search-state g-local-total)
		(up-modify-goal g-enemy-units-in-town g:+ g-remote-total)
		)

		(defrule
		(up-compare-sn sn-focus-player-number < 8)
		=>
		(up-modify-sn sn-focus-player-number c:+ 1)
		(up-jump-rule -3)
		)

	(defrule
	(town-under-attack)
	(goal g-attacking NO)
	(up-compare-goal g-town-under-attack != YES)
	(or
		(up-compare-goal g-enemy-buildings-in-town > 0)
		(up-compare-goal g-enemy-units-in-town >= 2))
	=>
	(disable-timer t-town-under-attack)
	(set-goal g-town-under-attack YES)
	; (chat-to-player my-player-number CHAT-TOWN-UNDER-ATTACK)
	)

	(defrule
	(not
		(town-under-attack))
	(goal g-town-under-attack YES)
	(up-compare-goal g-enemy-buildings-in-town == 0)
	(or
		(up-compare-goal g-enemy-units-in-town < 2)
		(and
			(current-age <= feudal-age)
			(up-compare-goal g-enemy-units-in-town == 0)))
	=>
	(enable-timer t-town-under-attack 10)
	(set-goal g-town-under-attack PENDING)
	; (chat-to-player my-player-number CHAT-CHECK-TOWN-IS-SAFE)
	)

	(defrule
	(goal g-town-under-attack PENDING)
	(up-timer-status t-town-under-attack == timer-triggered)
	(not
		(town-under-attack))
	(up-compare-goal g-enemy-buildings-in-town == 0)
	(or
		(up-compare-goal g-enemy-units-in-town < 2)
		(and
			(current-age <= feudal-age)
			(up-compare-goal g-enemy-units-in-town == 0)))
	=>
	(disable-timer t-town-under-attack)
	(set-goal g-town-under-attack NO)
	; (chat-to-player my-player-number CHAT-TOWN-IS-SAFE)
	)

;-----------------------------------------------
;	GOAL 12: g-target-military-parity
;-----------------------------------------------

    (load "The General 3.1/Functions/Reset")

	;The difference between our military pop and the military pop of the target player, > 0 means we have superiority

	(defrule
	(player-in-game target-player)
	=>
	(up-get-fact military-population 0 g-target-military-parity)
	(up-get-target-fact military-population 0 g-temp)
	(up-get-target-fact unit-type-count karambit-warrior g-temp-2)
	(up-get-target-fact unit-type-count elite-karambit-warrior g-temp-3)
	(up-modify-goal g-temp-2 g:+ g-temp-3)	;add karambit warrior counts together
	(up-modify-goal g-temp-2 c:/ 2)			;divide karambit warrior counts in half
	(up-modify-goal g-temp g:- g-temp-2)	;subtract half of karambit warrior counts since they should only count as half pop, military population counts them as a whole unit
	(up-modify-goal g-target-military-parity g:- g-temp)	;subtract the military population of target player from our military population
	)

;-----------------------------------------------
;	GOAL 13: g-target-pop-parity
;-----------------------------------------------

    (load "The General 3.1/Functions/Reset")

	;The difference between our total pop and the total pop of the target player, > 0 means we have superiority

	(defrule
	(player-in-game target-player)
	=>
	(up-get-fact population 0 g-target-pop-parity)
	(up-get-target-fact population 0 g-temp)
	(up-get-target-fact unit-type-count karambit-warrior g-temp-2)
	(up-get-target-fact unit-type-count elite-karambit-warrior g-temp-3)
	(up-modify-goal g-temp-2 g:+ g-temp-3)	;add karambit warrior counts together
	(up-modify-goal g-temp-2 c:/ 2)			;divide karambit warrior counts in half
	(up-modify-goal g-temp g:- g-temp-2)	;subtract half of karambit warrior counts since they should only count as half pop, population counts them as a whole unit
	(up-modify-goal g-target-pop-parity g:- g-temp)	;subtract the total population of target player from our total population
	)

;-----------------------------------------------
;	GOAL 14: g-top-enemy-military-parity
;-----------------------------------------------

    (load "The General 3.1/Functions/Reset")

	;The difference between our military pop and the highest military pop of any enemy, > 0 means we have superiority

	(defrule
	(player-in-game any-enemy)
	=>
	(up-get-fact military-population 0 g-top-enemy-military-parity)
	(up-get-fact-max any-enemy military-population 0 g-temp)
	(up-modify-goal g-top-enemy-military-parity g:- g-temp)	;subtract the military population of top enemy from our military population
	)

;-----------------------------------------------
;	GOAL 15: g-top-enemy-pop-parity
;-----------------------------------------------

    (load "The General 3.1/Functions/Reset")

	;The difference between our total pop and the highest total pop of any enemy, > 0 means we have superiority

	(defrule
	(player-in-game any-enemy)
	=>
	(up-get-fact population 0 g-top-enemy-pop-parity)
	(up-get-fact-max any-enemy population 0 g-temp)
	(up-modify-goal g-top-enemy-pop-parity g:- g-temp)	;subtract the total population of top enemy from our total population
	)

;-------------------------------------
;	GOAL 16: g-team-military-parity
;-------------------------------------

	(load "The General 3.1/Functions/Reset")

	;The difference between our team's military pop and the total military pop of all our enemies, > 0 means we have superiority

	(defrule
	(player-in-game any-enemy)
	=>
	(up-get-fact military-population 0 g-team-military-parity)
	(up-get-fact-sum any-ally military-population 0 g-temp)
	(up-modify-goal g-team-military-parity g:+ g-temp)
	(up-get-fact-sum any-enemy military-population 0 g-temp)
	(up-modify-goal g-team-military-parity g:- g-temp)
	)

;-------------------------------------
;	GOAL 17: g-team-pop-parity
;-------------------------------------

	(load "The General 3.1/Functions/Reset")

	;The difference between our team's total pop and the total pop of all our enemies, > 0 means we have superiority

	(defrule
	(player-in-game any-enemy)
	=>
	(up-get-fact population 0 g-team-pop-parity)
	(up-get-fact-sum any-ally population 0 g-temp)
	(up-modify-goal g-team-pop-parity g:+ g-temp)
	(up-get-fact-sum any-enemy population 0 g-temp)
	(up-modify-goal g-team-pop-parity g:- g-temp)
	)

;-----------------------------------------------
;	GOAL 18: g-attacker-military-parity
;-----------------------------------------------

    (load "The General 3.1/Functions/Reset")

	;The difference between our military pop and the military pop of the enemy attacking us, > 0 means we have superiority, 999 means we aren't under attack

	(defrule
	(goal g-town-under-attack YES)
	=>
	(up-get-threat-data g-threat-elapsed-time g-threat-player g-threat-source-class g-threat-target-class)	;gets data of the most threat from anywhere on the map
	(up-modify-sn sn-focus-player-number g:= g-threat-player)	;the player that most recently attacked us
	(up-get-focus-fact military-population 0 g-temp)
	(up-modify-goal g-temp g:max g-enemy-units-in-town)	;set the attacker military population to either the most recent attacker's total military population or the number of enemy units in our town, whichever is larger
	(up-get-fact military-population 0 g-attacker-military-parity)
	(up-modify-goal g-attacker-military-parity g:- g-temp)	;subtract the military population of the attacking player(s) from our military population
	)

	(defrule
	(goal g-town-under-attack NO)
	=>
	(up-modify-goal g-attacker-military-parity g:= g-target-military-parity)
	)

;-----------------------------------------------
;	GOAL 19: g-attacker-pop-parity
;-----------------------------------------------

    (load "The General 3.1/Functions/Reset")

	;The difference between our total pop and the total pop of the enemy attacking us, > 0 means we have superiority, 999 means we aren't under attack

	(defrule
	(goal g-town-under-attack YES)
	=>
	(up-get-threat-data g-threat-elapsed-time g-threat-player g-threat-source-class g-threat-target-class)	;gets data of the most threat from anywhere on the map
	(up-modify-sn sn-focus-player-number g:= g-threat-player)	;the player that most recently attacked us
	(up-get-fact population 0 g-attacker-pop-parity)
	(up-get-focus-fact population 0 g-temp)
	(up-modify-goal g-attacker-pop-parity g:- g-temp)	;subtract the total population of the attacking player from our total population
	)

	(defrule
	(goal g-town-under-attack NO)
	=>
	(up-modify-goal g-attacker-pop-parity g:= g-target-pop-parity)
	)

;----------------------------------
;	GOAL 20: g-target-age-parity
;----------------------------------

    (load "The General 3.1/Functions/Reset")

	;Determines whether we are ahead or behind in age, compared to our target enemy

	(defrule
	(true)
	=>
	(up-get-fact current-age 0 g-temp)					;store our current age
	(up-get-target-fact current-age 0 g-temp-2)	;store target-player's current age
	)

	(defrule
	(up-compare-goal g-temp g:< g-temp-2)
	=>
	(set-goal g-target-age-parity WE-ARE-BEHIND)
	)
	
	(defrule
	(up-compare-goal g-temp g:== g-temp-2)
	=>
	(set-goal g-target-age-parity WE-ARE-EQUAL)
	)

	(defrule
	(up-compare-goal g-temp g:> g-temp-2)
	=>
	(set-goal g-target-age-parity WE-ARE-AHEAD)
	)

;----------------------------------
;	GOAL 21: g-top-enemy-age-parity
;----------------------------------

    (load "The General 3.1/Functions/Reset")

	;Determines whether we are ahead or behind in age, compared to our target enemy

	(defrule
	(true)
	=>
	(up-get-fact current-age 0 g-temp)					;store our current age
	(up-get-fact-max any-enemy current-age 0 g-temp-2)		;store current age of most advanced enemy
	)

	(defrule
	(up-compare-goal g-temp g:< g-temp-2)
	=>
	(set-goal g-top-enemy-age-parity WE-ARE-BEHIND)
	)
	
	(defrule
	(up-compare-goal g-temp g:== g-temp-2)
	=>
	(set-goal g-top-enemy-age-parity WE-ARE-EQUAL)
	)

	(defrule
	(up-compare-goal g-temp g:> g-temp-2)
	=>
	(set-goal g-top-enemy-age-parity WE-ARE-AHEAD)
	)

;--------------------------------
;	GOAL 23: g-scouting-status
;--------------------------------

    (load "The General 3.1/Functions/Reset")

	;Find necessary resources first
	(defrule
	(up-set-target-by-id g: g-scout1-id)
	(building-type-count-total town-center > 0)
	=>
	(set-goal g-scouting-status FIND-RESOURCES)
	(disable-self)
	)

	(defrule
	(goal g-scouting-status FIND-RESOURCES)
	(building-type-count-total town-center > 0)
	(or
		(up-compare-goal g-sheep-found-count > 0)
		(up-compare-const MIN-SHEEP == 0))
	(or
		(up-compare-goal g-boar-found-count > 0)
		(up-compare-const MIN-BOAR == 0))
	(or
		(up-gaia-type-count-total c: forage-class > 0)
		(up-compare-const FORAGE-PILE-1 == 0))
	=>
	(set-goal g-temp 19001)
	)

	;If playing a custom map, where sheep/boar/forage amounts aren't known, reset g-temp until we've found a food resource
	(defrule
	(goal g-scouting-status FIND-RESOURCES)
	(building-type-count-total town-center > 0)
	(up-compare-const MIN-SHEEP == 0)
	(up-compare-const MIN-BOAR == 0)
	(up-compare-const FORAGE-PILE-1 == 0)
	(up-compare-goal g-sheep-found-count == 0)
	(up-compare-goal g-boar-found-count == 0)
	(up-gaia-type-count-total c: forage-class == 0)
	(up-compare-goal g-deer-found-count == 0)
	(building-type-count farm == 0)
	=>
	(set-goal g-temp 0)
	)

	(defrule
	(goal g-temp 19001)
	(goal g-scouting-status FIND-RESOURCES)
	(building-type-count-total town-center > 0)
	(up-compare-goal g-min-forest-distance > 0)
	(up-gaia-type-count-total c: gold > 0)
	(up-gaia-type-count-total c: stone > 0)
	=>
	(set-goal g-scouting-status SCOUT-TOWN)
	)

    (load "The General 3.1/Functions/Reset")

	;Once necessary resources are found, find the rest if possible
	;Only require a certain percentage of the expected resources to be explored
	(defrule
	(goal g-scouting-status SCOUT-TOWN)
	(building-type-count-total town-center > 0)
	=>
	(set-goal g-temp MIN-SHEEP)
	(up-modify-goal g-temp c:%* 75)
	(up-modify-goal g-temp c:min 8)
	(set-goal g-temp-2 FORAGE-PILE-1)
	(up-modify-goal g-temp-2 c:+ FORAGE-PILE-2)
	(up-modify-goal g-temp-2 c:%* 60)
	(up-modify-goal g-temp-2 c:min 8)
	)

	(defrule
	(goal g-scouting-status SCOUT-TOWN)
	(building-type-count-total town-center > 0)
	(up-compare-goal g-sheep-found-count g:>= g-temp)
	(up-gaia-type-count-total c: forage-class g:>= g-temp-2)
	=>
	(set-goal g-temp MIN-BOAR)
	(up-modify-goal g-temp c:%* 60)
	(up-modify-goal g-temp c:min 2)
	(set-goal g-temp-2 MIN-DEER)
	(up-modify-goal g-temp-2 c:%* 55)
	(up-modify-goal g-temp-2 c:min 4)
	(set-goal g-temp-3 20001)
	)

	(defrule
	(goal g-temp-3 20001)
	(goal g-scouting-status SCOUT-TOWN)
	(building-type-count-total town-center > 0)
	(up-compare-goal g-boar-found-count g:>= g-temp)
	(up-compare-goal g-deer-found-count g:>= g-temp-2)
	=>
	(set-goal g-temp GOLD-PILE-1)
	(up-modify-goal g-temp c:+ GOLD-PILE-2)
	(up-modify-goal g-temp c:+ GOLD-PILE-3)
	(up-modify-goal g-temp c:%* 60)
	(up-modify-goal g-temp c:min 11)
	(set-goal g-temp-2 STONE-PILE-1)
	(up-modify-goal g-temp-2 c:+ STONE-PILE-2)
	(up-modify-goal g-temp-2 c:%* 40)
	(up-modify-goal g-temp-2 c:min 7)
	(set-goal g-temp-3 20002)
	)

	(defrule
	(goal g-temp-3 20002)
	(goal g-scouting-status SCOUT-TOWN)
	(building-type-count-total town-center > 0)
	(up-gaia-type-count-total c: gold g:>= g-temp)
	(up-gaia-type-count-total c: stone g:>= g-temp-2)
	=>
	(set-goal g-scouting-status ALL-RESOURCES-FOUND)
	)

	(defrule
	(goal g-duc-scouting STOP-DUC-SCOUTING)
	(up-compare-goal g-scouting-status < ALL-RESOURCES-FOUND)
	=>
	(set-goal g-scouting-status ALL-RESOURCES-FOUND)
	)

	(load "The General 3.1/Functions/Reset")

	(defrule
	(up-compare-goal g-scouting-status >= ALL-RESOURCES-FOUND)
	(up-compare-goal g-scouting-status != PUSH-DEER)
	(up-compare-goal g-scouting-status != FIND-ENEMY)
	(up-compare-goal g-scouting-status != RESCOUT-ENEMY)
	(up-compare-goal g-scouting-status != AUTO-SCOUT)
	=>
	(set-goal g-scouting-status AUTO-SCOUT)
	)

	;If no deer to push or we don't have time to push deer, move on to finding enemy
	(defrule
	(game-time s:> sn-home-exploration-time)
	(current-age == dark-age)
	(up-set-target-by-id g: g-scout1-id)
	(up-compare-goal g-scouting-status >= ALL-RESOURCES-FOUND)
	(up-compare-goal g-scouting-status != PUSH-DEER)
	(up-compare-goal g-current-deer-count > 0)
	=>
	(set-goal g-scouting-status PUSH-DEER)
	)

	(load "The General 3.1/Functions/Reset")
	
	(defrule
	(goal g-scouting-status PUSH-DEER)
	(or
		(not 
			(up-set-target-by-id g: g-scout1-id))
		(goal g-current-deer-count 0))
	=>
	(set-goal g-scouting-status AUTO-SCOUT)
	)
	
	(defrule
	(goal g-scouting-status PUSH-DEER)
	(up-compare-goal g-game-focus != BOOM)
	(or
		(up-compare-goal g-strategy-type < FAST-CASTLE)
		(current-age == feudal-age))
	(up-modify-goal g-temp s:= sn-home-exploration-time)
	(up-modify-goal g-temp c:+ 120)
	(or
		(game-time g:> g-temp)
		(or
			(unit-type-count villager >= 28)
			(up-compare-goal g-age-status >= TO-FEUDAL)))
	=>
	(set-goal g-scouting-status AUTO-SCOUT)
	(set-goal g-deer-pushing-status PENDING)
	(set-goal g-current-deer-id PENDING)
	)

	;Scout enemy
	(defrule
	(timer-triggered t-30-sec)
	(goal g-scouting-status AUTO-SCOUT)
	(current-age == feudal-age)
	(up-compare-goal g-attack-status <= FIRST-CASTLE-ATTACK)
	(up-compare-sn sn-number-explore-groups > 0)
	=>
	(up-get-point position-flank g-point-x)
	)

	(defrule
	(timer-triggered t-30-sec)
	(goal g-scouting-status AUTO-SCOUT)
	(current-age == feudal-age)
	(up-compare-goal g-attack-status <= FIRST-CASTLE-ATTACK)
	(up-compare-sn sn-number-explore-groups > 0)
	(up-point-explored g-point-x == explored-no)
	=>
	(up-send-scout group-type-land-explore scout-flank)
	)

	;Scout for market placement
	(defrule
	(goal g-scouting-status AUTO-SCOUT)
	(military-population >= TEN-PERCENT-POP)
	(up-compare-sn sn-number-explore-groups > 0)
	=>
	(up-get-point position-corner g-point-x)
	(disable-self)
	)

	(defrule
	(goal g-scouting-status AUTO-SCOUT)
	(military-population >= TEN-PERCENT-POP)
	(up-compare-sn sn-number-explore-groups > 0)
	(up-point-explored g-point-x == explored-no)
	=>
	(up-send-scout group-type-land-explore scout-corner)
	(disable-self)
	)

;----------------------------------
;	GOAL 24: g-scouting-distance
;----------------------------------

    (load "The General 3.1/Functions/Reset")

	;Initialize g-scouting-distance
	(defrule
	(up-compare-goal g-scout1-id > 0)
    (or
        (goal g-scouting-status FIND-RESOURCES)
        (goal g-scouting-status SCOUT-TOWN))
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	(building-type-count-total town-center > 0)
	(up-compare-goal g-map-style != NOMAD)
	=>
	(set-goal g-scouting-distance 10)
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:- 1)
	(up-set-timer c: t-scout-distance-increase g: g-temp)	;set timer to 1 less than current g-scouting-distance
	(disable-self)														
	)

	;Initialize g-scouting-distance for Nomad, only set once TC is being built
	(defrule
	(up-compare-goal g-scout1-id > 0)
    (or
        (goal g-scouting-status FIND-RESOURCES)
        (goal g-scouting-status SCOUT-TOWN))
	(building-type-count town-center > 0)
	(goal g-map-style NOMAD)
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	=>
	(set-goal g-scouting-distance 6)
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:- 2)
	(up-set-timer c: t-scout-distance-increase g: g-temp)
	(disable-self)
	)

	;Increase g-scouting-distance once timer has triggered

	;Set timer length adjustment
	;If we have a second scout, the second scout is likely a sheep, so we don't want to increase scouting distance as often
	(defrule
	(up-compare-goal g-scout1-id > 0)
	(up-compare-goal g-scout2-id > 0)	;we have a second scout
	(up-compare-goal g-scouting-distance < 15)
	=>
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:+ 8)
	)

	(defrule
	(up-compare-goal g-scout1-id > 0)
	(or
		(up-compare-goal g-scout2-id <= 0)	;we don't have a second scout
		(up-compare-goal g-scouting-distance >= 15))
	(or
		(civ-selected mongol)
		(players-civ any-ally mongol))
	=>
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:- 9)
	)

	(defrule
	(up-compare-goal g-scout1-id > 0)
	(or
		(up-compare-goal g-scout2-id <= 0)	;we don't have a second scout
		(up-compare-goal g-scouting-distance >= 15))
	(nor
		(civ-selected mongol)
		(players-civ any-ally mongol))
	=>
	(up-modify-goal g-temp g:= g-scouting-distance)
	(up-modify-goal g-temp c:- 4)
	)

	(defrule
	(up-compare-goal g-scout1-id > 0)
    (or
        (goal g-scouting-status FIND-RESOURCES)
        (goal g-scouting-status SCOUT-TOWN))
	(timer-triggered t-scout-distance-increase)
	(building-type-count-total town-center > 0)
	(up-set-target-by-id g: g-scout1-id)
	(goal g-claim-sheep NO)
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	=>
	(disable-timer t-scout-distance-increase)
	(up-modify-goal g-scouting-distance c:+ 1)
	(up-set-timer c: t-scout-distance-increase g: g-temp)	;timer length will increase as g-scouting-distance increases
	)

	;Decrease scouting distance once by 1 if we have a second scout
	(defrule
	(up-compare-goal g-scout2-id > 0)
	(timer-triggered t-scout-distance-increase)
	=>
	(up-modify-goal g-scouting-distance c:- 1)
	(disable-self)
	)

;-----------------------------------
;	GOAL 37: g-boar-found-count
;	GOAL 38: g-current-boar-count
;-----------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	=>
	(set-goal i 0)
	(set-goal g-current-boar-count 0)
	(up-set-target-point g-position-self-x)
	)

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	(up-set-target-by-id g: i)
	(up-object-data object-data-class == boar-class)
	(up-object-data object-data-carry > 0)
	(up-object-data object-data-hitpoints > 0)
	(up-object-data object-data-distance <= MAX-BOAR-HUNT-DISTANCE)
	(up-get-object-data object-data-point-x g-point-x)
	(up-get-object-data object-data-point-y g-point-y)
	(up-point-explored g-point-x != explored-no)
	=>
	(up-modify-goal g-current-boar-count c:+ 1)
	(up-modify-goal g-boar-found-count g:max g-current-boar-count)
	)

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	(up-compare-goal i g:< g-map-size-squared)
	=>
	(up-modify-goal i c:+ 1)
	(up-jump-rule -2)
	)

;-----------------------------------
;	GOAL 39: g-deer-found-count
;	GOAL 40: g-current-deer-count
;-----------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	=>
	(set-goal i 0)
	(set-goal g-current-deer-count 0)
	(up-set-target-point g-position-self-x)
	)

		(defrule
		(or
			(game-time < 900)
			(current-age == dark-age))
		(up-set-target-by-id g: i)
		(up-object-data object-data-class == deer-class)
		(up-object-data object-data-carry > 0)
		(up-object-data object-data-hitpoints > 0)
		(up-object-data object-data-distance <= 45)
		(up-get-object-data object-data-point-x g-point-x)
		(up-get-object-data object-data-point-y g-point-y)
		(up-point-explored g-point-x != explored-no)
		=>
		(up-modify-goal g-current-deer-count c:+ 1)
		(up-modify-goal g-deer-found-count g:max g-current-deer-count)
		)

		(defrule
		(or
			(game-time < 900)
			(current-age == dark-age))
		(up-compare-goal i g:< g-map-size-squared)
		=>
		(up-modify-goal i c:+ 1)
		(up-jump-rule -2)
		)

;------------------------------------
;	GOAL 44: g-min-forest-distance
;------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(or
		(resource-found wood)
		(up-gaia-type-count-total c: wood >= 40))
	(building-type-count town-center > 0)
	(building-type-count-total lumber-camp == 0)
	(goal g-min-forest-distance PENDING)
	=>
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(up-find-resource c: wood c: 40)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(up-get-search-state g-local-total)
	)

	(defrule
	(up-compare-goal g-remote-total >= 40)
	=>
	(set-goal i 0)
	(set-goal g-min-forest-distance HUNDRED-PERCENT-MAP-SIZE)
	)

		(defrule
		(building-type-count town-center > 0)
		(building-type-count-total lumber-camp == 0)
		(up-compare-goal g-remote-total >= 40)
		(up-set-target-object search-remote g: i)
		=>
		(up-get-point position-object g-point-x)
		(up-get-point-terrain g-point-x g-temp)
		)

		(defrule
		(building-type-count town-center > 0)
		(building-type-count-total lumber-camp == 0)
		(up-compare-goal g-remote-total g:> i)
		(up-set-target-object search-remote g: i)
		(or
			(up-point-terrain g-point-x == terrain-forest)
			(or
				(up-point-terrain g-point-x == terrain-forest-bamboo)
				(or
					(up-point-terrain g-point-x == terrain-forest-jungle)
					(or
						(up-point-terrain g-point-x == terrain-forest-oak)
						(up-point-terrain g-point-x == terrain-forest-palm)))))
		=>
		(up-get-point-distance g-position-self-x g-point-x g-temp-2)
		(up-modify-goal g-min-forest-distance g:min g-temp-2)
		)

		(defrule
		(building-type-count town-center > 0)
		(building-type-count-total lumber-camp == 0)
		(up-compare-goal g-remote-total g:> i)
		(up-set-target-object search-remote g: i)
		(or
			(up-point-terrain g-point-x == terrain-forest-pine)
			(or
				(up-point-terrain g-point-x == terrain-forest-snow)
				(or
					(up-point-terrain g-point-x == terrain-forest-baobab)
					(up-point-terrain g-point-x == terrain-forest-acacia))))
		=>
		(up-get-point-distance g-position-self-x g-point-x g-temp-2)
		(up-modify-goal g-min-forest-distance g:min g-temp-2)
		)
		
		(defrule
		(building-type-count town-center > 0)
		(building-type-count-total lumber-camp == 0)
		(up-compare-goal g-remote-total g:> i)
		(up-set-target-object search-remote g: i)
		=>
		(up-modify-goal i c:+ 1)
		(up-jump-rule -4)
		)

;-------------------------
;	GOAL 46: g-position
;-------------------------

	#load-if-defined UP-POCKET-POSITION

		(defrule
		(true)
		=>
		(set-goal g-position POCKET)
		(disable-self)
		)

	#else

		(defrule
		(true)
		=>
		(set-goal g-position FLANK)
		(disable-self)
		)

	#end-if

;----------------------------------
;	GOAL 55: g-scout1-id
;	GOAL 56: g-scout2-id	(if sheep, sheep are set as scouts in the section for goals 33 and 34 below)
;	GOAL 57: g-scout3-id	(if sheep, sheep are set as scouts in the section for goals 33 and 34 below)
;----------------------------------

	(load "The General 3.1/Functions/Reset")

	;find potential scouts
	(defrule
	(goal g-scout1-id PENDING)
	(military-population > 0)
	(game-time < 5)
	=>
	(up-full-reset-search)
	(up-filter-exclude cmdid-villager actionid-explore orderid-build trade-cart-class)
	(up-find-local c: all-units-class c: 240)
	(up-remove-objects search-local object-data-class == monastery-class)
	(up-remove-objects search-local object-data-class == monk-with-relic-class)
	(up-remove-objects search-local object-data-train-site == siege-workshop)
	(up-remove-objects search-local object-data-train-site == dock)
	(up-remove-objects search-local object-data-speed == 0)
	(up-remove-objects search-local object-data-class == king-class)
	(up-clean-search search-local object-data-speed search-order-desc)	;get fastest unit first in the search list
	(up-get-search-state g-local-total)
	(set-goal g-temp 47)
	(disable-self)
	)

	;Set first unit found as Scout 1
	(defrule
	(goal g-temp 47)
	(goal g-scout1-id PENDING)
	(military-population > 0)
	(game-time < 5)
	(up-set-target-object search-local c: 0)
	=>
	(up-get-object-data object-data-id g-scout1-id)
	)

	;Set second unit found as Scout 2
	(defrule
	(goal g-temp 47)
	(goal g-scout2-id PENDING)
	(military-population > 0)
	(game-time < 5)
	(up-set-target-object search-local c: 1)
	=>
	(up-get-object-data object-data-id g-scout2-id)
	)

	;Set third unit found as Scout 3
	(defrule
	(goal g-temp 47)
	(goal g-scout3-id PENDING)
	(military-population > 0)
	(game-time < 5)
	(up-set-target-object search-local c: 2)
	=>
	(up-get-object-data object-data-id g-scout3-id)
	)
	
	(load "The General 3.1/Functions/Reset")

	;Set sheep as scout 2
	(defrule
	(not
		(up-set-target-by-id g: g-scout2-id))
	(up-compare-goal g-scouting-distance <= 22)
	(up-compare-goal g-current-sheep-count >= 3)
	(or
		(goal g-scouting-status FIND-RESOURCES)
		(goal g-scouting-status SCOUT-TOWN))
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	=>
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 10)
	(up-remove-objects search-local object-data-id g:== g-current-sheep-id)
	(up-remove-objects search-local object-data-id g:== g-next-sheep-id)
	(up-remove-objects search-local object-data-id g:== g-scout3-id)
	(up-remove-objects search-local object-data-player != my-player-number)
	(up-remove-objects search-local object-data-hitpoints == 0)
	(up-get-search-state g-local-total)
	)

	(defrule
	(not
		(up-set-target-by-id g: g-scout2-id))
	(unit-type-count livestock-class > 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	(up-compare-goal g-scouting-distance <= 25)
	(up-compare-goal g-current-sheep-count >= 3)
	(or
		(goal g-scouting-status FIND-RESOURCES)
		(goal g-scouting-status SCOUT-TOWN))
	=>
	(up-get-object-data object-data-id g-scout2-id)
	(up-target-point 0 action-stop -1 -1)
	)

	;Set sheep as scout 3
	(defrule
	(not
		(up-set-target-by-id g: g-scout3-id))
	(up-compare-goal g-scouting-distance <= 22)
	(up-compare-goal g-current-sheep-count >= 4)
	(or
		(goal g-scouting-status FIND-RESOURCES)
		(goal g-scouting-status SCOUT-TOWN))
	(up-compare-goal g-duc-scouting != STOP-DUC-SCOUTING)
	=>
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 10)
	(up-remove-objects search-local object-data-id g:== g-current-sheep-id)
	(up-remove-objects search-local object-data-id g:== g-next-sheep-id)
	(up-remove-objects search-local object-data-id g:== g-scout2-id)
	(up-remove-objects search-local object-data-player != my-player-number)
	(up-remove-objects search-local object-data-hitpoints == 0)
	(up-get-search-state g-local-total)
	)

	(defrule
	(not
		(up-set-target-by-id g: g-scout3-id))
	(unit-type-count livestock-class > 0)
	(up-compare-goal g-local-total > 0)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	(up-compare-goal g-scouting-distance <= 22)
	(up-compare-goal g-current-sheep-count >= 3)
	(or
		(goal g-scouting-status FIND-RESOURCES)
		(goal g-scouting-status SCOUT-TOWN))
	=>
	(up-get-object-data object-data-id g-scout3-id)
	(up-target-point 0 action-stop -1 -1)
	)

	;Scout 1 died, set to -2 (not -1 because Scout 1 won't be used after initial scout is dead)
	(defrule
	(up-compare-goal g-scout1-id >= 0)
	(not
		(up-set-target-by-id g: g-scout1-id))
	=>
	(set-goal g-scout1-id -2)
	)

	;Scout 2 died, set to -1 (to allow a new unit to be Scout 2)
	(defrule
	(up-compare-goal g-scout2-id >= 0)
	(not
		(up-set-target-by-id g: g-scout2-id))
	=>
	(set-goal g-scout2-id PENDING)
	)

	;Scout 3 died, set to -1 (to allow a new unit to be Scout 3)
	(defrule
	(up-compare-goal g-scout3-id >= 0)
	(not
		(up-set-target-by-id g: g-scout3-id))
	=>
	(set-goal g-scout3-id PENDING)
	)

	;Stop sheep exploring
	(defrule
	(up-compare-goal g-scout2-id >= 0)
	(up-set-target-by-id g: g-scout2-id)
	(up-object-data object-data-class == livestock-class)
	(or
		(up-compare-goal g-scouting-distance > 25)
    	(or
			(up-compare-goal g-current-sheep-count <= 2)
			(nor
        		(goal g-scouting-status FIND-RESOURCES)
       			(goal g-scouting-status SCOUT-TOWN))))
	=>
	(set-goal g-scout2-id PENDING)
	)

	(defrule
	(up-compare-goal g-scout3-id >= 0)
	(up-set-target-by-id g: g-scout3-id)
	(up-object-data object-data-class == livestock-class)
	(or
		(up-compare-goal g-scouting-distance > 22)
    	(or
			(up-compare-goal g-current-sheep-count <= 3)
			(nor
        		(goal g-scouting-status FIND-RESOURCES)
       			(goal g-scouting-status SCOUT-TOWN))))
	=>
	(set-goal g-scout3-id PENDING)
	)

	;No Scout Unit
	(defrule
	(game-time < 5)
	(military-population == 0)
	(up-compare-goal g-scout1-id != -2)
	=>
	(set-goal g-scout1-id -2)
	)

	;If Scout 2 doesn't exist, put Scout 3 in its place
	(defrule
	(not
		(up-set-target-by-id g: g-scout2-id))
	(up-set-target-by-id g: g-scout3-id)
	=>
	(up-modify-goal g-scout2-id g:= g-scout3-id)
	(set-goal g-scout3-id PENDING)
	)

;--------------------------------
;	GOAL 114: g-sheep-gather-x
;	GOAL 115: g-sheep-gather-y
;--------------------------------

	(load "The General 3.1/Functions/Reset")

	;Get coordinates for sheep gather point
	(defrule
	(building-type-count town-center == 1)
	=>
	(up-copy-point g-sheep-gather-x g-position-self-x)
	(up-modify-goal g-sheep-gather-x c:- 4)
	(disable-self)
	)

;-------------------------------------
;	GOAL 33: g-sheep-found-count
;	GOAL 34: g-current-sheep-count
;-------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(or
		(game-time < 900)
		(current-age == dark-age))
	=>
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 20)
	(up-get-search-state g-local-total)
	(up-modify-goal g-temp g:= g-local-total)
	(up-modify-goal g-temp g:- g-current-sheep-count)
	(up-modify-goal g-temp c:max 0)
	(up-modify-goal g-sheep-found-count g:+ g-temp)
	(up-modify-goal g-current-sheep-count g:= g-local-total)
	)

;---------------------------------
;	GOAL 35: g-current-sheep-id
;	GOAL 36: g-next-sheep-id
;---------------------------------

	(load "The General 3.1/Functions/Reset")

	;If we don't have a sheep currently being gathered, set next sheep as the current sheep
	(defrule
	(building-type-count town-center == 1)
	(not
		(up-set-target-by-id g: g-current-sheep-id))
	(up-set-target-by-id g: g-next-sheep-id)
	=>
	(up-modify-goal g-current-sheep-id g:= g-next-sheep-id)
	(set-goal g-next-sheep-id PENDING)
	)

	;If we still don't have a current sheep set to gather, find one
	(defrule
	(building-type-count town-center == 1)
	(up-compare-goal g-current-sheep-count > 0)
	(or
		(not
			(up-set-target-by-id g: g-current-sheep-id))
		(not
			(up-set-target-by-id g: g-next-sheep-id)))
	=>
	(set-goal g-temp sheep)
	)

	(defrule
	(goal g-temp sheep)
	(not
		(up-set-target-by-id g: g-current-sheep-id))
	=>
	(up-set-target-point g-position-self-x)	;search from sheep near sheep gather point
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 20)
	(up-remove-objects search-local object-data-id g:== g-scout2-id)	;don't use sheep scouts
	(up-remove-objects search-local object-data-id g:== g-scout3-id)	;don't use sheep scouts
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-add-object-by-id search-local g: g-scout2-id)	;add scout 2 to end of search, sheep scouts have lowest priority to be gathered
	(up-add-object-by-id search-local g: g-scout3-id)	;add scout 3 to end of search
	(up-remove-objects search-local object-data-class != livestock-class)	;remove scouts 2 or 3 if they aren't sheep
	(up-get-search-state g-local-total)
	)

	;Set currently gathered sheep ID
	(defrule
	(goal g-temp sheep)
	(not
		(up-set-target-by-id g: g-current-sheep-id))
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	=>
	(up-get-object-data object-data-id g-current-sheep-id)
	)

	;Set next sheep to gather

	(defrule
	(goal g-temp sheep)
	(up-set-target-by-id g: g-current-sheep-id)
	(not
		(up-set-target-by-id g: g-next-sheep-id))
	=>
	(up-set-target-point g-position-self-x)	;search from sheep near sheep gather point
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 20)
	(up-remove-objects search-local object-data-id g:== g-scout2-id)	;don't use sheep scouts
	(up-remove-objects search-local object-data-id g:== g-scout3-id)	;don't use sheep scouts
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-add-object-by-id search-local g: g-scout2-id)	;add scout 2 to end of search, sheep scouts have lowest priority to be gathered
	(up-add-object-by-id search-local g: g-scout3-id)	;add scout 3 to end of search
	(up-remove-objects search-local object-data-class != livestock-class)	;remove scouts 2 or 3 if they aren't sheep
	(up-remove-objects search-local object-data-id g:== g-current-sheep-id)
	(up-get-search-state g-local-total)
	)

	(defrule
	(goal g-temp sheep)
	(up-set-target-by-id g: g-current-sheep-id)
	(not
		(up-set-target-by-id g: g-next-sheep-id))
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	=>
	(up-get-object-data object-data-id g-next-sheep-id)
	)

	(defrule
	(true)
	=>
	(up-set-target-point g-position-self-x)
	)

	(defrule
	(up-set-target-by-id g: g-current-sheep-id)
	(up-set-target-by-id g: g-next-sheep-id)
	(up-object-data object-data-distance > 7)
	=>
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 20)
	(up-remove-objects search-local object-data-id g:== g-scout2-id)	;don't use sheep scouts
	(up-remove-objects search-local object-data-id g:== g-scout3-id)	;don't use sheep scouts
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-add-object-by-id search-local g: g-scout2-id)	;add scout 2 to end of search, sheep scouts have lowest priority to be gathered
	(up-add-object-by-id search-local g: g-scout3-id)	;add scout 3 to end of search
	(up-remove-objects search-local object-data-class != livestock-class)	;remove scouts 2 or 3 if they aren't sheep
	(up-remove-objects search-local object-data-id g:== g-current-sheep-id)
	(up-get-search-state g-local-total)
	)

	(defrule
	(up-set-target-by-id g: g-current-sheep-id)
	(up-set-target-by-id g: g-next-sheep-id)
	(up-object-data object-data-distance > 7)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-class == livestock-class)
	=>
	(up-get-object-data object-data-id g-next-sheep-id)
	)

	(defrule
	(up-set-target-by-id g: g-next-sheep-id)
	(up-compare-goal g-next-sheep-id g:== g-scout2-id)
	=>
	(set-goal g-scout2-id PENDING)
	)

	(defrule
	(up-set-target-by-id g: g-next-sheep-id)
	(up-compare-goal g-next-sheep-id g:== g-scout3-id)
	=>
	(set-goal g-scout3-id PENDING)
	)

	;If sheep scouts are set as the currently gathered sheep or sheep to be gathered next, reset their scout ID
	(defrule
	(up-compare-goal g-scout2-id != PENDING)
	(or
		(up-compare-goal g-current-sheep-id g:== g-scout2-id)
		(up-compare-goal g-next-sheep-id g:== g-scout2-id))
	=>
	(set-goal g-scout2-id PENDING)
	)

	(defrule
	(up-compare-goal g-scout3-id != PENDING)
	(or
		(up-compare-goal g-current-sheep-id g:== g-scout3-id)
		(up-compare-goal g-next-sheep-id g:== g-scout3-id))
	=>
	(set-goal g-scout3-id PENDING)
	)

	;Reset current or next sheep if they are dead or converted
	(defrule
	(up-compare-goal g-current-sheep-id != PENDING)
	(or
		(not
			(up-set-target-by-id g: g-current-sheep-id))
		(and
			(up-set-target-by-id g: g-current-sheep-id)
			(and
				(up-object-data object-data-player != my-player-number)
				(up-object-data object-data-hitpoints == 7))))
	=>
	(set-goal g-current-sheep-id PENDING)
	)

	(defrule
	(up-compare-goal g-next-sheep-id != PENDING)
	(or
		(not
			(up-set-target-by-id g: g-next-sheep-id))
		(and
			(up-set-target-by-id g: g-next-sheep-id)
			(or
				(and
					(up-object-data object-data-player != my-player-number)
					(up-object-data object-data-hitpoints == 7))
				(up-object-data object-data-hitpoints == 0))))
	=>
	(set-goal g-next-sheep-id PENDING)
	)

;---------------------------------------
;	GOAL 151: g-true-housing-headroom
;---------------------------------------

	(load "The General 3.1/Functions/Reset")

	;True housing headroom takes headroom buildings in progress
	;into account.

	#load-if-not-defined HUN-CIV
		#load-if-not-defined CHINESE-CIV
			#load-if-not-defined INCAN-CIV
				#load-if-not-defined SLAVIC-CIV
					(defrule
					(true)
					=>
					(up-get-fact building-type-count town-center g-temp)
					(up-modify-goal g-temp c:* 5)
					(up-modify-goal g-true-housing-headroom g:= g-temp)
					(up-get-fact building-type-count-total house g-temp)
					(up-modify-goal g-temp c:* 5)
					(up-modify-goal g-true-housing-headroom g:+ g-temp)
					(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
					(up-modify-goal g-temp c:* 20)
					(up-modify-goal g-true-housing-headroom g:+ g-temp)
					(up-get-fact population 0 g-temp)
					(up-modify-goal g-true-housing-headroom g:- g-temp)
					(up-get-fact resource-amount amount-queued-count g-temp)
					(up-modify-goal g-true-housing-headroom g:- g-temp)
					)
				#end-if
			#end-if
		#end-if
	#end-if

	#load-if-defined CHINESE-CIV
		(defrule
		(true)
		=>
		(up-get-fact building-type-count town-center g-temp)
		(up-modify-goal g-temp c:* 10)
		(up-modify-goal g-true-housing-headroom g:= g-temp)
		(up-get-fact building-type-count-total house g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
		(up-modify-goal g-temp c:* 20)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact population 0 g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		(up-get-fact resource-amount amount-queued-count g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		)
	#end-if

	#load-if-defined INCAN-CIV
		(defrule
		(true)
		=>
		(up-get-fact building-type-count town-center g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:= g-temp)
		(up-get-fact building-type-count-total house g-temp)
		(up-modify-goal g-temp c:* 10)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
		(up-modify-goal g-temp c:* 20)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact population 0 g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		(up-get-fact resource-amount amount-queued-count g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		)
	#end-if

	#load-if-defined SLAVIC-CIV

		(defrule
		(true)
		=>
		(up-get-fact building-type-count town-center g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:= g-temp)
		(up-get-fact building-type-count-total house g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
		(up-modify-goal g-temp c:* 20)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count-total barracks g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count-total archery-range g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		)
		
		(defrule
		(true)
		=>
		(up-get-fact building-type-count-total stable g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact building-type-count-total siege-workshop g-temp)
		(up-modify-goal g-temp c:* 5)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		(up-get-fact population 0 g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		(up-get-fact resource-amount amount-queued-count g-temp)
		(up-modify-goal g-true-housing-headroom g:- g-temp)
		)
					
	#end-if

	#load-if-defined BULGARIANS-CIV

		(defrule
		(true)
		=>
		(up-get-fact building-type-count krepost g-temp)
		(up-modify-goal g-temp c:* 20)
		(up-modify-goal g-true-housing-headroom g:+ g-temp)
		)
	
	#end-if

;--------------------------
;	GOAL 153: g-far-boar
;--------------------------

	(load "The General 3.1/Functions/Reset")

	;Find furthest boar
	(defrule
	(goal g-far-boar NO)
	(up-compare-goal g-current-boar-count > 0)
	=>
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(set-strategic-number sn-focus-player-number 0)
	(up-find-remote c: boar-class c: 5)
	(up-remove-objects search-remote object-data-carry == 0)
	(up-remove-objects search-remote object-data-hitpoints < 5)
	(up-remove-objects search-remote object-data-id g:== g-current-boar-id)
	(up-clean-search search-remote object-data-distance search-order-desc)
	)

	;If boar is further than 24 tiles, set g-far-boar
	(defrule
	(up-compare-goal g-current-boar-count > 0)
	(up-set-target-object search-remote c: 0)
	(up-get-object-data object-data-distance g-temp)
	(up-compare-goal g-temp >= NEAR-BOAR-HUNT-DISTANCE)
	=>
	(set-goal g-far-boar YES)
	(disable-self)
	)

;------------------------------------------
;	GOAL 154: g-boar-hunting-conditions-met
;------------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(up-compare-goal g-boar-hunting-conditions-met != NO)
	(or
		(unit-type-count villager < 10)
		(or
			(goal g-current-boar-count 0)
			(and
				(up-research-status c: ri-loom < research-pending)
				(or
					(cc-players-unit-type-count 0 elephant > 0)
					(cc-players-unit-type-count 0 rhino > 0)))))
	=>
	(set-goal g-boar-hunting-conditions-met NO)
	)

	(defrule
	(up-compare-goal g-boar-hunting-conditions-met != YES)
	; (dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
	(unit-type-count villager >= 10)
	(up-compare-goal g-current-boar-count > 0)
	(or
		(up-research-status c: ri-loom >= research-pending)
		(and
			(cc-players-unit-type-count 0 elephant == 0)
			(cc-players-unit-type-count 0 rhino == 0)))
	=>
	(set-goal g-boar-hunting-conditions-met YES)
	)

;-------------------------------
;	GOAL 167: g-strategy-type
;-------------------------------

	(defrule
	(up-compare-goal g-initial-strategy >= 101)
	(up-compare-goal g-initial-strategy < 200)
	(up-compare-goal g-strategy-type != DRUSH)
	=>
	(set-goal g-strategy-type DRUSH)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= 201)
	(up-compare-goal g-initial-strategy < 300)
	(up-compare-goal g-strategy-type != FLUSH)
	=>
	(set-goal g-strategy-type FLUSH)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= 501)
	(up-compare-goal g-initial-strategy < 600)
	(up-compare-goal g-strategy-type != FAST-CASTLE)
	=>
	(set-goal g-strategy-type FAST-CASTLE)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= 1101)	;Booming Castle Age Strats
	(up-compare-goal g-initial-strategy < 1200)
	(up-compare-goal g-strategy-type != FAST-CASTLE)
	=>
	(set-goal g-strategy-type FAST-CASTLE)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= 801)
	(up-compare-goal g-initial-strategy < 900)
	(up-compare-goal g-strategy-type != FAST-IMPERIAL)
	=>
	(set-goal g-strategy-type FAST-IMPERIAL)
	)

	(defrule
	(up-compare-goal g-initial-strategy >= 1201)	;Booming Imperial Age Strats
	(up-compare-goal g-initial-strategy < 1300)
	(up-compare-goal g-strategy-type != FAST-IMPERIAL)
	=>
	(set-goal g-strategy-type FAST-IMPERIAL)
	)

;----------------------------------
;	GOAL 192: g-attack-objective
;----------------------------------

	(defrule
	(up-compare-goal g-attack-objective != ATTACK-TARGET-ENEMY)
	=>
	(set-goal g-attack-objective ATTACK-TARGET-ENEMY)
	)

;---------------------------------------------
;	GOAL 193: g-save-for-support-unit-techs
;---------------------------------------------

	(defrule
	(goal g-save-for-support-unit-techs YES)
	=>
	(set-goal g-save-for-support-unit-techs NO)			;Reset each pass
	)

	(defrule
	(up-compare-goal g-current-age-primary-unit-tech-progress >= PRIORITY-COMPLETE)
	(or
		(and
			(unit-type-count villager >= 70)
			(or
				(building-type-count-total town-center >= 2)
				(up-compare-goal g-desired-num-town-center < 2)))
		(up-object-type-count g: g-support-unit > 8))
	(military-population g:>= g-min-military-pop)
	=>
	(set-goal g-save-for-support-unit-techs YES)
	)

;-------------------------------
;	GOAL 194: g-closest-enemy
;-------------------------------

	;If flank, find closest enemy that has > 20 villagers.
	;If pocket, set closest enemy to same player as nearby flank.
	;If pocket and team partner isn't a General AI, use same technique as flank players.

	(load "The General 3.1/Functions/Reset")

	(defrule
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	(up-compare-goal g-team-partner <= 0)
	=>
	(set-strategic-number sn-focus-player-number 0)
	)

	(defrule
	(goal g-position POCKET)
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	(up-compare-goal g-team-partner > 0)
	=>
	(up-modify-sn sn-focus-player-number g:= g-team-partner)
	)

	;set g-closest-enemy to closest enemy with > 20 villagers
	(defrule
	(or
		(goal g-position FLANK)
		(nand
			(up-allied-goal focus-player g-identity == THE-GENERAL)
			(up-allied-goal focus-player g-position == FLANK)))
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	=>
	(set-goal g-closest-enemy 0)
	)

	(defrule
	(or
		(goal g-position FLANK)
		(nand
			(up-allied-goal focus-player g-identity == THE-GENERAL)
			(up-allied-goal focus-player g-position == FLANK)))
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	(players-civilian-population any-enemy > 20)
	=>
	(up-find-player enemy find-closest g-temp)
	(up-modify-sn sn-focus-player-number g:= g-temp)
	(set-goal i 1)
	)

		(defrule
		(or
			(goal g-position FLANK)
			(nand
				(up-allied-goal focus-player g-identity == THE-GENERAL)
				(up-allied-goal focus-player g-position == FLANK)))
		(timer-triggered t-10-sec)
		(players-building-count any-enemy > 0)
		(or
			(not 
				(player-in-game focus-player))
			(players-civilian-population focus-player <= 20))
		(up-compare-goal i < 8)
		=>
		(up-modify-goal i c:+ 1)
		(up-find-next-player enemy find-closest g-temp)
		(up-modify-sn sn-focus-player-number g:= g-temp)
		(up-jump-rule -1)
		)

	(defrule
	(or
		(goal g-position FLANK)
		(nand
			(up-allied-goal focus-player g-identity == THE-GENERAL)
			(up-allied-goal focus-player g-position == FLANK)))
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	(player-in-game focus-player)
	(players-civilian-population focus-player > 20)
	=>
	(up-modify-goal g-closest-enemy g:= g-temp)
	)

	;If pocket and flank is also The General, set g-closest-enemy to the flank's closest enemy
	(defrule
	(goal g-position POCKET)
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	(up-compare-goal g-team-partner > 0)
	(up-allied-goal focus-player g-identity == THE-GENERAL)
	(up-allied-goal focus-player g-position == FLANK)
	(up-allied-goal focus-player g-closest-enemy g:!= g-closest-enemy)
	=>
	(up-get-player-fact focus-player allied-goal g-closest-enemy g-closest-enemy)
	)
	
	;No strong enemies left, pick closest enemy
	(defrule
	(or
		(goal g-position FLANK)
		(nand
			(up-allied-goal focus-player g-identity == THE-GENERAL)
			(up-allied-goal focus-player g-position == FLANK)))
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	(up-compare-goal g-closest-enemy <= 0)
	=>
	(up-find-player enemy find-closest g-closest-enemy)
	)

	;Backup in case up-find-player doesn't return a valid player number
	;Usually happens if an ally finds an enemy first with sn-coop-share-information on,
	;but hasn't actually found the enemy player yet
	(defrule
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	(up-compare-goal g-closest-enemy <= 0)
	=>
	(up-get-player-fact this-any-enemy player-number 0 g-closest-enemy)
	)

	; (defrule
	; (players-building-count any-enemy > 0)
	; (up-compare-goal g-closest-enemy <= 0)
	; (timer-triggered t-10-sec)
	; =>
	; (chat-to-all CHAT-CLOSEST-ENEMY-BUG)
	; )

;-------------------------------------------------
;	GOAL 195: g-closest-enemy-building-distance
;-------------------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(players-building-count any-enemy > 0)
	(up-compare-goal g-closest-enemy > 0)
	=>
	(up-modify-sn sn-focus-player-number g:= g-closest-enemy)
	)

	(defrule
	(players-building-count any-enemy > 0)
	(players-building-count focus-player > 0)
	(up-compare-goal g-closest-enemy > 0)
	=>
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(up-find-remote c: building-class c: 40)
	(up-find-remote c: tower-class c: 40)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: building-class c: 40)
	(up-find-status-remote c: tower-class c: 40)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(up-get-search-state g-local-total)
	)

	(defrule
	(players-building-count any-enemy > 0)
	(players-building-count focus-player > 0)
	(up-compare-goal g-closest-enemy > 0)
	(up-compare-goal g-remote-total > 0)
	(up-set-target-object search-remote c: 0)
	=>
	(up-get-object-data object-data-distance g-closest-enemy-building-distance)
	)

;-------------------------------------------------
;	GOAL 196: g-nearest-enemy-defenses-distance
;-------------------------------------------------

	(defrule
	(timer-triggered t-10-sec)
	(players-building-count any-enemy > 0)
	=>
	(set-strategic-number sn-focus-player-number 1)
	(set-goal g-nearest-enemy-defenses-distance HUNDRED-FIFTY-PERCENT-MAP-SIZE)
	)

		(defrule
		(timer-triggered t-10-sec)
		(players-building-count any-enemy > 0)
		(nor
			(player-in-game focus-player)
			(stance-toward focus-player enemy))
		=>
		(up-jump-rule 2)
		)
		
		(defrule
		(timer-triggered t-10-sec)
		(players-building-count any-enemy > 0)
		(players-building-count focus-player > 0)
		(player-in-game focus-player)
		(stance-toward focus-player enemy)
		=>
		(up-full-reset-search)
		(up-set-target-point g-position-self-x)
		(up-find-remote c: castle c: 40)
		(up-find-remote c: krepost c: 40)
		(up-find-remote c: tower-class c: 40)
		(up-clean-search search-remote -1 search-order-asc)
		(up-clean-search search-remote object-data-distance search-order-asc)
		)
		
		(defrule
		(timer-triggered t-10-sec)
		(players-building-count any-enemy > 0)
		(players-building-count focus-player > 0)
		(player-in-game focus-player)
		(stance-toward focus-player enemy)
		(up-set-target-object search-remote c: 0)
		(up-get-object-data object-data-distance g-temp-2)
		(up-compare-goal g-temp-2 g:< g-nearest-enemy-defenses-distance)
		=>
		(up-modify-goal g-nearest-enemy-defenses-distance g:min g-temp-2)
		)
		
		(defrule
		(timer-triggered t-10-sec)
		(players-building-count any-enemy > 0)
		(strategic-number sn-focus-player-number < 8)
		=>
		(up-modify-sn sn-focus-player-number c:+ 1)
		(up-jump-rule -4)
		)

;-------------------------------------
;	GOAL 201: g-enemy-strategy-type
;-------------------------------------

	#load-if-defined UP-MULTIPLE-ENEMIES

		(defrule
		(strategic-number sn-target-player-number > 0)
		(players-current-age target-player == dark-age)
		(players-civilian-population target-player >= 27)
		=>
		(set-goal g-enemy-strategy-type FAST-CASTLE)
		(disable-self)
		)

	#else

		(defrule
		(players-current-age any-enemy == dark-age)
		(players-civilian-population any-enemy >= 27)
		(players-military-population any-enemy <= 1)
		=>
		(set-goal g-enemy-strategy-type FAST-CASTLE)
		(disable-self)
		)

	#end-if

;--------------------------------------
;	GOALS 202-216: Enemy Unit Counts
;--------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(true)
	=>
	(set-goal g-enemy-swordsmen-count 0)
	(set-goal g-enemy-spearmen-count 0)
	(set-goal g-enemy-eagle-warrior-count 0)
	(set-goal g-enemy-condottiero-count 0)
	(set-goal g-enemy-foot-archers-count 0)
	(set-goal g-enemy-skirmishers-count 0)
	(set-goal g-enemy-cavalry-archers-count 0)
	(set-goal g-enemy-hand-cannoneer-slinger-count 0)
	(set-goal g-enemy-light-cavalry-count 0)
	(set-goal g-enemy-heavy-cavalry-count 0)
	(set-goal g-enemy-camel-count 0)
	(set-goal g-enemy-elephants-count 0)
	(set-goal g-enemy-field-siege-count 0)
	(set-goal g-enemy-special-unique-unit-count 0)
	(set-goal g-enemy-monks-count 0)
	)

	(defrule
	(true)
	=>
	(up-modify-flag g-enemy-special-unique-unit-flag c:- JAGUAR-WARRIOR-FLAG)
	(up-modify-flag g-enemy-special-unique-unit-flag c:- CAMEL-ARCHER-FLAG)
	(up-modify-flag g-enemy-special-unique-unit-flag c:- CATAPHRACT-FLAG)
	(up-modify-flag g-enemy-special-unique-unit-flag c:- HUSKARL-FLAG)
	(up-modify-flag g-enemy-special-unique-unit-flag c:- GENOESE-CROSSBOWMAN-FLAG)
	(up-modify-flag g-enemy-special-unique-unit-flag c:- SAMURAI-FLAG)
	(up-modify-flag g-enemy-special-unique-unit-flag c:- LEITIS-FLAG)
	(up-modify-flag g-enemy-special-unique-unit-flag c:- MAMELUKE-FLAG)
	(up-modify-flag g-enemy-special-unique-unit-flag c:- TEUTONIC-KNIGHT-FLAG)
	)

	;Get enemy numbers of each soldier type.
	;The target player is intentionally double-counted, except if only one enemy is alive. This prioritizes countering the target enemy over other players.

	;---------------
	;	Swordsmen
	;---------------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count militiaman-line g-temp)
		(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count woad-raider-line g-temp)
		(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count throwing-axeman-line g-temp)
		(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count berserk-line g-temp)
		(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count militiaman-line g-temp)
		(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count woad-raider-line g-temp)
		(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count throwing-axeman-line g-temp)
		(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count berserk-line g-temp)
		(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
		)

		#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE

				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count shotel-warrior g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-shotel-warrior g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count gbeto g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-gbeto g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count karambit-warrior g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-karambit-warrior g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count shotel-warrior g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-shotel-warrior g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count gbeto g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-gbeto g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count karambit-warrior g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-karambit-warrior g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				)

			#else
			
				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count shotel-warrior-line g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count gbeto-line g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count karambit-warrior-line g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count foot-konnik-line g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count shotel-warrior-line g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count gbeto-line g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count karambit-warrior-line g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count foot-konnik-line g-temp)
				(up-modify-goal g-enemy-swordsmen-count g:+ g-temp)
				)

			#end-if
		#end-if

	;--------------
	;	Spearmen
	;--------------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count spearman-line g-temp)
		(up-modify-goal g-enemy-spearmen-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count spearman-line g-temp)
		(up-modify-goal g-enemy-spearmen-count g:+ g-temp)
		)
		
		#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE

				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count kamayuk g-temp)
				(up-modify-goal g-enemy-spearmen-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-kamayuk g-temp)
				(up-modify-goal g-enemy-spearmen-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count kamayuk g-temp)
				(up-modify-goal g-enemy-spearmen-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-kamayuk g-temp)
				(up-modify-goal g-enemy-spearmen-count g:+ g-temp)
				)

			#else
			
				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count kamayuk-line g-temp)
				(up-modify-goal g-enemy-spearmen-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count kamayuk-line g-temp)
				(up-modify-goal g-enemy-spearmen-count g:+ g-temp)
				)

			#end-if
		#end-if

	;--------------------
	;	Eagle Warriors	
	;--------------------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count eagle-warrior-line g-temp)
		(up-modify-goal g-enemy-eagle-warrior-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count eagle-warrior-line g-temp)
		(up-modify-goal g-enemy-eagle-warrior-count g:+ g-temp)
		)

		#load-if-defined UP-GAME-WK
		#load-if-not-defined DE-AVAILABLE
	
			;Target Enemy
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			=>
			(up-get-player-fact target-player unit-type-count heavy-eagle-warrior g-temp)
			(up-modify-goal g-enemy-eagle-warrior-count g:+ g-temp)
			)

			;All Enemies
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game any-enemy)
			=>
			(up-get-fact-sum any-enemy unit-type-count heavy-eagle-warrior g-temp)
			(up-modify-goal g-enemy-eagle-warrior-count g:+ g-temp)
			)

		#end-if
		#end-if

	;-----------------
	;	Condottieri
	;-----------------

		#load-if-defined UP-GAME-WK
	
			;Target Enemy
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			=>
			(up-get-player-fact target-player unit-type-count condottiero g-temp)
			(up-modify-goal g-enemy-condottiero-count g:+ g-temp)
			)

			;All Enemies
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game any-enemy)
			=>
			(up-get-fact-sum any-enemy unit-type-count condottiero g-temp)
			(up-modify-goal g-enemy-condottiero-count g:+ g-temp)
			)

		#end-if

	;------------------
	;	Foot Archers
	;------------------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count archer-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count longbowman-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count chu-ko-nu-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count plumed-archer-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count janissary-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count archer-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count longbowman-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count chu-ko-nu-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count plumed-archer-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count janissary-line g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
		)

		#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE

				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count rattan-archer g-temp)
				(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-rattan-archer g-temp)
				(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count rattan-archer g-temp)
				(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-rattan-archer g-temp)
				(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
				)

			#else
			
				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count rattan-archer-line g-temp)
				(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count rattan-archer-line g-temp)
				(up-modify-goal g-enemy-foot-archers-count g:+ g-temp)
				)

			#end-if
		#end-if

	;-----------------
	;	Skirmishers
	;-----------------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count skirmisher-line g-temp)
		(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count skirmisher-line g-temp)
		(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
		)

		#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE
		
				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count imperial-skirmisher g-temp)
				(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count genitour g-temp)
				(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-genitour g-temp)
				(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count imperial-skirmisher g-temp)
				(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count genitour g-temp)
				(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-genitour g-temp)
				(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
				)

			#else
		
				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count genitour-line g-temp)
				(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count genitour-line g-temp)
				(up-modify-goal g-enemy-skirmishers-count g:+ g-temp)
				)

			#end-if
		#end-if
		
	;---------------------
	;	Cavalry Archers
	;---------------------

		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count cavalry-archer-line g-temp)
		(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count war-wagon-line g-temp)
		(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count mangudai-line g-temp)
		(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count conquistador-line g-temp)
		(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count cavalry-archer-line g-temp)
		(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count war-wagon-line g-temp)
		(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count mangudai-line g-temp)
		(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count conquistador-line g-temp)
		(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
		)

		#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE

				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count arambai g-temp)
				(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-arambai g-temp)
				(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count arambai g-temp)
				(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-arambai g-temp)
				(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
				)

			#else

				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count arambai-line g-temp)
				(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count kipchak-line g-temp)
				(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count arambai-line g-temp)
				(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count kipchak-line g-temp)
				(up-modify-goal g-enemy-cavalry-archers-count g:+ g-temp)
				)

			#end-if
		#end-if

	;------------------------------
	;	Hand Cannoneers/Slingers
	;------------------------------
		
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count hand-cannoneer g-temp)
		(up-modify-goal g-enemy-hand-cannoneer-slinger-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-modify-goal g-enemy-hand-cannoneer-slinger-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count hand-cannoneer g-temp)
		)

		#load-if-defined UP-GAME-WK ;includes DE

			;Target Enemy
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			=>
			(up-get-player-fact target-player unit-type-count slinger g-temp)
			(up-modify-goal g-enemy-hand-cannoneer-slinger-count g:+ g-temp)
			)

			;All Enemies
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game any-enemy)
			=>
			(up-get-fact-sum any-enemy unit-type-count slinger g-temp)
			(up-modify-goal g-enemy-hand-cannoneer-slinger-count g:+ g-temp)
			)

		#end-if

	;-------------------
	;	Light Cavalry
	;-------------------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count scout-cavalry-line g-temp)
		(up-modify-goal g-enemy-light-cavalry-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count scout-cavalry-line g-temp)
		(up-modify-goal g-enemy-light-cavalry-count g:+ g-temp)
		)
		
	;-------------------
	;	Heavy Cavalry
	;-------------------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count knight-line g-temp)
		(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count tarkan-line g-temp)
		(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count knight-line g-temp)
		(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count tarkan-line g-temp)
		(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
		)

		#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE

				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count magyar-huszar g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-magyar-huszar g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count boyar g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-boyar g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count stable-tarkan g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-stable-tarkan g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count magyar-huszar g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-magyar-huszar g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count boyar g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-boyar g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count stable-tarkan g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-stable-tarkan g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				)

			#else
			
				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count magyar-huszar-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count boyar-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count steppe-lancer-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count konnik-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count krepost-konnik-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count keshik-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count stable-tarkan g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-stable-tarkan g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count magyar-huszar-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count boyar-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count steppe-lancer-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count konnik-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count krepost-konnik-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count keshik-line g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				)
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count stable-tarkan g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-stable-tarkan g-temp)
				(up-modify-goal g-enemy-heavy-cavalry-count g:+ g-temp)
				)

			#end-if
		#end-if

	;------------
	;	Camels
	;------------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count camel-line g-temp)
		(up-modify-goal g-enemy-camel-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count camel-line g-temp)
		(up-modify-goal g-enemy-camel-count g:+ g-temp)
		)

		#load-if-defined UP-GAME-WK
		#load-if-not-defined DE-AVAILABLE
	
			;Target Enemy
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game target-player)
			(up-players-in-game enemy > 1)
			=>
			(up-get-player-fact target-player unit-type-count imperial-camel g-temp)
			(up-modify-goal g-enemy-camel-count g:+ g-temp)
			)

			;All Enemies
			(defrule
			(players-military-population any-enemy > 1)
			(player-in-game any-enemy)
			=>
			(up-get-fact-sum any-enemy unit-type-count imperial-camel g-temp)
			(up-modify-goal g-enemy-camel-count g:+ g-temp)
			)

		#end-if
		#end-if

	;---------------
	;	Elephants
	;---------------

		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count war-elephant-line g-temp)
		(up-modify-goal g-enemy-elephants-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count war-elephant-line g-temp)
		(up-modify-goal g-enemy-elephants-count g:+ g-temp)
		)

		#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE

				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count battle-elephant g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-battle-elephant g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elephant-archer g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-elephant-archer g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count ballista-elephant g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-ballista-elephant g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count battle-elephant g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-battle-elephant g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elephant-archer g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-elephant-archer g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count ballista-elephant g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-ballista-elephant g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				)

			#else

				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count battle-elephant-line g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elephant-archer-line g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count ballista-elephant-line g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count battle-elephant-line g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elephant-archer-line g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count ballista-elephant-line g-temp)
				(up-modify-goal g-enemy-elephants-count g:+ g-temp)
				)

			#end-if
		#end-if

	;-----------------
	;	Field Siege
	;-----------------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count mangonel-line g-temp)
		(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count scorpion-line g-temp)
		(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count mangonel-line g-temp)
		(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count scorpion-line g-temp)
		(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
		)

		#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE

				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count wk-onager g-temp)
				(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count organ-gun g-temp)
				(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
				(up-get-player-fact target-player unit-type-count elite-organ-gun g-temp)
				(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count wk-onager g-temp)
				(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count organ-gun g-temp)
				(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-organ-gun g-temp)
				(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
				)

			#else
			
				;Target Enemy
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				=>
				(up-get-player-fact target-player unit-type-count organ-gun-line g-temp)
				(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
				)

				;All Enemies
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				=>
				(up-get-fact-sum any-enemy unit-type-count organ-gun-line g-temp)
				(up-modify-goal g-enemy-field-siege-count g:+ g-temp)
				)

			#end-if
		#end-if

	;--------------------------
	;	Special Unique Units
	;--------------------------

		;Jaguar Warriors
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		(up-get-player-fact target-player unit-type-count jaguar-man-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ JAGUAR-WARRIOR-FLAG)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		(up-get-fact-sum any-enemy unit-type-count jaguar-man-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ JAGUAR-WARRIOR-FLAG)
		)

		;Cataphracts
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		(up-get-player-fact target-player unit-type-count cataphract-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ CATAPHRACT-FLAG)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		(up-get-fact-sum any-enemy unit-type-count cataphract-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ CATAPHRACT-FLAG)
		)

		;Huskarls
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		(up-get-player-fact target-player unit-type-count huskarl-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ HUSKARL-FLAG)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		(up-get-fact-sum any-enemy unit-type-count huskarl-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ HUSKARL-FLAG)
		)

		;Samurai
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		(up-get-player-fact target-player unit-type-count samurai-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ SAMURAI-FLAG)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		(up-get-fact-sum any-enemy unit-type-count samurai-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ SAMURAI-FLAG)
		)

		;Mamelukes
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		(up-get-player-fact target-player unit-type-count mameluke-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ MAMELUKE-FLAG)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		(up-get-fact-sum any-enemy unit-type-count mameluke-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ MAMELUKE-FLAG)
		)

		;Teutonic Knights
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		(up-get-player-fact target-player unit-type-count teutonic-knight-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ TEUTONIC-KNIGHT-FLAG)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		(up-get-fact-sum any-enemy unit-type-count teutonic-knight-line g-temp)
		(up-compare-goal g-temp > 0)
		=>
		(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
		(up-modify-flag g-enemy-special-unique-unit-flag c:+ TEUTONIC-KNIGHT-FLAG)
		)

		#load-if-defined UP-GAME-WK
			#load-if-not-defined DE-AVAILABLE

				;Camel Archers
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				(up-get-player-fact target-player unit-type-count camel-archer g-temp)
				(up-get-player-fact target-player unit-type-count elite-camel-archer g-temp-2)
				(up-modify-goal g-temp g:+ g-temp-2)
				(up-compare-goal g-temp > 0)
				=>
				(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
				(up-modify-flag g-enemy-special-unique-unit-flag c:+ CAMEL-ARCHER-FLAG)
				)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				(up-get-fact-sum any-enemy unit-type-count camel-archer g-temp)
				(up-get-fact-sum any-enemy unit-type-count elite-camel-archer g-temp-2)
				(up-modify-goal g-temp g:+ g-temp-2)
				(up-compare-goal g-temp > 0)
				=>
				(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
				(up-modify-flag g-enemy-special-unique-unit-flag c:+ CAMEL-ARCHER-FLAG)
				)

			#else

				;Camel Archers
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				(up-get-player-fact target-player unit-type-count camel-archer-line g-temp)
				(up-compare-goal g-temp > 0)
				=>
				(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
				(up-modify-flag g-enemy-special-unique-unit-flag c:+ CAMEL-ARCHER-FLAG)
				)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				(up-get-fact-sum any-enemy unit-type-count camel-archer-line g-temp)
				(up-compare-goal g-temp > 0)
				=>
				(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
				(up-modify-flag g-enemy-special-unique-unit-flag c:+ CAMEL-ARCHER-FLAG)
				)

				;Leitis
				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game target-player)
				(up-players-in-game enemy > 1)
				(up-get-player-fact target-player unit-type-count leitis-line g-temp)
				(up-compare-goal g-temp > 0)
				=>
				(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
				(up-modify-flag g-enemy-special-unique-unit-flag c:+ LEITIS-FLAG)
				)

				(defrule
				(players-military-population any-enemy > 1)
				(player-in-game any-enemy)
				(up-get-fact-sum any-enemy unit-type-count leitis-line g-temp)
				(up-compare-goal g-temp > 0)
				=>
				(up-modify-goal g-enemy-special-unique-unit-count g:+ g-temp)
				(up-modify-flag g-enemy-special-unique-unit-flag c:+ LEITIS-FLAG)
				)

			#end-if
		#end-if

	;-----------
	;	Monks
	;-----------
	
		;Target Enemy
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game target-player)
		(up-players-in-game enemy > 1)
		=>
		(up-get-player-fact target-player unit-type-count monk g-temp)
		(up-modify-goal g-enemy-monks-count g:+ g-temp)
		(up-get-player-fact target-player unit-type-count missionary g-temp)
		(up-modify-goal g-enemy-monks-count g:+ g-temp)
		)

		;All Enemies
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy unit-type-count monk g-temp)
		(up-modify-goal g-enemy-monks-count g:+ g-temp)
		(up-get-fact-sum any-enemy unit-type-count missionary g-temp)
		(up-modify-goal g-enemy-monks-count g:+ g-temp)
		)

	;--------------------------------------
	;	Adjust for enemy starting scouts
	;--------------------------------------
		
		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		=>
		(up-get-fact players-in-game enemy g-temp)
		(up-modify-goal g-enemy-light-cavalry-count g:- g-temp)
		(up-modify-goal g-enemy-light-cavalry-count c:- 1)	;for target-player double counting
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		(player-in-game 1)
		(stance-toward 1 enemy)
		(or
			(players-civ 1 aztec)
			(or
				(players-civ 1 incan)
				(players-civ 1 mayan)))
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:- 1)
		(up-modify-goal g-enemy-light-cavalry-count c:+ 1)
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		(player-in-game 2)
		(stance-toward 2 enemy)
		(or
			(players-civ 2 aztec)
			(or
				(players-civ 2 incan)
				(players-civ 2 mayan)))
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:- 1)
		(up-modify-goal g-enemy-light-cavalry-count c:+ 1)
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		(player-in-game 3)
		(stance-toward 3 enemy)
		(or
			(players-civ 3 aztec)
			(or
				(players-civ 3 incan)
				(players-civ 3 mayan)))
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:- 1)
		(up-modify-goal g-enemy-light-cavalry-count c:+ 1)
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		(player-in-game 4)
		(stance-toward 4 enemy)
		(or
			(players-civ 4 aztec)
			(or
				(players-civ 4 incan)
				(players-civ 4 mayan)))
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:- 1)
		(up-modify-goal g-enemy-light-cavalry-count c:+ 1)
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		(player-in-game 5)
		(stance-toward 5 enemy)
		(or
			(players-civ 5 aztec)
			(or
				(players-civ 5 incan)
				(players-civ 5 mayan)))
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:- 1)
		(up-modify-goal g-enemy-light-cavalry-count c:+ 1)
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		(player-in-game 6)
		(stance-toward 6 enemy)
		(or
			(players-civ 6 aztec)
			(or
				(players-civ 6 incan)
				(players-civ 6 mayan)))
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:- 1)
		(up-modify-goal g-enemy-light-cavalry-count c:+ 1)
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		(player-in-game 7)
		(stance-toward 7 enemy)
		(or
			(players-civ 7 aztec)
			(or
				(players-civ 7 incan)
				(players-civ 7 mayan)))
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:- 1)
		(up-modify-goal g-enemy-light-cavalry-count c:+ 1)
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		(player-in-game 8)
		(stance-toward 8 enemy)
		(or
			(players-civ 8 aztec)
			(or
				(players-civ 8 incan)
				(players-civ 8 mayan)))
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:- 1)
		(up-modify-goal g-enemy-light-cavalry-count c:+ 1)
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		(or
			(players-civ any-enemy aztec)
			(or
				(players-civ any-enemy incan)
				(players-civ any-enemy mayan)))
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:- 1)	;for target player double counting
		)

		(defrule
		(game-time < 1800)	;30 minutes
		(players-military-population any-enemy > 1)
		=>
		(up-modify-goal g-enemy-eagle-warrior-count c:max 0)
		(up-modify-goal g-enemy-light-cavalry-count c:max 0)
		)

	;--------------------------------
	;	Scale By Number of Enemies
	;--------------------------------
	
		;Divide results by number of enemies to scale it to the army size of one player
		(defrule
		(players-military-population any-enemy > 1)
		=>
		(up-get-fact players-in-game enemy g-temp)
		(up-modify-goal g-enemy-swordsmen-count g:/ g-temp)
		(up-modify-goal g-enemy-spearmen-count g:/ g-temp)
		(up-modify-goal g-enemy-eagle-warrior-count g:/ g-temp)
		(up-modify-goal g-enemy-condottiero-count g:/ g-temp)
		(up-modify-goal g-enemy-foot-archers-count g:/ g-temp)
		(up-modify-goal g-enemy-skirmishers-count g:/ g-temp)
		(up-modify-goal g-enemy-cavalry-archers-count g:/ g-temp)
		(up-modify-goal g-enemy-hand-cannoneer-slinger-count g:/ g-temp)
		(up-modify-goal g-enemy-light-cavalry-count g:/ g-temp)
		(up-modify-goal g-enemy-heavy-cavalry-count g:/ g-temp)
		(up-modify-goal g-enemy-camel-count g:/ g-temp)
		(up-modify-goal g-enemy-elephants-count g:/ g-temp)
		(up-modify-goal g-enemy-field-siege-count g:/ g-temp)
		(up-modify-goal g-enemy-special-unique-unit-count g:/ g-temp)
		)

		(defrule
		(players-military-population any-enemy > 1)
		=>
		(up-get-fact players-in-game enemy g-temp)
		(up-modify-goal g-enemy-monks-count g:/ g-temp)
		)

		(defrule
		(players-military-population any-enemy > 1)
		=>
		(up-modify-goal g-enemy-swordsmen-count c:max 0)
		(up-modify-goal g-enemy-spearmen-count c:max 0)
		(up-modify-goal g-enemy-eagle-warrior-count c:max 0)
		(up-modify-goal g-enemy-condottiero-count c:max 0)
		(up-modify-goal g-enemy-foot-archers-count c:max 0)
		(up-modify-goal g-enemy-skirmishers-count c:max 0)
		(up-modify-goal g-enemy-cavalry-archers-count c:max 0)
		(up-modify-goal g-enemy-hand-cannoneer-slinger-count c:max 0)
		(up-modify-goal g-enemy-light-cavalry-count c:max 0)
		(up-modify-goal g-enemy-heavy-cavalry-count c:max 0)
		(up-modify-goal g-enemy-camel-count c:max 0)
		(up-modify-goal g-enemy-elephants-count c:max 0)
		(up-modify-goal g-enemy-field-siege-count c:max 0)
		(up-modify-goal g-enemy-special-unique-unit-count c:max 0)
		(up-modify-goal g-enemy-monks-count c:max 0)
		)

		;Calculate average enemy military pop (g-temp-3)
		(defrule
		(players-military-population any-enemy > 1)
		(player-in-game any-enemy)
		=>
		(up-get-fact-sum any-enemy military-population 0 g-temp-3)
		(up-get-fact players-in-game enemy g-temp-2)
		(up-modify-goal g-temp-3 g:/ g-temp-2)
		)

		;Cap military numbers at average enemy military population (enemy player unit counts can sometimes go way too high)
		(defrule
		(players-military-population any-enemy > 1)
		=>
		(up-modify-goal g-temp g:= g-enemy-swordsmen-count)
		(up-modify-goal g-temp g:+ g-enemy-spearmen-count)
		(up-modify-goal g-temp g:+ g-enemy-eagle-warrior-count)
		(up-modify-goal g-temp g:+ g-enemy-condottiero-count)
		(up-modify-goal g-temp g:+ g-enemy-foot-archers-count)
		(up-modify-goal g-temp g:+ g-enemy-skirmishers-count)
		(up-modify-goal g-temp g:+ g-enemy-cavalry-archers-count)
		(up-modify-goal g-temp g:+ g-enemy-hand-cannoneer-slinger-count)
		(up-modify-goal g-temp g:+ g-enemy-light-cavalry-count)
		(up-modify-goal g-temp g:+ g-enemy-heavy-cavalry-count)
		(up-modify-goal g-temp g:+ g-enemy-camel-count)
		(up-modify-goal g-temp g:+ g-enemy-elephants-count)
		(up-modify-goal g-temp g:+ g-enemy-field-siege-count)
		(up-modify-goal g-temp g:+ g-enemy-special-unique-unit-count)
		(up-modify-goal g-temp g:+ g-enemy-monks-count)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(up-compare-goal g-temp g:> g-temp-3)
		(up-modify-goal g-temp-2 g:= g-temp-3)
		(up-modify-goal g-temp-2 g:%/ g-temp)
		=>
		(up-modify-goal g-enemy-swordsmen-count g:%* g-temp-2)
		(up-modify-goal g-enemy-spearmen-count g:%* g-temp-2)
		(up-modify-goal g-enemy-eagle-warrior-count g:%* g-temp-2)
		(up-modify-goal g-enemy-condottiero-count g:%* g-temp-2)
		(up-modify-goal g-enemy-foot-archers-count g:%* g-temp-2)
		(up-modify-goal g-enemy-skirmishers-count g:%* g-temp-2)
		(up-modify-goal g-enemy-cavalry-archers-count g:%* g-temp-2)
		(up-modify-goal g-enemy-hand-cannoneer-slinger-count g:%* g-temp-2)
		(up-modify-goal g-enemy-light-cavalry-count g:%* g-temp-2)
		(up-modify-goal g-enemy-heavy-cavalry-count g:%* g-temp-2)
		(up-modify-goal g-enemy-camel-count g:%* g-temp-2)
		(up-modify-goal g-enemy-elephants-count g:%* g-temp-2)
		)

		(defrule
		(players-military-population any-enemy > 1)
		(up-compare-goal g-temp g:> g-temp-3)
		(up-modify-goal g-temp-2 g:= g-temp-3)
		(up-modify-goal g-temp-2 g:%/ g-temp)
		=>
		(up-modify-goal g-enemy-field-siege-count g:%* g-temp-2)
		(up-modify-goal g-enemy-special-unique-unit-count g:%* g-temp-2)
		(up-modify-goal g-enemy-monks-count g:%* g-temp-2)
		)

;-------------------------------------
;	GOAL 219: g-constant-train-unit
;	GOAL 221: g-desired-num-constant-train-unit-goal
;-------------------------------------

	(defrule
	(up-compare-goal g-constant-train-unit != 0)
	=>
	(set-goal g-constant-train-unit 0)
	)

	(defrule
	(goal g-current-strategy FC-KRUSH)
	(current-age == castle-age)
	(unit-type-count knight-line g:< g-required-attack-num)
	(up-object-type-count-total c: knight-line g:< g-desired-num-knight)
	(goal g-first-attack-launched NO)
	(up-compare-goal g-knight-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit knight)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-knight)	;This sets g-desired-num-constant-train-unit-goal to the
	)																					;goal ID constant of g-desired-num-knight, not the actual
																						;number of desired knights stored in the goal
	(defrule
	(goal g-current-strategy FC-CRUSH)
	(current-age == castle-age)
	(up-compare-goal g-camel-line g:< g-required-attack-num)
	(up-compare-goal g-camel-line g:< g-desired-num-camel)
	(goal g-first-attack-launched NO)
	(up-compare-goal g-camel-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit camel)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-camel)
	)

	(defrule
	(goal g-current-strategy FC-EAGLES-REVENGE)
	(current-age == castle-age)
	(up-compare-goal g-eagle-scout-line g:< g-required-attack-num)
	(up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
	(goal g-first-attack-launched NO)
	(up-compare-goal g-eagle-warrior-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit eagle-warrior)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-eagle-warrior)
	)

	(defrule
	(goal g-current-strategy FC-STRONGBOW)
	(current-age == castle-age)
	(unit-type-count-total archer-line g:< g-required-attack-num)
	(up-object-type-count c: archer-line g:< g-desired-num-archer)
	(goal g-first-attack-launched NO)
	(up-compare-goal g-archer-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= SECONDARY-FEUDAL-COMPLETE)
	=>
	(set-goal g-constant-train-unit archer)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-archer)
	)

	(defrule
	(goal g-current-strategy FC-DEMON)
	(current-age == castle-age)
	(unit-type-count-total monk g:< g-required-attack-num)
	(up-object-type-count c: monk g:< g-desired-num-monk)
	(goal g-first-attack-launched NO)
	(or
		(up-research-status c: ri-sanctity >= research-pending)
		(up-compare-const SANCTITY-AVAILABLE == NO))
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit monk)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-monk)
	)

	(defrule
	(goal g-current-strategy FC-CASTLE-DROP)
	(current-age == castle-age)
	(unit-type-count-total my-unique-unit g:< g-required-attack-num)
	(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
	(goal g-first-attack-launched NO)
	(up-compare-goal g-unique-unit-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-eco-tech-progress >= PRIORITY-CASTLE-COMPLETE)
	=>
	(set-goal g-constant-train-unit my-unique-unit)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-unique-unit)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-desired-num-trade-cart > 0)
	(up-object-type-count-total c: trade-cart g:< g-desired-num-trade-cart)
	(research-completed ri-caravan)
	(goal g-town-under-attack NO)
	=>
	(set-goal g-constant-train-unit trade-cart)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-trade-cart)
	)

	(defrule
	(current-age >= castle-age)
	(or
		(up-building-type-in-town c: castle > 0)
		(military-population > 15))
	(building-type-count siege-workshop > 0)
	(unit-type-count-total battering-ram-line == 0)
	(up-compare-goal g-desired-num-battering-ram > 0)
	(up-research-status c: ri-capped-ram != research-available)
	=>
	(set-goal g-constant-train-unit battering-ram)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-battering-ram)
	)

	(defrule
	(current-age == imperial-age)
	(or
		(up-building-type-in-town c: castle > 0)
		(military-population > 15))
	(building-type-count castle > 0)
	(unit-type-count-total trebuchet-set == 0)
	(up-compare-goal g-desired-num-trebuchet > 0)
	=>
	(set-goal g-constant-train-unit trebuchet)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-trebuchet)
	)

	(defrule
	(current-age == imperial-age)
	(or
		(up-building-type-in-town c: castle > 0)
		(military-population > 15))
	(building-type-count siege-workshop > 0)
	(unit-available bombard-cannon)
	(unit-type-count-total bombard-cannon == 0)
	(up-compare-goal g-desired-num-bombard-cannon > 0)
	=>
	(set-goal g-constant-train-unit bombard-cannon)
	(up-modify-goal g-desired-num-constant-train-unit-goal c:= g-desired-num-bombard-cannon)
	)

;---------------------------------------
;	GOAL 230: g-team-partner
;	GOAL 258: g-team-partner-identity
;---------------------------------------

	(defrule
	(up-compare-goal g-team-partner > 0)
	=>
	(up-modify-sn sn-focus-player-number g:= g-team-partner)
	)

	(defrule
	(up-compare-goal g-team-partner > 0)
	(or
		(not
			(player-in-game focus-player))
		(and
			(players-building-type-count focus-player town-center == 0)
			(game-time >= 600)))
	=>
	(set-goal g-team-partner PENDING)
	)

	;2 Player team
	(defrule
	(goal g-team-position FLANK-NO-POCKET)
	(goal g-team-partner PENDING)
	(player-in-game any-ally)
	(players-building-type-count any-ally town-center > 0)
	=>
	(up-find-player ally find-closest g-team-partner)
	(up-modify-sn sn-focus-player-number g:= g-team-partner)
	(up-get-focus-fact allied-goal g-identity g-team-partner-identity)
	)

	;3+ player team (Flank)
	(load "The General 3.1/Functions/Reset")

	(defrule
	(or
		(up-compare-goal g-team-position != FLANK)
		(game-time <= 10))
	=>
	(up-jump-rule 7)
	)

		(defrule
		(goal g-team-position FLANK)
		(goal g-team-partner PENDING)
		(player-in-game any-ally)
		(players-building-type-count any-ally town-center > 0)
		=>
		(set-goal i 1)
		(up-modify-sn sn-focus-player-number g:= i)
		(set-goal g-temp-2 HUNDRED-FIFTY-PERCENT-MAP-SIZE)	;stores the lowest player distance found between ally pockets
		)

		(defrule
		(up-compare-goal g-team-partner > 0)
		=>
		(up-jump-rule 4)
		)

			;Loop through all players and find the closest allied pocket with DUC
			(defrule
			(up-compare-goal i != my-player-number)
			(goal g-team-position FLANK)
			(player-in-game any-ally)
			(players-building-type-count any-ally town-center > 0)
			(player-in-game focus-player)
			(stance-toward focus-player ally)
			(up-compare-goal i <= 8)
			=>
			(up-full-reset-search)
			(up-find-remote c: town-center c: 1)
			)

			(defrule
			(up-compare-goal i != my-player-number)
			(goal g-team-position FLANK)
			(player-in-game any-ally)
			(players-building-type-count any-ally town-center > 0)
			(player-in-game focus-player)
			(stance-toward focus-player ally)
			(up-compare-goal i <= 8)
			(up-set-target-object search-remote c: 0)
			=>
			(up-get-point position-object g-point-x)
			(up-set-target-point g-point-x)
			(up-get-point-distance g-position-self-x g-point-x g-temp)
			)

			(defrule
			(up-compare-goal i != my-player-number)
			(goal g-team-position FLANK)
			(player-in-game any-ally)
			(players-building-type-count any-ally town-center > 0)
			(player-in-game focus-player)
			(stance-toward focus-player ally)
			(up-compare-goal i <= 8)
			(up-set-target-object search-remote c: 0)
			(up-compare-goal g-temp g:< g-temp-2)	;less than the lowest distance to an ally pocket found so far
			(up-compare-goal g-temp > 0)
			=>
			(up-modify-goal g-team-partner s:= sn-focus-player-number)
			(up-modify-goal g-temp-2 g:= g-temp)	;store new lowest distance to an ally pocket
			)

			(defrule
			(goal g-team-position FLANK)
			(player-in-game any-ally)
			(players-building-type-count any-ally town-center > 0)
			(up-compare-goal i < 8)
			=>
			(up-modify-goal i c:+ 1)
			(up-modify-sn sn-focus-player-number g:= i)
			(up-jump-rule -4)
			)

		(defrule
		(goal g-team-position FLANK)
		(up-compare-goal g-team-partner > 0)
		(player-in-game any-ally)
		(players-building-type-count any-ally town-center > 0)
		(goal i 8)
		=>
		(up-modify-sn sn-focus-player-number g:= g-team-partner)
		(up-get-focus-fact allied-goal g-identity g-team-partner-identity)
		)
	
	;3+ player team (Pocket)
	(load "The General 3.1/Functions/Reset")

	(defrule
	(or
		(goal g-position FLANK)
		(game-time <= 10))
	=>
	(up-jump-rule 7)
	)

		(defrule
		(goal g-position POCKET)
		(goal g-team-partner PENDING)
		(player-in-game any-ally)
		(players-building-type-count any-ally town-center > 0)
		=>
		(set-goal i 1)
		(up-modify-sn sn-focus-player-number g:= i)
		(set-goal g-temp-2 HUNDRED-FIFTY-PERCENT-MAP-SIZE)	;stores the lowest player distance found between ally flanks
		)

			(defrule
			(up-compare-goal g-team-partner > 0)
			=>
			(up-jump-rule 4)
			)

			;Loop through all players and find the closest allied flank with DUC
			(defrule
			(up-compare-goal i != my-player-number)
			(goal g-position POCKET)
			(player-in-game any-ally)
			(players-building-type-count any-ally town-center > 0)
			(player-in-game focus-player)
			(stance-toward focus-player ally)
			(up-allied-goal focus-player g-position == FLANK)
			(up-compare-goal i <= 8)
			=>
			(up-full-reset-search)
			(up-find-remote c: town-center c: 1)
			)

			(defrule
			(up-compare-goal i != my-player-number)
			(goal g-position POCKET)
			(player-in-game any-ally)
			(players-building-type-count any-ally town-center > 0)
			(player-in-game focus-player)
			(stance-toward focus-player ally)
			(up-allied-goal focus-player g-position == FLANK)
			(up-compare-goal i <= 8)
			(up-set-target-object search-remote c: 0)
			=>
			(up-get-point position-object g-point-x)
			(up-set-target-point g-point-x)
			(up-get-point-distance g-position-self-x g-point-x g-temp)
			)

			(defrule
			(up-compare-goal i != my-player-number)
			(goal g-position POCKET)
			(player-in-game any-ally)
			(players-building-type-count any-ally town-center > 0)
			(player-in-game focus-player)
			(stance-toward focus-player ally)
			(up-allied-goal focus-player g-position == FLANK)
			(up-compare-goal i <= 8)
			(up-set-target-object search-remote c: 0)
			(up-compare-goal g-temp g:< g-temp-2)	;less than the lowest distance to an ally flank found so far
			(up-compare-goal g-temp > 0)
			=>
			(up-modify-goal g-team-partner s:= sn-focus-player-number)
			(up-modify-goal g-temp-2 g:= g-temp)	;store new lowest distance to an ally flank
			)

			(defrule
			(goal g-position POCKET)
			(player-in-game any-ally)
			(players-building-type-count any-ally town-center > 0)
			(up-compare-goal i <= 8)
			=>
			(up-modify-goal i c:+ 1)
			(up-modify-sn sn-focus-player-number g:= i)
			(up-jump-rule -4)
			)

		(defrule
		(goal g-position POCKET)
		(up-compare-goal g-team-partner > 0)
		(player-in-game any-ally)
		(players-building-type-count any-ally town-center > 0)
		(goal i 8)
		=>
		(up-modify-sn sn-focus-player-number g:= g-team-partner)
		(up-get-focus-fact allied-goal g-identity g-team-partner-identity)
		)

;---------------------------------------
;	GOAL 233: g-first-attack-launched
;---------------------------------------

	(defrule
	(up-compare-goal g-first-attack-launched != YES)
	(goal g-attacking YES)
	=>
	(set-goal g-first-attack-launched YES)
	)

;----------------------------------------
;	GOAL 236: g-allow-queued-villagers
;----------------------------------------

	(defrule
	(true)
	=>
	(set-goal g-allow-queued-villagers YES)
	)

	;Cancel training queue for villagers if we need to free up the TC for upcoming techs

	;Loom
	(defrule
	(up-research-status c: ri-loom < research-complete)
	(or
		(players-military-population any-enemy > 1)
		(or
			(cc-players-unit-type-count 0 elephant > 0)
			(cc-players-unit-type-count 0 rhino > 0)))
	(up-object-type-count-total c: villager >= 10)
	=>
	(set-goal g-allow-queued-villagers NO)
	)

	;Loom or Next Age
	(defrule
	(up-modify-goal g-temp g:= g-required-num-villager)
	(up-modify-goal g-temp c:- 1)
	(up-object-type-count c: villager g:>= g-temp)
	=>
	(set-goal g-allow-queued-villagers NO)
	)

	;Preparing an attack
	(defrule
	(current-age == castle-age)
	(goal g-strategy-type FAST-CASTLE)
	(goal g-first-attack-launched NO)
	=>
	(set-goal g-allow-queued-villagers NO)
	)

	;Defensive or Aggressive
	(defrule
	(military-population < 25)
	(or
		(goal g-game-focus AGGRESSIVE)
		(goal g-game-focus DEFENSIVE))
	(or
		(current-age >= feudal-age)
		(goal g-town-under-attack YES))
	=>
	(set-goal g-allow-queued-villagers NO)
	)

	;Low military
	(defrule
	(up-compare-goal g-game-focus != REBUILD)
	(building-type-count town-center > 1)
	(military-population g:< g-min-military-pop)
	=>
	(set-goal g-allow-queued-villagers NO)
	)

;--------------------------------------------------
;	RESET Tech Progress (Goals 237-239, 242-257)
;--------------------------------------------------

	(defrule
	(true)
	=>
	(set-goal g-primary-unit-tech-progress 0)
	(set-goal g-support-unit-tech-progress 0)
	(set-goal g-eco-tech-progress 0)
	(set-goal g-militia-tech-progress 0)
	(set-goal g-spearman-tech-progress 0)
	(set-goal g-eagle-warrior-tech-progress 0)
	(set-goal g-condottiero-tech-progress 0)
	)

	(defrule
	(true)
	=>
	(set-goal g-archer-tech-progress 0)
	(set-goal g-skirmisher-tech-progress 0)
	(set-goal g-cavalry-archer-tech-progress 0)
	(set-goal g-hand-cannoneer-tech-progress 0)
	(set-goal g-slinger-tech-progress 0)
	(set-goal g-genitour-tech-progress 0)
	(set-goal g-scout-cavalry-tech-progress 0)
	(set-goal g-knight-tech-progress 0)
	(set-goal g-camel-tech-progress 0)
	(set-goal g-battle-elephant-tech-progress 0)
	(set-goal g-steppe-lancer-tech-progress 0)
	(set-goal g-unique-unit-tech-progress 0)
	)

;-----------------------------------
;	GOAL 239: g-eco-tech-progress
;-----------------------------------

	;----------------
	;	Feudal Age
	;----------------

		(defrule
		(current-age >= feudal-age)
		=>
		(set-goal g-eco-tech-progress PRIORITY-FEUDAL-COMPLETE)
		)

		(defrule
		(current-age >= feudal-age)
		(goal g-eco-tech-progress PRIORITY-FEUDAL-COMPLETE)
		(up-research-status c: ri-double-bit-axe >= research-pending)
		(up-research-status c: ri-horse-collar >= research-pending)
		=>
		(set-goal g-eco-tech-progress SECONDARY-FEUDAL-COMPLETE)
		)

		(defrule
		(current-age >= feudal-age)
		(goal g-eco-tech-progress SECONDARY-FEUDAL-COMPLETE)
		(or
			(up-research-status c: ri-gold-mining >= research-pending)
			(up-compare-goal g-desired-num-gold-vils < 6))
		(or
			(up-research-status c: ri-stone-mining >= research-pending)
			(up-compare-goal g-desired-num-stone-vils < 8))
		(up-research-status c: ri-wheel-barrow >= research-pending)
		=>
		(set-goal g-eco-tech-progress ALL-FEUDAL-COMPLETE)
		)

	;----------------
	;	Castle Age
	;----------------

		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-eco-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bow-saw >= research-pending)
		(up-research-status c: ri-horse-collar >= research-pending)
		(or
			(goal g-desired-num-trade-cart 0)
			(up-research-status c: ri-caravan >= research-pending))
		=>
		(set-goal g-eco-tech-progress PRIORITY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-eco-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-wheel-barrow >= research-pending)
		(or
			(up-research-status c: ri-gillnets >= research-pending)
			(goal g-desired-num-fishing-ship 0))
		=>
		(set-goal g-eco-tech-progress SECONDARY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-eco-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-hand-cart >= research-pending)
		(up-research-status c: ri-heavy-plow >= research-pending)
		(or
			(up-research-status c: ri-gold-mining >= research-pending)
			(up-compare-goal g-desired-num-gold-vils < 6))
		(or
			(up-research-status c: ri-stone-mining >= research-pending)
			(up-compare-goal g-desired-num-stone-vils < 8))
		=>
		(set-goal g-eco-tech-progress ALL-CASTLE-COMPLETE)
		)

	;------------------
	;	Imperial Age
	;------------------
		
		(defrule
		(goal g-eco-tech-progress ALL-CASTLE-COMPLETE)
		(current-age == imperial-age)
		=>
		(set-goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		#load-if-defined INDIAN-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(up-research-status c: ri-two-man-saw >= research-pending)
			(up-research-status c: ri-gold-shaft-mining >= research-pending)
			(up-research-status c: my-second-unique-research >= research-pending)
			=>
			(set-goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined ITALIAN-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(up-research-status c: ri-two-man-saw >= research-pending)
				(up-research-status c: ri-crop-rotation >= research-pending)
				(or
					(up-research-status c: my-unique-research >= research-pending)
					(and
						(goal g-desired-num-trade-cart 0)
						(goal g-desired-num-trade-cog 0)))
				=>
				(set-goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#else

				(defrule
				(current-age == imperial-age)
				(goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(or
					(up-research-status c: ri-two-man-saw >= research-pending)
					(up-compare-const TWO-MAN-SAW-AVAILABLE == NO))
				(or
					(up-research-status c: ri-crop-rotation >= research-pending)
					(up-compare-const CROP-ROTATION-AVAILABLE == NO))
				(or
					(up-research-status c: ri-gold-shaft-mining >= research-pending)
					(or
						(up-compare-goal g-desired-num-gold-vils < 6)
						(up-compare-const GOLD-SHAFT-MINING-AVAILABLE == NO)))
				=>
				(set-goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)
			#end-if
		#end-if

		(defrule
		(current-age == imperial-age)
		(goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(or
			(up-research-status c: ri-stone-shaft-mining >= research-pending)
			(or
				(up-compare-const STONE-SHAFT-MINING-AVAILABLE == NO)
				(up-compare-goal g-desired-num-stone-vils < 8)))
		=>
		(set-goal g-eco-tech-progress ALL-IMPERIAL-COMPLETE)
		)

;------------------------------------
;	GOAL 240: g-primary-unit-class
;	GOAL 241: g-support-unit-class
;------------------------------------

	(defrule
	(up-compare-goal g-primary-unit >= 0)
	(timer-triggered t-10-sec)
	=>
	(up-get-object-type-data g: g-primary-unit object-data-class g-primary-unit-class)
	)

	(defrule
	(up-compare-goal g-support-unit >= 0)
	(timer-triggered t-10-sec)
	=>
	(up-get-object-type-data g: g-support-unit object-data-class g-support-unit-class)
	)

	(defrule
	(goal g-primary-unit-class scout-cavalry-class)
	=>
	(set-goal g-primary-unit-class cavalry-class)
	)

	(defrule
	(goal g-support-unit-class scout-cavalry-class)
	=>
	(set-goal g-support-unit-class cavalry-class)
	)

;---------------------------------------
;	GOAL 242: g-militia-tech-progress
;---------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-militia-tech-progress < PRIORITY-FEUDAL-COMPLETE)
	(up-research-status c: ri-man-at-arms >= research-pending)
	=>
	(set-goal g-militia-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-militia-tech-progress PRIORITY-FEUDAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-militia-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-militia-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-militia-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-militia-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-long-swordsman >= research-pending)
	=>
	(set-goal g-militia-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-militia-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-militia-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-militia-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-compare-goal g-desired-num-militia < 10)
		(or
			(up-research-status c: ri-supplies >= research-pending)
			(up-compare-const SUPPLIES-AVAILABLE == NO)))
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-militia-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-militia-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-squires >= research-pending)
		(up-compare-const SQUIRES-AVAILABLE == NO))
	=>
	(set-goal g-militia-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-militia-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	(up-research-status c: ri-long-swordsman >= research-pending)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-two-handed-swordsman)
		(up-compare-const TWO-HANDED-SWORDSMAN-AVAILABLE == NO))
	=>
	(set-goal g-militia-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-militia-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-compare-goal g-desired-num-militia < 10)
		(or
			(up-research-status c: ri-supplies >= research-pending)
			(up-compare-const SUPPLIES-AVAILABLE == NO)))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-squires >= research-pending)
		(up-compare-const SQUIRES-AVAILABLE == NO))
	=>
	(set-goal g-temp 748001)
	)

	(defrule
	(goal g-temp 748001)
	(current-age == imperial-age)
	(goal g-militia-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-champion)
		(up-compare-const CHAMPION-AVAILABLE == NO))
	(or
		(research-completed ri-plate-mail)
		(up-compare-const PLATE-MAIL-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-blast-furnace)
		(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
	=>
	(set-goal g-militia-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined GOTHIC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-militia-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined MALAY-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-militia-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-militia-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if
	
	#load-if-defined AZTEC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Garland Wars
		=>
		(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined SLAVIC-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined VIKING-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				#load-if-defined BULGARIANS-CIV

					(defrule
					(current-age == imperial-age)
					(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					(research-completed my-unique-research)	;Bagains
					=>
					(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
					)

				#else

					(defrule
					(current-age == imperial-age)
					(goal g-militia-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					=>
					(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
					)
				
				#end-if
			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-militia 0)
	=>
	(set-goal g-militia-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-militia 0)
	=>
	(set-goal g-militia-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-militia 0)
	=>
	(set-goal g-militia-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;----------------------------------------
;	GOAL 243: g-spearman-tech-progress
;----------------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-spearman-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-spearman-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-spearman-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-spearman-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-spearman-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-spearman-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(or
		(research-completed ri-pikeman)
		(up-compare-const PIKEMAN-AVAILABLE == NO))
	=>
	(set-goal g-spearman-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-spearman-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-spearman-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-spearman-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-spearman-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-spearman-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-squires >= research-pending)
		(up-compare-const SQUIRES-AVAILABLE == NO))
	=>
	(set-goal g-spearman-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-spearman-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-pikeman)
		(up-compare-const PIKEMAN-AVAILABLE == NO))
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-spearman-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-spearman-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-squires >= research-pending)
		(up-compare-const SQUIRES-AVAILABLE == NO))
	=>
	(set-goal g-temp 293487)
	)
		
	(defrule
	(goal g-temp 293487)
	(current-age == imperial-age)
	(goal g-spearman-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-halberdier)
		(up-compare-const HALBERDIER-AVAILABLE == NO))
	(or
		(research-completed ri-plate-mail)
		(up-compare-const PLATE-MAIL-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-blast-furnace)
		(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
	=>
	(set-goal g-spearman-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined GOTHIC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-primary-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
			
		(defrule
		(current-age == imperial-age)
		(goal g-primary-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined AZTEC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Garland Wars
		=>
		(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined SLAVIC-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined VIKING-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				#load-if-defined LITHUANIANS-CIV

					(defrule
					(current-age == imperial-age)
					(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					(research-completed my-unique-research)
					=>
					(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
					)

				#else

					(defrule
					(current-age == imperial-age)
					(goal g-spearman-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					=>
					(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
					)

				#end-if
			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-spearman 0)
	=>
	(set-goal g-spearman-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-spearman 0)
	=>
	(set-goal g-spearman-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-spearman 0)
	=>
	(set-goal g-spearman-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;---------------------------------------------
;	GOAL 244: g-eagle-warrior-tech-progress
;---------------------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-eagle-warrior-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-eagle-warrior-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-eagle-warrior-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)
	
	(defrule
	(current-age >= feudal-age)
	(goal g-eagle-warrior-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-eagle-warrior-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-eagle-warrior-tech-progress REQUIRED-CASTLE-COMPLETE)
	)
	
	(defrule
	(current-age >= castle-age)
	(goal g-eagle-warrior-tech-progress REQUIRED-CASTLE-COMPLETE)
	(or
		(research-completed ri-eagle-warrior)
		(up-compare-const EAGLE-SCOUT-AVAILABLE == NO))
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-eagle-warrior-tech-progress PRIORITY-CASTLE-COMPLETE)
	)
	
	(defrule
	(current-age >= castle-age)
	(goal g-eagle-warrior-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-eagle-warrior-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-eagle-warrior-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-squires >= research-pending)
		(up-compare-const SQUIRES-AVAILABLE == NO))
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-CASTLE-COMPLETE)
	)	

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-eagle-warrior-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-eagle-warrior)
		(up-compare-const EAGLE-SCOUT-AVAILABLE == NO))
	(up-research-status c: ri-scale-mail >= research-pending)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-eagle-warrior-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-eagle-warrior-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-squires >= research-pending)
		(up-compare-const SQUIRES-AVAILABLE == NO))
	=>
	(set-goal g-temp 238724)
	)
		
	(defrule
	(goal g-temp 238724)
	(current-age == imperial-age)
	(goal g-eagle-warrior-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-elite-eagle-warrior >= research-pending)
		(up-compare-const ELITE-EAGLE-WARRIOR-AVAILABLE == NO))
	(or
		(research-completed ri-plate-mail)
		(up-compare-const PLATE-MAIL-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-blast-furnace)
		(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
	=>
	(set-goal g-eagle-warrior-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined MAYAN-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-eagle-warrior-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-eagle-warrior-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined AZTEC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Garland Wars
		=>
		(set-goal g-eagle-warrior-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined INCAN-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-eagle-warrior-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else

			(defrule
			(current-age == imperial-age)
			(goal g-eagle-warrior-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-eagle-warrior-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-eagle-warrior 0)
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-eagle-warrior 0)
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-eagle-warrior 0)
	=>
	(set-goal g-eagle-warrior-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;-------------------------------------------
;	GOAL 245: g-condottiero-tech-progress
;-------------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-condottiero-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-condottiero-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-condottiero-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	=>
	(set-goal g-condottiero-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-condottiero-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-condottiero-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-condottiero-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-squires >= research-pending)
		(up-compare-const SQUIRES-AVAILABLE == NO))
	=>
	(set-goal g-condottiero-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-condottiero-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-scale-mail >= research-pending)
	(or
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-compare-const CHAIN-MAIL-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-condottiero-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-condottiero-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-squires >= research-pending)
		(up-compare-const SQUIRES-AVAILABLE == NO))
	(or
		(research-completed ri-plate-mail)
		(up-compare-const PLATE-MAIL-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-blast-furnace)
		(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
	=>
	(set-goal g-condottiero-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined GOTHIC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-condottiero-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
			
		(defrule
		(current-age == imperial-age)
		(goal g-condottiero-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined AZTEC-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Garland Wars
		=>
		(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined SLAVIC-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined VIKING-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				#load-if-defined ITALIAN-CIV
					#load-if-defined DE-AVAILABLE

						(defrule
						(current-age == imperial-age)
						(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
						(research-completed my-second-unique-research)
						=>
						(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
						)

					#else

						(defrule
						(current-age == imperial-age)
						(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
						=>
						(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
						)

					#end-if
				#else

					(defrule
					(current-age == imperial-age)
					(goal g-condottiero-tech-progress SECONDARY-IMPERIAL-COMPLETE)
					=>
					(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
					)

				#end-if
			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-condottiero 0)
	=>
	(set-goal g-condottiero-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-condottiero 0)
	=>
	(set-goal g-condottiero-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-condottiero 0)
	=>
	(set-goal g-condottiero-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;--------------------------------------
;	GOAL 246: g-archer-tech-progress
;--------------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-archer-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-archer-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-fletching >= research-pending)
	=>
	(set-goal g-archer-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-archer-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-archer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-archer-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-crossbow >= research-pending)
		(up-compare-const CROSSBOWMAN-AVAILABLE == NO))
	=>
	(set-goal g-archer-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-archer-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-fletching >= research-pending)
	=>
	(set-goal g-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	=>
	(set-goal g-archer-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-archer-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-crossbow >= research-pending)
		(up-compare-const CROSSBOWMAN-AVAILABLE == NO))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	=>
	(set-goal g-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	=>
	(set-goal g-temp 742893)
	)
		
	(defrule
	(goal g-temp 742893)
	(current-age == imperial-age)
	(goal g-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-arbalest)
		(up-compare-const ARBALEST-AVAILABLE == NO))
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	=>
	(set-goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined MAYAN-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		(or
			(research-completed ri-ring-archer-armor)
			(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
		=>
		(set-goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined PERSIAN-CIV
			#load-if-defined DE-AVAILABLE

				(defrule
				(current-age == imperial-age)
				(goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				(or
					(research-completed ri-ring-archer-armor)
					(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
				=>
				(set-goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#else

				(defrule
				(current-age == imperial-age)
				(goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(or
					(research-completed ri-ring-archer-armor)
					(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
				=>
				(set-goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#end-if
		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)
		
		#end-if
	#end-if
		
	#load-if-defined BRITON-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		(research-completed my-unique-research)	;Yeomen
		=>
		(set-goal g-archer-tech-progress ALL-IMPERIAL-COMPLETE)
		)
	
	#else
		#load-if-defined ITALIAN-CIV
			(defrule
			(current-age == imperial-age)
			(goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed ri-chemistry)
			(research-completed my-second-unique-research)
			=>
			(set-goal g-archer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else

			(defrule
			(current-age == imperial-age)
			(goal g-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed ri-chemistry)
			=>
			(set-goal g-archer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-archer 0)
	=>
	(set-goal g-archer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-archer 0)
	=>
	(set-goal g-archer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-archer 0)
	=>
	(set-goal g-archer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;------------------------------------------
;	GOAL 247: g-skirmisher-tech-progress
;------------------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-skirmisher-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-skirmisher-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-fletching >= research-pending)
	=>
	(set-goal g-skirmisher-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-skirmisher-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-skirmisher-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-skirmisher-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(or
		(goal g-primary-enemy-threat g-enemy-foot-archers-count)
		(or
			(goal g-primary-enemy-threat g-enemy-cavalry-archers-count)
			(or
				(goal g-primary-enemy-threat g-enemy-hand-cannoneer-slinger-count)
				(or
					(up-research-status c: ri-elite-skirmisher >= research-pending)
					(up-compare-const ELITE-SKIRMISHER-AVAILABLE == NO)))))
	=>
	(set-goal g-skirmisher-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-skirmisher-tech-progress REQUIRED-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-elite-skirmisher >= research-pending)
		(up-compare-const ELITE-SKIRMISHER-AVAILABLE == NO))
	(up-research-status c: ri-fletching >= research-pending)
	=>
	(set-goal g-skirmisher-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-skirmisher-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-skirmisher-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-skirmisher-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	=>
	(set-goal g-skirmisher-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-skirmisher-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-elite-skirmisher >= research-pending)
		(up-compare-const ELITE-SKIRMISHER-AVAILABLE == NO))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-skirmisher-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-skirmisher-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	=>
	(set-goal g-temp 842743)
	)
		
	(defrule
	(goal g-temp 842743)
	(current-age == imperial-age)
	(goal g-skirmisher-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-imperial-skirmisher)
		(up-research-status c: ri-imperial-skirmisher == research-unavailable))
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	(or
		(research-completed ri-ring-archer-armor)
		(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-skirmisher-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined INCAN-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-skirmisher-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-skirmisher-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined AZTEC-CIV
	
		(defrule
		(current-age == imperial-age)
		(goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		(research-completed my-second-unique-research)	;Atl-Atl
		=>
		(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined BRITON-CIV
		
			(defrule
			(current-age == imperial-age)
			(goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed ri-chemistry)
			(research-completed my-unique-research)	;Yeomen
			=>
			(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined LITHUANIANS-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed ri-chemistry)
				(research-completed my-unique-research)
				=>
				(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
			
				(defrule
				(current-age == imperial-age)
				(goal g-skirmisher-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed ri-chemistry)
				=>
				(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-skirmisher 0)
	=>
	(set-goal g-skirmisher-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-skirmisher 0)
	=>
	(set-goal g-skirmisher-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-skirmisher 0)
	=>
	(set-goal g-skirmisher-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;----------------------------------------------
;	GOAL 248: g-cavalry-archer-tech-progress
;----------------------------------------------

	(defrule
	(current-age >= castle-age)
	=>
	(set-goal g-cavalry-archer-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-cavalry-archer-tech-progress < PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	=>
	(set-goal g-cavalry-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-cavalry-archer-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	=>
	(set-goal g-cavalry-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-cavalry-archer-tech-progress SECONDARY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	=>
	(set-goal g-cavalry-archer-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-cavalry-archer-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-cavalry-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-cavalry-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	=>
	(set-goal g-temp 428733)
	)
		
	(defrule
	(goal g-temp 428733)
	(current-age == imperial-age)
	(goal g-cavalry-archer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	=>
	(set-goal g-cavalry-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined CUMANS-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-cavalry-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-heavy-cavalry-archer)
			(up-compare-const HEAVY-CAVALRY-ARCHER-AVAILABLE == NO))
		(or
			(research-completed ri-ring-archer-armor)
			(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
		(research-completed my-second-unique-research)
		=>
		(set-goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-cavalry-archer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-heavy-cavalry-archer)
			(up-compare-const HEAVY-CAVALRY-ARCHER-AVAILABLE == NO))
		(or
			(research-completed ri-ring-archer-armor)
			(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
		=>
		(set-goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined MAGYAR-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		(research-completed ri-parthian-tactics)
		(research-completed my-unique-research)
		=>
		(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined TATARS-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed ri-chemistry)
			(research-completed ri-parthian-tactics)
			(research-completed my-second-unique-research)
			=>
			(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined TURKISH-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed ri-chemistry)
				(research-completed ri-parthian-tactics)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				
				(defrule
				(current-age == imperial-age)
				(goal g-cavalry-archer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed ri-chemistry)
				(or
					(research-completed ri-parthian-tactics)
					(up-compare-const PARTHIAN-TACTICS-AVAILABLE == NO))
				=>
				(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-cavalry-archer 0)
	=>
	(set-goal g-cavalry-archer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-cavalry-archer 0)
	=>
	(set-goal g-cavalry-archer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-cavalry-archer 0)
	=>
	(set-goal g-cavalry-archer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;----------------------------------------------
;	GOAL 249: g-hand-cannoneer-tech-progress
;----------------------------------------------

	(defrule
	(current-age >= castle-age)
	=>
	(set-goal g-hand-cannoneer-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-hand-cannoneer-tech-progress < SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-hand-cannoneer-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-hand-cannoneer-tech-progress SECONDARY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-hand-cannoneer-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-hand-cannoneer-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(research-completed ri-chemistry)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-hand-cannoneer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-hand-cannoneer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-hand-cannoneer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-hand-cannoneer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-ring-archer-armor)
		(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-hand-cannoneer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	)

	#load-if-defined INDIAN-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-hand-cannoneer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-hand-cannoneer-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined PORTUGUESE-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-hand-cannoneer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-hand-cannoneer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-hand-cannoneer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-hand-cannoneer-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-hand-cannoneer 0)
	=>
	(set-goal g-hand-cannoneer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-hand-cannoneer 0)
	=>
	(set-goal g-hand-cannoneer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-hand-cannoneer 0)
	=>
	(set-goal g-hand-cannoneer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;---------------------------------------
;	GOAL 250: g-slinger-tech-progress
;---------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-slinger-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-slinger-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-slinger-tech-progress < PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	=>
	(set-goal g-slinger-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-slinger-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-slinger-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-slinger-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	=>
	(set-goal g-slinger-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-slinger-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-slinger-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-slinger-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	=>
	(set-goal g-slinger-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-slinger-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-ring-archer-armor)
		(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
	(research-completed my-second-unique-research)
	=>
	(set-goal g-slinger-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	)
	
	(defrule
	(current-age == imperial-age)
	(goal g-slinger-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(research-completed my-unique-research)
	(research-completed ri-chemistry)
	=>
	(set-goal g-slinger-tech-progress ALL-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-slinger 0)
	=>
	(set-goal g-slinger-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-slinger 0)
	=>
	(set-goal g-slinger-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-slinger 0)
	=>
	(set-goal g-slinger-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;----------------------------------------
;	GOAL 251: g-genitour-tech-progress
;----------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-genitour-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-genitour-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-genitour-tech-progress < PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	=>
	(set-goal g-genitour-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-genitour-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-genitour-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-genitour-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	=>
	(set-goal g-genitour-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-genitour-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(up-research-status c: ri-padded-archer-armor >= research-pending)
	=>
	(set-goal g-genitour-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-genitour-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-compare-const LEATHER-ARCHER-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-ballistics >= research-pending)
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-compare-const THUMB-RING-AVAILABLE == NO))
	=>
	(set-goal g-temp 66532)
	)
		
	(defrule
	(goal g-temp 66532)
	(current-age == imperial-age)
	(goal g-genitour-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-elite-genitour)
		(up-research-status c: ri-elite-genitour == research-unavailable))
	(or
		(research-completed ri-bracer)
		(up-compare-const BRACER-AVAILABLE == NO))
	(or
		(research-completed ri-ring-archer-armor)
		(up-compare-const RING-ARCHER-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-genitour-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-genitour-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(research-completed ri-chemistry)
	=>
	(set-goal g-genitour-tech-progress ALL-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-genitour 0)
	=>
	(set-goal g-genitour-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-genitour 0)
	=>
	(set-goal g-genitour-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-genitour 0)
	=>
	(set-goal g-genitour-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;---------------------------------------------
;	GOAL 252: g-scout-cavalry-tech-progress
;---------------------------------------------

	(defrule
	(current-age >= feudal-age)
	=>
	(set-goal g-scout-cavalry-tech-progress PRIORITY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(up-compare-goal g-scout-cavalry-tech-progress < SECONDARY-FEUDAL-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-scout-cavalry-tech-progress SECONDARY-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= feudal-age)
	(goal g-scout-cavalry-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	=>
	(set-goal g-scout-cavalry-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-scout-cavalry-tech-progress < REQUIRED-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-light-cavalry >= research-pending)
		(up-compare-const LIGHT-CAVALRY-AVAILABLE == NO))
	=>
	(set-goal g-scout-cavalry-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-scout-cavalry-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-scout-cavalry-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-scout-cavalry-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-scout-cavalry-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	#load-if-defined FRANKISH-CIV

		(defrule
		(current-age >= castle-age)
		(goal g-scout-cavalry-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-husbandry >= research-pending)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-scout-cavalry-tech-progress ALL-CASTLE-COMPLETE)
		)

	#else

		(defrule
		(current-age >= castle-age)
		(goal g-scout-cavalry-tech-progress SECONDARY-CASTLE-COMPLETE)
		(or
			(up-research-status c: ri-husbandry >= research-pending)
			(up-compare-const HUSBANDRY-AVAILABLE == NO))
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-scout-cavalry-tech-progress ALL-CASTLE-COMPLETE)
		)

	#end-if
			
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-scout-cavalry-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-light-cavalry >= research-pending)
		(up-compare-const LIGHT-CAVALRY-AVAILABLE == NO))
	(up-research-status c: ri-scale-barding >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-scout-cavalry-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)
			
	(defrule
	(current-age == imperial-age)
	(goal g-scout-cavalry-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-forging >= research-pending)
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-temp 94327)
	)

	#load-if-defined FRANKISH-CIV
			
		(defrule
		(goal g-temp 94327)
		(current-age == imperial-age)
		(goal g-scout-cavalry-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-plate-barding)
		(research-completed ri-blast-furnace)
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

	#else

		(defrule
		(goal g-temp 94327)
		(current-age == imperial-age)
		(goal g-scout-cavalry-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-hussar)
			(up-compare-const HUSSAR-AVAILABLE == NO))
		(or
			(research-completed ri-plate-barding)
			(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
		(or
			(research-completed ri-blast-furnace)
			(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
		=>
		(set-goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BULGARIANS-CIV
	
		(defrule
		(current-age == imperial-age)
		(goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)	;Stirrups
		=>
		(set-goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined CUMANS-CIV
	
			(defrule
			(current-age == imperial-age)
			(goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(research-completed my-second-unique-research)
			=>
			(set-goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-scout-cavalry-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if
		
	#load-if-defined BURMESE-CIV
		(defrule
		(current-age == imperial-age)
		(goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Manipur Cavalry
		=>
		(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined MALIAN-CIV
		
			(defrule
			(current-age == imperial-age)
			(goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined TATARS-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				(research-completed my-second-unique-research)
				=>
				(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#else
				
				(defrule
				(current-age == imperial-age)
				(goal g-scout-cavalry-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				=>
				(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
				)

			#end-if
		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-scout-cavalry 0)
	=>
	(set-goal g-scout-cavalry-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-scout-cavalry 0)
	=>
	(set-goal g-scout-cavalry-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-scout-cavalry 0)
	=>
	(set-goal g-scout-cavalry-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;--------------------------------------
;	GOAL 253: g-knight-tech-progress
;--------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-knight-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-knight-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-knight-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	=>
	(set-goal g-knight-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-knight-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-knight-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	#load-if-defined FRANKISH-CIV

		(defrule
		(current-age >= castle-age)
		(goal g-knight-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-husbandry >= research-pending)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-knight-tech-progress ALL-CASTLE-COMPLETE)
		)

	#else

		(defrule
		(current-age >= castle-age)
		(goal g-knight-tech-progress SECONDARY-CASTLE-COMPLETE)
		(or
			(up-research-status c: ri-husbandry >= research-pending)
			(up-compare-const HUSBANDRY-AVAILABLE == NO))
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-knight-tech-progress ALL-CASTLE-COMPLETE)
		)

	#end-if

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-knight-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-cavalier >= research-pending)
		(up-compare-const CAVALIER-AVAILABLE == NO))
	(up-research-status c: ri-scale-barding >= research-pending)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-knight-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-knight-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(research-completed ri-plate-barding)
		(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-blast-furnace)
		(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
	=>
	(set-goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined BULGARIANS-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)	;Stirrups
		=>
		(set-goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined FRANKISH-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
			(or
				(research-completed ri-paladin)
				(up-compare-const PALADIN-AVAILABLE == NO))
			(up-research-status c: my-second-unique-research >= research-pending)
			=>
			(set-goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			)

		#else
			#load-if-defined SICILIANS-CIV

				(defrule
				(current-age == imperial-age)
				(goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(or
					(research-completed ri-paladin)
					(up-compare-const PALADIN-AVAILABLE == NO))
				(up-research-status c: my-unique-research >= research-pending)
				=>
				(set-goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#else

				(defrule
				(current-age == imperial-age)
				(goal g-knight-tech-progress PRIORITY-IMPERIAL-COMPLETE)
				(or
					(research-completed ri-paladin)
					(up-compare-const PALADIN-AVAILABLE == NO))
				=>
				(set-goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
				)

			#end-if
		#end-if
	#end-if
	
	#load-if-defined BURMESE-CIV
		(defrule
		(current-age == imperial-age)
		(goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-knight-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined MALIAN-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-knight-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else

			(defrule
			(current-age == imperial-age)
			(goal g-knight-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-knight-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-knight 0)
	=>
	(set-goal g-knight-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-knight 0)
	=>
	(set-goal g-knight-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-knight 0)
	=>
	(set-goal g-knight-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;-------------------------------------
;	GOAL 254: g-camel-tech-progress
;-------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-camel-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-camel-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-camel-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	=>
	(set-goal g-camel-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-camel-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-camel-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-camel-tech-progress SECONDARY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-camel-tech-progress ALL-CASTLE-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-camel-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-heavy-camel)
		(up-compare-const HEAVY-CAMEL-AVAILABLE == NO))
	(up-research-status c: ri-scale-barding >= research-pending)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-camel-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)
		
	(defrule
	(current-age == imperial-age)
	(goal g-camel-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(research-completed ri-plate-barding)
		(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-blast-furnace)
		(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
	=>
	(set-goal g-camel-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)

	#load-if-defined INDIAN-CIV
		
		(defrule
		(current-age == imperial-age)
		(goal g-camel-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-imperial-camel)
		=>
		(set-goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-camel-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BERBERS-CIV
		
		(defrule
		(current-age == imperial-age)
		(goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)	;Maghrabi Camels
		=>
		(set-goal g-camel-tech-progress ALL-IMPERIAL-COMPLETE)
		)
	
	#else
		#load-if-defined SARACEN-CIV
		
			(defrule
			(current-age == imperial-age)
			(goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-unique-research)
			=>
			(set-goal g-camel-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#else
			
			(defrule
			(current-age == imperial-age)
			(goal g-camel-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-camel-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-camel 0)
	=>
	(set-goal g-camel-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-camel 0)
	=>
	(set-goal g-camel-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-camel 0)
	=>
	(set-goal g-camel-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;-----------------------------------------------
;	GOAL 255: g-battle-elephant-tech-progress
;-----------------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-battle-elephant-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-battle-elephant-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-battle-elephant-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	=>
	(set-goal g-battle-elephant-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-battle-elephant-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	=>
	(set-goal g-battle-elephant-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-battle-elephant-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	=>
	(set-goal g-battle-elephant-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-battle-elephant-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	=>
	(set-goal g-battle-elephant-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-battle-elephant-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-plate-barding)
		(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(or
		(research-completed ri-blast-furnace)
		(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
	=>
	(set-goal g-battle-elephant-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined KHMER-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-battle-elephant-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-elite-battle-elephant)
			(up-compare-const ELITE-BATTLE-ELEPHANT-AVAILABLE == NO))
		(research-completed my-second-unique-research)
		=>
		(set-goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else
		
		(defrule
		(current-age == imperial-age)
		(goal g-battle-elephant-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(or
			(research-completed ri-elite-battle-elephant)
			(up-compare-const ELITE-BATTLE-ELEPHANT-AVAILABLE == NO))
		=>
		(set-goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined BURMESE-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)	;Howdah
		=>
		(set-goal g-battle-elephant-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else
		#load-if-defined VIETNAMESE-CIV

			(defrule
			(current-age == imperial-age)
			(goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			(research-completed my-second-unique-research)
			=>
			(set-goal g-battle-elephant-tech-progress ALL-IMPERIAL-COMPLETE)
			)
			
			(defrule
			(current-age == imperial-age)
			(goal g-battle-elephant-tech-progress SECONDARY-IMPERIAL-COMPLETE)
			=>
			(set-goal g-battle-elephant-tech-progress ALL-IMPERIAL-COMPLETE)
			)

		#end-if
	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-battle-elephant 0)
	=>
	(set-goal g-battle-elephant-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-battle-elephant 0)
	=>
	(set-goal g-battle-elephant-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-battle-elephant 0)
	=>
	(set-goal g-battle-elephant-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;---------------------------------------------
;	GOAL 256: g-steppe-lancer-tech-progress
;---------------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-steppe-lancer-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-steppe-lancer-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-steppe-lancer-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	(up-research-status c: ri-forging >= research-pending)
	=>
	(set-goal g-steppe-lancer-tech-progress PRIORITY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-steppe-lancer-tech-progress PRIORITY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	=>
	(set-goal g-steppe-lancer-tech-progress SECONDARY-CASTLE-COMPLETE)
	)

	(defrule
	(current-age >= castle-age)
	(goal g-steppe-lancer-tech-progress SECONDARY-CASTLE-COMPLETE)
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	=>
	(set-goal g-steppe-lancer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(up-compare-goal g-steppe-lancer-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
	(up-research-status c: ri-scale-barding >= research-pending)
	(up-research-status c: ri-forging >= research-pending)
	(or
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-compare-const CHAIN-BARDING-ARMOR-AVAILABLE == NO))
	=>
	(set-goal g-steppe-lancer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(set-goal g-temp 0)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-steppe-lancer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-compare-const BLOODLINES-AVAILABLE == NO))
	(up-research-status c: ri-iron-casting >= research-pending)
	(or
		(up-research-status c: ri-husbandry >= research-pending)
		(up-compare-const HUSBANDRY-AVAILABLE == NO))
	=>
	(set-goal g-temp 18432)
	)

	(defrule
	(goal g-temp 18432)
	(current-age == imperial-age)
	(goal g-steppe-lancer-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(or
		(research-completed ri-plate-barding)
		(up-compare-const PLATE-BARDING-ARMOR-AVAILABLE == NO))
	(or
		(research-completed ri-blast-furnace)
		(up-compare-const BLAST-FURNACE-AVAILABLE == NO))
	(or
		(research-completed ri-elite-steppe-lancer)
		(up-compare-const ELITE-STEPPE-LANCER-AVAILABLE == NO))
	=>
	(set-goal g-steppe-lancer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	)
		
	#load-if-defined CUMANS-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-steppe-lancer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-steppe-lancer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#else

		(defrule
		(current-age == imperial-age)
		(goal g-steppe-lancer-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-steppe-lancer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

	#end-if
		
	#load-if-defined TATARS-CIV

		(defrule
		(current-age == imperial-age)
		(goal g-steppe-lancer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-steppe-lancer-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#else

		(defrule
		(current-age == imperial-age)
		(goal g-steppe-lancer-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		=>
		(set-goal g-steppe-lancer-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-steppe-lancer 0)
	=>
	(set-goal g-steppe-lancer-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-steppe-lancer 0)
	=>
	(set-goal g-steppe-lancer-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-steppe-lancer 0)
	=>
	(set-goal g-steppe-lancer-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;-------------------------------------------
;	GOAL 257: g-unique-unit-tech-progress
;-------------------------------------------

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-unique-unit-tech-progress < REQUIRED-CASTLE-COMPLETE)
	=>
	(set-goal g-unique-unit-tech-progress REQUIRED-CASTLE-COMPLETE)
	)

	#load-if-defined AZTEC-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required/Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BERBERS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-husbandry)
		(research-completed ri-ballistics)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		;(research-completed ri-parthian-tactics)
		(research-completed my-unique-research)
		(research-completed my-second-unique-research)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BRITON-CIV
		
		;Required/Priority Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		;(up-research-status c: ri-thumb-ring >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)

		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required/Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		; (research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BULGARIANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-husbandry)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-barding)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-plate-mail)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BURGUNDIANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BURMESE-CIV
		
		;Required/Priority Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-compare-goal g-unique-unit-tech-progress < REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-padded-archer-armor)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-ballistics)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined BYZANTINE-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined CELTIC-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		;(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-iron-casting)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined CHINESE-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		(research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined CUMANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-husbandry)
		(research-completed ri-ballistics)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		;(research-completed ri-bracer)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-parthian-tactics)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined ETHIOPIAN-CIV
		
		;Required/Priority Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined FRANKISH-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required/Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-iron-casting)
		(research-completed ri-squires)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined GOTHIC-CIV

		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		(research-completed my-unique-research)	;Anarchy
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-blast-furnace)
		;(research-completed ri-plate-mail)
		(research-completed my-second-unique-research)	;Perfusion
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined HUN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined INCAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined INDIAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-husbandry)
		(research-completed ri-ballistics)
		(research-completed ri-bracer)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-parthian-tactics)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined ITALIAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		(research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined JAPANESE-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined KHMER-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-scale-barding)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-bloodlines)
		(research-completed ri-husbandry)
		(research-completed ri-plate-barding)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined KOREAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		(up-research-status c: ri-thumb-ring >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		;(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-husbandry)
		(research-completed ri-ballistics)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined LITHUANIANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MAGYAR-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		(up-research-status c: my-second-unique-research >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-barding)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MALAY-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MALIAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MAYAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		(research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined MONGOL-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-bodkin-arrow)
		(research-completed ri-padded-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-thumb-ring)
		(research-completed ri-bloodlines)
		(research-completed ri-husbandry)
		(research-completed ri-ballistics)
		(research-completed ri-bracer)
		(research-completed ri-parthian-tactics)
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined PERSIAN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-husbandry)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-bloodlines)
		(research-completed ri-iron-casting)
		(research-completed ri-plate-barding)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-blast-furnace)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined PORTUGUESE-CIV
		
		;Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < ALL-CASTLE-COMPLETE)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-siege-engineers)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined SARACEN-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-scale-barding >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-forging)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-bloodlines)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined SICILIANS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-scale-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined SLAVIC-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined SPANISH-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-bloodlines >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-padded-archer-armor)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-leather-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined TATARS-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-barding >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-husbandry >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(research-completed ri-chain-barding)
		(research-completed ri-bloodlines)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-husbandry)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-barding)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined TEUTONIC-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-scale-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined TURKISH-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < ALL-CASTLE-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(up-research-status c: ri-ring-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined VIETNAMESE-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-thumb-ring >= research-pending)
		(up-research-status c: ri-leather-archer-armor >= research-pending)
		(up-research-status c: ri-ballistics >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-bodkin-arrow >= research-pending)
		(up-research-status c: ri-padded-archer-armor >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-ballistics)
		(research-completed ri-thumb-ring)
		(research-completed ri-bracer)
		(research-completed ri-leather-archer-armor)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)

		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed ri-ring-archer-armor)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed ri-chemistry)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	#load-if-defined VIKING-CIV
		
		;Required Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(up-compare-goal g-unique-unit-tech-progress < PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-chain-mail >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		)
		
		;Secondary Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		)
		
		;All Castle Age Techs
		(defrule
		(current-age >= castle-age)
		(goal g-unique-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
		(up-research-status c: ri-iron-casting >= research-pending)
		(up-research-status c: ri-squires >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
		)
		
		;Required Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(up-research-status c: ri-chain-mail >= research-pending)
		(up-research-status c: ri-forging >= research-pending)
		=>
		(set-goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		)

		;Priority Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
		(research-completed ri-squires)
		(research-completed ri-blast-furnace)
		(research-completed ri-plate-mail)
		(research-completed my-unique-unit-upgrade)
		=>
		(set-goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		)
		
		;Secondary Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
		(research-completed my-second-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		)
		
		;All Imperial Age Techs
		(defrule
		(current-age == imperial-age)
		(goal g-unique-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
		(research-completed my-unique-research)
		=>
		(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
		)

	#end-if

	(defrule
	(current-age == feudal-age)
	(goal g-desired-num-unique-unit 0)
	=>
	(set-goal g-unique-unit-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(current-age == castle-age)
	(goal g-desired-num-unique-unit 0)
	=>
	(set-goal g-unique-unit-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(current-age == imperial-age)
	(goal g-desired-num-unique-unit 0)
	=>
	(set-goal g-unique-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;--------------------------------------------
;	GOAL 237: g-primary-unit-tech-progress
;--------------------------------------------

	(defrule
	(goal g-primary-unit militiaman)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-militia-tech-progress)
	)

	(defrule
	(goal g-primary-unit spearman)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-spearman-tech-progress)
	)

	(defrule
	(goal g-primary-unit eagle-warrior)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-eagle-warrior-tech-progress)
	)

	(defrule
	(goal g-primary-unit condottiero)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-condottiero-tech-progress)
	)

	(defrule
	(goal g-primary-unit archer)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-archer-tech-progress)
	)

	(defrule
	(goal g-primary-unit skirmisher)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-skirmisher-tech-progress)
	)

	(defrule
	(goal g-primary-unit cavalry-archer)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-cavalry-archer-tech-progress)
	)

	(defrule
	(goal g-primary-unit hand-cannoneer)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-hand-cannoneer-tech-progress)
	)

	(defrule
	(goal g-primary-unit slinger)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-slinger-tech-progress)
	)

	(defrule
	(goal g-primary-unit genitour)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-genitour-tech-progress)
	)

	(defrule
	(goal g-primary-unit scout-cavalry)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-scout-cavalry-tech-progress)
	)

	(defrule
	(goal g-primary-unit knight)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-knight-tech-progress)
	)

	(defrule
	(goal g-primary-unit camel)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-camel-tech-progress)
	)

	(defrule
	(goal g-primary-unit battle-elephant)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-battle-elephant-tech-progress)
	)

	(defrule
	(goal g-primary-unit steppe-lancer)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-steppe-lancer-tech-progress)
	)

	(defrule
	(goal g-primary-unit my-unique-unit)
	=>
	(up-modify-goal g-primary-unit-tech-progress g:= g-unique-unit-tech-progress)
	)

	(defrule
	(goal g-primary-unit 0)
	(current-age == feudal-age)
	=>
	(set-goal g-primary-unit-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(goal g-primary-unit 0)
	(current-age == castle-age)
	=>
	(set-goal g-primary-unit-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(goal g-primary-unit 0)
	(current-age == imperial-age)
	=>
	(set-goal g-primary-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;--------------------------------------------
;	GOAL 238: g-support-unit-tech-progress
;--------------------------------------------

	(defrule
	(goal g-support-unit militiaman)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-militia-tech-progress)
	)

	(defrule
	(goal g-support-unit spearman)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-spearman-tech-progress)
	)

	(defrule
	(goal g-support-unit eagle-warrior)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-eagle-warrior-tech-progress)
	)

	(defrule
	(goal g-support-unit condottiero)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-condottiero-tech-progress)
	)

	(defrule
	(goal g-support-unit archer)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-archer-tech-progress)
	)

	(defrule
	(goal g-support-unit skirmisher)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-skirmisher-tech-progress)
	)

	(defrule
	(goal g-support-unit cavalry-archer)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-cavalry-archer-tech-progress)
	)

	(defrule
	(goal g-support-unit hand-cannoneer)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-hand-cannoneer-tech-progress)
	)

	(defrule
	(goal g-support-unit slinger)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-slinger-tech-progress)
	)

	(defrule
	(goal g-support-unit genitour)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-genitour-tech-progress)
	)

	(defrule
	(goal g-support-unit scout-cavalry)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-scout-cavalry-tech-progress)
	)

	(defrule
	(goal g-support-unit knight)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-knight-tech-progress)
	)

	(defrule
	(goal g-support-unit camel)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-camel-tech-progress)
	)

	(defrule
	(goal g-support-unit battle-elephant)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-battle-elephant-tech-progress)
	)

	(defrule
	(goal g-support-unit steppe-lancer)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-steppe-lancer-tech-progress)
	)

	(defrule
	(goal g-support-unit my-unique-unit)
	=>
	(up-modify-goal g-support-unit-tech-progress g:= g-unique-unit-tech-progress)
	)

	(defrule
	(goal g-support-unit 0)
	(current-age == feudal-age)
	=>
	(set-goal g-support-unit-tech-progress ALL-FEUDAL-COMPLETE)
	)

	(defrule
	(goal g-support-unit 0)
	(current-age == castle-age)
	=>
	(set-goal g-support-unit-tech-progress ALL-CASTLE-COMPLETE)
	)

	(defrule
	(goal g-support-unit 0)
	(current-age == imperial-age)
	=>
	(set-goal g-support-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	)

;----------------------------------
;	GOAL 259: g-min-military-pop
;----------------------------------

	(defrule
	(up-compare-goal g-min-military-pop != 0)
	=>
	(set-goal g-min-military-pop 0)
	)

	(defrule
	(goal g-game-focus REBUILD)
	(up-compare-goal g-min-military-pop > 0)
	=>
	(set-goal g-min-military-pop 0)
	)

	(defrule
	(up-compare-goal g-game-focus != REBUILD)
	(current-age == feudal-age)
	(up-compare-goal g-current-strategy != FC-KRUSH)
	(up-compare-goal g-current-strategy != FC-CRUSH)
	(up-compare-goal g-current-strategy != FC-DEMON)
	(up-compare-goal g-current-strategy != FC-CASTLE-DROP)
	(up-compare-goal g-current-strategy != BOOM-KNIGHTS)
	(up-compare-goal g-current-strategy != BOOM-CAMELS)
	=>
	(set-goal g-min-military-pop 6)
	)

	(defrule
	(current-age >= castle-age)
	(or
		(goal g-age-status EARLY-CASTLE)
		(goal g-game-focus BOOM))
	(or
		(goal g-primary-unit knight)
		(or
			(goal g-primary-unit camel)
			(goal g-primary-unit battle-elephant)))
	(up-compare-goal g-game-focus != REBUILD)
	=>
	(set-goal g-min-military-pop 6)
	)

	(defrule
	(or
		(goal g-age-status EARLY-CASTLE)
		(goal g-game-focus BOOM))
	(up-compare-goal g-primary-unit != knight)
	(up-compare-goal g-primary-unit != camel)
	(up-compare-goal g-primary-unit != battle-elephant)
	(up-compare-goal g-game-focus != REBUILD)
	=>
	(set-goal g-min-military-pop 9)
	)

	(defrule
	(current-age >= castle-age)
	(up-compare-goal g-age-status >= MID-CASTLE)
	(up-compare-goal g-game-focus != REBUILD)
	(up-compare-goal g-game-focus != BOOM)
	=>
	(set-goal g-min-military-pop 12)
	)

;--------------------------------------------------------
;	GOAL 260: g-current-age-primary-unit-tech-progress
;--------------------------------------------------------

	(defrule
	(true)
	=>
	(set-goal g-current-age-primary-unit-tech-progress INCOMPLETE)
	)

	(defrule
	(up-compare-goal g-age-status < TO-FEUDAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress REQUIRED-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-primary-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress PRIORITY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-primary-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-primary-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress ALL-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-primary-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress ALL-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-primary-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-primary-unit-tech-progress ALL-COMPLETE)
	)
	
;--------------------------------------------------------
;	GOAL 261: g-current-age-support-unit-tech-progress
;--------------------------------------------------------

	(defrule
	(true)
	=>
	(set-goal g-current-age-support-unit-tech-progress INCOMPLETE)
	)

	(defrule
	(up-compare-goal g-age-status < TO-FEUDAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress REQUIRED-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-support-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress PRIORITY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-support-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-support-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress ALL-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-support-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress ALL-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-support-unit-tech-progress ALL-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-support-unit-tech-progress ALL-COMPLETE)
	)

;--------------------------------------------------------
;	GOAL 260: g-current-age-eco-tech-progress
;--------------------------------------------------------

	(defrule
	(true)
	=>
	(set-goal g-current-age-eco-tech-progress INCOMPLETE)
	)

	(defrule
	(up-compare-goal g-age-status < TO-FEUDAL)
	=>
	(set-goal g-current-age-eco-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress REQUIRED-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-eco-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress PRIORITY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-eco-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress SECONDARY-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-eco-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress ALL-FEUDAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-FEUDAL)
	(up-compare-goal g-age-status < TO-CASTLE)
	=>
	(set-goal g-current-age-eco-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress REQUIRED-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress PRIORITY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress SECONDARY-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress ALL-CASTLE-COMPLETE)
	(up-compare-goal g-age-status >= TO-CASTLE)
	(up-compare-goal g-age-status < TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress ALL-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress REQUIRED-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress REQUIRED-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress PRIORITY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress PRIORITY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress SECONDARY-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress SECONDARY-COMPLETE)
	)

	(defrule
	(goal g-eco-tech-progress ALL-IMPERIAL-COMPLETE)
	(up-compare-goal g-age-status >= TO-IMPERIAL)
	=>
	(set-goal g-current-age-eco-tech-progress ALL-COMPLETE)
	)

;------------------------------------------
;	GOAL 262: g-max-working-town-centers
;------------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(up-compare-goal g-age-status >= MID-CASTLE)
	=>
	(set-goal g-max-working-town-centers 0)
	(set-goal g-max-working-markets 0)
	(set-goal g-max-working-monasteries 0)
	(set-goal g-max-working-barracks 0)
	(set-goal g-max-working-archery-ranges 0)
	(set-goal g-max-working-stables 0)
	(set-goal g-max-working-siege-workshops 0)
	(set-goal g-max-working-castles 0)
	(set-goal g-max-working-docks 0)
	(disable-self)
	)

	(defrule
	(up-get-fact building-type-count town-center g-temp)
	(up-compare-goal g-max-working-town-centers g:< g-temp)
	=>
	(up-modify-goal g-max-working-town-centers g:= g-temp)
	)

	(defrule
	(goal g-age-status SAVE-FOR-IMPERIAL)
	(up-compare-goal g-game-focus != BOOM)
	(food-amount >= 500)
	=>
	(up-modify-goal g-max-working-town-centers c:max 2)
	(up-get-fact building-type-count town-center g-temp)
	(up-modify-goal g-max-working-town-centers g:min g-temp)
	)

;-------------------------------------
;	GOAL 263: g-max-working-markets
;-------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(up-get-fact building-type-count market g-temp)
	(up-compare-goal g-max-working-markets g:< g-temp)
	=>
	(up-modify-goal g-max-working-markets g:= g-temp)
	)

;-----------------------------------------
;	GOAL 264: g-max-working-monasteries
;-----------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(up-get-fact building-type-count monastery g-temp)
	(up-compare-goal g-max-working-monasteries g:< g-temp)
	=>
	(up-modify-goal g-max-working-monasteries g:= g-temp)
	)

;--------------------------------------
;	GOAL 265: g-max-working-barracks
;--------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(true)
	=>
	(up-get-fact building-type-count barracks g-temp)
	(up-modify-goal g-max-working-barracks g:min g-temp)
	)

	(defrule
	(building-type-count barracks > 0)
	=>
	(up-modify-goal g-max-working-barracks c:max 1)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-barracks 2)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count barracks >= 3)
	(goal g-primary-unit-class infantry-class)
	(or
		(up-compare-goal g-primary-unit != my-unique-unit)
		(research-completed 16))	;Anarchy
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(up-get-fact building-type-count barracks g-temp)
	(up-modify-goal g-max-working-barracks g:= g-temp)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-barracks 1)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count barracks >= 2)
	(goal g-primary-unit-class infantry-class)
	(or
		(up-compare-goal g-primary-unit != my-unique-unit)
		(research-completed 16))	;Anarchy
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(set-goal g-max-working-barracks 2)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-barracks 1)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count barracks >= 2)
	(goal g-support-unit-class infantry-class)
	(or
		(up-compare-goal g-support-unit != my-unique-unit)
		(research-completed 16))	;Anarchy
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(set-goal g-max-working-barracks 2)
	)

	(defrule
	(up-get-fact building-type-count barracks g-temp)
	(up-compare-goal g-max-working-barracks g:< g-temp)
	(or
		(goal g-game-focus AGGRESSIVE)
		(goal g-game-focus DEFENSIVE))
	=>
	(up-modify-goal g-max-working-barracks g:= g-temp)
	)

	(defrule
	(up-compare-goal g-max-working-barracks > 1)
	(goal g-game-focus BOOM)
	=>
	(set-goal g-max-working-barracks 1)
	)

	(defrule
	(up-compare-goal g-max-working-barracks > 1)
	(goal g-game-focus REBUILD)
	(unit-type-count villager >= 20)
	=>
	(set-goal g-max-working-barracks 1)
	)

	(defrule
	(up-compare-goal g-max-working-barracks > 0)
	(goal g-game-focus REBUILD)
	(unit-type-count villager < 20)
	=>
	(set-goal g-max-working-barracks 0)
	)

;-------------------------------------------
;	GOAL 266: g-max-working-archery-range
;-------------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(current-age >= feudal-age)
	=>
	(up-get-fact building-type-count archery-range g-temp)
	(up-modify-goal g-max-working-archery-ranges g:min g-temp)
	)

	(defrule
	(building-type-count archery-range > 0)
	=>
	(up-modify-goal g-max-working-archery-ranges c:max 1)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-archery-ranges 2)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count archery-range >= 3)
	(or
		(goal g-primary-unit-class archery-class)
		(or
			(goal g-primary-unit-class cavalry-archer-class)
			(goal g-primary-unit-class archery-cannon-class)))
	(up-compare-goal g-primary-unit != my-unique-unit)
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(up-get-fact building-type-count archery-range g-temp)
	(up-modify-goal g-max-working-archery-ranges g:= g-temp)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-archery-ranges 1)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count archery-range >= 2)
	(or
		(goal g-primary-unit-class archery-class)
		(or
			(goal g-primary-unit-class cavalry-archer-class)
			(goal g-primary-unit-class archery-cannon-class)))
	(up-compare-goal g-primary-unit != my-unique-unit)
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(set-goal g-max-working-archery-ranges 2)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-archery-ranges 1)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count archery-range >= 2)
	(or
		(goal g-support-unit-class archery-class)
		(or
			(goal g-support-unit-class cavalry-archer-class)
			(goal g-support-unit-class archery-cannon-class)))
	(up-compare-goal g-support-unit != my-unique-unit)
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(set-goal g-max-working-archery-ranges 2)
	)

	(defrule
	(up-get-fact building-type-count archery-range g-temp)
	(up-compare-goal g-max-working-archery-ranges g:< g-temp)
	(or
		(goal g-game-focus AGGRESSIVE)
		(goal g-game-focus DEFENSIVE))
	=>
	(up-modify-goal g-max-working-archery-ranges g:= g-temp)
	)

	(defrule
	(up-compare-goal g-max-working-archery-ranges > 1)
	(goal g-game-focus BOOM)
	=>
	(set-goal g-max-working-archery-ranges 1)
	)

	(defrule
	(up-compare-goal g-max-working-archery-ranges > 1)
	(goal g-game-focus REBUILD)
	(unit-type-count villager >= 20)
	=>
	(set-goal g-max-working-archery-ranges 1)
	)

	(defrule
	(up-compare-goal g-max-working-archery-ranges > 0)
	(goal g-game-focus REBUILD)
	(unit-type-count villager < 20)
	=>
	(set-goal g-max-working-archery-ranges 0)
	)

;-------------------------------------
;	GOAL 267: g-max-working-stables
;-------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(current-age >= feudal-age)
	=>
	(up-get-fact building-type-count stable g-temp)
	(up-modify-goal g-max-working-stables g:min g-temp)
	)

	(defrule
	(building-type-count stable > 0)
	=>
	(up-modify-goal g-max-working-stables c:max 1)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-stables 2)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count stable >= 3)
	(goal g-primary-unit-class cavalry-class)
	(or
		(up-compare-goal g-primary-unit != my-unique-unit)
		(research-completed 483))	;Marauders
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(up-get-fact building-type-count stable g-temp)
	(up-modify-goal g-max-working-stables g:= g-temp)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-stables 1)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count stable >= 2)
	(goal g-primary-unit-class cavalry-class)
	(or
		(up-compare-goal g-primary-unit != my-unique-unit)
		(research-completed 483))	;Marauders
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(set-goal g-max-working-stables 2)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-stables 1)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count stable >= 2)
	(goal g-support-unit-class cavalry-class)
	(or
		(up-compare-goal g-support-unit != my-unique-unit)
		(research-completed 483))	;Marauders
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(set-goal g-max-working-stables 2)
	)

	(defrule
	(up-get-fact building-type-count stable g-temp)
	(up-compare-goal g-max-working-stables g:< g-temp)
	(or
		(goal g-game-focus AGGRESSIVE)
		(goal g-game-focus DEFENSIVE))
	=>
	(up-modify-goal g-max-working-stables g:= g-temp)
	)

	(defrule
	(up-compare-goal g-max-working-stables > 1)
	(goal g-game-focus BOOM)
	=>
	(set-goal g-max-working-stables 1)
	)

	(defrule
	(up-compare-goal g-max-working-stables > 1)
	(goal g-game-focus REBUILD)
	(unit-type-count villager >= 20)
	=>
	(set-goal g-max-working-stables 1)
	)

	(defrule
	(up-compare-goal g-max-working-stables > 0)
	(goal g-game-focus REBUILD)
	(unit-type-count villager < 20)
	=>
	(set-goal g-max-working-stables 0)
	)

;---------------------------------------------
;	GOAL 268: g-max-working-siege-workshops
;---------------------------------------------

	(load "The General 3.1/Functions/Reset")

	#load-if-defined CUMANS-CIV
	
		(defrule
		(current-age >= feudal-age)
		=>
		(up-get-fact building-type-count siege-workshop g-temp)
		(up-modify-goal g-max-working-siege-workshops g:min g-temp)
		)

	#else
	
		(defrule
		(current-age >= castle-age)
		=>
		(up-get-fact building-type-count siege-workshop g-temp)
		(up-modify-goal g-max-working-siege-workshops g:min g-temp)
		)

	#end-if

	(defrule
	(building-type-count siege-workshop > 0)
	=>
	(up-modify-goal g-max-working-siege-workshops c:max 1)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-siege-workshops 1)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count siege-workshop >= 2)
	(or
		(and
			(goal g-primary-unit-class siege-weapon-class)
			(up-compare-goal g-primary-unit != my-unique-unit))
		(and
			(goal g-support-unit-class siege-weapon-class)
			(up-compare-goal g-support-unit != my-unique-unit)))
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(up-get-fact building-type-count siege-workshop g-temp)
	(up-modify-goal g-max-working-siege-workshops g:= g-temp)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-siege-workshops 1)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count siege-workshop >= 2)
	(or
		(goal g-primary-unit scorpion)
		(goal g-support-unit scorpion))
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(up-get-fact building-type-count siege-workshop g-temp)
	(up-modify-goal g-max-working-siege-workshops g:= g-temp)
	)

	(defrule
	(up-get-fact building-type-count siege-workshop g-temp)
	(up-compare-goal g-max-working-siege-workshops g:< g-temp)
	(or
		(goal g-game-focus AGGRESSIVE)
		(goal g-game-focus DEFENSIVE))
	=>
	(up-modify-goal g-max-working-siege-workshops g:= g-temp)
	)

	(defrule
	(up-compare-goal g-max-working-siege-workshops > 1)
	(goal g-game-focus BOOM)
	=>
	(set-goal g-max-working-siege-workshops 1)
	)

	(defrule
	(up-compare-goal g-max-working-siege-workshops > 1)
	(goal g-game-focus REBUILD)
	(unit-type-count villager >= 20)
	=>
	(set-goal g-max-working-siege-workshops 1)
	)

	(defrule
	(up-compare-goal g-max-working-siege-workshops > 0)
	(goal g-game-focus REBUILD)
	(unit-type-count villager < 20)
	=>
	(set-goal g-max-working-siege-workshops 0)
	)

;-------------------------------------
;	GOAL 269: g-max-working-castles
;-------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(current-age >= castle-age)
	=>
	(up-get-fact building-type-count castle g-temp)
	(up-modify-goal g-max-working-castles g:min g-temp)
	)

	(defrule
	(building-type-count castle > 0)
	=>
	(up-modify-goal g-max-working-castles c:max 1)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-castles 2)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count castle >= 3)
	(goal g-primary-unit my-unique-unit)
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(up-get-fact building-type-count castle g-temp)
	(up-modify-goal g-max-working-castles g:= g-temp)
	)

	(defrule
	(timer-triggered t-15-sec)
	(goal g-max-working-castles 1)
	(up-object-type-count-total c: villager g:>= g-total-needed-villagers)
	(goal g-game-focus BALANCED)
	(building-type-count castle >= 2)
	(or
		(goal g-primary-unit my-unique-unit)
		(goal g-support-unit my-unique-unit))
	(up-object-type-count c: town-center g:>= g-desired-num-town-center)
	=>
	(set-goal g-max-working-castles 2)
	)

	(defrule
	(up-get-fact building-type-count castle g-temp)
	(up-compare-goal g-max-working-castles g:< g-temp)
	(or
		(goal g-game-focus AGGRESSIVE)
		(goal g-game-focus DEFENSIVE))
	=>
	(up-modify-goal g-max-working-castles g:= g-temp)
	)

	(defrule
	(up-compare-goal g-max-working-castles > 1)
	(goal g-game-focus BOOM)
	=>
	(set-goal g-max-working-castles 1)
	)

	(defrule
	(up-compare-goal g-max-working-castles > 1)
	(goal g-game-focus REBUILD)
	(unit-type-count villager >= 20)
	=>
	(set-goal g-max-working-castles 1)
	)

	(defrule
	(up-compare-goal g-max-working-castles > 0)
	(goal g-game-focus REBUILD)
	(unit-type-count villager < 20)
	=>
	(set-goal g-max-working-castles 0)
	)

;-----------------------------------
;	GOAL 270: g-max-working-docks
;-----------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(up-get-fact building-type-count dock g-temp)
	(up-compare-goal g-max-working-docks g:< g-temp)
	=>
	(up-modify-goal g-max-working-docks g:= g-temp)
	)

;-----------------------------------
;	GOAL 271: g-villager-training
;-----------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(up-object-type-count-total c: villager g:>= g-desired-num-villager)
	=>
	(set-goal g-villager-training OFF)
	)

	(defrule
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	=>
	(set-goal g-villager-training TRAIN-WITH-ESCROW)
	)

	(defrule
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(goal g-game-focus DEFENSIVE)
	(military-population g:< g-min-military-pop)
	(or
		(up-compare-goal g-desired-num-militia > 0)
		(or
			(up-compare-goal g-desired-num-condottiero > 0)
			(or
				(up-compare-goal g-desired-num-genitour > 0)
				(or
					(up-compare-goal g-desired-num-scout-cavalry > 0)
					(up-compare-goal g-desired-num-knight > 0)))))
	=>
	(set-goal g-villager-training LIMITED-TRAIN-WITH-ESCROW)
	)

	(defrule
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(goal g-game-focus DEFENSIVE)
	(military-population g:< g-min-military-pop)
	(or
		(up-compare-goal g-desired-num-camel > 0)
		(or
			(up-compare-goal g-desired-num-battle-elephant > 0)
			(or
				(up-compare-goal g-desired-num-steppe-lancer > 0)
				(and
					(up-compare-goal g-desired-num-unique-unit > 0)
					(and
						(up-compare-const UNIQUE-UNIT-CLASS != archery-class)
						(up-compare-const UNIQUE-UNIT-CLASS != cavalry-archer-class))))))
	=>
	(set-goal g-villager-training LIMITED-TRAIN-WITH-ESCROW)
	)

	(defrule
	(up-object-type-count-total c: villager g:< g-desired-num-villager)
	(up-compare-goal g-game-focus != BOOM)
	(up-compare-goal g-game-focus != REBUILD)
	(up-compare-goal g-target-pop-parity g:> g-target-military-parity)	;We have more villagers than opponent
	(up-compare-goal g-target-military-parity < -10)
	=>
	(set-goal g-villager-training LIMITED-TRAIN-WITH-ESCROW)
	)

	#load-if-defined UP-GAME-WK

		(defrule
		(up-compare-goal g-villager-training > OFF)
		(goal g-strategy-type FAST-CASTLE)
		(up-compare-goal g-current-strategy != FC-EAGLES-REVENGE)	;strategies that can train
		(up-compare-goal g-current-strategy != FC-STRONGBOW)		;rush unit in feudal
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:+ 2)
		(up-object-type-count c: villager g:>= g-temp)
		(goal g-age-status SAVE-FOR-CASTLE)
		=>
		(set-goal g-villager-training OFF)
		)

		(defrule
		(up-compare-goal g-villager-training > OFF)
		(up-compare-goal g-game-focus != DEFENSIVE)
		(up-compare-goal g-game-focus != REBUILD)
		(goal g-strategy-type FAST-CASTLE)
		(or
			(goal g-current-strategy FC-EAGLES-REVENGE)	;strategies that can train
			(goal g-current-strategy FC-STRONGBOW))		;rush unit in feudal
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:+ 2)
		(up-object-type-count c: villager g:>= g-temp)
		(goal g-age-status SAVE-FOR-CASTLE)
		=>
		(set-goal g-villager-training OFF)
		)

	#else

		(defrule
		(up-compare-goal g-villager-training > OFF)
		(goal g-strategy-type FAST-CASTLE)
		(up-compare-goal g-current-strategy != FC-STRONGBOW)
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:+ 2)
		(up-object-type-count c: villager g:>= g-temp)
		(goal g-age-status SAVE-FOR-CASTLE)
		=>
		(set-goal g-villager-training OFF)
		)

		(defrule
		(up-compare-goal g-villager-training > OFF)
		(up-compare-goal g-game-focus != DEFENSIVE)
		(up-compare-goal g-game-focus != REBUILD)
		(goal g-strategy-type FAST-CASTLE)
		(goal g-current-strategy FC-STRONGBOW)
		(up-modify-goal g-temp g:= g-required-num-villager)
		(up-modify-goal g-temp c:+ 2)
		(up-object-type-count c: villager g:>= g-temp)
		(goal g-age-status SAVE-FOR-CASTLE)
		=>
		(set-goal g-villager-training OFF)
		)

	#end-if

	;Stop training villagers if we are close to researching next age
	#load-if-not-defined ITALIAN-CIV

		(defrule
		(up-compare-goal g-villager-training > OFF)
		(up-object-type-count-total c: villager g:< g-desired-num-villager)
		(up-object-type-count-total c: villager g:>= g-required-num-villager)
		(goal g-age-status SAVE-FOR-FEUDAL)
		(food-amount >= 450)
		(food-amount < 550)
		=>
		(set-goal g-villager-training OFF)
		)

		(defrule
		(up-compare-goal g-villager-training > OFF)
		(up-object-type-count-total c: villager g:< g-desired-num-villager)
		(up-object-type-count-total c: villager g:>= g-required-num-villager)
		(goal g-age-status SAVE-FOR-CASTLE)
		(food-amount >= 700)
		(gold-amount >= 180)
		(food-amount < 850)
		=>
		(set-goal g-villager-training OFF)
		)

		#load-if-not-defined BYZANTINE-CIV

			(defrule
			(up-compare-goal g-villager-training > OFF)
			(up-object-type-count-total c: villager g:< g-desired-num-villager)
			(up-object-type-count-total c: villager g:>= g-required-num-villager)
			(goal g-age-status SAVE-FOR-IMPERIAL)
			(food-amount >= 850)
			(gold-amount >= 700)
			(food-amount < 1050)
			=>
			(set-goal g-villager-training OFF)
			)

		#else

			(defrule
			(up-compare-goal g-villager-training > OFF)
			(up-object-type-count-total c: villager g:< g-desired-num-villager)
			(up-object-type-count-total c: villager g:>= g-required-num-villager)
			(goal g-age-status SAVE-FOR-IMPERIAL)
			(food-amount >= 567)
			(gold-amount >= 433)
			(food-amount < 717)
			=>
			(set-goal g-villager-training OFF)
			)

		#end-if
	#else	;Italians

		(defrule
		(up-compare-goal g-villager-training > OFF)
		(up-object-type-count-total c: villager g:< g-desired-num-villager)
		(up-object-type-count-total c: villager g:>= g-required-num-villager)
		(goal g-age-status SAVE-FOR-FEUDAL)
		(food-amount >= 375)
		(food-amount < 475)
		=>
		(set-goal g-villager-training OFF)
		)

		(defrule
		(up-compare-goal g-villager-training > OFF)
		(up-object-type-count-total c: villager g:< g-desired-num-villager)
		(up-object-type-count-total c: villager g:>= g-required-num-villager)
		(goal g-age-status SAVE-FOR-CASTLE)
		(food-amount >= 580)
		(gold-amount >= 150)
		(food-amount < 730)
		=>
		(set-goal g-villager-training OFF)
		)

		(defrule
		(up-compare-goal g-villager-training > OFF)
		(up-object-type-count-total c: villager g:< g-desired-num-villager)
		(up-object-type-count-total c: villager g:>= g-required-num-villager)
		(goal g-age-status SAVE-FOR-IMPERIAL)
		(food-amount >= 700)
		(gold-amount >= 580)
		(food-amount < 900)
		=>
		(set-goal g-villager-training OFF)
		)

	#end-if

	(defrule
	(up-compare-goal g-villager-training > OFF)
	(up-object-type-count-total c: villager g:>= g-desired-num-villager)
	=>
	(set-goal g-villager-training OFF)
	)


;--------------------------------------
;	GOAL 282: g-current-farming-gathering-rate
;--------------------------------------

	;constants are defined in Game Stats.per

	(defrule
	(true)
	=>
	(set-goal g-current-farming-gathering-rate FARM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	=>
	(set-goal g-current-farming-gathering-rate FARM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	=>
	(set-goal g-current-farming-gathering-rate FARM-CART-RATE)
	(disable-self)
	)

;-----------------------------------------
;	GOAL 283: g-current-wood-gathering-rate
;-----------------------------------------

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(up-research-status c: ri-double-bit-axe != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(up-research-status c: ri-double-bit-axe != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(up-research-status c: ri-double-bit-axe != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-double-bit-axe)
	(up-research-status c: ri-bow-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-DBA-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-double-bit-axe)
	(up-research-status c: ri-bow-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-DBA-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-double-bit-axe)
	(up-research-status c: ri-bow-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-DBA-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-bow-saw)
	(up-research-status c: ri-two-man-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-BS-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-bow-saw)
	(up-research-status c: ri-two-man-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-BS-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-bow-saw)
	(up-research-status c: ri-two-man-saw != research-complete)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-BS-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-two-man-saw)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-TMS-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-two-man-saw)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-TMS-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-two-man-saw)
	=>
	(set-goal g-current-wood-gathering-rate WOOD-TMS-CART-RATE)
	(disable-self)
	)

;------------------------------------------
;	GOAL 284: g-current-stone-gathering-rate
;------------------------------------------

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(up-research-status c: ri-stone-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(up-research-status c: ri-stone-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(up-research-status c: ri-stone-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-stone-mining)
	(up-research-status c: ri-stone-shaft-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-stone-mining)
	(up-research-status c: ri-stone-shaft-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-stone-mining)
	(up-research-status c: ri-stone-shaft-mining != research-complete)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SM-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-stone-shaft-mining)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SSM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-stone-shaft-mining)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SSM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-stone-shaft-mining)
	=>
	(set-goal g-current-stone-gathering-rate STONE-SSM-CART-RATE)
	(disable-self)
	)

;-----------------------------------------
;	GOAL 285: g-current-gold-gathering-rate
;-----------------------------------------

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(up-research-status c: ri-gold-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(up-research-status c: ri-gold-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(up-research-status c: ri-gold-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-gold-mining)
	(up-research-status c: ri-gold-shaft-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-gold-mining)
	(up-research-status c: ri-gold-shaft-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-gold-mining)
	(up-research-status c: ri-gold-shaft-mining != research-complete)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GM-CART-RATE)
	(disable-self)
	)

	(defrule
	(up-research-status c: ri-wheel-barrow != research-complete)
	(research-completed ri-gold-shaft-mining)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GSM-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-wheel-barrow)
	(up-research-status c: ri-hand-cart != research-complete)
	(research-completed ri-gold-shaft-mining)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GSM-WHEEL-RATE)
	(disable-self)
	)

	(defrule
	(research-completed ri-hand-cart)
	(research-completed ri-gold-shaft-mining)
	=>
	(set-goal g-current-gold-gathering-rate GOLD-GSM-CART-RATE)
	(disable-self)
	)



;------------------------------------------
;	GOAL 297: g-total-decaying-hunt-food
;------------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(dropsite-min-distance hunting < 10)
	(building-type-count town-center > 0)
	=>
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(up-filter-distance c: -1 c: 12)
	(up-filter-status c: status-gather c: list-inactive)
	(up-find-resource c: boar-class c: 20)
	(up-find-resource c: deer-class c: 20)
	(up-filter-status c: status-gather c: list-active)	;just in case the decaying animals are in list-active instead (they shouldn't be)
	(up-find-resource c: boar-class c: 20)
	(up-find-resource c: deer-class c: 20)
	(up-remove-objects search-remote object-data-carry <= 0)
	(up-clean-search search-remote -1 search-order-asc)	;remove duplicates
	(set-goal i 0)
	(set-goal g-total-decaying-hunt-food 0)
	)

		(defrule
		(dropsite-min-distance hunting < 10)
		(building-type-count town-center > 0)
		(up-set-target-object search-remote g: i)
		(up-compare-goal i < 20)
		(up-object-data object-data-class == boar-class)
		(up-get-object-data object-data-carry g-temp)
		=>
		(up-modify-goal g-total-decaying-hunt-food g:+ g-temp)
		(up-modify-goal i c:+ 1)
		(up-jump-rule -1)
		)

		(defrule
		(dropsite-min-distance hunting < 10)
		(building-type-count town-center > 0)
		(up-set-target-object search-remote g: i)
		(up-compare-goal i < 20)
		(up-object-data object-data-class == deer-class)
		(up-get-object-data object-data-carry g-temp)
		(up-modify-goal g-temp c:/ 3)
		=>
		(up-modify-goal g-total-decaying-hunt-food g:+ g-temp)
		(up-modify-goal i c:+ 1)
		(up-jump-rule -2)
		)

	(defrule
	(dropsite-min-distance hunting > 6)
	(up-compare-goal g-total-decaying-hunt-food != 0)
	=>
	(set-goal g-total-decaying-hunt-food 0)
	)

;--------------------------------------
;	GOAL 308: g-primary-enemy-threat
;	GOAL 200: g-enemy-strategy
;--------------------------------------

	(defrule
	(players-military-population target-player > 1)
	=>
	(set-goal g-primary-enemy-threat PENDING)
	(set-goal g-enemy-strategy PENDING)
	(set-goal g-temp 0)						;stores number of top enemy military type
	(set-goal g-temp-2 0)					;stores number of top enemy military type, weighted for our primary unit
	(set-goal g-temp-3 0)					;stores number of current enemy military unit type goal
	)

		;---------------
		;	Swordsmen
		;---------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-swordsmen-count)
				)

			;--------------------------------------------------------
			;	Check if Swordsmen are the largest enemy unit type
			;--------------------------------------------------------
				
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == dark-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy DRUSH)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == feudal-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FL-LATHER)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player >= castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-CHAMPFLOOD)
				)

			;-----------------------------------------------------------------
			;	Check if Swordsmen are the largest enemy worst enemy threat
			;-----------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit eagle-warrior)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy swordsmen numbers to 150% of total to adjust for strength of swordsmen against eagle warriors
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit hand-cannoneer)
					(goal g-primary-unit slinger))
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy swordsmen numbers to 50% of total to adjust for weakness of swordsmen against hand cannoneers and slingers
				)
				
				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected byzantine)
						(civ-selected teutonic)))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy swordsmen numbers to 50% of total to adjust for weakness of swordsmen against jaguar warriors, cataphracts, or teutonic knights
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-swordsmen-count)
				)

		;--------------
		;	Spearmen
		;--------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-spearmen-count)
				)

			;-------------------------------------------------------------------------
			;	Set enemy strategy goal if Spearmen are the largest enemy unit type
			;-------------------------------------------------------------------------
			
				;De-weight spearmen because they are weak
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy numbers to 75% of total to adjust for weakness of skirmishers units
				)
				
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy PENDING)	;we don't have a real strategy name for this yet
				)

			;----------------------------------------------------------------
			;	Check if Spearmen are the largest enemy worst enemy threat
			;----------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses		
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit archer)
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy spearmen numbers to 65% of total to adjust for weakness of spearmen against archers
				)
			
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit hand-cannoneer)
					(goal g-primary-unit slinger))
				=>
				(up-modify-goal g-temp-3 c:%* 40)		;set enemy spearmen numbers to 40% of total to adjust for weakness of spearmen against hand cannoneers and slingers
				)
			
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit scout-cavalry)
				=>
				(up-modify-goal g-temp-3 c:%* 250)		;set enemy spearmen numbers to 250% of total to adjust for strength of spearmen against scouts
				)
			
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit knight)
					(or
						(goal g-primary-unit camel)
						(goal g-primary-unit steppe-lancer)))
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy spearmen numbers to 200% of total to adjust for strength of spearmen against knights, camels, and steppe lancers
				)
			
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit battle-elephant)
				=>
				(up-modify-goal g-temp-3 c:%* 300)		;set enemy spearmen numbers to 300% of total to adjust for strength of spearmen against battle elephants
				)
			
				(defrule
				(or
					(civ-selected aztec)
					(civ-selected teutonic))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy spearmen numbers to 50% of total to adjust for weakness of spearmen against jaguar warriors and teutonic knights
				)
			
				(defrule
				(or
					(civ-selected briton)
					(or
						(civ-selected chinese)
						(or
							(civ-selected mayan)
							(civ-selected vietnamese))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy spearmen numbers to 65% of total to adjust for weakness of spearmen against longbowmen, chu ko nus, plumed archers, and rattan archers
				)
			
				(defrule
				(or
					(civ-selected italian)
					(or
						(civ-selected portuguese)
						(civ-selected turkish)))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy spearmen numbers to 75% of total to adjust for weakness of spearmen against genoese crossbowmen, organ guns, and janissaries
				)
			
				(defrule
				(or
					(civ-selected hun)
					(or
						(civ-selected indian)
						(or
							(civ-selected khmer)
							(or
								(civ-selected lithuanians)
								(civ-selected magyar)))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy spearmen numbers to 200% of total to adjust for strength of spearmen against tarkans, elephant archers, ballista elephants, leitis, magyar huszar
				)
			
				(defrule
				(civ-selected tatars)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy spearmen numbers to 200% of total to adjust for strength of spearmen against keshiks
				)
			
				(defrule
				(civ-selected persian)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 300)		;set enemy spearmen numbers to 300% of total to adjust for strength of spearmen against war elephants
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-spearmen-count)
				)

		;--------------------
		;	Eagle Warriors
		;--------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-eagle-warrior-count)
				)

				(defrule
				(goal g-enemy-eagle-warrior-count 1)	;assume this is the scout
				=>
				(set-goal g-temp-3 0)
				)

			;-------------------------------------------------------------------------------
			;	Set enemy strategy goal if Eagle Warriors are the largest enemy unit type
			;-------------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == feudal-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FL-EYRIES)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FC-EAGLES-REVENGE)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-EL-DORADO)
				)

			;----------------------------------------------------------------------
			;	Check if Eagle Warriors are the largest enemy worst enemy threat
			;----------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses		
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit militiaman)
					(or
						(goal g-primary-unit hand-cannoneer)
						(goal g-primary-unit slinger)))
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy eagle warrior numbers to 65% of total to adjust for weakness of eagle warriors against swordsmen, hand cannoneers, or slingers
				)
			
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit skirmisher)
					(or
						(goal g-primary-unit monk)
						(goal g-primary-unit missionary)))
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy eagle warrior numbers to 150% of total to adjust for strength of eagle warriors against skirmishers, monks, and missionaries
				)
			
				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected byzantine)
						(civ-selected teutonic)))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy eagle warrior numbers to 50% of total to adjust for weakness of eagle warriors against jaguar warriors
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-enemy-eagle-warrior-count > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-eagle-warrior-count)
				)

		;-----------------
		;	Condottieri
		;-----------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-condottiero-count)
				)

			;----------------------------------------------------------------------------
			;	Set enemy strategy goal if Condottieri are the largest enemy unit type
			;----------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy PENDING)	;we don't have a real strategy name for this unit yet
				)

			;-------------------------------------------------------------------
			;	Check if Condottieri are the largest enemy worst enemy threat
			;-------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit slinger)
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy condottieri numbers to 65% of total to adjust for weakness of condottieri against slingers
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit hand-cannoneer)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy condottieri numbers to 125% of total to adjust for strength of condottieri against hand cannoneers
				)
				
				(defrule
				(or
					(civ-selected portuguese)
					(or
						(civ-selected spanish)
						(civ-selected turkish)))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy condottieri numbers to 150% of total to adjust for strength of condottieri against organ guns, conquistadors, and janissaries
				)
				
				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected byzantine)
						(civ-selected teutonic)))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy condottieri numbers to 50% of total to adjust for weakness of condottieri against jaguar warriors, cataphracts, or teutonic knights
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-condottiero-count)
				)

		;------------------
		;	Foot Archers
		;------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-foot-archers-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Foot Archers are the largest enemy unit type
			;-----------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(up-compare-goal g-enemy-skirmishers-count == 0)
				(players-current-age target-player == feudal-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FL-RANGER)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(up-compare-goal g-enemy-skirmishers-count > 0)
				(players-current-age target-player == feudal-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FL-GUERILLA)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FC-STRONGBOW)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-ARBINGER)
				)

			;--------------------------------------------------------------------
			;	Check if Foot Archers are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy foot archer numbers to 150% of total to adjust for strength of foot archers against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit skirmisher)
					(goal g-primary-unit genitour))
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy foot archer numbers to 65% of total to adjust for weakness of foot archers against skirmishers and genitours
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit mangonel)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy foot archer numbers to 75% of total to adjust for weakness of foot archers against mangonels
				)

				(defrule
				(civ-selected teutonic)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 135)		;set enemy foot archer numbers to 135% of total to adjust for strength of foot archers against teutonic knights
				)

				(defrule
				(or
					(civ-selected byzantine)
					(or
						(civ-selected ethiopian)
						(or
							(civ-selected malay)
							(or
								(civ-selected saracen)
								(civ-selected slavic)))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy foot archer numbers to 125% of total to adjust for strength of foot archers against cataphracts, shotel warriors, karambit warriors, mamelukes, and boyars
				)

				(defrule
				(civ-selected gothic)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy foot archer numbers to 60% of total to adjust for weakness of foot archers against huskarls
				)

				(defrule
				(or
					(civ-selected korean)
					(civ-selected vietnamese))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 80)		;set enemy foot archer numbers to 80% of total to adjust for weakness of foot archers against war wagons and rattan archers
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-foot-archers-count)
				)

		;-----------------
		;	Skirmishers
		;-----------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-skirmishers-count)
				)

			;----------------------------------------------------------------------------
			;	Set enemy strategy goal if Skirmishers are the largest enemy unit type
			;----------------------------------------------------------------------------
			
				;De-weight skirmishers because they are weak
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy numbers to 75% of total to adjust for weakness of skirmishers units
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(up-compare-goal g-enemy-foot-archers-count == 0)
				(players-current-age target-player == feudal-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FL-SKIRMMETA)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(up-compare-goal g-enemy-foot-archers-count > 0)
				(players-current-age target-player == feudal-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FL-GUERILLA)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player >= castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy PENDING)	;we don't have proper strategy names past Feudal Age yet
				)

			;-------------------------------------------------------------------
			;	Check if Skirmishers are the largest enemy worst enemy threat
			;-------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy skirmisher numbers to 125% of total to adjust for strength of skirmishers against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit eagle-warrior)
					(or
						(goal g-primary-unit knight)
						(goal g-primary-unit steppe-lancer)))
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy skirmisher numbers to 75% of total to adjust for weakness of skirmishers against eagle warriors, knights, and steppe lancers
				)

				#load-if-defined BRITON-CIV

					(defrule
					(civ-selected briton)
					(players-military-population target-player > 1)
					(up-compare-goal g-temp-3 > 0)
					(or
						(and
							(or
								(goal g-primary-unit my-unique-unit)
								(goal g-primary-unit archer))
							(current-age < imperial-age))
						(goal g-primary-unit cavalry-archer))
					=>
					(up-modify-goal g-temp-3 c:%* 200)		;set enemy skirmisher numbers to 150% of total to adjust for strength of skirmishers against longbowmen
					)

					(defrule
					(civ-selected briton)
					(players-military-population target-player > 1)
					(up-compare-goal g-temp-3 > 0)
					(or
						(goal g-primary-unit my-unique-unit)
						(goal g-primary-unit archer))
					(current-age == imperial-age)
					=>
					(up-modify-goal g-temp-3 c:%* 150)		;set enemy skirmisher numbers to 150% of total to adjust for strength of skirmishers against longbowmen
					)

				#else

					(defrule
					(players-military-population target-player > 1)
					(up-compare-goal g-temp-3 > 0)
					(or
						(goal g-primary-unit archer)
						(or
							(goal g-primary-unit cavalry-archer)
							(or
								(goal g-primary-unit hand-cannoneer)
								(goal g-primary-unit slinger))))
					=>
					(up-modify-goal g-temp-3 c:%* 200)		;set enemy skirmisher numbers to 200% of total to adjust for strength of skirmishers against archers, cavalry archers, and slingers
					)

					(defrule
					(players-military-population target-player > 1)
					(up-compare-goal g-temp-3 > 0)
					(goal g-primary-unit hand-cannoneer)
					=>
					(up-modify-goal g-temp-3 c:%* 135)		;set enemy skirmisher numbers to 135% of total to adjust for strength of skirmishers against hand cannoneers
					)

				#end-if

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit scout-cavalry)
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy skirmisher numbers to 65% of total to adjust for weakness of skirmishers against scout cavalry
				)

				(defrule
				(or
					(civ-selected chinese)
					(or
						(civ-selected vietnamese)
						(or
							(civ-selected korean)
							(or
								(civ-selected saracen)
								(or
									(civ-selected spanish)
									(civ-selected turkish))))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 135)		;set enemy skirmisher numbers to 135% of total to adjust for strength of skirmishers against chu ko nus, war wagons, mamelukes, conquistadors, janissaries, and rattan archers
				)

				(defrule
				(or
					(civ-selected berbers)
					(or
						(civ-selected burmese)
						(or
							(civ-selected cumans)
							(or
								(civ-selected italian)
								(or
									(civ-selected mayan)
									(civ-selected mongol))))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy skirmisher numbers to 200% of total to adjust for strength of skirmishers against camel archers, arambai, kipchaks, genoese crossbowmen, plumed archers, and mangudai
				)

				(defrule
				(civ-selected gothic)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 35)		;set enemy skirmisher numbers to 35% of total to adjust for weakness of skirmishers against huskarls
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-skirmishers-count)
				)

		;---------------------
		;	Cavalry Archers
		;---------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-cavalry-archers-count)
				)

			;--------------------------------------------------------------------------------
			;	Set enemy strategy goal if Cavalry Archers are the largest enemy unit type
			;--------------------------------------------------------------------------------

				;Weight cavalry archers because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy numbers to 125% of total to adjust for strength of cavalry archer units
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-CAV-ARCHERS)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDI-CAV-ARCHERS)
				)

			;-----------------------------------------------------------------------
			;	Check if Cavalry Archers are the largest enemy worst enemy threat
			;-----------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy cavalry archer numbers to 125% of total to adjust for strength of cavalry archers against swordsmen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit skirmisher)
					(goal g-primary-unit genitour))
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy cavalry archer numbers to 50% of total to adjust for weakness of cavalry archers against skirmishers and genitours
				)

				(defrule
				(civ-selected indian)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit camel)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy cavalry archer numbers to 75% of total to adjust for weakness of cavalry archers against Indian camels
				)

				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected ethiopian)
						(or
							(civ-selected malay)
							(civ-selected teutonic))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy cavalry archer numbers to 150% of total to adjust for strength of cavalry archers against jaguar warriors, shotel warriors, karambit warriors, and teutonic knights
				)

				(defrule
				(or
					(civ-selected berbers)
					(or
						(civ-selected gothic)
						(or
							(civ-selected italian)
							(civ-selected saracen))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy cavalry archer numbers to 60% of total to adjust for weakness of cavalry archers against camel archers, huskarls, genoese crossbowmen, and mamelukes
				)

				(defrule
				(civ-selected vietnamese)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 80)		;set enemy cavalry archer numbers to 80% of total to adjust for weakness of cavalry archers against rattan archers
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-cavalry-archers-count)
				)

		;------------------------------
		;	Hand Cannoneers/Slingers
		;------------------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-hand-cannoneer-slinger-count)
				)

			;--------------------------------------------------------------------------------
			;	Set enemy strategy goal if Hand Cannoneers/Slingers are the largest enemy unit type
			;--------------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FI-SNIPER)
				)

			;--------------------------------------------------------------------------------
			;	Check if Hand Cannoneers/Slingers are the largest enemy worst enemy threat
			;--------------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy hand cannoner/slinger numbers to 200% of total to adjust for strength of hand cannoneers/slingers against swordsmen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				=>
				(up-modify-goal g-temp-3 c:%* 300)		;set enemy hand cannoner/slinger numbers to 300% of total to adjust for strength of hand cannoneers/slingers against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit eagle-warrior)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy hand cannoner/slinger numbers to 150% of total to adjust for strength of hand cannoneers/slingers against eagle warriors
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(players-unit-type-count target-player hand-cannoneer > 0)
				(goal g-primary-unit condottiero)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy hand cannoner numbers to 75% of total to adjust for weakness of hand cannoneers against condottiero
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit skirmisher)
					(goal g-primary-unit genitour))
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy hand cannoner/slinger numbers to 65% of total to adjust for weakness of hand cannoneers/slingers against skirmishers
				)

				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected celtic)
						(or
							(civ-selected ethiopian)
							(or
								(civ-selected frankish)
								(or
									(civ-selected incan)
									(civ-selected japanese))))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy hand cannoner/slinger numbers to 200% of total to adjust for strength of hand cannoneers/slingers against unique infantry units
				)

				(defrule
				(or
					(civ-selected malay)
					(or
						(civ-selected malian)
						(or
							(civ-selected teutonic)
							(civ-selected viking))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy hand cannoner/slinger numbers to 200% of total to adjust for strength of hand cannoneers/slingers against unique infantry units
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-hand-cannoneer-slinger-count)
				)

		;-------------------
		;	Light Cavalry
		;-------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-light-cavalry-count)
				)

				(defrule
				(goal g-enemy-light-cavalry-count 1)		;assume this is the scout
				=>
				(set-goal g-temp-3 0)
				)

			;------------------------------------------------------------------------------
			;	Set enemy strategy goal if Light Cavalry are the largest enemy unit type
			;------------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == feudal-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FL-VULTURE)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player >= castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy PENDING)	;we don't have a proper strategy name for Castle/Imperial Light Cav
				)

			;---------------------------------------------------------------------
			;	Check if Light Cavalry are the largest enemy worst enemy threat
			;---------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				(up-research-status c: ri-pikeman < research-complete)
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy light cavalry numbers to 65% of total to adjust for weakness of light cavalry against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				(up-research-status c: ri-pikeman == research-complete)
				=>
				(up-modify-goal g-temp-3 c:%* 40)		;set enemy light cavalry numbers to 40% of total to adjust for weakness of light cavalry against pikemen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit eagle-warrior)
				(or
					(research-completed ri-eagle-warrior)
					(research-completed ri-elite-eagle-warrior))
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy light cavalry numbers to 75% of total to adjust for weakness of light cavalry against eagle warriors
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit skirmisher)
					(goal g-primary-unit genitour))
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy light cavalry numbers to 200% of total to adjust for strength of light cavalry against skirmishers
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit camel)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy light cavalry numbers to 50% of total to adjust for weakness of light cavalry against camels
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit monk)
					(goal g-primary-unit missionary))
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy light cavalry numbers to 150% of total to adjust for strength of light cavalry against monks
				)

				(defrule
				(or
					(civ-selected incan)
					(or
						(civ-selected italian)
						(or
							(civ-selected slavic)
							(civ-selected teutonic))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy light cavalry numbers to 75% of total to adjust for weakness of light cavalry against kamayuks and genoese crossbowmen
				)

				(defrule
				(civ-selected saracen)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy light cavalry numbers to 50% of total to adjust for weakness of light cavalry against mamelukes
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				(up-compare-goal g-enemy-light-cavalry-count > 2)
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-light-cavalry-count)
				)

		;-------------------
		;	Heavy Cavalry
		;-------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-heavy-cavalry-count)
				)

			;------------------------------------------------------------------------------
			;	Set enemy strategy goal if Heavy Cavalry are the largest enemy unit type
			;------------------------------------------------------------------------------

				;Weight heavy cavalry because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy numbers to 150% of total to adjust for strength of heavy cavalry
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FC-KRUSH)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-PALASTORM)
				)

			;---------------------------------------------------------------------
			;	Check if Heavy Cavalry are the largest enemy worst enemy threat
			;---------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				(up-research-status c: ri-pikeman < research-complete)
				=>
				(up-modify-goal g-temp-3 c:%* 80)		;set enemy heavy cavalry numbers to 80% of total to adjust for weakness of heavy cavalry against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				(up-research-status c: ri-pikeman == research-complete)
				=>
				(up-modify-goal g-temp-3 c:%* 40)		;set enemy heavy cavalry numbers to 40% of total to adjust for weakness of heavy cavalry against pikemen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit skirmisher)
					(goal g-primary-unit genitour))
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy heavy cavalry numbers to 200% of total to adjust for strength of heavy cavalry against skirmishers
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit camel)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy heavy cavalry numbers to 50% of total to adjust for weakness of heavy cavalry against camels
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit monk)
					(goal g-primary-unit missionary))
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy heavy cavalry numbers to 65% of total to adjust for weakness of heavy cavalry against monks
				)

				(defrule
				(or
					(civ-selected incan)
					(or
						(civ-selected italian)
						(civ-selected teutonic)))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy heavy cavalry numbers to 75% of total to adjust for weakness of heavy cavalry against kamayuks and genoese crossbowmen
				)

				(defrule
				(civ-selected saracen)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy heavy cavalry numbers to 50% of total to adjust for weakness of heavy cavalry against mamelukes
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-heavy-cavalry-count)
				)

		;------------
		;	Camels
		;------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-camel-count)
				)

			;-----------------------------------------------------------------------
			;	Set enemy strategy goal if Camels are the largest enemy unit type
			;-----------------------------------------------------------------------

				;Weight camels because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy numbers to 125% of total to adjust for strength of camel units
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FC-CRUSH)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-CAMELSTORM)
				)

			;--------------------------------------------------------------
			;	Check if Camels are the largest enemy worst enemy threat
			;--------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				(up-research-status c: ri-pikeman < research-complete)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy camel numbers to 75% of total to adjust for weakness of camels against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				(up-research-status c: ri-pikeman == research-complete)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy camel numbers to 60% of total to adjust for weakness of camels against pikemen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit eagle-warrior)
				(or
					(research-completed ri-eagle-warrior)
					(research-completed ri-elite-eagle-warrior))
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy camel numbers to 75% of total to adjust for weakness of camels against eagle warriors
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit archer)
				=>
				(up-modify-goal g-temp-3 c:%* 135)		;set enemy camel numbers to 135% of total to adjust for weakness of camels against archers
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit scout-cavalry)
					(or
						(goal g-primary-unit knight)
						(or
							(goal g-primary-unit battle-elephant)
							(goal g-primary-unit steppe-lancer))))
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy camel numbers to 200% of total to adjust for strength of camels against scouts
				)

				(defrule
				(or
					(civ-selected hun)
					(or
						(civ-selected lithuanians)
						(or
							(civ-selected magyar)
							(or
								(civ-selected slavic)
								(civ-selected tatars)))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy camel numbers to 200% of total to adjust for strength of camels against tarkans, leitis, magyar huszars, boyars, and keshiks
				)

				(defrule
				(or
					(civ-selected incan)
					(civ-selected italian))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy camel numbers to 50% of total to adjust for weakness of camels against teutonic knights
				)

				(defrule
				(civ-selected teutonic)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 35)		;set enemy elephant numbers to 35% of total to adjust for weakness of elephants against spearmen
				)

				(defrule
				(civ-selected persian)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy camel numbers to 150% of total to adjust for strength of camels against war elephants
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-camel-count)
				)

		;---------------
		;	Elephants
		;---------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-elephants-count)
				)

			;--------------------------------------------------------------------------
			;	Set enemy strategy goal if Elephants are the largest enemy unit type
			;--------------------------------------------------------------------------

				;Weight elephant units because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy numbers to 150% of total to adjust for strength of elephants
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-CIRCUS)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-CIRCUS-STOMP)
				)

			;-----------------------------------------------------------------
			;	Check if Elephants are the largest enemy worst enemy threat
			;-----------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				=>
				(up-modify-goal g-temp-3 c:%* 35)		;set enemy elephant numbers to 35% of total to adjust for weakness of elephants against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit camel)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy elephant numbers to 50% of total to adjust for weakness of elephants against camels
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit monk)
					(goal g-primary-unit missionary))
				=>
				(up-modify-goal g-temp-3 c:%* 40)		;set enemy elephant numbers to 40% of total to adjust for weakness of elephants against monks
				)

				(defrule
				(or
					(civ-selected burmese)
					(or
						(civ-selected spanish)
						(civ-selected italian)))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy elephant numbers to 75% of total to adjust for weakness of elephants against arambai, conquistadors, and genoese crossbowmen
				)

				(defrule
				(civ-selected incan)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 35)		;set enemy elephant numbers to 35% of total to adjust for weakness of elephants against kamayuks
				)

				(defrule
				(civ-selected saracen)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy elephant numbers to 50% of total to adjust for weakness of elephants against mamelukes
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-elephants-count)
				)

		;-----------------
		;	Field Siege
		;-----------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-field-siege-count)
				)

			;----------------------------------------------------------------------------
			;	Set enemy strategy goal if Field Siege are the largest enemy unit type
			;----------------------------------------------------------------------------

				;Weight field siege because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 200)
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy PENDING)		;we don't have a proper field siege strategy name yet
				)

			;-----------------------------------------------------------------
			;	Check if Field Siege are the largest enemy worst enemy threat
			;-----------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit eagle-warrior)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy field siege numbers to 75% of total to adjust for weakness of field siege against eagle warriors
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit archer)
					(or
						(goal g-primary-unit slinger)
						(goal g-primary-unit genitour)))
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy field siege numbers to 150% of total to adjust for strength of field siege against archers
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit skirmisher)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy field siege numbers to 200% of total to adjust for strength of field siege against skirmishers
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit scout-cavalry)
					(or
						(goal g-primary-unit knight)
						(goal g-primary-unit steppe-lancer)))
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy field siege numbers to 60% of total to adjust for weakness of field siege against light cavalry
				)

				(defrule
				(or
					(civ-selected byzantine)
					(or
						(civ-selected hun)
						(or
							(civ-selected lithuanians)
							(or
								(civ-selected mongol)
								(or
									(civ-selected slavic)
									(civ-selected tatars))))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy field siege numbers to 60% of total to adjust for weakness of field siege against cataphracts, tarkans, leitis, mangudai, boyars, and keshiks
				)

				(defrule
				(civ-selected magyar)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy field siege numbers to 50% of total to adjust for weakness of field siege against magyar huszar
				)

				(defrule
				(or
					(civ-selected gothic)
					(civ-selected celtic))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy field siege numbers to 75% of total to adjust for weakness of field siege against woad raiders and huskarls
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-field-siege-count)
				)

		;---------------------
		;	Jaguar Warriors
		;---------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit militiaman)
					(or
						(goal g-primary-unit eagle-warrior)
						(goal g-primary-unit condottiero)))
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy special unique unit numbers to 200% of total to adjust for strength of jaguar warriors against swordsmen, eagle warriors, and condottieri
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				=>
				(up-modify-goal g-temp-3 c:%* 300)		;set enemy special unique unit numbers to 300% of total to adjust for strength of jaguar warriors against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit archer)
					(goal g-primary-unit cavalry-archer))
				=>
				(up-modify-goal g-temp-3 c:%* 70)		;set enemy special unique unit numbers to 70% of total to adjust for weakness of jaguar warriors against archers and cavalry archers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit hand-cannoneer)
					(goal g-primary-unit slinger))
				=>
				(up-modify-goal g-temp-3 c:%* 40)		;set enemy special unique unit numbers to 40% of total to adjust for weakness of jaguar warriors against hand cannoneers and slingers
				)

				(defrule
				(or
					(civ-selected berbers)
					(or
						(civ-selected briton)
						(or
							(civ-selected burmese)
							(or
								(civ-selected chinese)
								(civ-selected cumans)))))
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 70)		;set enemy special unique unit numbers to 70% of total to adjust for weakness of jaguar warriors against camel archers, longbowmen, arambai, chu ko nus, kipchaks
				)

				(defrule
				(or
					(civ-selected italian)
					(or
						(civ-selected korean)
						(or
							(civ-selected mayan)
							(or
								(civ-selected mongol)
								(civ-selected portuguese)))))
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 70)		;set enemy special unique unit numbers to 70% of total to adjust for weakness of jaguar warriors against genoese crossbowmen, war wagons, plumed archers, mangudai, organ guns
				)

				(defrule
				(or
					(civ-selected turkish)
					(civ-selected vietnamese))
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 70)		;set enemy special unique unit numbers to 70% of total to adjust for weakness of jaguar warriors against janissaries and rattan archers
				)

				(defrule
				(civ-selected byzantine)
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy special unique unit numbers to 50% of total to adjust for weakness of jaguar warriors against cataphracts
				)

				(defrule
				(or
					(civ-selected celtic)
					(or
						(civ-selected ethiopian)
						(or
							(civ-selected gothic)
							(or
								(civ-selected incan)
								(civ-selected malay)))))
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy special unique unit numbers to 200% of total to adjust for strength of jaguar warriors against woad raiders, shotel warriors, huskarls, kamayuks, and karambit warriors
				)

				(defrule
				(civ-selected viking)
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy special unique unit numbers to 200% of total to adjust for strength of jaguar warriors against berserks
				)

				(defrule
				(or
					(civ-selected frankish)
					(civ-selected malian))
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 140)		;set enemy special unique unit numbers to 140% of total to adjust for weakness of jaguar warriors against throwing axemen and gbetos
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player aztec)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)

		;-------------------
		;	Camel Archers
		;-------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				;Weight camel archers because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 125)
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy camel archer numbers to 125% of total to adjust for strength of camel archers against swordsmen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit skirmisher)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy camel archer numbers to 50% of total to adjust for weakness of camel archers against skirmishers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit cavalry-archer)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy camel archer numbers to 160% of total to adjust for strength of camel archers against cavalry archers
				)

				(defrule
				(civ-selected indian)
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit camel)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy camel archer numbers to 75% of total to adjust for weakness of camel archers against Indian camels
				)

				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected ethiopian)
						(or
							(civ-selected malay)
							(civ-selected teutonic))))
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy camel archer numbers to 150% of total to adjust for strength of camel archers against jaguar warriors, shotel warriors, karambit warriors, and teutonic knights
				)

				(defrule
				(or
					(civ-selected burmese)
					(or
						(civ-selected cumans)
						(or
							(civ-selected indian)
							(or
								(civ-selected korean)
								(civ-selected mongol)))))
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy camel archer numbers to 200% of total to adjust for strength of camel archers against arambai, kipchaks, elephant archers, war wagons, and mangudai
				)

				(defrule
				(or
					(civ-selected spanish)
					(civ-selected teutonic))
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy camel archer numbers to 200% of total to adjust for strength of camel archers against conquistadors and teutonic knights
				)

				(defrule
				(or
					(civ-selected gothic)
					(or
						(civ-selected italian)
						(civ-selected saracen)))
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy camel archer numbers to 60% of total to adjust for weakness of camel archers against huskarls, genoese crossbowmen, and mamelukes
				)

				(defrule
				(civ-selected vietnamese)
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 80)		;set enemy camel archer numbers to 80% of total to adjust for weakness of camel archers against rattan archers
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player berbers)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)

		;-----------------
		;	Cataphracts
		;-----------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				;Weight cataphracts because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 150)
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit militiaman)
					(or
						(goal g-primary-unit eagle-warrior)
						(goal g-primary-unit condottiero)))
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy cataphract numbers to 200% of total to adjust for strength of cataphracts against swordsmen, eagle warriors, and condottieri
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit archer)
					(or
						(goal g-primary-unit cavalry-archer)
						(goal g-primary-unit hand-cannoneer)))
				=>
				(up-modify-goal g-temp-3 c:%* 85)		;set enemy cataphract numbers to 85% of total to adjust for weakness of cataphracts against archers, cavalry archers, and hand cannoneers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit monk)
					(goal g-primary-unit missionary))
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy cataphract numbers to 75% of total to adjust for weakness of cataphracts against monks
				)

				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected celtic)
						(or
							(civ-selected ethiopian)
							(or
								(civ-selected frankish)
								(civ-selected gothic)))))
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy cataphract numbers to 200% of total to adjust for strength of cataphracts against jaguar warriors, woad raiders, shotel warriors, throwing axemen, and huskarls
				)

				(defrule
				(or
					(civ-selected incan)
					(or
						(civ-selected malay)
						(or
							(civ-selected malian)
							(civ-selected viking))))
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy cataphract numbers to 200% of total to adjust for strength of cataphracts against kamayuks, karambit warriors, gbetos, and berserks
				)

				(defrule
				(civ-selected teutonic)
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 135)		;set enemy cataphract numbers to 135% of total to adjust for strength of cataphracts against teutonic knights
				)

				(defrule
				(or
					(civ-selected berbers)
					(or
						(civ-selected briton)
						(or
							(civ-selected chinese)
							(or
								(civ-selected indian)
								(civ-selected italian)))))
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 85)		;set enemy cataphract numbers to 85% of total to adjust for weakness of cataphracts against camel archers, longbowmen, chu ko nus, elephant archers, and genoese crossbowmen
				)

				(defrule
				(or
					(civ-selected khmer)
					(or
						(civ-selected korean)
						(or
							(civ-selected mayan)
							(or
								(civ-selected mongol)
								(civ-selected spanish)))))
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 85)		;set enemy cataphract numbers to 85% of total to adjust for weakness of cataphracts against ballista elephants, war wagons, plumed archers, manguadai, and conquistadors
				)

				(defrule
				(or
					(civ-selected burmese)
					(or
						(civ-selected turkish)
						(civ-selected vietnamese)))
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 85)		;set enemy cataphract numbers to 85% of total to adjust for weakness of cataphracts against arambai, janissaries, and rattan archers
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player byzantine)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)
			
		;--------------
		;	Huskarls
		;--------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit militiaman)
				=>
				(up-modify-goal g-temp-3 c:%* 80)		;set enemy huskarl numbers to 80% of total to adjust for weakness of huskarls against swordsmen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit archer)
					(goal g-primary-unit skirmisher))
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy huskarl numbers to 200% of total to adjust for strength of huskarls against archers and skirmishers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit cavalry-archer)
					(goal g-primary-unit genitour))
				=>
				(up-modify-goal g-temp-3 c:%* 165)		;set enemy huskarl numbers to 165% of total to adjust for strength of huskarls against cavalry archers and genitours
				)

				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected japanese)
						(civ-selected teutonic)))
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy huskarl numbers to 50% of total to adjust for weakness of huskarls against jaguar warriors, samurai, and teutonic knights
				)

				(defrule
				(or
					(civ-selected briton)
					(or
						(civ-selected chinese)
						(or
							(civ-selected italian)
							(or
								(civ-selected mayan)
								(civ-selected vietnamese)))))
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy huskarl numbers to 200% of total to adjust for strength of huskarls against longbowmen, chu ko nus, genoese crossbowmen, plumed archers, and rattan archers
				)

				(defrule
				(or
					(civ-selected berbers)
					(or
						(civ-selected burmese)
						(or
							(civ-selected cumans)
							(or
								(civ-selected indian)
								(civ-selected korean)))))
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 165)		;set enemy huskarl numbers to 165% of total to adjust for strength of huskarls against camel archers, arambai, kipchaks, elephant archers, and war wagons
				)

				(defrule
				(or
					(civ-selected mongol)
					(or
						(civ-selected spanish)
						(civ-selected turkish)))
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 165)		;set enemy huskarl numbers to 165% of total to adjust for strength of huskarls against mangudai, conquistadors, and janissaries
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player gothic)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)

		;---------------------
		;	Elephant Archer
		;---------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				;Weight elephant archers because they are strong (or at least they're expensive)
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 150)
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy elephant archer numbers to 75% of total to adjust for weakness of elephant archers against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit archer)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy elephant archer numbers to 125% of total to adjust for strength of elephant archers against archers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit skirmisher)
					(goal g-primary-unit genitour))
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy elephant archer numbers to 65% of total to adjust for weakness of elephant archers against skirmishers and genitours
				)

				(defrule
				(civ-selected indian)
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit camel)
				=>
				(up-modify-goal g-temp-3 c:%* 80)		;set enemy elephant archer numbers to 80% of total to adjust for weakness of elephant archers against Indian camels
				)

				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected ethiopian)
						(or
							(civ-selected malay)
							(civ-selected teutonic))))
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy elephant archer numbers to 150% of total to adjust for strength of elephant archers against jaguar warriors, shotel warriors, karambit warriors, and teutonic knights
				)

				(defrule
				(or
					(civ-selected berbers)
					(or
						(civ-selected gothic)
						(or
							(civ-selected italian)
							(civ-selected saracen))))
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy elephant archer numbers to 60% of total to adjust for weakness of elephant archers against camel archers, huskarls, genoese crossbowmen, and mamelukes
				)

				(defrule
				(civ-selected mayan)
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy elephant archer numbers to 125% of total to adjust for strength of elephant archers against plumed archers
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player indian)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)

		;-------------------------
		;	Genoese Crossbowman
		;-------------------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy genoese crossbowmen numbers to 150% of total to adjust for strength of genoese crossbowmens against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit skirmisher)
					(goal g-primary-unit genitour))
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy genoese crossbowmen numbers to 65% of total to adjust for weakness of genoese crossbowmens against skirmishers and genitours
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit cavalry-archer)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy genoese crossbowmen numbers to 150% of total to adjust for strength of genoese crossbowmens against cavalry archers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit scout-cavalry)
					(or
						(goal g-primary-unit knight)
						(or
							(goal g-primary-unit camel)
							(or
								(goal g-primary-unit battle-elephant)
								(goal g-primary-unit steppe-lancer)))))
				=>
				(up-modify-goal g-temp-3 c:%* 140)		;set enemy genoese crossbowmen numbers to 140% of total to adjust for strength of genoese crossbowmens against cavalry
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit mangonel)
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy genoese crossbowmen numbers to 65% of total to adjust for weakness of genoese crossbowmens against mangonels
				)

				(defrule
				(or
					(civ-selected berbers)
					(or
						(civ-selected burmese)
						(or
							(civ-selected cumans)
							(or
								(civ-selected indian)
								(or
									(civ-selected korean)
									(civ-selected mongol))))))
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy genoese crossbowmen numbers to 150% of total to adjust for strength of genoese crossbowmens against camel archers, arambai, kipchaks, elephant archers, war wagons, and mangudai
				)

				(defrule
				(or
					(civ-selected saracen)
					(or
						(civ-selected slavic)
						(or
							(civ-selected spanish)
							(or
								(civ-selected khmer)
								(civ-selected persian)))))
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy genoese crossbowmen numbers to 150% of total to adjust for strength of genoese crossbowmens against mamelukes, boyars, conquistadors, ballista elephants, and war elephants
				)

				(defrule
				(or
					(civ-selected bulgarians)
					(or
						(civ-selected hun)
						(or
							(civ-selected tatars)
							(or
								(civ-selected lithuanians)
								(or
									(civ-selected magyar)
									(civ-selected teutonic))))))
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 140)		;set enemy genoese crossbowmen numbers to 140% of total to adjust for strength of genoese crossbowmens against konniks, tarkans, keshiks, leitis, magyar huszars, and teutonic knights
				)

				(defrule
				(or
					(civ-selected byzantine)
					(or
						(civ-selected ethiopian)
						(civ-selected malay)))
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy genoese crossbowmen numbers to 125% of total to adjust for strength of genoese crossbowmens against cataphracts, shotel warriors, karambit warriors
				)

				(defrule
				(or
					(civ-selected gothic)
					(civ-selected japanese))
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy genoese crossbowmen numbers to 60% of total to adjust for weakness of genoese crossbowmens against huskarls and samurai
				)

				(defrule
				(civ-selected vietnamese)
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy genoese crossbowmen numbers to 75% of total to adjust for weakness of genoese crossbowmen against rattan archers
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player italian)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)

		;-------------
		;	Samurai
		;-------------
		
			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player japanese)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player japanese)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player japanese)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player japanese)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit eagle-warrior)
				=>
				(up-modify-goal g-temp-3 c:%* 135)		;set enemy samurai numbers to 135% of total to adjust for strength of samurai against eagle warriors
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player japanese)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit hand-cannoneer)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy samurai numbers to 50% of total to adjust for weakness of samurai against hand cannoneers
				)

				(defrule
				(or
					(civ-selected aztec)
					(or
						(civ-selected byzantine)
						(or
							(civ-selected teutonic)
							(civ-selected japanese))))
				=>
				(up-jump-rule 1)
				)
				
					(defrule
					(players-military-population target-player > 1)
					(players-civ target-player japanese)
					(up-compare-goal g-temp-3 > 0)
					(goal g-primary-unit my-unique-unit)
					=>
					(up-modify-goal g-temp-3 c:%* 150)		;set enemy samurai numbers to 150% of total to adjust for strength of samurai against unique units
					)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player japanese)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)
		
		;------------------------
		;	Ballista Elephants
		;------------------------

			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				;Weight ballista elephants because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 150)
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy ballista elephant numbers to 60% of total to adjust for weakness of ballista elephants against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit camel)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy ballista elephant numbers to 75% of total to adjust for weakness of ballista elephants against camels
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit monk)
					(goal g-primary-unit missionary))
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy ballista elephant numbers to 50% of total to adjust for weakness of ballista elephants against monks
				)

				(defrule
				(or
					(civ-selected burmese)
					(or
						(civ-selected spanish)
						(civ-selected italian)))
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy ballista elephant numbers to 75% of total to adjust for weakness of ballista elephants against arambai, conquistadors, and genoese crossbowmen
				)

				(defrule
				(or
					(civ-selected incan)
					(or
						(civ-selected magyar)
						(civ-selected mongol)))
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy ballista elephant numbers to 50% of total to adjust for weakness of ballista elephants against kamayuks, magyar huszars, and mangudai
				)

				(defrule
				(civ-selected saracen)
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy ballista elephant numbers to 50% of total to adjust for weakness of ballista elephants against mamelukes
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player khmer)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)

		;------------
		;	Leitis
		;------------

			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				;Weight leitis because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 150)
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				(up-research-status c: ri-pikeman < research-complete)
				=>
				(up-modify-goal g-temp-3 c:%* 80)		;set enemy leitis numbers to 80% of total to adjust for weakness of leitis against spearmen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				(up-research-status c: ri-pikeman == research-complete)
				=>
				(up-modify-goal g-temp-3 c:%* 40)		;set enemy leitis numbers to 40% of total to adjust for weakness of leitis against pikemen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit skirmisher)
					(goal g-primary-unit genitour))
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy leitis numbers to 150% of total to adjust for strength of leitis against skirmishers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit knight)
				(current-age == imperial-age)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy leitis numbers to 125% of total to adjust for strength of leitis against knights
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit camel)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy leitis numbers to 50% of total to adjust for weakness of leitis against camels
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit monk)
					(goal g-primary-unit missionary))
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy leitis numbers to 65% of total to adjust for weakness of leitis against monks
				)

				(defrule
				(or
					(civ-selected incan)
					(civ-selected italian))
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy leitis numbers to 75% of total to adjust for weakness of leitis against kamayuks and genoese crossbowmen
				)

				(defrule
				(civ-selected saracen)
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy leitis numbers to 50% of total to adjust for weakness of leitis against mamelukes
				)

				(defrule
				(civ-selected byzantine)
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				(current-age == imperial-age)
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy leitis numbers to 125% of total to adjust for strength of leitis against cataphracts
				)

				(defrule
				(or
					(civ-selected slavic)
					(civ-selected teutonic))
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy leitis numbers to 150% of total to adjust for strength of leitis against boyars and teutonic knights
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player lithuanians)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)

		;--------------
		;	Mameluke
		;--------------

			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				;Weight mamelukes because they are strong
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				=>
				(up-modify-goal g-temp-3 c:%* 150)
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit spearman)
				(up-research-status c: ri-pikeman == research-complete)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy mameluke numbers to 75% of total to adjust for weakness of mamelukes against pikemen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit archer)
					(goal g-primary-unit cavalry-archer))
				=>
				(up-modify-goal g-temp-3 c:%* 125)		;set enemy mameluke numbers to 125% of total to adjust for weakness of mamelukes against archers and cavalry archers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit skirmisher)
				=>
				(up-modify-goal g-temp-3 c:%* 140)		;set enemy mameluke numbers to 140% of total to adjust for weakness of mamelukes against archers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit scout-cavalry)
					(or
						(goal g-primary-unit knight)
						(or
							(goal g-primary-unit battle-elephant)
							(goal g-primary-unit steppe-lancer))))
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy mameluke numbers to 200% of total to adjust for strength of mamelukes against cavalry
				)

				(defrule
				(or
					(civ-selected hun)
					(or
						(civ-selected lithuanians)
						(or
							(civ-selected magyar)
							(or
								(civ-selected slavic)
								(or
									(civ-selected tatars)
									(civ-selected persian))))))
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 200)		;set enemy mameluke numbers to 200% of total to adjust for strength of mamelukes against tarkans, leitis, magyar huszars, boyars, war elephants, and keshiks
				)

				(defrule
				(or
					(civ-selected incan)
					(civ-selected italian))
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy mameluke numbers to 50% of total to adjust for weakness of mamelukes against teutonic knights
				)

				(defrule
				(civ-selected teutonic)
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy elephant numbers to 75% of total to adjust for weakness of elephants against spearmen
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player saracen)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)

		;---------------------
		;	Teutonic Knight
		;---------------------

			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-special-unique-unit-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == castle-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy MIDC-UNIQUE)		
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				(players-current-age target-player == imperial-age)
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy EARLYI-UNIQUE)		
				)

			;--------------------------------------------------------------------
			;	Check if Unique Units are the largest enemy worst enemy threat
			;--------------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit militiaman)
					(or
						(goal g-primary-unit spearman)
						(or
							(goal g-primary-unit eagle-warrior)
							(goal g-primary-unit condottiero))))
				=>
				(up-modify-goal g-temp-3 c:%* 165)		;set enemy teutonic knight numbers to 165% of total to adjust for strength of teutonic knights against swordsmen
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit archer)
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy teutonic knight numbers to 65% of total to adjust for weakness of teutonic knights against archers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit cavalry-archer)
					(or
						(goal g-primary-unit monk)
						(goal g-primary-unit missionary)))
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy teutonic knight numbers to 50% of total to adjust for weakness of teutonic knights against cavalry archers and monks
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit hand-cannoneer)
					(goal g-primary-unit slinger))
				=>
				(up-modify-goal g-temp-3 c:%* 35)		;set enemy teutonic knight numbers to 35% of total to adjust for weakness of teutonic knights against hand cannoneers and slingers
				)

				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit scout-cavalry)
					(or
						(goal g-primary-unit knight)
						(or
							(goal g-primary-unit camel)
							(or
								(goal g-primary-unit steppe-lancer)
								(goal g-primary-unit battle-elephant)))))
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy teutonic knight numbers to 150% of total to adjust for weakness of teutonic knights against cavalry
				)

				(defrule
				(or
					(civ-selected berbers)
					(or
						(civ-selected burmese)
						(or
							(civ-selected cumans)
							(or
								(civ-selected korean)
								(or
									(civ-selected mongol)
									(civ-selected spanish))))))
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 50)		;set enemy teutonic knight numbers to 50% of total to adjust for weakness of teutonic knights against cavalry archers
				)

				(defrule
				(or
					(civ-selected briton)
					(or
						(civ-selected chinese)
						(or
							(civ-selected indian)
							(or
								(civ-selected italian)
								(or
									(civ-selected khmer)
									(civ-selected lithuanians))))))
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy teutonic knight numbers to 65% of total to adjust for weakness of teutonic knights against archers and leitis
				)

				(defrule
				(or
					(civ-selected mayan)
					(or
						(civ-selected portuguese)
						(or
							(civ-selected turkish)
							(civ-selected vietnamese))))
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 65)		;set enemy teutonic knight numbers to 65% of total to adjust for weakness of teutonic knights against archers
				)

				(defrule
				(or
					(civ-selected berbers)
					(or
						(civ-selected celtic)
						(or
							(civ-selected frankish)
							(or
								(civ-selected gothic)
								(or
									(civ-selected incan)
									(civ-selected malay))))))
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 165)		;set enemy teutonic knight numbers to 50% of total to adjust for strength of teutonic knights against infantry
				)

				(defrule
				(civ-selected viking)
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 165)		;set enemy teutonic knight numbers to 50% of total to adjust for strength of teutonic knights against berserks
				)

				(defrule
				(or
					(civ-selected bulgarians)
					(or
						(civ-selected hun)
						(or
							(civ-selected magyar)
							(or
								(civ-selected slavic)
								(or
									(civ-selected tatars)
									(civ-selected malian))))))
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 150)		;set enemy teutonic knight numbers to 50% of total to adjust for strength of teutonic knights against cavalry
				)

				(defrule
				(or
					(civ-selected ethiopian)
					(or
						(civ-selected persian)
						(civ-selected saracen)))
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 120)		;set enemy teutonic knight numbers to 120% of total to adjust for strength of teutonic knights against shotel warriors, war elephants, and mamelukes
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(players-civ target-player teutonic)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-special-unique-unit-count)
				)

		;-----------
		;	Monks
		;-----------

			;-----------
			;	Setup
			;-----------

				(defrule
				(players-military-population target-player > 1)
				=>
				(up-modify-goal g-temp-3 g:= g-enemy-monks-count)
				)

			;-----------------------------------------------------------------------------
			;	Set enemy strategy goal if Unique Units are the largest enemy unit type
			;-----------------------------------------------------------------------------

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp g:= g-temp-3)
				(set-goal g-enemy-strategy FC-DEMON)		
				)

			;-------------------------------------------------------------
			;	Check if Monks are the largest enemy worst enemy threat
			;-------------------------------------------------------------

				;Confirm if unit type is the largest threat by weighting their numbers against our primary unit's strengths and weaknesses
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit archer)
					(or
						(goal g-primary-unit cavalry-archer)
						(or
							(goal g-primary-unit hand-cannoneer)
							(goal g-primary-unit slinger))))
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy monk numbers to 75% of total to adjust for weakness of monks against archers
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit archer)
				=>
				(up-modify-goal g-temp-3 c:%* 60)		;set enemy monk numbers to 60% of total to adjust for weakness of monks against scouts
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(or
					(goal g-primary-unit knight)
					(or
						(goal g-primary-unit camel)
						(goal g-primary-unit steppe-lancer)))
				=>
				(up-modify-goal g-temp-3 c:%* 160)		;set enemy monk numbers to 160% of total to adjust for strength of monks against knights
				)

				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit battle-elephant)
				=>
				(up-modify-goal g-temp-3 c:%* 250)		;set enemy monk numbers to 250% of total to adjust for strength of monks against battle elephants
				)

				(defrule
				(or
					(civ-selected byzantine)
					(or
						(civ-selected hun)
						(or
							(civ-selected lithuanians)
							(or
								(civ-selected magyar)
								(or
									(civ-selected slavic)
									(civ-selected tatars))))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 160)		;set enemy monk numbers to 160% of total to adjust for strength of monks against cavalry
				)

				(defrule
				(civ-selected teutonic)
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 180)		;set enemy monk numbers to 160% of total to adjust for strength of monks against teutonic knights
				)

				(defrule
				(or
					(civ-selected briton)
					(or
						(civ-selected burmese)
						(or
							(civ-selected chinese)
							(or
								(civ-selected cumans)
								(or
									(civ-selected italian)
									(civ-selected malian))))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy monk numbers to 160% of total to adjust for weakness of monks against archers
				)

				(defrule
				(or
					(civ-selected mongol)
					(or
						(civ-selected spanish)
						(or
							(civ-selected turkish)
							(civ-selected vietnamese))))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 75)		;set enemy monk numbers to 160% of total to adjust for weakness of monks against archers
				)

				(defrule
				(or
					(civ-selected indian)
					(or
						(civ-selected khmer)
						(civ-selected persian)))
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 > 0)
				(goal g-primary-unit my-unique-unit)
				=>
				(up-modify-goal g-temp-3 c:%* 250)		;set enemy monk numbers to 160% of total to adjust for strength of monks against elephants
				)

				;Store largest enemy military type in g-enemy-strategy, weighted by our primary unit
				(defrule
				(players-military-population target-player > 1)
				(up-compare-goal g-temp-3 g:> g-temp-2)	;enemy military count of current goal is largest so far
				=>
				(up-modify-goal g-temp-2 g:= g-temp-3)
				(set-goal g-primary-enemy-threat g-enemy-monks-count)
				)

;----------------------------------------------
;	GOALS 310-313: Recent Resources Gathered 
;----------------------------------------------

	(load "The General 3.1/Functions/Reset")

	;Track how many resources are gathered in 120 seconds
	(defrule
	(timer-triggered t-120-sec)
	=>
	(up-modify-goal g-temp g:= g-total-food-gathered)
	(up-get-fact resource-amount amount-food-total g-total-food-gathered)
	(up-modify-goal g-recent-food-gathered g:= g-total-food-gathered)
	(up-modify-goal g-recent-food-gathered g:- g-temp)
	(up-modify-goal g-temp g:= g-total-wood-gathered)
	(up-get-fact resource-amount amount-wood-total g-total-wood-gathered)
	(up-modify-goal g-recent-wood-gathered g:= g-total-wood-gathered)
	(up-modify-goal g-recent-wood-gathered g:- g-temp)
	)

	(defrule
	(timer-triggered t-120-sec)
	=>
	(up-modify-goal g-temp g:= g-total-stone-gathered)
	(up-get-fact resource-amount amount-stone-total g-total-stone-gathered)
	(up-modify-goal g-recent-stone-gathered g:= g-total-stone-gathered)
	(up-modify-goal g-recent-stone-gathered g:- g-temp)
	(up-modify-goal g-temp g:= g-total-gold-gathered)
	(up-get-fact resource-amount amount-gold-total g-total-gold-gathered)
	(up-modify-goal g-recent-gold-gathered g:= g-total-gold-gathered)
	(up-modify-goal g-recent-gold-gathered g:- g-temp)
	)



;------------------------------------
;	GOAL 321: g-barracks-next-unit
;------------------------------------

	(load "The General 3.1/Functions/Reset")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count barracks > 0)
	=>
	(set-goal g-barracks-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count barracks > 0)
	(up-object-type-count-total c: militiaman-line g:< g-desired-num-militia)
	=>
	(set-goal g-barracks-next-unit militiaman-line)
	(up-get-fact unit-type-count-total militiaman-line g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-militia)
	)
	
	(defrule
	(building-type-count barracks > 0)
	(up-object-type-count-total c: spearman-line g:< g-desired-num-spearman)
	(up-get-fact unit-type-count-total spearman-line g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-spearman)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-barracks-next-unit spearman-line)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count barracks > 0)
	(up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
	(up-modify-goal g-temp-2 g:= g-eagle-scout-line)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-eagle-warrior)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-barracks-next-unit eagle-warrior)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count barracks > 0)
	(up-object-type-count-total c: condottiero g:< g-desired-num-condottiero)
	(up-get-fact unit-type-count-total condottiero g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-condottiero)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-barracks-next-unit condottiero-placeholder)
	(up-modify-goal g-temp g:= g-temp-2)
	)

	#load-if-defined GOTHIC-CIV
	
		(defrule
		(research-completed my-unique-research) ;Anarchy
		(building-type-count barracks > 0)
		(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
		(up-modify-goal g-temp-2 g:= g-unique-unit-line)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-unique-unit)
		(up-compare-goal g-temp-2 g:< g-temp)
		=>
		(set-goal g-barracks-next-unit barracks-huskarl)
		(up-modify-goal g-temp g:= g-temp-2)
		)

	#end-if

;-----------------------------------------
;	GOAL 322: g-archery-range-next-unit
;-----------------------------------------

	(load "The General 3.1/Functions/Reset")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count archery-range > 0)
	=>
	(set-goal g-archery-range-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count archery-range > 0)
	(up-object-type-count-total c: archer-line g:< g-desired-num-archer)
	=>
	(set-goal g-archery-range-next-unit archer-line)
	(up-get-fact unit-type-count-total archer-line g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-archer)
	)
	
	(defrule
	(building-type-count archery-range > 0)
	(up-compare-goal g-skirmisher-line g:< g-desired-num-skirmisher)
	(up-modify-goal g-temp-2 g:= g-skirmisher-line)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-skirmisher)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-archery-range-next-unit skirmisher)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count archery-range > 0)
	(up-object-type-count-total c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
	(up-get-fact unit-type-count-total cavalry-archer-line g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-cavalry-archer)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-archery-range-next-unit cavalry-archer-line)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count archery-range > 0)
	(up-object-type-count-total c: hand-cannoneer g:< g-desired-num-hand-cannoneer)
	(up-get-fact unit-type-count-total hand-cannoneer g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-hand-cannoneer)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-archery-range-next-unit hand-cannoneer)
	(up-modify-goal g-temp g:= g-temp-2)
	)

	#load-if-defined INCAN-CIV
	
		(defrule
		(building-type-count archery-range > 0)
		(up-object-type-count-total c: slinger g:< g-desired-num-slinger)
		(up-get-fact unit-type-count-total slinger g-temp-2)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-slinger)
		(up-compare-goal g-temp-2 g:< g-temp)
		=>
		(set-goal g-archery-range-next-unit slinger)
		(up-modify-goal g-temp g:= g-temp-2)
		)

	#end-if
	
	(defrule
	(building-type-count archery-range > 0)
	(up-compare-goal g-genitour-line g:< g-desired-num-genitour)
	(up-modify-goal g-temp-2 g:= g-genitour-line)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-genitour)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-archery-range-next-unit genitour-placeholder)
	(up-modify-goal g-temp g:= g-temp-2)
	)

;----------------------------------
;	GOAL 323: g-stable-next-unit
;----------------------------------

	(load "The General 3.1/Functions/Reset")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count stable > 0)
	=>
	(set-goal g-stable-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count stable > 0)
	(up-object-type-count-total c: scout-cavalry-line g:< g-desired-num-scout-cavalry)
	=>
	(set-goal g-stable-next-unit scout-cavalry-line)
	(up-get-fact unit-type-count-total scout-cavalry-line g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-scout-cavalry)
	)
	
	(defrule
	(building-type-count stable > 0)
	(up-object-type-count-total c: knight-line g:< g-desired-num-knight)
	(up-get-fact unit-type-count-total knight-line g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-knight)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-stable-next-unit knight-line)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count stable > 0)
	(up-compare-goal g-camel-line g:< g-desired-num-camel)
	(up-modify-goal g-temp-2 g:= g-camel-line)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-camel)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-stable-next-unit camel)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count stable > 0)
	(up-compare-goal g-battle-elephant-line g:< g-desired-num-battle-elephant)
	(up-modify-goal g-temp-2 g:= g-battle-elephant-line)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-battle-elephant)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-stable-next-unit battle-elephant)
	(up-modify-goal g-temp g:= g-temp-2)
	)

	#load-if-defined DE-AVAILABLE
	
		(defrule
		(building-type-count stable > 0)
		(up-object-type-count-total c: steppe-lancer-line g:< g-desired-num-steppe-lancer)
		(up-get-fact unit-type-count-total steppe-lancer-line g-temp-2)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-steppe-lancer)
		(up-compare-goal g-temp-2 g:< g-temp)
		=>
		(set-goal g-stable-next-unit steppe-lancer-line)
		(up-modify-goal g-temp g:= g-temp-2)
		)

	#end-if

	#load-if-defined HUN-CIV
	
		(defrule
		(research-completed my-second-unique-research) ;Marauders
		(building-type-count stable > 0)
		(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
		(up-modify-goal g-temp-2 g:= g-unique-unit-line)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-unique-unit)
		(up-compare-goal g-temp-2 g:< g-temp)
		=>
		(set-goal g-stable-next-unit stable-tarkan)
		(up-modify-goal g-temp g:= g-temp-2)
		)

	#end-if

;------------------------------------------
;	GOAL 324: g-siege-workshop-next-unit
;------------------------------------------

	(load "The General 3.1/Functions/Reset")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count siege-workshop > 0)
	=>
	(set-goal g-siege-workshop-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count siege-workshop > 0)
	(up-object-type-count-total c: battering-ram-line g:< g-desired-num-battering-ram)
	=>
	(set-goal g-siege-workshop-next-unit battering-ram-line)
	(up-get-fact unit-type-count-total battering-ram-line g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-battering-ram)
	)
	
	(defrule
	(building-type-count siege-workshop > 0)
	(up-compare-goal g-mangonel-line g:< g-desired-num-mangonel)
	(up-modify-goal g-temp-2 g:= g-mangonel-line)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-mangonel)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-siege-workshop-next-unit mangonel)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count siege-workshop > 0)
	(up-object-type-count-total c: scorpion-line g:< g-desired-num-scorpion)
	(up-get-fact unit-type-count-total scorpion-line g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-scorpion)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-siege-workshop-next-unit scorpion-line)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count siege-workshop > 0)
	(up-object-type-count-total c: bombard-cannon g:< g-desired-num-bombard-cannon)
	(up-get-fact unit-type-count-total bombard-cannon g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-bombard-cannon)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-siege-workshop-next-unit bombard-cannon)
	(up-modify-goal g-temp g:= g-temp-2)
	)

;--------------------------------
;	GOAL 325: g-dock-next-unit
;--------------------------------

	(load "The General 3.1/Functions/Reset")

	;This goal controls which unit from the building we want to train next. If multiple units from the same building should be trained,
	;pick the soldier type that has the smallest percent of trained units out of the total desired number of units, because that is the
	;soldier type we need to train most. The training rules can override this goal in certain circumstances.

	(defrule
	(building-type-count dock > 0)
	=>
	(set-goal g-dock-next-unit 0)
	(set-goal g-temp 100)   ;used to track the percent trained out of total desired number of the current next unit to be trained. Set to 100% to start.
	)

	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: fishing-ship g:< g-desired-num-fishing-ship)
	=>
	(set-goal g-dock-next-unit fishing-ship)
	(up-get-fact unit-type-count-total fishing-ship g-temp)
	(up-modify-goal g-temp g:%/ g-desired-num-fishing-ship)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: transport-ship g:< g-desired-num-transport-ship)
	(up-get-fact unit-type-count-total transport-ship g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-transport-ship)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit transport-ship)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: trade-cog g:< g-desired-num-trade-cog)
	(up-get-fact unit-type-count-total trade-cog g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-trade-cog)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit trade-cog)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: galley-line g:< g-desired-num-galley)
	(up-get-fact unit-type-count-total galley-line g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-galley)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit galley-line)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-compare-goal g-fire-galley-line g:< g-desired-num-fire-ship)
	(up-modify-goal g-temp-2 g:= g-fire-galley-line)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-fire-ship)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit fire-ship-line)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-compare-goal g-demolition-raft-line g:< g-desired-num-demolition-ship)
	(up-modify-goal g-temp-2 g:= g-demolition-raft-line)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-demolition-ship)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit demolition-ship-line)
	(up-modify-goal g-temp g:= g-temp-2)
	)
	
	(defrule
	(building-type-count dock > 0)
	(up-object-type-count-total c: cannon-galleon-line g:< g-desired-num-cannon-galleon)
	(up-get-fact unit-type-count-total cannon-galleon-line g-temp-2)
	(up-modify-goal g-temp-2 g:%/ g-desired-num-cannon-galleon)
	(up-compare-goal g-temp-2 g:< g-temp)
	=>
	(set-goal g-dock-next-unit cannon-galleon-line)
	(up-modify-goal g-temp g:= g-temp-2)
	)

	#load-if-defined KOREAN-CIV
	
		(defrule
		(building-type-count dock > 0)
		(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
		(up-modify-goal g-temp-2 g:= g-unique-ship-line)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-unique-ship)
		(up-compare-goal g-temp-2 g:< g-temp)
		=>
		(set-goal g-dock-next-unit turtle-ship-line)
		(up-modify-goal g-temp g:= g-temp-2)
		)

	#end-if

	#load-if-defined PORTUGUESE-CIV
	
		(defrule
		(building-type-count dock > 0)
		(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
		(up-modify-goal g-temp-2 g:= g-unique-ship-line)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-unique-ship)
		(up-compare-goal g-temp-2 g:< g-temp)
		=>
		(set-goal g-dock-next-unit caravel)
		(up-modify-goal g-temp g:= g-temp-2)
		)

	#end-if

	#load-if-defined VIKING-CIV
	
		(defrule
		(building-type-count dock > 0)
		(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
		(up-modify-goal g-temp-2 g:= g-unique-ship-line)
		(up-modify-goal g-temp-2 g:%/ g-desired-num-unique-ship)
		(up-compare-goal g-temp-2 g:< g-temp)
		=>
		(set-goal g-dock-next-unit longboat-line)
		(up-modify-goal g-temp g:= g-temp-2)
		)

	#end-if

;------------------------------------------------------
;					GARRISON INSIDE
;	GOAL 326: g-previous-garrisonable-building-count
;------------------------------------------------------

	(load "The General 3.1/Functions/Reset")

	;g-temp = enemy military power inside town
	;g-temp-2 = own military power

	;Calculate attacking army parity
	;Adjust for knights and skirmishers
	(defrule
	(true)
	=>
	(up-get-fact enemy-units-in-town 0 g-temp)
	(up-get-fact unit-type-in-town knight-line g-temp-3)
	(up-modify-goal g-temp-3 c:/ 2)
	(up-modify-goal g-temp g:+ g-temp-3)			;treat enemy knights as 1.5 soldiers
	(up-get-fact soldier-count 0 g-temp-2)
	(up-get-fact unit-type-count knight-line g-temp-3)
	(up-modify-goal g-temp-3 c:/ 2)
	(up-modify-goal g-temp-2 g:+ g-temp-3)			;treat own knights as 1.5 soldiers
	)

	(defrule
	(up-compare-goal g-primary-unit != archer)
	(up-compare-goal g-primary-unit != cavalry-archer)
	(up-compare-goal g-primary-unit != hand-cannoneer)
	(up-compare-goal g-primary-unit != slinger)
	=>
	(up-get-fact unit-type-in-town skirmisher-line g-temp-3)
	(up-modify-goal g-temp-3 c:/ 2)
	(up-modify-goal g-temp g:- g-temp-3)			;treat enemy skirmishers as 0.5 soldiers
	)

	;Garrison new units inside buildings if we have small military
	(defrule
	(goal g-gather-inside NO)
	(goal g-attacking NO)
	(or
		(up-compare-goal g-enemy-units-in-town >= 4)
		(goal g-enemy-units-in-town 0))
	(soldier-count < 5)
	=>
	(set-goal g-gather-inside YES)
	(up-gather-inside c: monastery c: 1)
	(up-gather-inside c: barracks c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: siege-workshop c: 1)
	(up-gather-inside c: castle c: 1)
	)

	;Garrison new units inside buildings if we are attacked and outnumbered
	(defrule
	(goal g-gather-inside NO)
	(goal g-town-under-attack YES)
	(up-compare-goal g-enemy-units-in-town >= 6)
	(soldier-count < 12)
	(or
		(up-compare-goal g-enemy-units-in-town >= 25)
		(soldier-count < 8))
	(up-compare-goal g-temp g:> g-temp-2)	;Enemy outnumbers us
	=>
	(set-goal g-gather-inside YES)
	(up-gather-inside c: monastery c: 1)
	(up-gather-inside c: barracks c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: siege-workshop c: 1)
	(up-gather-inside c: castle c: 1)
	)
	
	;Set new buildings to also garrison units
	;Check if new garrisonable building exists, if so, set gather point
	(defrule
	(true)
	=>
	(up-get-fact building-type-count monastery g-temp-3)
	(up-get-fact building-type-count barracks g-temp-4)
	(up-modify-goal g-temp-3 g:+ g-temp-4)
	(up-get-fact building-type-count archery-range g-temp-4)
	(up-modify-goal g-temp-3 g:+ g-temp-4)
	(up-get-fact building-type-count stable g-temp-4)
	(up-modify-goal g-temp-3 g:+ g-temp-4)
	(up-get-fact building-type-count siege-workshop g-temp-4)
	(up-modify-goal g-temp-3 g:+ g-temp-4)
	(up-get-fact building-type-count castle g-temp-4)
	(up-modify-goal g-temp-3 g:+ g-temp-4)
	)

	(defrule
	(up-compare-goal g-temp-3 g:!= g-previous-garrisonable-building-count)	;the number of garrisonable buildings has changed, reset gather points
	(goal g-gather-inside YES)
	=>
	(up-gather-inside c: monastery c: 1)
	(up-gather-inside c: barracks c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: siege-workshop c: 1)
	(up-gather-inside c: castle c: 1)
	)

	;Ungarrison
	(defrule
	(goal g-attacking NO)
	(or
		(up-compare-goal g-enemy-units-in-town >= 4)
		(goal g-enemy-units-in-town 0))
	(soldier-count < 5)
	=>
	(up-jump-rule 2)
	)
	
	(defrule
	(goal g-town-under-attack YES)
	(up-compare-goal g-enemy-units-in-town >= 6)
	(soldier-count < 12)
	(or
		(up-compare-goal g-enemy-units-in-town >= 25)
		(soldier-count < 8))
	(up-compare-goal g-temp g:> g-temp-2)	;Enemy outnumbers us
	=>
	(up-jump-rule 1)
	)

		(defrule
		(goal g-gather-inside YES)
		=>
		(set-goal g-gather-inside NO)
		(up-gather-inside c: barracks c: 0)
		(up-gather-inside c: archery-range c: 0)
		(up-gather-inside c: stable c: 0)
		(up-gather-inside c: siege-workshop c: 0)
		(up-gather-inside c: castle c: 0)
		(up-gather-inside c: monastery c: 0)
		(up-ungarrison c: barracks)
		(up-ungarrison c: archery-range)
		(up-ungarrison c: stable)
		(up-ungarrison c: siege-workshop)
		(up-ungarrison c: castle)
		(up-ungarrison c: monastery)
		)
	
	(defrule
	(goal g-gather-inside YES)
	(up-unit-type-in-town c: skirmisher-line > 5)
	(or
		(unit-type-count scout-cavalry-line >= 4)
		(and
			(up-unit-type-in-town c: skirmisher-line < 10)
			(unit-type-count scout-cavalry-line >= 2)))
	=>
	(up-ungarrison c: stable)
	)
	
	(defrule
	(goal g-gather-inside YES)
	(up-unit-type-in-town c: skirmisher-line > 5)
	(or
		(unit-type-count knight-line >= 4)
		(and
			(up-unit-type-in-town c: skirmisher-line < 10)
			(unit-type-count knight-line >= 2)))
	=>
	(up-ungarrison c: stable)
	)

	(defrule
	(goal g-gather-inside YES)
	(up-unit-type-in-town c: skirmisher-line > 5)
	(or
		(up-compare-goal g-eagle-scout-line >= 4)
		(and
			(up-unit-type-in-town c: skirmisher-line < 10)
			(up-compare-goal g-eagle-scout-line >= 2)))
	=>
	(up-ungarrison c: barracks)
	)

	(defrule
	(goal g-gather-inside YES)
	(up-unit-type-in-town c: knight-line > 3)
	(up-unit-type-in-town c: knight-line < 12)
	(or
		(unit-type-count spearman-line >= 6)
		(and
			(up-unit-type-in-town c: knight-line < 7)
			(unit-type-count spearman-line >= 4)))
	=>
	(up-ungarrison c: barracks)
	)

	(defrule
	(goal g-gather-inside YES)
	(up-unit-type-in-town c: knight-line > 3)
	(up-unit-type-in-town c: knight-line < 12)
	(or
		(up-compare-goal g-camel-line >= 5)
		(and
			(up-unit-type-in-town c: knight-line < 7)
			(up-compare-goal g-camel-line >= 3)))
	=>
	(up-ungarrison c: stable)
	)

	#load-if-defined SARACEN-CIV

		(defrule
		(goal g-gather-inside YES)
		(up-unit-type-in-town c: knight-line > 3)
		(up-unit-type-in-town c: knight-line < 12)
		(or
			(up-compare-goal g-unique-unit-line >= 5)
			(and
				(up-unit-type-in-town c: knight-line < 7)
				(up-compare-goal g-unique-unit-line >= 3)))
		=>
		(up-ungarrison c: castle)
		)
		
	#end-if

	;Re-calculate number of garrisonable buildings for next pass
	(defrule
	(true)
	=>
	(up-get-fact building-type-count monastery g-previous-garrisonable-building-count)
	(up-get-fact building-type-count barracks g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	(up-get-fact building-type-count archery-range g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	(up-get-fact building-type-count stable g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	(up-get-fact building-type-count siege-workshop g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	(up-get-fact building-type-count castle g-temp)
	(up-modify-goal g-previous-garrisonable-building-count g:+ g-temp)
	)

;-----------------------------------
;	GOAL 329: g-usable-farm-count
;-----------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(building-type-count farm == 0)
	(up-compare-goal g-usable-farm-count > 0)
	=>
	(set-goal g-usable-farm-count 0)
	)

	(defrule
	(building-type-count farm > 0)
	=>
	(up-full-reset-search)
	(up-find-local c: farm c: 240)
	(set-goal i 0)
	(up-get-search-state g-local-total)
	(up-modify-goal g-usable-farm-count g:= g-local-total)
	)

		(defrule
		(building-type-count farm > 0)
		(up-compare-goal i g:< g-local-total)
		(up-set-target-object search-local g: i)
		=>
		(up-get-point position-object g-point-x)
		(up-set-target-point g-point-x)
		(set-strategic-number sn-focus-player-number my-player-number)
		(up-reset-search 0 0 1 1)
		(up-reset-filters)
		(up-filter-distance c: -1 c: 12)
		(up-find-remote c: town-center c: 20)
		(up-find-remote c: mill c: 20)
		(up-get-search-state g-local-total)
		)

		(defrule
		(building-type-count farm > 0)
		(up-compare-goal i g:< g-local-total)
		(up-set-target-object search-local g: i)
		(goal g-remote-total 0)
		=>
		(up-modify-goal g-usable-farm-count c:- 1)
		)

		(defrule
		(building-type-count farm > 0)
		(up-compare-goal i g:< g-local-total)
		(up-set-target-object search-local g: i)
		=>
		(up-modify-goal i c:+ 1)
		(up-jump-rule -3)
		)

;-----------------------------------------
;	GOAL 330: g-usable-farm-count-total
;-----------------------------------------

	(load "The General 3.1/Functions/Reset")

	(defrule
	(building-type-count-total farm > 0)
	=>
	(up-get-fact building-type-count farm g-temp)
	(up-get-fact building-type-count-total farm g-temp-2)
	(up-modify-goal g-temp-2 g:- g-temp)
	(up-modify-goal g-usable-farm-count-total g:= g-usable-farm-count)
	(up-modify-goal g-usable-farm-count-total g:+ g-temp-2)
	)

;-----------------------------------------
;	GOAL 331: g-current-gold-camp-total
;-----------------------------------------

	(load "The General 3.1/Functions/Reset")
	
	(defrule
	(building-type-count-total mining-camp > 0)
	=>
	(up-full-reset-search)
	(up-find-local c: mining-camp c: 100)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: mining-camp c: 5)
	(up-clean-search search-local -1 search-order-asc)	;remove duplicates just in case
	(up-get-search-state g-local-total)
	(set-goal i 0)
	(set-goal g-current-gold-camp-total 0)
	)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal i g:< g-local-total)
		(up-set-target-object search-local g: i)
		=>
		(up-get-point position-object g-point-x)
		(up-set-target-point g-point-x)
		(up-reset-search 0 0 1 1)
		(up-reset-filters)
		(up-filter-distance c: -1 c: 6)
		(up-filter-status c: status-resource c: list-active)
		(up-find-resource c: gold c: 1)
		(up-get-search-state g-local-total)
		)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal i g:< g-local-total)
		(up-set-target-object search-local g: i)
		(up-compare-goal g-remote-total > 0)            ;gold mines found
		=>
		(up-modify-goal g-current-gold-camp-total c:+ 1)
		)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal i g:< g-local-total)
		(up-set-target-object search-local g: i)
		=>
		(up-modify-goal i c:+ 1)
		(up-jump-rule -3)
		)

;-----------------------------------------
;	GOAL 332: g-current-stone-camp-total
;-----------------------------------------

	(load "The General 3.1/Functions/Reset")
	
	(defrule
	(building-type-count-total mining-camp > 0)
	=>
	(up-full-reset-search)
	(up-find-local c: mining-camp c: 100)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: mining-camp c: 5)
	(up-clean-search search-local -1 search-order-asc)	;remove duplicates just in case
	(up-get-search-state g-local-total)
	(set-goal i 0)
	(set-goal g-current-stone-camp-total 0)
	)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal i g:< g-local-total)
		(up-set-target-object search-local g: i)
		=>
		(up-get-point position-object g-point-x)
		(up-set-target-point g-point-x)
		(up-reset-search 0 0 1 1)
		(up-reset-filters)
		(up-filter-distance c: -1 c: 6)
		(up-filter-status c: status-resource c: list-active)
		(up-find-resource c: stone c: 1)
		(up-get-search-state g-local-total)
		)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal i g:< g-local-total)
		(up-set-target-object search-local g: i)
		(up-compare-goal g-remote-total > 0)            ;stone mines found
		=>
		(up-modify-goal g-current-stone-camp-total c:+ 1)
		)

		(defrule
		(building-type-count-total mining-camp > 0)
		(up-compare-goal i g:< g-local-total)
		(up-set-target-object search-local g: i)
		=>
		(up-modify-goal i c:+ 1)
		(up-jump-rule -3)
		)