;Needed Resources.per

(defrule
(true)
=>
(up-modify-goal g-town-hall-idle-time-left c:= 10000)
(up-modify-goal g-dock-idle-time-left c:= 10000)
(up-modify-goal g-blacksmith-idle-time-left c:= 10000)
(up-modify-goal g-market-idle-time-left c:= 10000)
(up-modify-goal g-monastery-idle-time-left c:= 10000)
(up-modify-goal g-barracks-idle-time-left c:= 10000)
(up-modify-goal g-archery-range-idle-time-left c:= 10000)
(up-modify-goal g-stable-idle-time-left c:= 10000)
(up-modify-goal g-siege-workshop-idle-time-left c:= 10000)
(up-modify-goal g-outpost-idle-time-left c:= 10000)
(up-modify-goal g-castle-idle-time-left c:= 10000)
(up-reset-cost-data g-needed-food-100-sec)
(up-reset-cost-data g-remaining-needed-food)
(up-reset-cost-data g-temp-food-cost)
)

;========<<<<NEW BUILDINGS>>>>========

;====House

(defrule
(not	(research-completed ri-treadmill-crane))
=>
(up-modify-goal g-num-train-per-time-interval c:= 10000)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ HOUSE-TIME)
)

(defrule
(research-completed ri-treadmill-crane)
=>
(up-modify-goal g-num-train-per-time-interval c:= 10000)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ HOUSE-TIME)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ 130)
)

;Figure out how many new houses needed
(defrule
(true)
=>
(up-modify-goal g-temp g:= g-desired-num-house)
(up-get-fact building-type-count-total house g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)
(up-modify-goal g-temp c:* 100)
;(up-chat-data-to-all "Houses needed: %d" g: g-temp)
)

;More houses than needed, set needed number to 0.
(defrule
(up-compare-goal g-temp < 0)
=>
(up-modify-goal g-temp c:= 0)
)

;If the number of additional houses is greater than or equal to the
;number of houses that can be built in the time interval, add the
;cost of the houses to the amount of needed resources.
(defrule
(up-compare-goal g-temp g:>= g-num-train-per-time-interval)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: house g: g-num-train-per-time-interval)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
;(up-chat-data-to-all "Wood needed: %d" g: g-needed-wood-100-sec)
)

;If the number of additional houses is less than the number of houses
;that can be built in the time interval, add the cost of the houses to
;the amount of needed resources.
(defrule
(up-compare-goal g-temp g:< g-num-train-per-time-interval)
(up-compare-goal g-temp c:> 0)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: house g: g-temp)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
;(up-chat-data-to-all "Wood needed 2: %d" g: g-needed-wood-100-sec)
)



;====Mill

(defrule
(not	(research-completed ri-treadmill-crane))
=>
(up-modify-goal g-num-train-per-time-interval c:= 10000)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ MILL-TIME)
;(up-chat-data-to-all "Interval: %d" c: MILL-TIME)
)

(defrule
(research-completed ri-treadmill-crane)
=>
(up-modify-goal g-num-train-per-time-interval c:= 10000)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ MILL-TIME)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ 130)
;(up-chat-data-to-all "Interval: %d" g: g-num-train-per-time-interval)
)

;Figure out how many new mills needed
(defrule
(true)
=>
(up-modify-goal g-temp g:= g-desired-num-mill)
(up-get-fact building-type-count-total mill g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)
(up-modify-goal g-temp c:* 100)
;(up-chat-data-to-all "Mills needed: %d" g: g-temp)
)

;More mills than needed, set needed number to 0.
(defrule
(up-compare-goal g-temp < 0)
=>
(up-modify-goal g-temp c:= 0)
)


;If the number of additional mills is greater than or equal to the
;number of mills that can be built in the time interval, add the
;cost of the mills to the amount of needed resources.
(defrule
(up-compare-goal g-temp g:>= g-num-train-per-time-interval)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: mill g: g-num-train-per-time-interval)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
;(up-chat-data-to-all "Wood needed: %d" g: g-needed-wood-100-sec)
)

;If the number of additional mills is less than the number of mills
;that can be built in the time interval, add the cost of the mills to
;the amount of needed resources.
(defrule
(up-compare-goal g-temp g:< g-num-train-per-time-interval)
(up-compare-goal g-temp c:> 0)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: mill g: g-temp)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
;(up-chat-data-to-all "Wood needed 2: %d" g: g-needed-wood-100-sec)
)



;====Lumber Camp

(defrule
(not	(research-completed ri-treadmill-crane))
=>
(up-modify-goal g-num-train-per-time-interval c:= 10000)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ LUMBER-CAMP-TIME)
;(up-chat-data-to-all "Interval: %d" g: g-num-train-per-time-interval)
)

(defrule
(research-completed ri-treadmill-crane)
=>
(up-modify-goal g-num-train-per-time-interval c:= 10000)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ LUMBER-CAMP-TIME)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ 130)
;(up-chat-data-to-all "Interval: %d" g: g-num-train-per-time-interval)
)

;Figure out how many new lumber camps needed
(defrule
(true)
=>
(up-modify-goal g-temp g:= g-desired-num-lumber-camp)
(up-get-fact building-type-count-total lumber-camp g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)
(up-modify-goal g-temp c:* 100)
;(up-chat-data-to-all "LCs needed: %d" g: g-temp)
)

;More lumber camps than needed, set needed number to 0.
(defrule
(up-compare-goal g-temp < 0)
=>
(up-modify-goal g-temp c:= 0)
)


;If the number of additional LCs is greater than or equal to the
;number of LCs that can be built in the time interval, add the
;cost of the LCs to the amount of needed resources.
(defrule
(up-compare-goal g-temp g:>= g-num-train-per-time-interval)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: lumber-camp g: g-num-train-per-time-interval)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
;(up-chat-data-to-all "Wood needed: %d" g: g-needed-wood-100-sec)
)

;If the number of additional LCs is less than the number of LCs
;that can be built in the time interval, add the cost of the LCs to
;the amount of needed resources.
(defrule
(up-compare-goal g-temp g:< g-num-train-per-time-interval)
(up-compare-goal g-temp c:> 0)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: lumber-camp g: g-temp)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
;(up-chat-data-to-all "Wood needed 2: %d" g: g-needed-wood-100-sec)
)







;========<<<<UNITS AND TECHS AT EACH BUILDING>>>>========

;====Town Hall

#load-if-not-defined CELTIC-CIV		;Not Aldoria

;Loom

(defrule
(or	(up-compare-goal g-boar-hunt-status >= PREPARE)
	(up-object-type-count c: peasant g:>= g-desired-num-peasant))
=>
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-research-cost c: ri-loom c: 1)
(up-modify-goal g-town-hall-idle-time-left c:- LOOM-TIME)
)

;Fief

(defrule
(up-object-type-count c: peasant g:>= g-desired-num-peasant)
=>
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-research-cost c: fief c: 1)
(up-modify-goal g-town-hall-idle-time-left c:- FIEF-TIME)
)

;Peasants

;Calculate the number of peasants that can be trained in the remaining
;time interval that isn't reserved for techs.
(defrule
(true)
=>
(up-modify-goal g-num-train-per-time-interval g:= g-town-hall-idle-time-left)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ PEASANT-TIME)
)

;Find the difference between the desired number of peasants and the current
;number of peasants to get the number of additional needed peasants.
(defrule
(true)
=>
(up-modify-goal g-temp g:= g-desired-num-peasant)
(up-get-fact unit-type-count-total peasant g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)
(up-modify-goal g-temp c:* 100)
)

;More peasants than needed, set needed number to 0.
(defrule
(up-compare-goal g-temp < 0)
=>
(up-modify-goal g-temp c:= 0)
)

;If the number of additional peasants is greater than or equal to the
;number of peasants that can be trained in the time interval, add the
;cost of the peasants to the amount of needed resources.
(defrule
(up-compare-goal g-temp g:>= g-num-train-per-time-interval)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: peasant g: g-num-train-per-time-interval)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
)

;If the number of additional peasants is less than the number of peasants
;that can be trained in the time interval, add the cost of the peasants to
;the amount of needed resources.
(defrule
(up-compare-goal g-temp g:< g-num-train-per-time-interval)
(up-compare-goal g-temp c:> 0)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: peasant g: g-temp)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
)

#else								;Aldoria

;Loom

(defrule
(current-age == settlement)
(or	(up-compare-goal g-boar-hunt-status >= PREPARE)
	(up-object-type-count c: peasant g:>= g-desired-num-peasant))
=>
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-research-cost c: ri-loom c: 1)
(up-modify-goal g-town-hall-idle-time-left c:- LOOM-TIME)
)

(defrule
(current-age == fief)
(or	(up-compare-goal g-boar-hunt-status >= PREPARE)
	(up-object-type-count c: peasant g:>= g-desired-num-peasant))
=>
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-research-cost c: ri-loom c: 1)
(up-modify-goal g-temp c:= LOOM-TIME)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp c:/ 110)
(up-modify-goal g-town-hall-idle-time-left g:- g-temp)
)

(defrule
(current-age == shire)
(or	(up-compare-goal g-boar-hunt-status >= PREPARE)
	(up-object-type-count c: peasant g:>= g-desired-num-peasant))
=>
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-research-cost c: ri-loom c: 1)
(up-modify-goal g-temp c:= LOOM-TIME)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp c:/ 115)
(up-modify-goal g-town-hall-idle-time-left g:- g-temp)
)

(defrule
(current-age == earldom)
(or	(up-compare-goal g-boar-hunt-status >= PREPARE)
	(up-object-type-count c: peasant g:>= g-desired-num-peasant))
=>
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-research-cost c: ri-loom c: 1)
(up-modify-goal g-temp c:= LOOM-TIME)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp c:/ 120)
(up-modify-goal g-town-hall-idle-time-left g:- g-temp)
)

;Fief

(defrule
(up-object-type-count c: peasant g:>= g-desired-num-peasant)
=>
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-research-cost c: fief c: 1)
(up-modify-goal g-town-hall-idle-time-left c:- FIEF-TIME)
)

;Peasants

;Calculate the number of peasants that can be trained in the remaining
;time interval that isn't reserved for techs.
(defrule
(current-age == settlement)
=>
(up-modify-goal g-num-train-per-time-interval g:= g-town-hall-idle-time-left)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ PEASANT-TIME)
)

(defrule
(current-age == fief)
=>
(up-modify-goal g-num-train-per-time-interval g:= g-town-hall-idle-time-left)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ PEASANT-TIME)
(up-modify-goal g-num-train-per-time-interval c:* 110)
(up-modify-goal g-num-train-per-time-interval c:/ 100)
)

(defrule
(current-age == shire)
=>
(up-modify-goal g-num-train-per-time-interval g:= g-town-hall-idle-time-left)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ PEASANT-TIME)
(up-modify-goal g-num-train-per-time-interval c:* 115)
(up-modify-goal g-num-train-per-time-interval c:/ 100)
)

(defrule
(current-age == earldom)
=>
(up-modify-goal g-num-train-per-time-interval g:= g-town-hall-idle-time-left)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ PEASANT-TIME)
(up-modify-goal g-num-train-per-time-interval c:* 120)
(up-modify-goal g-num-train-per-time-interval c:/ 100)
)

;Find the difference between the desired number of peasants and the current
;number of peasants to get the number of additional needed peasants.
(defrule
(true)
=>
(up-modify-goal g-temp g:= g-desired-num-peasant)
(up-get-fact unit-type-count-total peasant g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)
(up-modify-goal g-temp c:* 100)
)

;More peasants than needed, set needed number to 0.
(defrule
(up-compare-goal g-temp < 0)
=>
(up-modify-goal g-temp c:= 0)
)

;If the number of additional peasants is greater than or equal to the
;number of peasants that can be trained in the time interval, add the
;cost of the peasants to the amount of needed resources.
(defrule
(up-compare-goal g-temp g:>= g-num-train-per-time-interval)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: peasant g: g-num-train-per-time-interval)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
)

;If the number of additional peasants is less than the number of peasants
;that can be trained in the time interval, add the cost of the peasants to
;the amount of needed resources.
(defrule
(up-compare-goal g-temp g:< g-num-train-per-time-interval)
(up-compare-goal g-temp c:> 0)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: peasant g: g-temp)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
)

#end-if