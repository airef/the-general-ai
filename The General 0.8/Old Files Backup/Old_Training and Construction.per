;Training and Construction.per

;Mills

(defrule
(or	(game-time > 30)
	(unit-type-count villager-forager > 2))
(resource-found food)
(or	(unit-type-count sheep <= 2)
	(unit-type-count villager-shepherd >= 6))
(or	(up-compare-goal g-boar-hunt-status <= DONE-GATHERING-BOAR)	;done gathering or boar gathering is off
	(unit-type-count villager-hunter >= 5))
(building-type-count-total mill == 0)
(up-pending-objects c: mill == 0)
(can-build mill)
=>
(up-modify-sn sn-allow-adjacent-dropsites c:= 0)
(build mill)
)

;Lumber Camps

(defrule
(game-time > 30)
(resource-found wood)
(building-type-count-total mill > 0)
(building-type-count lumber-camp == 0)
(up-pending-objects c: lumber-camp == 0)
(can-build lumber-camp)
=>
(up-modify-sn sn-allow-adjacent-dropsites c:= 1)
(build lumber-camp)
)

;Houses

;get number of additional houses needed
(defrule
(true)
=>
(up-modify-goal g-temp g:= g-desired-num-house)
(up-get-fact building-type-count-total house g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)
;(up-chat-data-to-all "House: %d" g: g-temp)
)

(defrule
(up-compare-goal g-temp < 0)
=>
(up-modify-goal g-temp c:= 0)
)

(defrule
(up-object-type-count-total c: house g:< g-desired-num-house)
(can-build house)
(up-pending-objects c: house g:< g-temp)
=>
(build house)
(chat-to-all "Build House")
)

;Farms

;get number of additional farms needed
(defrule
(true)
=>
(up-modify-goal g-temp g:= g-desired-num-farm)
(up-get-fact building-type-count-total farm g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)
;(up-chat-data-to-all "Farm: %d" g: g-temp)
)

(defrule
(up-compare-goal g-temp < 0)
=>
(up-modify-goal g-temp c:= 0)
)

(defrule
(up-object-type-count-total c: farm g:< g-desired-num-farm)
(can-build farm)
(up-pending-objects c: farm g:< g-temp)
(or	(wood-amount > 160)
	(building-type-count-total lumber-camp > 0))
=>
(build farm)
(chat-to-all "Build Farm")
)

;Loom

(defrule
(or	(up-compare-goal g-boar-hunt-status >= PREPARE)
	(or	(up-object-type-count c: peasant g:>= g-desired-num-peasant)
		(town-under-attack)))
=>
(research ri-loom)
)

;Peasants

(defrule
(up-object-type-count-total c: peasant g:< g-desired-num-peasant)
(can-train peasant)
=>
(train peasant)
)
