;Gathering Percentages.per

;========<<<<Calculate Gathering Percentages>>>>========

(defrule
(true)
=>
(up-modify-goal g-num-food-peasants c:= 0)
(up-modify-goal g-num-wood-peasants c:= 0)
(up-modify-goal g-num-gold-peasants c:= 0)
(up-modify-goal g-num-stone-peasants c:= 0)
(up-modify-goal g-num-shepherds c:= 0)
(up-modify-goal g-num-foragers c:= 0)
(up-modify-goal g-num-deer-hunters c:= 0)
(up-modify-goal g-num-boar-hunters c:= 0)
(up-modify-goal g-num-farmers c:= 0)
(up-modify-goal g-desired-num-farm c:= 0)
(up-get-fact unit-type-count peasant g-current-num-peasants)
;(up-chat-data-to-all "Starting num: %d" g: g-remaining-gatherers)
)

;Calculate how much of each resource is lacking
(defrule
(true)
=>
(up-setup-cost-data 1 g-delta-food-cost)
(up-add-cost-data g-needed-food-100-sec c: 1)
(up-get-cost-delta g-delta-food-cost)
)

;If we have more resources than we need, then a positive number is
;returned, so we set the needed amount of these resources to 0.
(defrule
(up-compare-goal g-delta-food-cost > 0)
=>
(up-modify-goal g-delta-food-cost c:= 0)
)

(defrule
(up-compare-goal g-delta-wood-cost > 0)
=>
(up-modify-goal g-delta-wood-cost c:= 0)
)

(defrule
(up-compare-goal g-delta-stone-cost > 0)
=>
(up-modify-goal g-delta-stone-cost c:= 0)
)

(defrule
(up-compare-goal g-delta-gold-cost > 0)
=>
(up-modify-goal g-delta-gold-cost c:= 0)
)

;If the amount of resources we need in 100 seconds is more
;than the amount of resources available, a negative number is
;returned. So, multiply by -100 to get 100 times more than
;the remaining resources we need to collect in 100 seconds.
(defrule
(up-compare-goal g-delta-food-cost < 0)
=>
(up-modify-goal g-delta-food-cost c:* -100)
)

(defrule
(up-compare-goal g-delta-wood-cost < 0)
=>
(up-modify-goal g-delta-wood-cost c:* -100)
)

(defrule
(up-compare-goal g-delta-gold-cost < 0)
=>
(up-modify-goal g-delta-gold-cost c:* -100)
)

(defrule
(up-compare-goal g-delta-stone-cost < 0)
=>
(up-modify-goal g-delta-stone-cost c:* -100)
)

(defrule
(true)
=>
(up-setup-cost-data 1 g-remaining-needed-food)
(up-add-cost-data g-delta-food-cost c: 1)
)



;====FISHING-SHIPS

;Figure out how much needed food needs to be gathered by remaining food sources
(defrule
(unit-type-count-total fishing-ship > 0)
=>
(up-modify-goal g-temp g:= g-current-num-fishing-ships)
(up-modify-goal g-temp g:* g-fish-per-sec)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-remaining-needed-food g:- g-temp)
;(up-chat-data-to-all "Remaining after fishing ships: %d" g: g-remaining-needed-food)
)

(defrule
(up-compare-goal g-remaining-needed-food < 0)
=>
(up-modify-goal g-remaining-needed-food c:= 0)
)



;====SHEEP

;Calculate how many shepherds it would take to gather
;the needed food
(defrule
(or	(unit-type-count sheep > 0)
	(unit-type-count villager-shepherd > 0))
(up-compare-goal g-sheep-per-sec != -1)
(up-compare-goal g-remaining-needed-food > 0)
=>
(up-modify-goal g-temp g:= g-remaining-needed-food)
(up-modify-goal g-temp c:/ 100)		;divide by 100 to get amount needed/sec
(up-modify-goal g-temp g:z/ g-sheep-per-sec)
(up-modify-goal g-temp c:+ 1)	;add one for always rounding down
(up-modify-goal g-num-shepherds g:= g-temp)
)

;If the number of desired shepherds exceeds the set maximum number
;of shepherds, set it to the maximum number of shepherds
(defrule
(up-compare-goal g-remaining-needed-food > 0)
(up-compare-goal g-num-shepherds > MAX-SHEPHERDS)
=>
(up-modify-goal g-num-shepherds c:= MAX-SHEPHERDS)
)

;If the number of desired shepherds exceeds the number of peasants,
;cap the number of shepherds to the total number of peasants
(defrule
(up-compare-goal g-remaining-needed-food > 0)
(up-compare-goal g-num-shepherds g:> g-current-num-peasants)
=>
(up-modify-goal g-num-shepherds g:= g-current-num-peasants)
)

;Figure out how much needed food needs to be gathered by remaining food sources
(defrule
(up-compare-goal g-remaining-needed-food > 0)
=>
(up-modify-goal g-temp g:= g-num-shepherds)
(up-modify-goal g-temp g:* g-sheep-per-sec)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-remaining-needed-food g:- g-temp)
;(up-chat-data-to-all "Remaining after sheep: %d" g: g-remaining-needed-food)
)

(defrule
(up-compare-goal g-remaining-needed-food < 0)
=>
(up-modify-goal g-remaining-needed-food c:= 0)
)



;====BOAR

;Calculate how many boar hunters it would take to gather
;the needed food
(defrule
(up-compare-goal g-boar-per-sec != -1)
(up-compare-goal g-boar-hunt-status >= GATHER-FIRST-BOAR)
(up-compare-goal g-remaining-needed-food > 0)
=>
(up-modify-goal g-temp g:= g-remaining-needed-food)
(up-modify-goal g-temp c:/ 100)		;divide by 100 to get amount needed/sec
(up-modify-goal g-temp g:z/ g-boar-per-sec)
(up-modify-goal g-temp c:+ 1)	;add one for always rounding down
(up-modify-goal g-num-boar-hunters g:= g-temp)
)

;If the number of desired boar hunters exceeds the set maximum number
;of boar hunters, set it to the maximum number of boar hunters.
(defrule
(up-compare-goal g-remaining-needed-food > 0)
(up-compare-goal g-num-boar-hunters > MAX-BOAR-HUNTERS)
=>
(up-modify-goal g-num-boar-hunters c:= MAX-BOAR-HUNTERS)
)

;If the number of desired boar hunters exceeds the number of peasants,
;cap the number of boar hunters to the total number of peasants
(defrule
(up-compare-goal g-remaining-needed-food > 0)
(up-compare-goal g-num-boar-hunters g:> g-current-num-peasants)
=>
(up-modify-goal g-num-boar-hunters g:= g-current-num-peasants)
)

;Figure out how much needed food needs to be gathered by remaining food sources
(defrule
(up-compare-goal g-remaining-needed-food > 0)
=>
(up-modify-goal g-temp g:= g-num-boar-hunters)
(up-modify-goal g-temp g:* g-boar-per-sec)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-remaining-needed-food g:- g-temp)
;(up-chat-data-to-all "Remaining after boar: %d" g: g-remaining-needed-food)
)

(defrule
(up-compare-goal g-remaining-needed-food < 0)
=>
(up-modify-goal g-remaining-needed-food c:= 0)
)



;====DEER

;Calculate how many deer hunters it would take to gather
;the needed food
(defrule
(up-compare-goal g-deer-per-sec != -1)
(up-compare-goal g-deer-hunt-status >= GATHER-MILLED-DEER)
(up-compare-goal g-remaining-needed-food > 0)
=>
(up-modify-goal g-temp g:= g-remaining-needed-food)
(up-modify-goal g-temp c:/ 100)		;divide by 100 to get amount needed/sec
(up-modify-goal g-temp g:z/ g-deer-per-sec)
(up-modify-goal g-temp c:+ 1)	;add one for always rounding down
(up-modify-goal g-num-deer-hunters g:= g-temp)
)

;If the number of desired deer hunters exceeds the set maximum number
;of deer hunters, set it to the maximum number of deer hunters.
(defrule
(up-compare-goal g-remaining-needed-food > 0)
(up-compare-goal g-num-deer-hunters > MAX-DEER-HUNTERS)
=>
(up-modify-goal g-num-deer-hunters c:= MAX-DEER-HUNTERS)
)

;If the number of desired deer hunters exceeds the number of peasants,
;cap the number of deer hunters to the total number of peasants
(defrule
(up-compare-goal g-remaining-needed-food > 0)
(up-compare-goal g-num-deer-hunters g:> g-current-num-peasants)
=>
(up-modify-goal g-num-deer-hunters g:= g-current-num-peasants)
)

;Figure out how much needed food needs to be gathered by remaining food sources
(defrule
(up-compare-goal g-remaining-needed-food > 0)
=>
(up-modify-goal g-temp g:= g-num-deer-hunters)
(up-modify-goal g-temp g:* g-deer-per-sec)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-remaining-needed-food g:- g-temp)
;(up-chat-data-to-all "Remaining after deer: %d" g: g-remaining-needed-food)
)

(defrule
(up-compare-goal g-remaining-needed-food < 0)
=>
(up-modify-goal g-remaining-needed-food c:= 0)
)



;====FORAGE

;Calculate how many foragers it would take to gather
;the needed food
(defrule
(up-compare-goal g-forage-per-sec != -1)
(not	(sheep-and-forage-too-far))
(up-compare-goal g-remaining-needed-food > 0)
=>
(up-modify-goal g-temp g:= g-remaining-needed-food)
(up-modify-goal g-temp c:/ 100)		;divide by 100 to get amount needed/sec
(up-modify-goal g-temp g:z/ g-forage-per-sec)
(up-modify-goal g-temp c:+ 1)	;add one for always rounding down
(up-modify-goal g-num-foragers g:= g-temp)
)

;If the number of desired foragers exceeds the set maximum number
;of foragers, set it to the maximum number of foragers.
(defrule
(up-compare-goal g-remaining-needed-food > 0)
(up-compare-goal g-num-foragers > MAX-FORAGERS)
=>
(up-modify-goal g-num-foragers c:= MAX-FORAGERS)
)

;If the number of desired foragers exceeds the number of peasants,
;cap the number of foragers to the total number of peasants
(defrule
(up-compare-goal g-remaining-needed-food > 0)
(up-compare-goal g-num-foragers g:> g-current-num-peasants)
=>
(up-modify-goal g-num-foragers g:= g-current-num-peasants)
)

;Figure out how much needed food needs to be gathered by remaining food sources
(defrule
(up-compare-goal g-remaining-needed-food > 0)
=>
(up-modify-goal g-temp g:= g-num-foragers)
(up-modify-goal g-temp g:* g-forage-per-sec)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-remaining-needed-food g:- g-temp)
;(up-chat-data-to-all "Remaining after forage: %d" g: g-remaining-needed-food)
)

(defrule
(up-compare-goal g-remaining-needed-food < 0)
=>
(up-modify-goal g-remaining-needed-food c:= 0)
)



;====FARMS

;Calculate how many farmers it would take to gather
;the needed food
(defrule
(up-compare-goal g-farm-per-sec != -1)
(up-compare-goal g-remaining-needed-food > 0)
=>
(up-modify-goal g-temp g:= g-remaining-needed-food)
(up-modify-goal g-temp c:/ 100)		;divide by 100 to get amount needed/sec
(up-modify-goal g-temp g:z/ g-farm-per-sec)
(up-modify-goal g-temp c:+ 1)	;add one for always rounding down
(up-modify-goal g-num-farmers g:= g-temp)
)

;If the number of desired farmers exceeds the number of peasants,
;cap the number of farmers to the total number of peasants
(defrule
(up-compare-goal g-remaining-needed-food > 0)
(up-compare-goal g-num-farmers g:> g-current-num-peasants)
=>
(up-modify-goal g-num-farmers g:= g-current-num-peasants)
)


;Calculate number of desired farms
(defrule
(up-compare-goal g-num-farmers > 0)
=>
(up-modify-goal g-desired-num-farm g:= g-num-farmers)
(up-modify-goal g-desired-num-farm c:+ 1)
)

;Calculate how many farms can be built in the time interval
(defrule
(not	(research-completed ri-treadmill-crane))
=>
(up-modify-goal g-num-train-per-time-interval c:= 10000)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ FARM-TIME)
;(up-chat-data-to-all "Interval: %d" g: g-num-train-per-time-interval)
)

(defrule
(research-completed ri-treadmill-crane)
=>
(up-modify-goal g-num-train-per-time-interval c:= 10000)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ FARM-TIME)
(up-modify-goal g-num-train-per-time-interval c:* 100)
(up-modify-goal g-num-train-per-time-interval c:/ 130)
;(up-chat-data-to-all "Interval: %d" g: g-num-train-per-time-interval)
)

;Calculate the number of farms needed
(defrule
(true)
=>
(up-modify-goal g-temp g:= g-desired-num-farm)
(up-get-fact building-type-count-total farm g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)
(up-modify-goal g-temp c:* 100)
;(up-chat-data-to-all "Farms needed: %d" g: g-temp)
)

;More farms than needed, set needed number to 0.
(defrule
(up-compare-goal g-temp < 0)
=>
(up-modify-goal g-temp c:= 0)
)

;If the number of additional farms is greater than or equal to the
;number of farms that can be built in the time interval, add the
;cost of the farms to the amount of needed resources.
(defrule
(up-compare-goal g-temp g:>= g-num-train-per-time-interval)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: farm g: g-num-train-per-time-interval)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
;(up-chat-data-to-all "Wood needed: %d" g: g-needed-wood-100-sec)
)

;If the number of additional farms is less than the number of farms
;that can be built in the time interval, add the cost of the farms to
;the amount of needed resources.
(defrule
(up-compare-goal g-temp g:< g-num-train-per-time-interval)
(up-compare-goal g-temp c:> 0)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: farm g: g-temp)
(up-modify-goal g-temp-food-cost c:/ 100)
(up-modify-goal g-temp-wood-cost c:/ 100)
(up-modify-goal g-temp-gold-cost c:/ 100)
(up-modify-goal g-temp-stone-cost c:/ 100)
(up-setup-cost-data 0 g-needed-food-100-sec)
(up-add-cost-data g-temp-food-cost c: 1)
;(up-chat-data-to-all "Wood needed 2: %d" g: g-needed-wood-100-sec)
)


;If we have more than the maximum number of any type of food
;gatherer, designate these extra gatherers as desired farmers

;Check hunters
;(defrule
;(goal g-first-res-priority food)
;=>
;(up-get-fact unit-type-count villager-hunter g-temp)
;(up-modify-goal g-temp-2 c:= MAX-DEER-HUNTERS)
;(up-modify-goal g-temp-2 c:+ MAX-BOAR-HUNTERS)
;)

;(defrule
;(goal g-first-res-priority food)
;(up-compare-goal g-deer-hunt-status >= GATHER-MILLED-DEER)	;Hunting both
;(up-compare-goal g-boar-hunt-status >= GATHER-FIRST-BOAR) 	;deer and boar
;(up-compare-goal g-temp g:> g-temp-2)
;=>
;(up-modify-goal g-temp c:- g-temp-2)
;(up-modify-goal g-temp-2 c:= 0)		 ;g-temp-2 now becomes a variable for
;(up-modify-goal g-temp-2 g:= g-temp) ;the number of extra food gatherers
;)

;(defrule
;(goal g-first-res-priority food)
;(up-compare-goal g-deer-hunt-status >= GATHER-MILLED-DEER)	;Hunting deer
;(up-compare-goal g-boar-hunt-status < GATHER-FIRST-BOAR) 	;only
;(up-compare-goal g-temp > MAX-DEER-HUNTERS)
;=>
;(up-modify-goal g-temp c:- MAX-DEER-HUNTERS)
;(up-modify-goal g-temp-2 g:= g-temp)
;)

;(defrule
;(goal g-first-res-priority food)
;(up-compare-goal g-deer-hunt-status < GATHER-MILLED-DEER)	;Hunting boar
;(up-compare-goal g-boar-hunt-status >= GATHER-FIRST-BOAR) 	;only
;(up-compare-goal g-temp > MAX-BOAR-HUNTERS)
;=>
;(up-modify-goal g-temp c:- MAX-BOAR-HUNTERS)
;(up-modify-goal g-temp-2 g:= g-temp)
;)

;(defrule
;(goal g-first-res-priority food)
;(up-compare-goal g-deer-hunt-status < GATHER-MILLED-DEER)	;Not hunting
;(up-compare-goal g-boar-hunt-status < GATHER-FIRST-BOAR)
;=>
;(up-modify-goal g-temp-2 g:= g-temp)
;)

;Check shepherds
;(defrule
;(goal g-first-res-priority food)
;=>
;(up-get-fact unit-type-count villager-shepherd g-temp)
;)

;(defrule
;(goal g-first-res-priority food)
;(up-compare-goal g-temp > MAX-SHEPHERDS)
;=>
;(up-modify-goal g-temp c:- MAX-SHEPHERDS)
;(up-modify-goal g-temp-2 g:+ g-temp)
;)

;Check foragers
;(defrule
;(goal g-first-res-priority food)
;=>
;(up-get-fact unit-type-count villager-forager g-temp)
;)

;(defrule
;(goal g-first-res-priority food)
;(up-compare-goal g-temp > MAX-FORAGERS)
;=>
;(up-modify-goal g-temp c:- MAX-FORAGERS)
;(up-modify-goal g-temp-2 g:+ g-temp)
;)

;(defrule
;(up-compare-goal g-temp-2 > 0)
;=>
;(up-chat-data-to-all "Extra gatherers: %d" g: g-temp-2)
;)


;If this is more than the current number of desired farms,
;set the number of desired farms to this amount
;(defrule
;(goal g-first-res-priority food)
;(up-compare-goal g-desired-num-farm g:< g-temp-2)
;(building-type-count mill > 0)
;(or	(building-type-count-total lumber-camp > 0)
;	(wood-amount >= 160))
;=>
;(up-modify-goal g-desired-num-farm g:= g-temp-2)
;)



;====WOOD

;Calculate how many lumberjacks it would take to gather
;the needed wood
(defrule
(up-compare-goal g-wood-per-sec != -1)
(up-compare-goal g-delta-wood-cost > 0)
=>
(up-modify-goal g-temp g:= g-delta-wood-cost)
(up-modify-goal g-temp c:/ 100)		;divide by 100 to get amount needed/sec
(up-modify-goal g-temp g:z/ g-wood-per-sec)
(up-modify-goal g-temp c:+ 1)	;add one for always rounding down
(up-modify-goal g-num-wood-peasants g:= g-temp)
)

;If the number of desired lumberjacks exceeds the number of peasants,
;cap the number of lumberjacks to the total number of peasants
(defrule
(up-compare-goal g-delta-wood-cost > 0)
(up-compare-goal g-num-wood-peasants g:> g-current-num-peasants)
=>
(up-modify-goal g-num-wood-peasants g:= g-current-num-peasants)
)



;====GOLD

;Calculate how many gold miners it would take to gather
;the needed gold
(defrule
(up-compare-goal g-gold-per-sec != -1)
(up-compare-goal g-remaining-needed-gold > 0)
=>
(up-modify-goal g-temp g:= g-remaining-needed-gold)
(up-modify-goal g-temp c:/ 100)		;divide by 100 to get amount needed/sec
(up-modify-goal g-temp g:z/ g-gold-per-sec)
(up-modify-goal g-temp c:+ 1)	;add one for always rounding down
(up-modify-goal g-num-gold-peasants g:= g-temp)
)

;If the number of desired gold miners exceeds the number of peasants,
;cap the number of gold miners to the total number of peasants
(defrule
(up-compare-goal g-remaining-needed-gold > 0)
(up-compare-goal g-num-gold-peasants g:> g-current-num-peasants)
=>
(up-modify-goal g-num-gold-peasants g:= g-current-num-peasants)
)



;====STONE

;Calculate how many stone miners it would take to gather
;the needed stone
(defrule
(up-compare-goal g-stone-per-sec != -1)
(up-compare-goal g-delta-stone-cost > 0)
=>
(up-modify-goal g-temp g:= g-delta-stone-cost)
(up-modify-goal g-temp c:/ 100)		;divide by 100 to get amount needed/sec
(up-modify-goal g-temp g:z/ g-stone-per-sec)
(up-modify-goal g-temp c:+ 1)	;add one for always rounding down
(up-modify-goal g-num-stone-peasants g:= g-temp)
)

;If the number of desired stone miners exceeds the number of peasants,
;cap the number of stone miners to the total number of peasants
(defrule
(up-compare-goal g-delta-stone-cost > 0)
(up-compare-goal g-num-stone-peasants g:> g-current-num-peasants)
=>
(up-modify-goal g-num-stone-peasants g:= g-current-num-peasants)
)





;========<<<<CALCULATE NUMBER OF EACH TYPE OF GATHERER>>>>========

;====FIRST RES PRIORITY

(defrule
(true)
=>
(up-modify-goal g-remaining-gatherers g:= g-current-num-peasants)
)

;Subtract shepherds from remaining gatherers
(defrule
(goal g-first-res-priority food)
(up-compare-goal g-num-shepherds g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-shepherds g:= g-remaining-gatherers)
)

(defrule
(goal g-first-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-shepherds)
)

;Subtract boar hunters from remaining gatherers
(defrule
(goal g-first-res-priority food)
(up-compare-goal g-num-boar-hunters g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-boar-hunters g:= g-remaining-gatherers)
)

(defrule
(goal g-first-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-boar-hunters)
)

;Subtract deer hunters from remaining gatherers
(defrule
(goal g-first-res-priority food)
(up-compare-goal g-num-deer-hunters g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-deer-hunters g:= g-remaining-gatherers)
)

(defrule
(goal g-first-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-deer-hunters)
)

;Subtract foragers from remaining gatherers
(defrule
(goal g-first-res-priority food)
(up-compare-goal g-num-foragers g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-foragers g:= g-remaining-gatherers)
)

(defrule
(goal g-first-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-foragers)
)

;Subtract farmers from remaining gatherers
(defrule
(goal g-first-res-priority food)
(up-compare-goal g-num-farmers g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-farmers g:= g-remaining-gatherers)
)

(defrule
(goal g-first-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-farmers)
)

;Subtract lumberjacks from remaining gatherers
(defrule
(goal g-first-res-priority wood)
(up-compare-goal g-num-wood-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-wood-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-first-res-priority wood)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-wood-peasants)
)

;Subtract gold miners from remaining gatherers
(defrule
(goal g-first-res-priority gold)
(up-compare-goal g-num-gold-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-gold-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-first-res-priority gold)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-gold-peasants)
)

;Subtract stone miners from remaining gatherers
(defrule
(goal g-first-res-priority stone)
(up-compare-goal g-num-stone-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-stone-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-first-res-priority stone)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-stone-peasants)
)



;====SECOND RES PRIORITY

;Subtract shepherds from remaining gatherers
(defrule
(goal g-second-res-priority food)
(up-compare-goal g-num-shepherds g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-shepherds g:= g-remaining-gatherers)
)

(defrule
(goal g-second-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-shepherds)
)

;Subtract boar hunters from remaining gatherers
(defrule
(goal g-second-res-priority food)
(up-compare-goal g-num-boar-hunters g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-boar-hunters g:= g-remaining-gatherers)
)

(defrule
(goal g-second-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-boar-hunters)
)

;Subtract deer hunters from remaining gatherers
(defrule
(goal g-second-res-priority food)
(up-compare-goal g-num-deer-hunters g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-deer-hunters g:= g-remaining-gatherers)
)

(defrule
(goal g-second-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-deer-hunters)
)

;Subtract foragers from remaining gatherers
(defrule
(goal g-second-res-priority food)
(up-compare-goal g-num-foragers g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-foragers g:= g-remaining-gatherers)
)

(defrule
(goal g-second-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-foragers)
)

;Subtract farmers from remaining gatherers
(defrule
(goal g-second-res-priority food)
(up-compare-goal g-num-farmers g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-farmers g:= g-remaining-gatherers)
)

(defrule
(goal g-second-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-farmers)
)

;Subtract lumberjacks from remaining gatherers
(defrule
(goal g-second-res-priority wood)
(up-compare-goal g-num-wood-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-wood-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-second-res-priority wood)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-wood-peasants)
)

;Subtract gold miners from remaining gatherers
(defrule
(goal g-second-res-priority gold)
(up-compare-goal g-num-gold-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-gold-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-second-res-priority gold)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-gold-peasants)
)

;Subtract stone miners from remaining gatherers
(defrule
(goal g-second-res-priority stone)
(up-compare-goal g-num-stone-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-stone-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-second-res-priority stone)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-stone-peasants)
)



;====THIRD RES PRIORITY

;Subtract shepherds from remaining gatherers
(defrule
(goal g-third-res-priority food)
(up-compare-goal g-num-shepherds g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-shepherds g:= g-remaining-gatherers)
)

(defrule
(goal g-third-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-shepherds)
)

;Subtract boar hunters from remaining gatherers
(defrule
(goal g-third-res-priority food)
(up-compare-goal g-num-boar-hunters g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-boar-hunters g:= g-remaining-gatherers)
)

(defrule
(goal g-third-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-boar-hunters)
)

;Subtract deer hunters from remaining gatherers
(defrule
(goal g-third-res-priority food)
(up-compare-goal g-num-deer-hunters g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-deer-hunters g:= g-remaining-gatherers)
)

(defrule
(goal g-third-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-deer-hunters)
)

;Subtract foragers from remaining gatherers
(defrule
(goal g-third-res-priority food)
(up-compare-goal g-num-foragers g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-foragers g:= g-remaining-gatherers)
)

(defrule
(goal g-third-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-foragers)
)

;Subtract farmers from remaining gatherers
(defrule
(goal g-third-res-priority food)
(up-compare-goal g-num-farmers g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-farmers g:= g-remaining-gatherers)
)

(defrule
(goal g-third-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-farmers)
)

;Subtract lumberjacks from remaining gatherers
(defrule
(goal g-third-res-priority wood)
(up-compare-goal g-num-wood-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-wood-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-third-res-priority wood)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-wood-peasants)
)

;Subtract gold miners from remaining gatherers
(defrule
(goal g-third-res-priority gold)
(up-compare-goal g-num-gold-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-gold-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-third-res-priority gold)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-gold-peasants)
)

;Subtract stone miners from remaining gatherers
(defrule
(goal g-third-res-priority stone)
(up-compare-goal g-num-stone-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-stone-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-third-res-priority stone)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-stone-peasants)
)



;====LAST RES PRIORITY

;Subtract shepherds from remaining gatherers
(defrule
(goal g-last-res-priority food)
(up-compare-goal g-num-shepherds g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-shepherds g:= g-remaining-gatherers)
)

(defrule
(goal g-last-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-shepherds)
)

;Subtract boar hunters from remaining gatherers
(defrule
(goal g-last-res-priority food)
(up-compare-goal g-num-boar-hunters g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-boar-hunters g:= g-remaining-gatherers)
)

(defrule
(goal g-last-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-boar-hunters)
)

;Subtract deer hunters from remaining gatherers
(defrule
(goal g-last-res-priority food)
(up-compare-goal g-num-deer-hunters g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-deer-hunters g:= g-remaining-gatherers)
)

(defrule
(goal g-last-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-deer-hunters)
)

;Subtract foragers from remaining gatherers
(defrule
(goal g-last-res-priority food)
(up-compare-goal g-num-foragers g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-foragers g:= g-remaining-gatherers)
)

(defrule
(goal g-last-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-foragers)
)

;Subtract farmers from remaining gatherers
(defrule
(goal g-last-res-priority food)
(up-compare-goal g-num-farmers g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-farmers g:= g-remaining-gatherers)
)

(defrule
(goal g-last-res-priority food)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-farmers)
)

;Subtract lumberjacks from remaining gatherers
(defrule
(goal g-last-res-priority wood)
(up-compare-goal g-num-wood-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-wood-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-last-res-priority wood)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-wood-peasants)
)

;Subtract gold miners from remaining gatherers
(defrule
(goal g-last-res-priority gold)
(up-compare-goal g-num-gold-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-gold-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-last-res-priority gold)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-gold-peasants)
)

;Subtract stone miners from remaining gatherers
(defrule
(goal g-last-res-priority stone)
(up-compare-goal g-num-stone-peasants g:> g-remaining-gatherers)
=>
(up-modify-goal g-num-stone-peasants g:= g-remaining-gatherers)
)

(defrule
(goal g-last-res-priority stone)
=>
(up-modify-goal g-remaining-gatherers g:- g-num-stone-peasants)
)



;Add up number of food gatherers

(defrule
(true)
=>
(up-modify-goal g-temp g:= g-num-shepherds)
(up-modify-goal g-temp g:+ g-num-boar-hunters)
(up-modify-goal g-temp g:+ g-num-deer-hunters)
(up-modify-goal g-temp g:+ g-num-foragers)
(up-modify-goal g-temp g:+ g-num-farmers)
(up-modify-goal g-num-food-peasants g:= g-temp)
)


;========<<<<CALCULATE GATHERER PERCENTAGES>>>>========
(defrule
(up-compare-goal g-current-num-peasants != 0)
=>
(up-modify-goal g-temp g:= g-num-food-peasants)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-current-num-peasants)
(up-modify-sn sn-food-gatherer-percentage g:= g-temp)
;(up-chat-data-to-all "Food Pct: %d" s: sn-food-gatherer-percentage)
)

(defrule
(up-compare-goal g-current-num-peasants != 0)
=>
(up-modify-goal g-temp g:= g-num-wood-peasants)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-current-num-peasants)
(up-modify-sn sn-wood-gatherer-percentage g:= g-temp)
)

(defrule
(up-compare-goal g-current-num-peasants != 0)
=>
(up-modify-goal g-temp g:= g-num-gold-peasants)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-current-num-peasants)
(up-modify-sn sn-gold-gatherer-percentage g:= g-temp)
;(up-chat-data-to-all "Gold Pct: %d" s: sn-gold-gatherer-percentage)
)

(defrule
(up-compare-goal g-current-num-peasants != 0)
=>
(up-modify-goal g-temp g:= g-num-stone-peasants)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-current-num-peasants)
(up-modify-sn sn-stone-gatherer-percentage g:= g-temp)
)

;Check to see if gatherer percentages add up to 100. If not, adjust them.
(defrule
(true)
=>
(up-modify-goal g-temp s:= sn-wood-gatherer-percentage)
(up-modify-goal g-temp s:+ sn-food-gatherer-percentage)
(up-modify-goal g-temp s:+ sn-gold-gatherer-percentage)
(up-modify-goal g-temp s:+ sn-stone-gatherer-percentage)
)

;If all the percentages are 0, set to a standard default.
(defrule
(current-age < shire)
(up-compare-goal g-temp <= 0)
=>
(up-modify-sn sn-wood-gatherer-percentage c:= 25)
(up-modify-sn sn-food-gatherer-percentage c:= 75)
(up-modify-sn sn-gold-gatherer-percentage c:= 0)
(up-modify-sn sn-stone-gatherer-percentage c:= 0)
)

(defrule
(current-age >= shire)
(up-compare-goal g-temp <= 0)
=>
(up-modify-sn sn-wood-gatherer-percentage c:= 25)
(up-modify-sn sn-food-gatherer-percentage c:= 50)
(up-modify-sn sn-gold-gatherer-percentage c:= 20)
(up-modify-sn sn-stone-gatherer-percentage c:= 5)
)

;If the gather percentages don't add up to 100, adjust them so they do
(defrule
(up-compare-goal g-temp > 0)
(up-compare-goal g-temp != 100)
=>
(up-modify-goal g-temp-2 s:= sn-wood-gatherer-percentage)
(up-modify-goal g-temp-2 c:* 100)
(up-modify-goal g-temp-2 g:/ g-temp)
(up-modify-sn sn-wood-gatherer-percentage g:= g-temp-2)
)

(defrule
(up-compare-goal g-temp > 0)
(up-compare-goal g-temp != 100)
=>
(up-modify-goal g-temp-2 s:= sn-food-gatherer-percentage)
(up-modify-goal g-temp-2 c:* 100)
(up-modify-goal g-temp-2 g:/ g-temp)
(up-modify-sn sn-food-gatherer-percentage g:= g-temp-2)
)

(defrule
(up-compare-goal g-temp > 0)
(up-compare-goal g-temp != 100)
=>
(up-modify-goal g-temp-2 s:= sn-gold-gatherer-percentage)
(up-modify-goal g-temp-2 c:* 100)
(up-modify-goal g-temp-2 g:/ g-temp)
(up-modify-sn sn-gold-gatherer-percentage g:= g-temp-2)
)

(defrule
(up-compare-goal g-temp > 0)
(up-compare-goal g-temp != 100)
=>
(up-modify-goal g-temp-2 s:= sn-stone-gatherer-percentage)
(up-modify-goal g-temp-2 c:* 100)
(up-modify-goal g-temp-2 g:/ g-temp)
(up-modify-sn sn-stone-gatherer-percentage g:= g-temp-2)
)


(defrule
(true)
=>
;(up-chat-data-to-all "Food: %d" s: sn-food-gatherer-percentage)
;(up-chat-data-to-all "Wood: %d" s: sn-wood-gatherer-percentage)
;(up-chat-data-to-all "Gold: %d" s: sn-gold-gatherer-percentage)
;(up-chat-data-to-all "Stone: %d" s: sn-stone-gatherer-percentage)
;(up-chat-data-to-all "Num Food: %d" g: g-num-food-peasants)
;(up-chat-data-to-all "Num Wood: %d" g: g-num-wood-peasants)
;(up-chat-data-to-all "Num Gold: %d" g: g-num-gold-peasants)
;(up-chat-data-to-all "Num Stone: %d" g: g-num-stone-peasants)
(up-chat-data-to-all "F: %d" g: g-delta-food-cost)
(up-chat-data-to-all "W: %d" g: g-delta-wood-cost)
(up-chat-data-to-all "G: %d" g: g-delta-gold-cost)
(up-chat-data-to-all "S: %d" g: g-delta-stone-cost)
(enable-timer 10 10)
(disable-self)
)

(defrule
(timer-triggered 10)
=>
;(up-chat-data-to-all "Food: %d" s: sn-food-gatherer-percentage)
;(up-chat-data-to-all "Wood: %d" s: sn-wood-gatherer-percentage)
;(up-chat-data-to-all "Gold: %d" s: sn-gold-gatherer-percentage)
;(up-chat-data-to-all "Stone: %d" s: sn-stone-gatherer-percentage)
;(up-chat-data-to-all "Num Food: %d" g: g-num-food-peasants)
;(up-chat-data-to-all "Num Wood: %d" g: g-num-wood-peasants)
;(up-chat-data-to-all "Num Gold: %d" g: g-num-gold-peasants)
;(up-chat-data-to-all "Num Stone: %d" g: g-num-stone-peasants)
(up-chat-data-to-all "F: %d" g: g-delta-food-cost)
(up-chat-data-to-all "W: %d" g: g-delta-wood-cost)
(up-chat-data-to-all "G: %d" g: g-delta-gold-cost)
(up-chat-data-to-all "S: %d" g: g-delta-stone-cost)
(disable-timer 10)
(enable-timer 10 10)
)



(defrule
(true)
=>
(enable-timer 5 10)
(disable-self)
)

(defrule
(timer-triggered 5)
(up-compare-goal g-num-shepherds > 0)
=>
(up-chat-data-to-all "Shepherds: %d" g: g-num-shepherds)
)

(defrule
(timer-triggered 5)
(up-compare-goal g-num-boar-hunters > 0)
=>
(up-chat-data-to-all "Boar Hunters: %d" g: g-num-boar-hunters)
)

(defrule
(timer-triggered 5)
(up-compare-goal g-num-deer-hunters > 0)
=>
(up-chat-data-to-all "Deer Hunters: %d" g: g-num-deer-hunters)
)

(defrule
(timer-triggered 5)
(up-compare-goal g-num-foragers > 0)
=>
(up-chat-data-to-all "Foragers: %d" g: g-num-foragers)
)

(defrule
(timer-triggered 5)
(up-compare-goal g-num-farmers > 0)
=>
(up-chat-data-to-all "Farmers: %d" g: g-num-farmers)
)

(defrule
(timer-triggered 5)
(up-compare-goal g-num-wood-peasants > 0)
=>
(up-chat-data-to-all "Lumberjacks: %d" g: g-num-wood-peasants)
)

(defrule
(timer-triggered 5)
(up-compare-goal g-num-gold-peasants > 0)
=>
(up-chat-data-to-all "Gold Miners: %d" g: g-num-gold-peasants)
)

(defrule
(timer-triggered 5)
(up-compare-goal g-num-stone-peasants > 0)
=>
(up-chat-data-to-all "Stone Miners: %d" g: g-num-stone-peasants)
)

(defrule
(timer-triggered 5)
(up-compare-goal g-current-num-peasants > 0)
=>
(up-chat-data-to-all "Total: %d" g: g-current-num-peasants)
)

(defrule
(timer-triggered 5)
=>
(enable-timer 5 10)
)