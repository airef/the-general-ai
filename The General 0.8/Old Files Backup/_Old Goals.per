;====GOAL: g-first-res-priority

(defrule
(true)
=>
(set-goal g-first-res-priority food)
)

(defrule
(up-compare-goal g-true-housing-headroom <= 1)
(not	(can-afford-building house))
=>
(set-goal g-first-res-priority wood)
)

(defrule
(true)
=>
(up-setup-cost-data 1 g-temp-food-cost)
(up-add-object-cost c: town-hall c: 1)
(up-get-fact wood-amount 0 g-temp)
)

(defrule
(up-compare-goal g-desired-num-town-hall > 0)
(building-type-count-total town-hall == 0)
(up-compare-goal g-temp g:< g-temp-wood-cost)	;can't afford wood for town hall
=>
(set-goal g-first-res-priority wood)
)

(defrule
(goal g-first-res-priority gold)
(dropsite-min-distance gold > 4)
(dropsite-min-distance gold < 255)
(not	(can-afford-building mining-camp))
=>
(set-goal g-first-res-priority wood)
)

(defrule
(not	(goal g-first-res-priority wood))
(or	(dropsite-min-distance wood > 4)
	(and	(unit-type-count villager-wood >= 5)
			(building-type-count-total lumber-camp == 0)))
(dropsite-min-distance wood < 255)
(not	(can-afford-building lumber-camp))
=>
(set-goal g-first-res-priority wood)
)

(defrule
(not	(goal g-first-res-priority wood))
(unit-type-count peasant >= 6)
(building-type-count-total lumber-camp == 0)
(dropsite-min-distance wood < 255)
(not	(can-afford-building lumber-camp))
=>
(set-goal g-first-res-priority wood)
)


(defrule
(goal g-first-res-priority food)
(building-type-count-total mill == 0)
(not	(can-afford-building mill))
(or	(unit-type-count sheep <= 1)
	(unit-type-count villager-forager >= 3))
=>
(set-goal g-first-res-priority wood)
)

(defrule
(goal g-first-res-priority food)
(or	(dropsite-min-distance food > 4)
	(and	(unit-type-count villager-forager >= 3)
			(building-type-count-total mill == 0)))
(dropsite-min-distance food < 255)
(not	(can-afford-building mill))
=>
(set-goal g-first-res-priority wood)
)

;====GOAL: g-second-res-priority

(defrule
(current-age < shire)
=>
(set-goal g-second-res-priority wood)
)

(defrule
(current-age >= shire)
=>
(set-goal g-second-res-priority gold)
)

(defrule
(not	(goal g-first-res-priority food))
=>
(set-goal g-second-res-priority food)
)

(defrule
(goal g-second-res-priority gold)
(not	(goal g-first-res-priority wood))
(dropsite-min-distance gold > 4)
(dropsite-min-distance gold < 255)
(not	(can-afford-building mining-camp))
=>
(set-goal g-second-res-priority wood)
)

(defrule
(goal g-second-res-priority food)
(not	(goal g-first-res-priority wood))
(or	(dropsite-min-distance food > 4)
	(and	(unit-type-count villager-forager >= 3)
			(building-type-count-total mill == 0)))
(dropsite-min-distance food < 255)
(not	(can-afford-building mill))
=>
(set-goal g-second-res-priority wood)
)

;====GOAL: g-third-res-priority

(defrule
(current-age < shire)
(not	(goal g-first-res-priority gold))
(not	(goal g-second-res-priority gold))
=>
(set-goal g-third-res-priority gold)
)

(defrule
(current-age >= shire)
(not	(goal g-first-res-priority wood))
(not	(goal g-second-res-priority wood))
=>
(set-goal g-third-res-priority wood)
)

(defrule
(not	(goal g-first-res-priority food))
(not	(goal g-second-res-priority food))
=>
(set-goal g-third-res-priority food)
)

;====GOAL: g-last-res-priority

(defrule
(not	(goal g-first-res-priority stone))
(not	(goal g-second-res-priority stone))
(not	(goal g-third-res-priority stone))
=>
(set-goal g-last-res-priority stone)
)

(defrule
(not	(goal g-first-res-priority gold))
(not	(goal g-second-res-priority gold))
(not	(goal g-third-res-priority gold))
=>
(set-goal g-last-res-priority gold)
)

(defrule
(not	(goal g-first-res-priority wood))
(not	(goal g-second-res-priority wood))
(not	(goal g-third-res-priority wood))
=>
(set-goal g-last-res-priority wood)
)

(defrule
(not	(goal g-first-res-priority food))
(not	(goal g-second-res-priority food))
(not	(goal g-third-res-priority food))
=>
(set-goal g-last-res-priority food)
)

;(defrule
;(true)
;=>
;(up-chat-data-to-all "First: %d" g: g-first-res-priority)
;(up-chat-data-to-all "Second: %d" g: g-second-res-priority)
;(up-chat-data-to-all "Third: %d" g: g-third-res-priority)
;)

;====GOALS: g-def-carry-capacity and g-hunt-carry-capacity

(defrule
(or	(research-completed ri-wheelbarrow)
	(research-completed ri-wheelbarrow-g))
(not	(research-completed ri-hand-cart))
(not	(research-completed ri-hand-cart-g))
=>
(up-modify-goal g-def-carry-capacity c:= 1300)		;multiplied by 100
(up-modify-goal g-hunt-carry-capacity c:= 4400)		;multiplied by 100
(disable-self)
)

(defrule
(or	(research-completed ri-hand-cart)
	(research-completed ri-hand-cart-g))
=>
(up-modify-goal g-def-carry-capacity c:= 2000)		;multiplied by 100
(up-modify-goal g-hunt-carry-capacity c:= 6600)		;multiplied by 100
(disable-self)
)

;====GOAL: g-farm-carry-capacity

(defrule
(not	(research-completed ri-wheelbarrow))
(not	(research-completed ri-wheelbarrow))
(or		(research-completed ri-heavy-plow)
		(research-completed ri-heavy-plow-g))
=>
(up-modify-goal g-farm-carry-capacity c:= 1100)		;multiplied by 100
(disable-self)
)

(defrule
(or	(research-completed ri-wheelbarrow)
	(research-completed ri-wheelbarrow-g))
(not	(research-completed ri-hand-cart))
(not	(research-completed ri-hand-cart-g))
(not	(research-completed ri-heavy-plow))
(not	(research-completed ri-heavy-plow-g))
=>
(up-modify-goal g-farm-carry-capacity c:= 1300)		;multiplied by 100
(disable-self)
)

(defrule
(or	(research-completed ri-wheelbarrow)
	(research-completed ri-wheelbarrow-g))
(not	(research-completed ri-hand-cart))
(not	(research-completed ri-hand-cart-g))
(or		(research-completed ri-heavy-plow)
		(research-completed ri-heavy-plow-g))
=>
(up-modify-goal g-farm-carry-capacity c:= 1400)		;multiplied by 100
(disable-self)
)

(defrule
(or	(research-completed ri-hand-cart)
	(research-completed ri-hand-cart-g))
=>
(up-modify-goal g-farm-carry-capacity c:= 2000)		;multiplied by 100
(disable-self)										;the +1 carry from heavy plow
)													;seems to go away with Hand Cart

;====GOAL: g-fishing-ship-carry-capacity

(defrule
(not	(research-completed ri-fish-preservation))
=>
(up-modify-goal g-fishing-ship-carry-capacity c:= 1500)	;multiplied by 100
(disable-self)
)

(defrule
(research-completed ri-fish-preservation)
=>
(up-modify-goal g-fishing-ship-carry-capacity c:= 3000)
(disable-self)
)

;====GOAL: g-farm-gathering-walk-time

;This calculates the amount of time peasants spend wandering around the farm
;while gathering. Peasants always walk around a total of three times regardless
;of their carry capacity, so the time wandering around is the average walking
;distance, multiplied by 3, and divided by the current peasant speed. g-temp
;is multiplied by 1000 because g-current-peasant-speed is multiplied by 1000.

(defrule
(up-compare-goal g-current-peasant-speed != 0)
=>
(up-modify-goal g-temp c:= FARM-AVERAGE-WALK-DISTANCE)
(up-modify-goal g-temp c:* 300)
(up-modify-goal g-temp g:/ g-current-peasant-speed)
(up-modify-goal g-farm-gathering-walk-time g:= g-temp)
)

;====GOAL: g-current-peasant-speed

(defrule
(or	(research-completed ri-wheelbarrow)
	(research-completed ri-wheelbarrow-g))
=>
(up-modify-goal g-temp g:= g-current-peasant-speed)
(up-modify-goal g-temp c:* 110)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-peasant-speed g:= g-temp)
(up-chat-data-to-player my-player-number "Peasant Speed: %d" g: g-current-peasant-speed)
(disable-self)
)

(defrule
(or	(research-completed ri-hand-cart)
	(research-completed ri-hand-cart-g))
=>
(up-modify-goal g-temp g:= g-current-peasant-speed)
(up-modify-goal g-temp c:* 120)		;20% faster in Exile of Westmark instead of 10%
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-peasant-speed g:= g-temp)
(up-chat-data-to-player my-player-number "Peasant Speed: %d" g: g-current-peasant-speed)
(disable-self)
)

;====GOAL: g-current-fishing-ship-speed

(defrule
(research-completed ri-careening)
=>
(up-modify-goal g-temp g:= g-current-fishing-ship-speed)
(up-modify-goal g-temp c:* 115)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-fishing-ship-speed g:= g-temp)
(disable-self)
)

(defrule
(or	(research-completed ri-hand-cart)
	(research-completed ri-hand-cart-g))
=>
(up-modify-goal g-temp g:= g-current-peasant-speed)
(up-modify-goal g-temp c:* 120)		;20% faster in Exile of Westmark instead of 10%
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-peasant-speed g:= g-temp)
(up-chat-data-to-player my-player-number "Peasant Speed: %d" g: g-current-peasant-speed)
(disable-self)
)

;====GOAL: g-current-wood-gather-rate

(defrule
(or	(research-completed ri-double-bit-axe)
	(research-completed ri-double-bit-axe-g))
=>
(up-modify-goal g-temp g:= g-current-wood-gather-rate)
(up-modify-goal g-temp c:* 120)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-wood-gather-rate g:= g-temp)
(disable-self)
)

(defrule
(or	(research-completed ri-bow-saw)
	(research-completed ri-bow-saw-g))
=>
(up-modify-goal g-temp g:= g-current-wood-gather-rate)
(up-modify-goal g-temp c:* 120)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-wood-gather-rate g:= g-temp)
(disable-self)
)

(defrule
(or	(research-completed ri-two-man-saw)
	(research-completed ri-two-man-saw-g))
=>
(up-modify-goal g-temp g:= g-current-wood-gather-rate)
(up-modify-goal g-temp c:* 120)		;20% faster in Exile of Westmark instead of 10% faster
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-wood-gather-rate g:= g-temp)
(disable-self)
)

;====GOAL: g-current-gold-gather-rate

(defrule
(or	(research-completed ri-trench-mining)
	(research-completed ri-trench-mining-g))
=>
(up-modify-goal g-temp g:= g-current-gold-gather-rate)
(up-modify-goal g-temp c:* 115)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-gold-gather-rate g:= g-temp)
(disable-self)
)

(defrule
(or	(research-completed ri-shaft-mining)
	(research-completed ri-shaft-mining-g))
=>
(up-modify-goal g-temp g:= g-current-gold-gather-rate)
(up-modify-goal g-temp c:* 115)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-gold-gather-rate g:= g-temp)
(disable-self)
)

;====GOAL: g-current-stone-gather-rate

(defrule
(or	(research-completed ri-trench-mining)
	(research-completed ri-trench-mining-g))
=>
(up-modify-goal g-temp g:= g-current-stone-gather-rate)
(up-modify-goal g-temp c:* 115)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-stone-gather-rate g:= g-temp)
(disable-self)
)

(defrule
(or	(research-completed ri-shaft-mining)
	(research-completed ri-shaft-mining-g))
=>
(up-modify-goal g-temp g:= g-current-stone-gather-rate)
(up-modify-goal g-temp c:* 115)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-stone-gather-rate g:= g-temp)
(disable-self)
)

;====GOAL: g-current-fishing-ship-gather-rate

(defrule
(research-completed ri-gillnets)
=>
(up-modify-goal g-temp g:= g-current-fishing-ship-gather-rate)
(up-modify-goal g-temp c:* 125)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-current-fishing-ship-gather-rate g:= g-temp)
(disable-self)
)

;====GOAL: g-shepherd-collect-time

;The time a peasant spends gathering is its current carry capacity
;divided by its gathering rate. g-temp is multiplied by 1000 because
;the collection rate is multiplied by 1000.

#load-if-not-defined FRANKISH-CIV		;Not Avongard

(defrule
(true)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp c:/ SHEEP-COLLECTION-RATE)
(up-modify-goal g-shepherd-collect-time g:= g-temp)
)

#else									;Avongard

(defrule
(true)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 125)		;Avongard shepherds gather 25% faster
(up-modify-goal g-temp c:/ SHEEP-COLLECTION-RATE)
(up-modify-goal g-shepherd-collect-time g:= g-temp)
)

#end-if

;====GOAL: g-forager-collect-time

;The time a peasant spends gathering is its current carry capacity
;divided by its gathering rate. g-temp is multiplied by 1000 because
;the collection rate is multiplied by 1000.

#load-if-not-defined TEUTONIC-CIV		;Not Norwatch

(defrule
(true)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp c:/ FORAGE-COLLECTION-RATE)
(up-modify-goal g-forager-collect-time g:= g-temp)
)

#else									;Norwatch

(defrule
(true)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 125)		;Norwatch foragers work 25% faster
(up-modify-goal g-temp c:/ FORAGE-COLLECTION-RATE)
(up-modify-goal g-forager-collect-time g:= g-temp)
)

#end-if

;====GOAL: g-hunter-collect-time

;The time a peasant spends gathering is its current carry capacity
;divided by its gathering rate. g-temp is multiplied by 1000 because
;the collection rate is multiplied by 1000.

(defrule
(true)
=>
(up-modify-goal g-temp g:= g-hunt-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp c:/ HUNT-COLLECTION-RATE)
(up-modify-goal g-hunter-collect-time g:= g-temp)
)

;====GOAL: g-farmer-collect-time

;The time a peasant spends gathering is its current carry capacity
;divided by its gathering rate. g-temp is multiplied by 1000 because
;the collection rate is multiplied by 1000.

;Since farmers wander around while collecting, the walking time has
;to be added.

(defrule
(true)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp c:/ FARM-COLLECTION-RATE)
(up-modify-goal g-temp g:+ g-farm-gathering-walk-time)
(up-modify-goal g-farmer-collect-time g:= g-temp)
)

;====GOAL: g-lumberjack-collect-time

;The time a peasant spends gathering is its current carry capacity
;divided by its gathering rate. g-temp is multiplied by 1000 because
;the collection rate is multiplied by 1000.

#load-if-not-defined GOTHIC-CIV			;Not Wesmark

(defrule
(up-compare-goal g-current-wood-gather-rate != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-current-wood-gather-rate)
(up-modify-goal g-lumberjack-collect-time g:= g-temp)
)

#else									;Wesmark

(defrule
(up-compare-goal g-current-wood-gather-rate != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 115)		;Wesmark lumberjacks work 15% faster
(up-modify-goal g-temp g:/ g-current-wood-gather-rate)
(up-modify-goal g-lumberjack-collect-time g:= g-temp)
)

#end-if

;====GOAL: g-gold-miner-collect-time

;The time a peasant spends gathering is its current carry capacity
;divided by its gathering rate. g-temp is multiplied by 1000 because
;the collection rate is multiplied by 1000.

(defrule
(up-compare-goal g-current-gold-gather-rate != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-current-gold-gather-rate)
(up-modify-goal g-gold-miner-collect-time g:= g-temp)
)

;====GOAL: g-stone-miner-collect-time

;The time a peasant spends gathering is its current carry capacity
;divided by its gathering rate. g-temp is multiplied by 1000 because
;the collection rate is multiplied by 1000.

(defrule
(up-compare-goal g-current-stone-gather-rate != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-current-stone-gather-rate)
(up-modify-goal g-stone-miner-collect-time g:= g-temp)
)

;====GOAL: g-fishing-ship-collect-time

;The time a fishing ship spends gathering is its current carry capacity
;divided by its gathering rate. g-temp is multiplied by 1000 because
;the collection rate is multiplied by 1000.

(defrule
(up-compare-goal g-current-fishing-ship-gather-rate != 0)
=>
(up-modify-goal g-temp g:= g-fishing-ship-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-current-fishing-ship-gather-rate)
(up-modify-goal g-fishing-ship-collect-time g:= g-temp)
)

;====GOAL: g-forager-return-time

;The estimated distance for foragers is 2 tiles away. If you multiplied that distance by 2
;for the trip to and the trip from the forage bushes and multiply that by 1000, the result
;is 4000. Dividing this by the current peasant speed will find the amount of time the
;villager spends returning resources to the mill.

(defrule
(up-compare-goal g-current-peasant-speed != 0)
=>
(up-modify-goal g-temp c:= 400)
(up-modify-goal g-temp g:/ g-current-peasant-speed)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-forager-return-time g:= g-temp)
)

(defrule
(or	(dropsite-min-distance food == -1)
	(dropsite-min-distance food == 255))
=>
(up-modify-goal g-forager-return-time c:= -1)
)

;====GOAL: g-deer-return-time

;Find the drop distance to deer and multiply it by 2 to get the distance to and from the
;dropsite. Dividing this by the current peasant speed will find the amount of time the
;villager spends returning resources to the dropsite.

(defrule
(up-compare-goal g-current-peasant-speed != 0)
=>
(up-get-fact dropsite-min-distance deer-hunting g-temp)
(up-modify-goal g-temp c:* 200)
(up-modify-goal g-temp g:/ g-current-peasant-speed)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-deer-return-time g:= g-temp)
)

(defrule
(or	(dropsite-min-distance deer-hunting == -1)
	(dropsite-min-distance deer-hunting == 255))
=>
(up-modify-goal g-deer-return-time c:= -1)
)

;====GOAL: g-farmer-return-time

;Follow the same logic from g-forager-return-time but with the estimated distance of 3 tiles
;from the current gathering spot on the farm to the town hall or mill.

(defrule
;(building-type-count farm > 0)
(building-type-count mill > 0)
(building-type-count-total lumber-camp > 0)
(up-compare-goal g-current-peasant-speed != 0)
=>
(up-modify-goal g-temp c:= FARM-AVERAGE-DROP-DISTANCE)
(up-modify-goal g-temp c:* 2)
(up-modify-goal g-temp g:/ g-current-peasant-speed)
(up-modify-goal g-farmer-return-time g:= g-temp)
)

;(defrule
;(building-type-count farm == 0)
;=>
;(up-modify-goal g-farmer-return-time c:= -1)
;)

;====GOAL: g-lumberjack-return-time

;Find the drop distance to wood, add 1 to account for trees further than the drop
;distance and multiply it by 2 to get the distance to and from the lumber camp.
;Dividing this by the current peasant speed will find the amount of time the
;villager spends returning resources to the lumber camp.

(defrule
(dropsite-min-distance wood >= 0)
(dropsite-min-distance wood < 255)
(up-compare-goal g-current-peasant-speed != 0)
=>
(up-get-fact dropsite-min-distance wood g-temp)
(up-modify-goal g-temp c:+ 1)
(up-modify-goal g-temp c:* 200)
(up-modify-goal g-temp g:/ g-current-peasant-speed)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-lumberjack-return-time g:= g-temp)
)

(defrule
(or	(dropsite-min-distance wood == -1)
	(dropsite-min-distance wood == 255))
=>
(up-modify-goal g-lumberjack-return-time c:= -1)
)

;====GOAL: g-gold-miner-return-time

;Follow the same logic as g-lumberjack-return-time.

(defrule
(dropsite-min-distance gold >= 0)
(dropsite-min-distance gold < 255)
(up-compare-goal g-current-peasant-speed != 0)
=>
(up-get-fact dropsite-min-distance gold g-temp)
(up-modify-goal g-temp c:+ 1)
(up-modify-goal g-temp c:* 200)
(up-modify-goal g-temp g:/ g-current-peasant-speed)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-gold-miner-return-time g:= g-temp)
)

(defrule
(or	(dropsite-min-distance gold == -1)
	(dropsite-min-distance gold == 255))
=>
(up-modify-goal g-gold-miner-return-time c:= -1)
)

;====GOAL: g-stone-miner-return-time

;Follow the same logic as g-lumberjack-return-time.

(defrule
(dropsite-min-distance stone >= 0)
(dropsite-min-distance stone < 255)
(up-compare-goal g-current-peasant-speed != 0)
=>
(up-get-fact dropsite-min-distance stone g-temp)
(up-modify-goal g-temp c:+ 1)
(up-modify-goal g-temp c:* 200)
(up-modify-goal g-temp g:/ g-current-peasant-speed)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-stone-miner-return-time g:= g-temp)
)

(defrule
(or	(dropsite-min-distance stone == -1)
	(dropsite-min-distance stone == 255))
=>
(up-modify-goal g-stone-miner-return-time c:= -1)
)

;====GOAL: g-fishing-ship-return-time

;Follow the same logic as g-forager-return-time, but estimate drop distance of 10 tiles

(defrule
(unit-type-count fishing-ship > 0)
(up-compare-goal g-current-fishing-ship-speed != 0)
=>
(up-modify-goal g-temp c:= 2000)
(up-modify-goal g-temp g:/ g-current-fishing-ship-speed)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-fishing-ship-return-time g:= g-temp)
)

(defrule
(unit-type-count fishing-ship == 0)
=>
(up-modify-goal g-fishing-ship-return-time c:= -1)
)

;====GOAL: g-shepherd-trip-time

(defrule
(true)
=>
(up-modify-goal g-temp g:= g-shepherd-collect-time)
(up-modify-goal g-temp g:+ g-shepherd-return-time)
(up-modify-goal g-shepherd-trip-time g:= g-temp)
)

(defrule
(up-compare-goal g-shepherd-return-time == -1)
=>
(up-modify-goal g-shepherd-trip-time c:= -1)
)

;====GOAL: g-forager-trip-time

(defrule
(up-compare-goal g-forager-return-time != -1)
=>
(up-modify-goal g-temp g:= g-forager-collect-time)
(up-modify-goal g-temp g:+ g-forager-return-time)
(up-modify-goal g-forager-trip-time g:= g-temp)
)

(defrule
(up-compare-goal g-forager-return-time == -1)
=>
(up-modify-goal g-forager-trip-time c:= -1)
)

;====GOAL: g-deer-trip-time

(defrule
(up-compare-goal g-deer-return-time != -1)
=>
(up-modify-goal g-temp g:= g-hunter-collect-time)
(up-modify-goal g-temp g:+ g-deer-return-time)
(up-modify-goal g-deer-trip-time g:= g-temp)
)

(defrule
(up-compare-goal g-deer-return-time == -1)
=>
(up-modify-goal g-deer-trip-time c:= -1)
)

;====GOAL: g-boar-trip-time

(defrule
(up-compare-goal g-boar-return-time != -1)
=>
(up-modify-goal g-temp g:= g-hunter-collect-time)
(up-modify-goal g-temp g:+ g-boar-return-time)
(up-modify-goal g-boar-trip-time g:= g-temp)
)

(defrule
(up-compare-goal g-boar-return-time == -1)
=>
(up-modify-goal g-boar-trip-time c:= -1)
)

;====GOAL: g-farmer-trip-time

(defrule
(up-compare-goal g-farmer-return-time != -1)
=>
(up-modify-goal g-temp g:= g-farmer-collect-time)
(up-modify-goal g-temp g:+ g-farmer-return-time)
(up-modify-goal g-farmer-trip-time g:= g-temp)
)

(defrule
(up-compare-goal g-farmer-return-time == -1)
=>
(up-modify-goal g-farmer-trip-time c:= -1)
)

;====GOAL: g-lumberjack-trip-time

(defrule
(up-compare-goal g-lumberjack-return-time != -1)
=>
(up-modify-goal g-temp g:= g-lumberjack-collect-time)
(up-modify-goal g-temp g:+ g-lumberjack-return-time)
(up-modify-goal g-lumberjack-trip-time g:= g-temp)
)

(defrule
(up-compare-goal g-lumberjack-return-time == -1)
=>
(up-modify-goal g-lumberjack-trip-time c:= -1)
)

;====GOAL: g-gold-miner-trip-time

(defrule
(up-compare-goal g-gold-miner-return-time != -1)
=>
(up-modify-goal g-temp g:= g-gold-miner-collect-time)
(up-modify-goal g-temp g:+ g-gold-miner-return-time)
(up-modify-goal g-gold-miner-trip-time g:= g-temp)
)

(defrule
(up-compare-goal g-gold-miner-return-time == -1)
=>
(up-modify-goal g-gold-miner-trip-time c:= -1)
)

;====GOAL: g-stone-miner-trip-time

(defrule
(up-compare-goal g-stone-miner-return-time != -1)
=>
(up-modify-goal g-temp g:= g-stone-miner-collect-time)
(up-modify-goal g-temp g:+ g-stone-miner-return-time)
(up-modify-goal g-stone-miner-trip-time g:= g-temp)
)

(defrule
(up-compare-goal g-stone-miner-return-time == -1)
=>
(up-modify-goal g-stone-miner-trip-time c:= -1)
)

;====GOAL: g-fishing-ship-trip-time

(defrule
(up-compare-goal g-fishing-ship-return-time != -1)
=>
(up-modify-goal g-temp g:= g-fishing-ship-collect-time)
(up-modify-goal g-temp g:+ g-fishing-ship-return-time)
(up-modify-goal g-fishing-ship-trip-time g:= g-temp)
)

(defrule
(up-compare-goal g-fishing-ship-return-time == -1)
=>
(up-modify-goal g-fishing-ship-trip-time c:= -1)
)

;====GOAL: g-sheep-per-sec

(defrule
(up-compare-goal g-shepherd-trip-time != -1)
(up-compare-goal g-shepherd-trip-time != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-shepherd-trip-time)
(up-modify-goal g-sheep-per-sec g:= g-temp)
)

(defrule
(up-compare-goal g-shepherd-trip-time == -1)
=>
(up-modify-goal g-sheep-per-sec c:= -1)
)

;====GOAL: g-forage-per-sec

(defrule
(up-compare-goal g-forager-trip-time != -1)
(up-compare-goal g-forager-trip-time != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-forager-trip-time)
(up-modify-goal g-forage-per-sec g:= g-temp)
)

(defrule
(up-compare-goal g-forager-trip-time == -1)
=>
(up-modify-goal g-forage-per-sec c:= -1)
)

;====GOAL: g-deer-per-sec

(defrule
(up-compare-goal g-deer-trip-time != -1)
(up-compare-goal g-deer-trip-time != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-deer-trip-time)
(up-modify-goal g-deer-per-sec g:= g-temp)
)

(defrule
(up-compare-goal g-deer-trip-time == -1)
=>
(up-modify-goal g-deer-per-sec c:= -1)
)

;====GOAL: g-boar-per-sec

(defrule
(up-compare-goal g-boar-trip-time != -1)
(up-compare-goal g-boar-trip-time != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-boar-trip-time)
(up-modify-goal g-boar-per-sec g:= g-temp)
)

(defrule
(up-compare-goal g-boar-trip-time == -1)
=>
(up-modify-goal g-boar-per-sec c:= -1)
)

;====GOAL: g-farm-per-sec

(defrule
(up-compare-goal g-farmer-trip-time != -1)
(up-compare-goal g-farmer-trip-time != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-farmer-trip-time)
(up-modify-goal g-farm-per-sec g:= g-temp)
)

(defrule
(up-compare-goal g-farmer-trip-time == -1)
=>
(up-modify-goal g-farm-per-sec c:= -1)
)

;====GOAL: g-wood-per-sec

(defrule
(up-compare-goal g-lumberjack-trip-time != -1)
(up-compare-goal g-lumberjack-trip-time != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-lumberjack-trip-time)
(up-modify-goal g-wood-per-sec g:= g-temp)
)

(defrule
(up-compare-goal g-lumberjack-trip-time == -1)
=>
(up-modify-goal g-wood-per-sec c:= -1)
)

;====GOAL: g-gold-per-sec

(defrule
(up-compare-goal g-gold-miner-trip-time != -1)
(up-compare-goal g-gold-miner-trip-time != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-gold-miner-trip-time)
(up-modify-goal g-gold-per-sec g:= g-temp)
)

(defrule
(up-compare-goal g-gold-miner-trip-time == -1)
=>
(up-modify-goal g-gold-per-sec c:= -1)
)

;====GOAL: g-stone-per-sec

(defrule
(up-compare-goal g-stone-miner-trip-time != -1)
(up-compare-goal g-stone-miner-trip-time != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-stone-miner-trip-time)
(up-modify-goal g-stone-per-sec g:= g-temp)
)

(defrule
(up-compare-goal g-stone-miner-trip-time == -1)
=>
(up-modify-goal g-stone-per-sec c:= -1)
)

;====GOAL: g-fish-per-sec

(defrule
(up-compare-goal g-fishing-ship-trip-time != -1)
(up-compare-goal g-fishing-ship-trip-time != 0)
=>
(up-modify-goal g-temp g:= g-def-carry-capacity)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-fishing-ship-trip-time)
(up-modify-goal g-fish-per-sec g:= g-temp)
)

(defrule
(up-compare-goal g-fishing-ship-trip-time == -1)
=>
(up-modify-goal g-fish-per-sec c:= -1)
)

;====GOAL: g-merchant-line

(defrule
(true)
=>
(up-modify-goal g-merchant-line c:= 0)
(up-get-fact unit-type-count-total merchant g-temp)
(up-modify-goal g-merchant-line g:+ g-temp)
(up-get-fact unit-type-count-total 204 g-temp)	;loaded merchant
(up-modify-goal g-merchant-line g:+ g-temp)
)

;====GOAL: g-peasant-levy-line

(defrule
(true)
=>
(up-modify-goal g-peasant-levy-line c:= 0)
(up-get-fact unit-type-count-total peasant-levy g-temp)
(up-modify-goal g-peasant-levy-line g:+ g-temp)
(up-get-fact unit-type-count-total town-militia g-temp)
(up-modify-goal g-peasant-levy-line g:+ g-temp)
(up-get-fact unit-type-count-total freeman g-temp)
(up-modify-goal g-peasant-levy-line g:+ g-temp)
(up-get-fact unit-type-count-total yeoman g-temp)
(up-modify-goal g-peasant-levy-line g:+ g-temp)
)

;====GOAL: g-raider-line

(defrule
(true)
=>
(up-modify-goal g-raider-line c:= 0)
(up-get-fact unit-type-count-total raider g-temp)
(up-modify-goal g-raider-line g:+ g-temp)
(up-get-fact unit-type-count-total pillager g-temp)
(up-modify-goal g-raider-line g:+ g-temp)
(up-get-fact unit-type-count-total plunderer g-temp)
(up-modify-goal g-raider-line g:+ g-temp)
)

;====GOAL: g-retainer-line

(defrule
(true)
=>
(up-modify-goal g-retainer-line c:= 0)
(up-get-fact unit-type-count-total retainer g-temp)
(up-modify-goal g-retainer-line g:+ g-temp)
(up-get-fact unit-type-count-total housecarl g-temp)
(up-modify-goal g-retainer-line g:+ g-temp)
(up-get-fact unit-type-count-total elite-housecarl g-temp)
(up-modify-goal g-retainer-line g:+ g-temp)
)

;====GOAL: g-pikeman-line

(defrule
(true)
=>
(up-modify-goal g-pikeman-line c:= 0)
(up-get-fact unit-type-count-total new-pikeman g-temp)
(up-modify-goal g-pikeman-line g:+ g-temp)
(up-get-fact unit-type-count-total guard-pikeman g-temp)
(up-modify-goal g-pikeman-line g:+ g-temp)
)

;====GOAL: g-sentry-line

(defrule
(true)
=>
(up-modify-goal g-sentry-line c:= 0)
(up-get-fact unit-type-count-total sentry g-temp)
(up-modify-goal g-sentry-line g:+ g-temp)
(up-get-fact unit-type-count-total sentinel g-temp)
(up-modify-goal g-sentry-line g:+ g-temp)
)

;====GOAL: g-peasant-bowman-line

(defrule
(true)
=>
(up-modify-goal g-peasant-bowman-line c:= 0)
(up-get-fact unit-type-count-total peasant-bowman g-temp)
(up-modify-goal g-peasant-bowman-line g:+ g-temp)
(up-get-fact unit-type-count-total new-archer g-temp)
(up-modify-goal g-peasant-bowman-line g:+ g-temp)
(up-get-fact unit-type-count-total new-longbowman g-temp)
(up-modify-goal g-peasant-bowman-line g:+ g-temp)
(up-get-fact unit-type-count-total new-elite-longbowman g-temp)
(up-modify-goal g-peasant-bowman-line g:+ g-temp)
)

;====GOAL: g-javelineer-line

(defrule
(true)
=>
(up-modify-goal g-javelineer-line c:= 0)
(up-get-fact unit-type-count-total javelineer g-temp)
(up-modify-goal g-javelineer-line g:+ g-temp)
(up-get-fact unit-type-count-total new-skirmisher g-temp)
(up-modify-goal g-javelineer-line g:+ g-temp)
(up-get-fact unit-type-count-total new-elite-skirmisher g-temp)
(up-modify-goal g-javelineer-line g:+ g-temp)
)

;====GOAL: g-cavalry-archer-line

(defrule
(true)
=>
(up-modify-goal g-cavalry-archer-line c:= 0)
(up-get-fact unit-type-count-total cavalry-archer g-temp)
(up-modify-goal g-cavalry-archer-line g:+ g-temp)
(up-get-fact unit-type-count-total heavy-cavalry-archer g-temp)
(up-modify-goal g-cavalry-archer-line g:+ g-temp)
)

;====GOAL: g-crossbowman-line

(defrule
(true)
=>
(up-modify-goal g-crossbowman-line c:= 0)
(up-get-fact unit-type-count-total new-crossbowman g-temp)
(up-modify-goal g-crossbowman-line g:+ g-temp)
(up-get-fact unit-type-count-total arbalester g-temp)
(up-modify-goal g-crossbowman-line g:+ g-temp)
)

;====GOAL: g-scout-cavalry-line

(defrule
(true)
=>
(up-modify-goal g-scout-cavalry-line c:= 0)
(up-get-fact unit-type-count-total scout-cavalry g-temp)
(up-modify-goal g-scout-cavalry-line g:+ g-temp)
(up-get-fact unit-type-count-total light-cavalry g-temp)
(up-modify-goal g-scout-cavalry-line g:+ g-temp)
(up-get-fact unit-type-count-total hobelar g-temp)
(up-modify-goal g-scout-cavalry-line g:+ g-temp)
)

;====GOAL: g-knight-line

(defrule
(true)
=>
(up-modify-goal g-knight-line c:= 0)
(up-get-fact unit-type-count-total knight g-temp)
(up-modify-goal g-knight-line g:+ g-temp)
(up-get-fact unit-type-count-total cavalier g-temp)
(up-modify-goal g-knight-line g:+ g-temp)
(up-get-fact unit-type-count-total paladin g-temp)
(up-modify-goal g-knight-line g:+ g-temp)
)

;====GOAL: g-lancer-line

(defrule
(true)
=>
(up-modify-goal g-lancer-line c:= 0)
(up-get-fact unit-type-count-total lancer g-temp)
(up-modify-goal g-lancer-line g:+ g-temp)
(up-get-fact unit-type-count-total guard-lancer g-temp)
(up-modify-goal g-lancer-line g:+ g-temp)
)

;====GOAL: g-mounted-raider-line

(defrule
(true)
=>
(up-modify-goal g-mounted-raider-line c:= 0)
(up-get-fact unit-type-count-total mounted-raider g-temp)
(up-modify-goal g-mounted-raider-line g:+ g-temp)
(up-get-fact unit-type-count-total marauder g-temp)
(up-modify-goal g-mounted-raider-line g:+ g-temp)
)

;====GOAL: g-battering-ram-line

(defrule
(true)
=>
(up-modify-goal g-battering-ram-line c:= 0)
(up-get-fact unit-type-count-total new-battering-ram g-temp)
(up-modify-goal g-battering-ram-line g:+ g-temp)
(up-get-fact unit-type-count-total siege-ram g-temp)
(up-modify-goal g-battering-ram-line g:+ g-temp)
)

;====GOAL: g-mangonel-line

(defrule
(true)
=>
(up-modify-goal g-mangonel-line c:= 0)
(up-get-fact unit-type-count-total mangonel g-temp)
(up-modify-goal g-mangonel-line g:+ g-temp)
(up-get-fact unit-type-count-total heavy-mangonel g-temp)
(up-modify-goal g-mangonel-line g:+ g-temp)
)

;====GOAL: g-onager-line

(defrule
(true)
=>
(up-modify-goal g-onager-line c:= 0)
(up-get-fact unit-type-count-total onager g-temp)
(up-modify-goal g-onager-line g:+ g-temp)
(up-get-fact unit-type-count-total siege-onager g-temp)
(up-modify-goal g-onager-line g:+ g-temp)
)

;====GOAL: g-scorpion-line

(defrule
(true)
=>
(up-modify-goal g-scorpion-line c:= 0)
(up-get-fact unit-type-count-total scorpion g-temp)
(up-modify-goal g-scorpion-line g:+ g-temp)
(up-get-fact unit-type-count-total heavy-scorpion g-temp)
(up-modify-goal g-scorpion-line g:+ g-temp)
)

;====GOAL: g-ballista-line

(defrule
(true)
=>
(up-modify-goal g-ballista-line c:= 0)
(up-get-fact unit-type-count-total ballista g-temp)
(up-modify-goal g-ballista-line g:+ g-temp)
(up-get-fact unit-type-count-total siege-ballista g-temp)
(up-modify-goal g-ballista-line g:+ g-temp)
)

;====GOAL: g-trebuchet-line

(defrule
(true)
=>
(up-modify-goal g-trebuchet-line c:= 0)
(up-get-fact unit-type-count-total 42 g-temp)	;unpacked trebuchet
(up-modify-goal g-trebuchet-line g:+ g-temp)
(up-get-fact unit-type-count-total 331 g-temp)	;trebuchet
(up-modify-goal g-trebuchet-line g:+ g-temp)
)

;====GOAL: g-river-raft-line

(defrule
(true)
=>
(up-modify-goal g-river-raft-line c:= 0)
(up-get-fact unit-type-count-total river-raft g-temp)
(up-modify-goal g-river-raft-line g:+ g-temp)
(up-get-fact unit-type-count-total war-raft g-temp)
(up-modify-goal g-river-raft-line g:+ g-temp)
(up-get-fact unit-type-count-total longship g-temp)
(up-modify-goal g-river-raft-line g:+ g-temp)
)

;====GOAL: g-galley-line

(defrule
(true)
=>
(up-modify-goal g-galley-line c:= 0)
(up-get-fact unit-type-count-total new-galley g-temp)
(up-modify-goal g-galley-line g:+ g-temp)
(up-get-fact unit-type-count-total galleass g-temp)
(up-modify-goal g-galley-line g:+ g-temp)
)

;====GOAL: g-boarding-galley-line

(defrule
(true)
=>
(up-modify-goal g-boarding-galley-line c:= 0)
(up-get-fact unit-type-count-total boarding-galley g-temp)
(up-modify-goal g-boarding-galley-line g:+ g-temp)
(up-get-fact unit-type-count-total fast-boarding-galley g-temp)
(up-modify-goal g-boarding-galley-line g:+ g-temp)
)

;====GOAL: g-war-cog-line

(defrule
(true)
=>
(up-modify-goal g-war-cog-line c:= 0)
(up-get-fact unit-type-count-total war-cog g-temp)
(up-modify-goal g-war-cog-line g:+ g-temp)
(up-get-fact unit-type-count-total hulk g-temp)
(up-modify-goal g-war-cog-line g:+ g-temp)
)

;====GOAL: g-siege-ship-line

(defrule
(true)
=>
(up-modify-goal g-siege-ship-line c:= 0)
(up-get-fact unit-type-count-total siege-ship g-temp)
(up-modify-goal g-siege-ship-line g:+ g-temp)
(up-get-fact unit-type-count-total elite-siege-ship g-temp)
(up-modify-goal g-siege-ship-line g:+ g-temp)
)

;====GOAL: g-ambusher-line

(defrule
(true)
=>
(up-modify-goal g-ambusher-line c:= 0)
(up-get-fact unit-type-count-total ambusher g-temp)
(up-modify-goal g-ambusher-line g:+ g-temp)
(up-get-fact unit-type-count-total elite-ambusher g-temp)
(up-modify-goal g-ambusher-line g:+ g-temp)
)

;====GOAL: g-throwing-axeman-line

(defrule
(true)
=>
(up-modify-goal g-throwing-axeman-line c:= 0)
(up-get-fact unit-type-count-total throwing-axeman g-temp)
(up-modify-goal g-throwing-axeman-line g:+ g-temp)
(up-get-fact unit-type-count-total elite-throwing-axeman g-temp)
(up-modify-goal g-throwing-axeman-line g:+ g-temp)
)

;====GOAL: g-avon-protector-line

(defrule
(true)
=>
(up-modify-goal g-avon-protector-line c:= 0)
(up-get-fact unit-type-count-total avon-protector g-temp)
(up-modify-goal g-avon-protector-line g:+ g-temp)
(up-get-fact unit-type-count-total elite-avon-protector g-temp)
(up-modify-goal g-avon-protector-line g:+ g-temp)
)

;====GOAL: g-aldorian-crossbowman-line

(defrule
(true)
=>
(up-modify-goal g-aldorian-crossbowman-line c:= 0)
(up-get-fact unit-type-count-total aldorian-crossbowman g-temp)
(up-modify-goal g-aldorian-crossbowman-line g:+ g-temp)
(up-get-fact unit-type-count-total elite-aldorian-crossbowman g-temp)
(up-modify-goal g-aldorian-crossbowman-line g:+ g-temp)
)

;====GOAL: g-mounted-crossbowman-line

(defrule
(true)
=>
(up-modify-goal g-mounted-crossbowman-line c:= 0)
(up-get-fact unit-type-count-total mounted-crossbowman g-temp)
(up-modify-goal g-mounted-crossbowman-line g:+ g-temp)
(up-get-fact unit-type-count-total elite-mounted-crossbowman g-temp)
(up-modify-goal g-mounted-crossbowman-line g:+ g-temp)
)

;====GOAL: g-outpost-line

(defrule
(true)
=>
(up-modify-goal g-outpost-line c:= 0)
(up-get-fact building-type-count-total outpost g-temp)
(up-modify-goal g-outpost-line g:+ g-temp)
(up-get-fact building-type-count-total frontier-outpost g-temp)
(up-modify-goal g-outpost-line g:+ g-temp)
)

;====GOAL: g-watch-tower-line

(defrule
(true)
=>
(up-modify-goal g-watch-tower-line c:= 0)
(up-get-fact unit-type-count-total watch-tower g-temp)
(up-modify-goal g-watch-tower-line g:+ g-temp)
(up-get-fact unit-type-count-total guard-tower g-temp)
(up-modify-goal g-watch-tower-line g:+ g-temp)
(up-get-fact unit-type-count-total bastion g-temp)
(up-modify-goal g-watch-tower-line g:+ g-temp)
)

;====GOAL: g-current-num-peasants

(defrule
(true)
=>
(up-modify-goal g-current-num-peasants c:= 0)
(up-get-fact unit-type-count peasant g-temp)
(up-modify-goal g-current-num-peasants g:= g-temp)
)

;====GOAL: g-current-num-fishing-ships

(defrule
(true)
=>
(up-modify-goal g-current-num-fishing-ships c:= 0)
(up-get-fact unit-type-count fishing-ship g-temp)
(up-modify-goal g-current-num-fishing-ships g:= g-temp)
)

;====GOAL: g-true-housing-headroom

;True housing headroom takes headroom buildings in progress
;into account.

#load-if-not-defined TEUTONIC-CIV		;Not Norwatch
(defrule
(true)
=>
(up-get-fact building-type-count-total town-hall g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-true-housing-headroom g:= g-temp)
(up-get-fact building-type-count-total house g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-true-housing-headroom g:+ g-temp)
(up-get-fact building-type-count-total castle g-temp)
(up-modify-goal g-temp c:* 20)
(up-modify-goal g-true-housing-headroom g:+ g-temp)
(up-get-fact population 0 g-temp)
(up-modify-goal g-true-housing-headroom g:- g-temp)
;(up-chat-data-to-all "Headroom: %d" g: g-true-housing-headroom)
)

#else									;Norwatch
(defrule
(true)
=>
(up-get-fact building-type-count-total town-hall g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-true-housing-headroom g:= g-temp)
(up-get-fact building-type-count-total house g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-true-housing-headroom g:+ g-temp)
(up-get-fact building-type-count-total castle g-temp)
(up-modify-goal g-temp c:* 20)
(up-modify-goal g-true-housing-headroom g:+ g-temp)
(up-get-fact building-type-count-total barracks g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-true-housing-headroom g:+ g-temp)
)

(defrule
(true)
=>
(up-get-fact building-type-count-total archery-range g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-true-housing-headroom g:+ g-temp)
(up-get-fact building-type-count-total stable g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-true-housing-headroom g:+ g-temp)
(up-get-fact building-type-count-total siege-workshop g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-true-housing-headroom g:+ g-temp)
(up-get-fact population 0 g-temp)
(up-modify-goal g-true-housing-headroom g:- g-temp)
;(up-chat-data-to-all "Headroom: %d" g: g-true-housing-headroom)
)

#end-if