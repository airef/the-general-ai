;====GOAL: g-general

(defrule
(goal g-general PENDING)
=>
(up-get-fact cc-gaia-type-count tree-class g-random-number)	;Get number of forest trees on map as a universal seed for randomization (915 = forest class)
(up-modify-goal g-random-number c:mod NUM-GENERALS)		;NUM-GENERALS is defined for each civ
(up-get-fact player-number my-player-number g-temp)
(up-modify-goal g-random-number g:+ g-temp)				;add player number to mod of random number
(up-modify-goal g-random-number c:mod NUM-GENERALS)
(up-modify-goal g-random-number c:+ 1)					;add 1 because mod can be 0
(up-modify-goal g-general g:= g-random-number)
(disable-self)
)

#load-if-defined AZTEC-CIV
		
	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-cuauhtemoc)
	(up-change-name "General Cuauhtemoc")
	(disable-self)
	)
		
	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-montezuma)
	(up-change-name "General Montezuma")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-eagles)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-eagles)
	; )

#end-if

#load-if-defined BERBERS-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )
	
#end-if

#load-if-defined BRITON-CIV
		
	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-longshanks)
	(up-change-name "General Longshanks")
	(disable-self)
	)
		
	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-henry-v)
	(up-change-name "General Henry V")
	(disable-self)
	)
		
	(defrule
	(goal g-general 3)
	=>
	(set-goal g-general gv-richard)
	(up-change-name "General Richard I")
	(disable-self)
	)
		
	(defrule
	(goal g-general 4)
	=>
	(set-goal g-general gv-arthur)
	(up-change-name "General Arthur")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-archers)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-archers)
	; )

#end-if

#load-if-defined BURMESE-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-circus)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-circus)
	; )
	
#end-if

#load-if-defined BYZANTINE-CIV

	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-belisarius)
	(up-change-name "General Belisarius")
	(disable-self)
	)

	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-heraclius)
	(up-change-name "General Heraclius")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

#load-if-defined CELTIC-CIV

	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-brian-boru)
	(up-change-name "General Brian Boru")
	(disable-self)
	)

	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-william-wallace)
	(up-change-name "General William Wallace")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

#load-if-defined CHINESE-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-archers)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-archers)
	; )

#end-if

#load-if-defined ETHIOPIAN-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )
	
#end-if

#load-if-defined FRANKISH-CIV

	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-charlemagne)
	(up-change-name "General Charlemagne")
	(disable-self)
	)

	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-joan-of-arc)
	(up-change-name "General Joan of Arc")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

#load-if-defined GOTHIC-CIV

	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-theodoric)
	(up-change-name "General Theodoric")
	(disable-self)
	)

	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-alaric)
	(up-change-name "General Alaric")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

#load-if-defined HUN-CIV

	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-attila)
	(up-change-name "General Attila")
	(disable-self)
	)

	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-bleda)
	(up-change-name "General Bleda")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-cav-archers)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-cav-archers)
	; )

#end-if

#load-if-defined INCAN-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-eagles)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-eagles)
	; )

#end-if

#load-if-defined INDIAN-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-camels)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-camels)
	; )
	
#end-if

#load-if-defined ITALIAN-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )
	
#end-if

#load-if-defined JAPANESE-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

#load-if-defined KHMER-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-circus)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-circus)
	; )
	
#end-if

#load-if-defined KOREAN-CIV
		
	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-yi-sun-shin)
	(up-change-name "General Yi Sun-Shin")
	(disable-self)
	)
		
	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-wang-geon)
	(up-change-name "General Wang Geon")
	(disable-self)
	)
		
	(defrule
	(goal g-general 3)				   
	=>
	(set-goal g-general gv-yun-gwan)
	(up-change-name "General Yun Gwan")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-archers)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-archers)
	; )

#end-if

#load-if-defined MAGYAR-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-cav-archers)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-cav-archers)
	; )
	
#end-if

#load-if-defined MALAY-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )
	
#end-if

#load-if-defined MALIAN-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )
	
#end-if

#load-if-defined MAYAN-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-meso-archers)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-meso-archers)
	; )

#end-if

#load-if-defined MONGOL-CIV

	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-genghis-khan)
	(up-change-name "General Genghis Khan")
	(disable-self)
	)

	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-kublai-khan)
	(up-change-name "General Kublai Khan")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-cav-archers)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-cav-archers)
	; )

#end-if

#load-if-defined PERSIAN-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

#load-if-defined PORTUGUESE-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )
	
#end-if

#load-if-defined SARACEN-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-camels)
	; )

#end-if

#load-if-defined SLAVIC-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )
	
#end-if

#load-if-defined SPANISH-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

#load-if-defined TEUTONIC-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

#load-if-defined TURKISH-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

#load-if-defined VIETNAMESE-CIV

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-archers)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-archers)
	; )
	
#end-if

#load-if-defined VIKING-CIV

	(defrule
	(goal g-general 1)
	=>
	(set-goal g-general gv-leif-ericson)
	(up-change-name "General Leif Ericson")
	(disable-self)
	)

	(defrule
	(goal g-general 2)
	=>
	(set-goal g-general gv-harald-hardraade)
	(up-change-name "General Harald Hardraade")
	(disable-self)
	)

	; (defrule
	; (goal g-strategy gv-castle-military)
	; =>
	; (set-goal g-strategy gv-castle-knights)
	; )

	; (defrule
	; (goal g-strategy gv-imperial-military)
	; =>
	; (set-goal g-strategy gv-imperial-knights)
	; )

#end-if

;====GOAL: g-boar-type-count


(defrule
   (cc-players-unit-type-count 0 wild-boar > 0)
=>
   (set-goal g-boar-type wild-boar)
   (disable-self)
)
(defrule
   (cc-players-unit-type-count 0 javelina > 0)
=>
   (set-goal g-boar-type javelina)
   (disable-self)
)
(defrule
   (cc-players-unit-type-count 0 elephant > 0)
=>
   (set-goal g-boar-type elephant)
   (disable-self)
)
(defrule
   (cc-players-unit-type-count 0 rhino > 0)
=>
   (set-goal g-boar-type rhino)
   (disable-self)
)



;====GOAL: g-boar-found

(defrule
(true)
=>
(up-get-fact cc-gaia-type-count wild-boar g-temp)
(up-get-fact cc-gaia-type-count javelina g-temp-2)
(up-modify-goal g-temp g:+ g-temp-2)
(up-get-fact cc-gaia-type-count elephant g-temp-2)
(up-modify-goal g-temp g:+ g-temp-2)
(up-get-fact cc-gaia-type-count rhino g-temp-2)
(up-modify-goal g-temp g:+ g-temp-2)
(disable-self)
)

(defrule
(up-compare-goal g-temp == 0)
=>
(set-goal g-boar-found gv-all-boar-hunted)
(chat-local-to-self "no boar on map")
(disable-self)
)

(defrule
(up-gaia-type-count g: g-boar-type c:== 1)
=>
(chat-local-to-self "My first boar is found")
(disable-self)
)

#load-if-not-defined YUCATAN-MAP
	#load-if-not-defined BLACK-FOREST-MAP

		(defrule
		(up-gaia-type-count g: g-boar-type c:== 2)
		=>
		(chat-local-to-self "My two boars are found")
		(set-goal g-boar-found gv-all-boar-found)
		(disable-self)
		)

	#end-if
#end-if

#load-if-defined BLACK-FOREST-MAP

	(defrule
	(up-gaia-type-count g: g-boar-type c:== 3)
	=>
	(chat-local-to-self "My three boars are found")
	(set-goal g-boar-found gv-all-boar-found)
	(disable-self)
	)

#end-if

#load-if-defined YUCATAN-MAP

	(defrule
	(up-gaia-type-count g: g-boar-type c:== 3)
	=>
	(chat-local-to-self "My three boars are found")
	(set-goal g-boar-found gv-all-boar-found)
	(disable-self)
	)

#end-if

(defrule
(goal g-boar-found gv-all-boar-found)
(dropsite-min-distance live-boar > MAX-BOAR-HUNT-DISTANCE)
(dropsite-min-distance boar-hunting > MAX-BOAR-HUNT-DISTANCE)
=>
(set-goal g-boar-found gv-all-boar-hunted)
(chat-local-to-self "all boar hunted")
)



;====GOAL: g-gather-point

(defrule
(strategic-number sn-target-player-number > 0)
(players-building-type-count target-player town-center > 0)
=>
(up-full-reset-search)
(set-strategic-number sn-focus-player-number target-player)
(up-find-remote c: town-center c: 1)
)

(defrule
(strategic-number sn-target-player-number > 0)
(players-building-type-count target-player town-center > 0)
(up-set-target-object search-remote c: 0)
=>
(up-copy-point g-point-x g-position-self-x) ;point-x == TC location
(up-get-point position-object g-point-x2) ;point-x2 == enemy TC location
(up-lerp-tiles g-point-x g-point-x2 s: sn-safe-town-size)
(up-copy-point g-gather-point-x g-point-x)
)

#load-if-defined FIX-LATER

	(defrule
	(timer-triggered t-30-sec)
	(goal g-attacking NO)
	(goal g-town-under-attack NO)
	(goal g-enemy-units-in-town 0)
	(goal g-enemy-buildings-in-town 0)
	=>
	(up-full-reset-search)
	(up-filter-exclude cmdid-villager actionid-explore orderid-relic -1)
	(up-find-local c: -1 c: 240)
	(up-remove-objects search-local object-data-train-site == dock)
	(up-remove-objects search-local object-data-class == trade-cart-class)
	(up-remove-objects search-local object-data-class == monk-with-relic-class)
	(up-remove-objects search-local object-data-class == king-class)
	(up-target-point g-gather-point-x action-default -1 -1)
	)

#end-if



;====GOAL: g-loom-progress

(defrule
(up-research-status c: ri-loom < research-pending)
(dropsite-min-distance live-boar < MAX-BOAR-HUNT-DISTANCE)
(dropsite-min-distance live-boar >= 23)
(up-compare-goal g-loom-progress < gv-need-for-far-boar)
=>
(set-goal g-loom-progress gv-need-for-far-boar)
)

(defrule
(goal g-loom-progress gv-need-for-far-boar)
(up-research-status c: ri-loom < research-pending)
=>
(set-goal g-temp FAR-BOAR-HUNTING-VILS-NEEDED)
(up-modify-goal g-temp c:- 1)
)

(defrule
(goal g-loom-progress gv-need-for-far-boar)
(up-research-status c: ri-loom < research-pending)
(up-object-type-count c: villager g:>= g-temp)
(can-research ri-loom)
=>
(set-goal g-loom-progress gv-have-enough-vils)
)

(defrule
(up-compare-goal g-loom-progress < gv-pending)
(up-research-status c: ri-loom >= research-pending)
=>
(set-goal g-loom-progress gv-pending)
)



;====GOAL: g-boar-hunting-conditions-met

(defrule
(or
	(goal g-boar-hunting-conditions-met gv-far-boar-vils-met)
	(goal g-boar-hunting-conditions-met gv-loom-researched))
(or
	(dropsite-min-distance live-boar > MAX-BOAR-HUNT-DISTANCE)
	(or
		(dropsite-min-distance live-boar == -1)
		(unit-type-count villager < FAR-BOAR-HUNTING-VILS-NEEDED)))
(goal g-boar-hunt-status -1)
=>
(set-goal g-boar-hunting-conditions-met NO)
)

(defrule
(goal g-boar-hunting-conditions-met gv-near-boar-vils-met)
(or
	(dropsite-min-distance live-boar > MAX-BOAR-HUNT-DISTANCE)
	(or
		(dropsite-min-distance live-boar == -1)
		(unit-type-count villager < NEAR-BOAR-HUNTING-VILS-NEEDED)))
(goal g-boar-hunt-status -1)
=>
(set-goal g-boar-hunting-conditions-met NO)
)

(defrule
(goal g-boar-hunting-conditions-met NO)
(dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
(dropsite-min-distance live-boar >= 23)
(unit-type-count villager >= FAR-BOAR-HUNTING-VILS-NEEDED)
(goal g-boar-hunt-status -1)
=>
(set-goal g-boar-hunting-conditions-met gv-far-boar-vils-met)
(chat-local-to-self "have enough vils for far boar")
)

(defrule
(goal g-boar-hunting-conditions-met gv-far-boar-vils-met)
(dropsite-min-distance live-boar <= MAX-BOAR-HUNT-DISTANCE)
(dropsite-min-distance live-boar >= 23)
(unit-type-count villager >= FAR-BOAR-HUNTING-VILS-NEEDED)
(goal g-boar-hunt-status -1)
(up-research-status c: ri-loom >= research-pending)
=>
(set-goal g-boar-hunting-conditions-met gv-loom-researched)
(chat-local-to-self "have loom for far boar")
)

(defrule
(up-compare-goal g-boar-hunting-conditions-met < gv-near-boar-vils-met)
(dropsite-min-distance live-boar < 23)
(dropsite-min-distance live-boar >= 0)
(goal g-boar-hunt-status -1)
(unit-type-count villager >= NEAR-BOAR-HUNTING-VILS-NEEDED)
=>
(set-goal g-boar-hunting-conditions-met gv-near-boar-vils-met)
(chat-local-to-self "near boar hunting conditions met")
)



;====GOAL: g-boar-hunt-status

;=======================
;===== Hunting SNs =====
;Created by Archon
;Changed by Armelon
;Changed again by Leif Ericson
(defrule
(true)
=>
(set-strategic-number sn-enable-boar-hunting 2)
(set-strategic-number sn-minimum-number-hunters 0)
(set-strategic-number sn-minimum-boar-hunt-group-size 0)
(set-strategic-number sn-minimum-boar-lure-group-size 1000)
(set-strategic-number sn-maximum-hunt-drop-distance MAX-BOAR-HUNT-DISTANCE)
(disable-self)
)
;(defrule
;(goal tactic Nomad-start)
;=>
;(set-strategic-number sn-enable-boar-hunting 1)
;(set-strategic-number sn-maximum-hunt-drop-distance 13)
;(disable-self)
;)

;(defrule
;(goal tactic Nomad-start)
;(game-time > 420)
;=>
;(set-strategic-number sn-maximum-hunt-drop-distance MAX-BOAR-HUNT-DISTANCE)
;(disable-self)
;)

(defrule
(or
	(not
		(up-set-target-by-id g: g-current-boar-id))
	(and
		(timer-triggered t-boar-hunt)
		(and
			(unit-type-count villager-hunter == 0)
			(dropsite-min-distance boar-hunting > 5))))
(up-compare-goal g-boar-hunt-status != -1)
=>
(set-goal g-current-boar-id -1)
(set-goal g-boar-hunt-status -1)
(set-goal g-boar-lurer-id -1)
(chat-local-to-self "reset boar-hunting")
)

(defrule
(goal g-boar-hunt-status -1)
(not
	(up-set-target-by-id g: g-current-boar-id))
(up-compare-goal g-current-boar-id != -1)
=>
(set-goal g-current-boar-id -1)
(set-goal g-boar-lurer-id -1)
(chat-local-to-self "boar gathered")
)

(defrule
(dropsite-min-distance boar-hunting > 9)
(dropsite-min-distance live-boar > 9)
=>
(set-strategic-number sn-minimum-number-hunters 0)
;(chat-local-to-self "set min hunters")
)

(defrule
(up-compare-goal g-boar-hunting-conditions-met >= gv-far-boar-vils-met)
(up-compare-goal g-boar-hunt-status < gv-ready-to-lure)
(goal g-current-boar-id -1)
(dropsite-min-distance boar-hunting <= MAX-BOAR-HUNT-DISTANCE)
=>
(set-goal g-boar-hunt-status gv-ready-to-lure)
(chat-local-to-self "ready to lure")
)

(defrule
(up-compare-goal g-boar-hunt-status < gv-ready-to-lure)
(up-set-target-by-id g: g-current-boar-id)
(up-object-data object-data-carry < FAR-BOAR-FOOD-AMOUNT-LEFT)
(or
	(dropsite-min-distance live-boar > 23)
	(up-object-data object-data-carry < NEAR-BOAR-FOOD-AMOUNT-LEFT))
(up-compare-goal g-boar-hunting-conditions-met >= gv-far-boar-vils-met)
=>
(set-goal g-boar-hunt-status gv-ready-to-lure)
(set-strategic-number sn-minimum-boar-hunt-group-size 0)
(set-strategic-number sn-minimum-number-hunters 0)
(chat-local-to-self "ready to lure again")
)

(defrule
(goal g-boar-hunt-status gv-ready-to-lure)
=>
(up-set-target-point g-position-self-x)
(up-full-reset-search)
(set-strategic-number sn-focus-player-number 0)
(up-filter-distance c: 6 c: MAX-BOAR-HUNT-DISTANCE)
(up-find-remote g: g-boar-type c: 3)
(up-clean-search search-remote object-data-distance search-order-asc)
(chat-local-to-self "set boar search filter distance")
)

(defrule
(goal g-boar-hunt-status gv-ready-to-lure)
(up-set-target-object search-remote c: 0)
=>
(up-get-object-data object-data-id g-current-boar-id)	
(set-goal g-boar-hunt-status gv-select-boar)
(chat-local-to-self "set boar to hunt")
)

(defrule
(goal g-boar-hunt-status gv-select-boar)
(up-compare-goal g-current-boar-id != -1)
(up-object-data object-data-action != actionid-attack)
=>
(up-full-reset-search)
(up-set-target-by-id g: g-current-boar-id)
(up-set-target-point g-position-self-x)
(up-find-local c: villager-class c: 20)
(up-clean-search search-local object-data-distance search-order-asc)
(set-goal g-boar-hunt-status gv-find-lurer)
(chat-local-to-self "find boar lurer")
)

	(defrule
	(goal g-boar-hunt-status gv-find-lurer)
	(up-set-target-object search-local c: 0)
	(or
		(and
			(up-object-data object-data-hitpoints < 40)
			(research-completed ri-loom))
		(or
			(up-object-data object-data-hitpoints < 25)
			(up-object-data object-data-class != villager-class)))
	=>
	(up-reset-search 0 1 0 0); find an unwounded villager
	(up-find-local c: villager-class c: 1)
	(chat-local-to-self "find uninjured boar lurer")
	(up-jump-rule -1)
	)
	
(defrule
(goal g-boar-hunt-status gv-find-lurer)
(up-compare-goal g-current-boar-id != -1)
(up-object-data object-data-action != actionid-attack)
(up-set-target-object search-local c: 0)
(up-object-data object-data-class == villager-class)
=>
(up-get-object-data object-data-id g-boar-lurer-id)
(up-get-object-data object-data-carry g-temp)
(up-chat-data-to-self "Lurer is carrying %d res" g: g-temp)
(set-goal g-boar-hunt-status gv-lurer-drop-res)
)

(defrule
(goal g-boar-hunt-status gv-lurer-drop-res)
(up-compare-goal g-current-boar-id != -1)
(up-object-data object-data-action != actionid-attack)
(up-set-target-by-id g: g-boar-lurer-id)
(up-compare-goal g-temp > 5)
=>
(up-modify-goal g-temp-2 s:= sn-focus-player-number)
(set-strategic-number sn-focus-player-number my-player-number)
(up-set-target-point g-position-self-x)
(up-find-remote c: town-center c: 1)
(up-set-target-object search-remote c: 0)
(up-target-objects 1 action-default -1 -1)
(up-modify-sn sn-focus-player-number g:= g-temp-2)
(chat-local-to-self "drop resources before luring")
)

(defrule
(goal g-boar-hunt-status gv-lurer-drop-res)
(up-set-target-by-id g: g-boar-lurer-id)
=>
(up-get-object-data object-data-carry g-temp)
)

(defrule
(goal g-boar-hunt-status gv-lurer-drop-res)
(up-set-target-by-id g: g-boar-lurer-id)
(up-compare-goal g-temp <= 5)
=>
(chat-local-to-self "lurer has dropped resources")
(set-goal g-boar-hunt-status gv-ready-to-target-boar)
)

(defrule
(goal g-boar-hunt-status gv-ready-to-target-boar)
(up-compare-goal g-current-boar-id != -1)
(up-object-data object-data-action != actionid-attack)
(up-set-target-by-id g: g-boar-lurer-id)
=>
(up-full-reset-search)
(up-add-object-by-id search-local g: g-boar-lurer-id)
(up-set-target-by-id g: g-current-boar-id)
(up-target-objects 1 action-default -1 -1);right-click the boar with the villager
(set-goal g-boar-hunt-status gv-target-boar)
(enable-timer t-boar-hunt 60)
(chat-local-to-self "target boar")
)

(defrule
(goal g-boar-hunt-status gv-target-boar)
(dropsite-min-distance live-boar < 12)
(up-compare-goal g-current-boar-id != -1)
=>
(up-full-reset-search)
(up-set-target-point g-position-self-x)
(up-filter-distance c: -1 c: 5)
(up-find-local c: villager-class c: 3)
(up-set-target-by-id g: g-current-boar-id)
(up-target-objects 1 action-default -1 -1)
(set-goal g-boar-hunt-status gv-assist-hunting-boar)
(chat-local-to-self "find second boar hunt assistant")
)

(defrule
(goal g-boar-hunt-status gv-assist-hunting-boar)
(dropsite-min-distance live-boar < 5)
(up-compare-goal g-current-boar-id != -1)
=>
(set-strategic-number sn-minimum-number-hunters 8)
(up-full-reset-search)
(up-set-target-point g-position-self-x)
(up-filter-distance c: -1 c: 12)
(up-find-local c: villager-class c: 6)
(up-set-target-by-id g: g-current-boar-id)
(up-target-objects 1 action-default -1 -1)
(set-goal g-boar-hunt-status gv-full-assist-hunting-boar)
(chat-local-to-self "get other assistant boar hunters")
)

(defrule
(goal g-boar-hunt-status gv-full-assist-hunting-boar)
(dropsite-min-distance live-boar < 5)
(up-compare-goal g-current-boar-id != -1)
(unit-type-count villager-hunter < 4)
=>
(set-strategic-number sn-minimum-number-hunters 8)
(up-full-reset-search)
(up-set-target-point g-position-self-x)
(up-filter-distance c: -1 c: 16)
(up-find-local c: villager-class c: 6)
(up-set-target-by-id g: g-current-boar-id)
(up-target-objects 1 action-default -1 -1)
(chat-local-to-self "retarget boar")
)

(defrule
(goal g-boar-hunt-status gv-full-assist-hunting-boar)
(dropsite-min-distance live-boar > 5)
=>
(set-goal g-boar-hunt-status -1)
(set-strategic-number sn-minimum-number-hunters 0)
(chat-local-to-self "boar is hunted")
)

	
#load-if-defined OLD-BOAR-HUNT-CODE

	;====GOAL: g-boar-hunt-status

	;=======================
	;===== Hunting SNs =====
	;Created by Archon
	;Changed by Armelon
	;Changed again by Leif Ericson
	(defrule
	(true)
	=>
	(set-strategic-number sn-enable-boar-hunting 2)
	(set-strategic-number sn-minimum-number-hunters 0)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-minimum-boar-lure-group-size 1000)
	(set-strategic-number sn-maximum-hunt-drop-distance 38)
	(disable-self)
	)
	;(defrule
	;(goal tactic Nomad-start)
	;=>
	;(set-strategic-number sn-enable-boar-hunting 1)
	;(set-strategic-number sn-maximum-hunt-drop-distance 13)
	;(disable-self)
	;)

	;(defrule
	;(goal tactic Nomad-start)
	;(game-time > 420)
	;=>
	;(set-strategic-number sn-maximum-hunt-drop-distance 38)
	;(disable-self)
	;)

	(defrule
	(or
		(not
			(up-set-target-by-id g: g-current-boar-id))
		(and
			(timer-triggered t-boar-hunt)
			(and
				(unit-type-count villager-hunter == 0)
				(dropsite-min-distance boar-hunting > 5))))
	(up-compare-goal g-boar-hunt-status != -1)
	=>
	(set-goal g-current-boar-id -1)
	(set-goal g-boar-hunt-status -1)
	(chat-local-to-self "reset boar-hunting")
	)

	(defrule
	(dropsite-min-distance boar-hunting > 9)
	(dropsite-min-distance live-boar > 9)
	=>
	(set-strategic-number sn-minimum-number-hunters 0)
	)

	(defrule
	;(up-compare-goal g-strategy != gv-krush)
	(up-object-type-count c: villager > 8)
	(dropsite-min-distance boar-hunting < 23)
	(up-compare-goal g-boar-hunt-status < 1)
	(unit-type-count-total villager-hunter == 0)
	=>
	(set-goal g-boar-hunt-status gv-ready-to-lure)
	)

	(defrule
	;(up-compare-goal g-strategy != gv-krush)
	(up-research-status c: ri-loom >= research-pending)
	(up-object-type-count c: villager > 9)
	(dropsite-min-distance boar-hunting < 38)
	(up-compare-goal g-boar-hunt-status < 1)
	(unit-type-count-total villager-hunter == 0)
	=>
	(set-goal g-boar-hunt-status gv-ready-to-lure)
	)

	(defrule
	(up-set-target-by-id g: g-current-boar-id)
	(up-object-data object-data-carry < 135)
	(or
		(dropsite-min-distance live-boar > 23)
		(up-object-data object-data-carry < 95))
	(unit-type-count villager-hunter > 0)
	(dropsite-min-distance live-boar < 38)
	=>
	(set-goal g-boar-hunt-status gv-ready-to-lure)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-minimum-number-hunters 0)
	)

	(defrule
	(goal g-boar-hunt-status gv-ready-to-lure)
	=>
	(up-set-target-point g-position-self-x)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(set-strategic-number sn-focus-player-number 0)
	(up-filter-distance c: 6 c: 38)
	)

	(defrule
	(goal g-boar-hunt-status gv-ready-to-lure)
	(up-find-remote g: g-boar-type c: 1)
	=>
	(up-set-target-object search-remote c: 0)
	(up-get-object-data object-data-id g-current-boar-id)	
	(set-goal g-boar-hunt-status gv-select-boar)
	)

	(defrule
	(goal g-boar-hunt-status gv-select-boar)
	(up-compare-goal g-current-boar-id != -1)
	(up-object-data object-data-action != actionid-attack)
	=>
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 38)
	(up-find-local c: villager-class c: 1)
	)

		(defrule
		(goal g-boar-hunt-status gv-select-boar)
		(up-set-target-object search-local c: 0)
		(or
			(and
				(up-object-data object-data-hitpoints < 40)
				(research-completed ri-loom))
			(up-object-data object-data-hitpoints < 25))
		=>
		(up-reset-search 0 1 0 0); find an unwounded villager
		(up-find-local c: villager-class c: 1)
		(up-jump-rule -1)
		)

	(defrule
	(goal g-boar-hunt-status gv-select-boar)
	(up-compare-goal g-current-boar-id != -1)
	(up-object-data object-data-action != actionid-attack)
	(up-set-target-object search-local c: 0)
	=>
	(up-set-target-by-id g: g-current-boar-id)
	(up-target-objects 1 action-default -1 -1);right-click the boar with the villager
	(set-goal g-boar-hunt-status gv-target-boar)
	(enable-timer t-boar-hunt 30)
	)

	(defrule
	(goal g-boar-hunt-status gv-target-boar)
	(dropsite-min-distance live-boar < 12)
	(up-compare-goal g-current-boar-id != -1)
	=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 5)
	(up-find-local c: villager-class c: 1)
	)

		(defrule
		(goal g-boar-hunt-status gv-target-boar)
		(up-set-target-object search-local c: 0)
		(or
			(and
				(up-object-data object-data-hitpoints < 40)
				(research-completed ri-loom))
			(up-object-data object-data-hitpoints < 25))
		=>
		(up-reset-search 0 1 0 0); find an unwounded villager
		(up-find-local c: villager-class c: 1)
		(up-jump-rule -1)
		)

	(defrule
	(goal g-boar-hunt-status gv-target-boar)
	(dropsite-min-distance live-boar < 12)
	(up-compare-goal g-current-boar-id != -1)
	(up-set-target-object search-local c: 0)
	=>
	(up-set-target-by-id g: g-current-boar-id)
	(up-target-objects 1 action-default -1 -1)
	(set-goal g-boar-hunt-status gv-assist-hunting-boar)
	)

	(defrule
	(goal g-boar-hunt-status gv-assist-hunting-boar)
	(dropsite-min-distance live-boar < 5)
	(up-compare-goal g-current-boar-id != -1)
	(research-completed ri-loom)
	=>
	(set-strategic-number sn-minimum-number-hunters 8)
	(up-reset-filters)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 12)
	(up-find-local c: villager-class c: 8)
	(up-remove-objects search-local object-data-hitpoints < 40)
	(set-goal g-boar-hunt-status gv-full-assist-hunting-boar)
	)

	(defrule
	(goal g-boar-hunt-status gv-assist-hunting-boar)
	(dropsite-min-distance live-boar < 5)
	(up-compare-goal g-current-boar-id != -1)
	(up-research-status c: ri-loom < research-complete)
	=>
	(set-strategic-number sn-minimum-number-hunters 8)
	(up-reset-filters)
	(up-reset-search 1 1 1 1)
	(up-filter-distance c: -1 c: 12)
	(up-find-local c: villager-class c: 8)
	(up-remove-objects search-local object-data-hitpoints < 25)
	(set-goal g-boar-hunt-status gv-full-assist-hunting-boar)
	)

	(defrule
	(goal g-boar-hunt-status gv-full-assist-hunting-boar)
	(dropsite-min-distance live-boar < 5)
	(up-compare-goal g-current-boar-id != -1)
	=>
	(up-set-target-by-id g: g-current-boar-id)
	(up-target-objects 1 action-default -1 -1)
	(set-goal g-boar-hunt-status -1)
	)

#end-if








;====GOAL: g-true-housing-headroom

;True housing headroom takes headroom buildings in progress
;into account.

#load-if-not-defined HUN-CIV
	#load-if-not-defined CHINESE-CIV
		#load-if-not-defined INCAN-CIV
			#load-if-not-defined SLAVIC-CIV
				(defrule
				(true)
				=>
				;(up-get-fact building-type-count-total town-center g-temp)	;using total causes AI to get housed
				(up-get-fact building-type-count town-center g-temp)
				(up-modify-goal g-temp c:* 5)
				(up-modify-goal g-true-housing-headroom g:= g-temp)
				(up-get-fact building-type-count-total house g-temp)
				(up-modify-goal g-temp c:* 5)
				(up-modify-goal g-true-housing-headroom g:+ g-temp)
				;(up-get-fact building-type-count-total castle g-temp)
				(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
				(up-modify-goal g-temp c:* 20)
				(up-modify-goal g-true-housing-headroom g:+ g-temp)
				(up-get-fact population 0 g-temp)
				(up-modify-goal g-true-housing-headroom g:- g-temp)
				(up-get-fact resource-amount amount-queued-count g-temp)
				(up-modify-goal g-true-housing-headroom g:- g-temp)
				;(up-chat-data-to-all "Headroom: %d" g: g-true-housing-headroom)
				)
			#end-if
		#end-if
	#end-if
#end-if

#load-if-defined CHINESE-CIV
	(defrule
	(true)
	=>
	;(up-get-fact building-type-count-total town-center g-temp)	;using total causes AI to get housed
	(up-get-fact building-type-count town-center g-temp)
	(up-modify-goal g-temp c:* 10)
	(up-modify-goal g-true-housing-headroom g:= g-temp)
	(up-get-fact building-type-count-total house g-temp)
	(up-modify-goal g-temp c:* 5)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	;(up-get-fact building-type-count-total castle g-temp)
	(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
	(up-modify-goal g-temp c:* 20)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	(up-get-fact population 0 g-temp)
	(up-modify-goal g-true-housing-headroom g:- g-temp)
	(up-get-fact resource-amount amount-queued-count g-temp)
	(up-modify-goal g-true-housing-headroom g:- g-temp)
	;(up-chat-data-to-all "Headroom: %d" g: g-true-housing-headroom)
	)
#end-if

#load-if-defined INCAN-CIV
	(defrule
	(true)
	=>
	;(up-get-fact building-type-count-total town-center g-temp)	;using total causes AI to get housed
	(up-get-fact building-type-count town-center g-temp)
	(up-modify-goal g-temp c:* 5)
	(up-modify-goal g-true-housing-headroom g:= g-temp)
	(up-get-fact building-type-count-total house g-temp)
	(up-modify-goal g-temp c:* 10)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	;(up-get-fact building-type-count-total castle g-temp)
	(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
	(up-modify-goal g-temp c:* 20)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	(up-get-fact population 0 g-temp)
	(up-modify-goal g-true-housing-headroom g:- g-temp)
	(up-get-fact resource-amount amount-queued-count g-temp)
	(up-modify-goal g-true-housing-headroom g:- g-temp)
	;(up-chat-data-to-all "Headroom: %d" g: g-true-housing-headroom)
	)
#end-if

#load-if-defined SLAVIC-CIV

	(defrule
	(true)
	=>
	;(up-get-fact building-type-count-total town-center g-temp)	;using total causes AI to get housed
	(up-get-fact building-type-count town-center g-temp)
	(up-modify-goal g-temp c:* 5)
	(up-modify-goal g-true-housing-headroom g:= g-temp)
	(up-get-fact building-type-count-total house g-temp)
	(up-modify-goal g-temp c:* 5)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	;(up-get-fact building-type-count-total castle g-temp)
	(up-get-fact building-type-count castle g-temp)		;using total causes AI to get housed
	(up-modify-goal g-temp c:* 20)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	(up-get-fact building-type-count-total barracks g-temp)
	(up-modify-goal g-temp c:* 5)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	(up-get-fact building-type-count-total archery-range g-temp)
	(up-modify-goal g-temp c:* 5)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	)
	
	(defrule
	(true)
	=>
	(up-get-fact building-type-count-total stable g-temp)
	(up-modify-goal g-temp c:* 5)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	(up-get-fact building-type-count-total siege-workshop g-temp)
	(up-modify-goal g-temp c:* 5)
	(up-modify-goal g-true-housing-headroom g:+ g-temp)
	(up-get-fact population 0 g-temp)
	(up-modify-goal g-true-housing-headroom g:- g-temp)
	(up-get-fact resource-amount amount-queued-count g-temp)
	(up-modify-goal g-true-housing-headroom g:- g-temp)
	;(up-chat-data-to-all "Headroom: %d" g: g-true-housing-headroom)
	)
				
#end-if



;====GOAL: g-meso-civ

(defrule
(or
	(civ-selected aztec)
	(or
		(civ-selected mayan)
		(civ-selected incan)))
=>
(set-goal g-meso-civ YES)
)



;====GOAL: g-age-status

(defrule
(current-age == dark-age)
=>
(set-goal g-age-status gv-dark)
(set-goal g-save-for-next-age NO)
(disable-self)
)

(defrule
(current-age == dark-age)
(up-research-status c: feudal-age >= research-pending)
=>
(set-goal g-age-status gv-advancing-to-feudal)
(set-goal g-save-for-next-age NO)
)

(defrule
(current-age == feudal-age)
=>
(set-goal g-age-status gv-feudal)
(set-goal g-save-for-next-age NO)
(disable-self)
)

(defrule
(current-age == feudal-age)
(up-research-status c: castle-age >= research-pending)
=>
(set-goal g-age-status gv-advancing-to-castle)
(set-goal g-save-for-next-age NO)
)

(defrule
(current-age == castle-age)
=>
(set-goal g-age-status gv-castle)
(set-goal g-save-for-next-age NO)
(disable-self)
)

(defrule
(current-age == castle-age)
(up-research-status c: imperial-age >= research-pending)
=>
(set-goal g-age-status gv-advancing-to-imperial)
(set-goal g-save-for-next-age NO)
)

(defrule
(current-age == imperial-age)
=>
(set-goal g-age-status gv-imperial)
(set-goal g-save-for-next-age NO)
(disable-self)
)

#load-if-defined POST-IMPERIAL-AGE-START

	(defrule
	(true)
	=>
	(set-goal g-age-status gv-post-imperial)
	(set-goal g-save-for-next-age NO)
	(disable-self)
	)

#end-if



;====GOAL: g-unique-unit-class

;Infantry
(defrule
(or
	(civ-selected aztec)
	(or
		(civ-selected celtic)
		(or
			(civ-selected frankish)
			(or
				(civ-selected gothic)
				(or
					(civ-selected japanese)
					(civ-selected teutonic))))))
=>
(set-goal g-unique-unit-class gv-infantry)
(set-goal g-unique-unit-armor-class gv-infantry)
(set-goal g-unique-unit-attack-class gv-melee)
(disable-self)
)

(defrule
(or
	(civ-selected viking)
	(or
		(civ-selected incan)
		(or
			(civ-selected ethiopian)
			(or
				(civ-selected malian)
				(civ-selected malay)))))
=>
(set-goal g-unique-unit-class gv-infantry)
(set-goal g-unique-unit-armor-class gv-infantry)
(set-goal g-unique-unit-attack-class gv-melee)
(disable-self)
)

;Archer
(defrule
(or
	(civ-selected briton)
	(or
		(civ-selected chinese)
		(or
			(civ-selected mayan)
			(or
				(civ-selected italian)
				(civ-selected vietnamese)))))
=>
(set-goal g-unique-unit-class gv-archer)
(set-goal g-unique-unit-armor-class gv-archer)
(set-goal g-unique-unit-attack-class gv-pierce)
(disable-self)
)

;Cavalry Archer
(defrule
(or
	(civ-selected korean)
	(or
		(civ-selected mongol)
		(or
			(civ-selected indian)
			(civ-selected berbers))))
=>
(set-goal g-unique-unit-class gv-cavalry-archer)
(set-goal g-unique-unit-armor-class gv-archer)
(set-goal g-unique-unit-attack-class gv-pierce)
(disable-self)
)

;Cavalry
(defrule
(or
	(civ-selected byzantine)
	(or
		(civ-selected hun)
		(or
			(civ-selected persian)
			(or
				(civ-selected saracen)
				(or
					(civ-selected magyar)
					(civ-selected slavic))))))
=>
(set-goal g-unique-unit-class gv-cavalry)
(set-goal g-unique-unit-armor-class gv-cavalry)
(set-goal g-unique-unit-attack-class gv-melee)
(disable-self)
)

;Siege
(defrule
(civ-selected portuguese)
=>
(set-goal g-unique-unit-class gv-siege)
(set-goal g-unique-unit-armor-class NONE)
(set-goal g-unique-unit-attack-class NONE)
(disable-self)
)

;Janissary
(defrule
(civ-selected turkish)
=>
(set-goal g-unique-unit-class gv-janissary)
(set-goal g-unique-unit-armor-class gv-archer)
(set-goal g-unique-unit-attack-class NONE)
(disable-self)
)

;Conquistador and Arambai
(defrule
(or
	(civ-selected spanish)
	(civ-selected burmese))
=>
(set-goal g-unique-unit-class gv-conquistador)
(set-goal g-unique-unit-armor-class gv-archer)
(set-goal g-unique-unit-attack-class NONE)
(disable-self)
)

;Ballista Elephant
(defrule
(civ-selected khmer)
=>
(set-goal g-unique-unit-class gv-ballista-elephant)
(set-goal g-unique-unit-armor-class gv-cavalry)
(set-goal g-unique-unit-attack-class NONE)
(disable-self)
)



;====GOAL: g-villager-train-time
;====GOAL: g-villager-cost

#load-if-not-defined PERSIAN-CIV
	#load-if-not-defined INDIAN-CIV

		(defrule
		(true)
		=>
		(set-goal g-villager-train-time 25)
		(set-goal g-villager-cost 50)
		(disable-self)
		)

	#end-if
#end-if

#load-if-defined PERSIAN-CIV

	(defrule
	(current-age == dark-age)
	=>
	(set-goal g-villager-train-time 25)
	(set-goal g-villager-cost 50)
	(disable-self)
	)

	(defrule
	(current-age == feudal-age)
	=>
	(set-goal g-villager-train-time 22)
	(disable-self)
	)

	(defrule
	(current-age == castle-age)
	=>
	(set-goal g-villager-train-time 21)
	(disable-self)
	)

	(defrule
	(current-age == imperial-age)
	=>
	(set-goal g-villager-train-time 20)
	(disable-self)
	)

#end-if

#load-if-defined INDIAN-CIV

	(defrule
	(current-age == dark-age)
	=>
	(set-goal g-villager-train-time 25)
	(set-goal g-villager-cost 45)
	(disable-self)
	)

	(defrule
	(current-age == feudal-age)
	=>
	(set-goal g-villager-cost 43)
	(disable-self)
	)

	(defrule
	(current-age == castle-age)
	=>
	(set-goal g-villager-cost 40)
	(disable-self)
	)

	(defrule
	(current-age == imperial-age)
	=>
	(set-goal g-villager-cost 38)
	(disable-self)
	)

#end-if



;====GOAL: g-villager-training-time-left


(defrule
(up-compare-goal g-villager-training-time-left > 0)
=>
(up-modify-goal g-villager-training-time-left g:= g-villager-creation-game-time)	;g-villager-creation-game-time set when villager is trained
(up-modify-goal g-villager-training-time-left g:- g-game-time)
;(up-chat-data-to-self "Timer: %d" g: g-villager-training-time-left)
)



;====GOAL: g-constant-train-unit

(defrule
(true)
=>
(up-modify-goal g-constant-train-unit c:= villager)
(up-modify-goal g-constant-unit-desired-num-goal c:= g-desired-num-villager)
)

(defrule
(goal g-initial-strategy gv-krush)
(current-age == castle-age)
(unit-type-count knight-line < 8)
(up-compare-goal g-attack-status <= gv-first-attack)
(up-compare-goal g-team-position < gv-pocket)
=>
(up-modify-goal g-constant-train-unit c:= knight)
(up-modify-goal g-constant-unit-desired-num-goal c:= g-desired-num-knight)
)

(defrule
(goal g-initial-strategy gv-crush)
(current-age == castle-age)
(up-compare-goal g-camel-line < 8)
(up-compare-goal g-attack-status <= gv-first-attack)
(up-compare-goal g-team-position < gv-pocket)
=>
(up-modify-goal g-constant-train-unit c:= camel)
(up-modify-goal g-constant-unit-desired-num-goal c:= g-desired-num-camel)
)

(defrule
(goal g-initial-strategy gv-eagles-revenge)
(current-age == castle-age)
(up-compare-goal g-eagle-scout-line < 12)
(up-compare-goal g-attack-status <= gv-first-attack)
(up-research-status c: ri-eagle-warrior >= research-pending)
(up-compare-goal g-team-position < gv-pocket)
=>
(up-modify-goal g-constant-train-unit c:= eagle-warrior)
(up-modify-goal g-constant-unit-desired-num-goal c:= g-desired-num-eagle-warrior)
)

(defrule
(up-compare-goal g-desired-num-trade-cart > 0)
(up-object-type-count-total c: trade-cart g:< g-desired-num-trade-cart)
;(up-object-type-count-total c: villager g:>= g-desired-num-villager)
(research-completed ri-caravan)
(goal g-town-under-attack NO)
=>
(up-modify-goal g-constant-train-unit c:= trade-cart)
(up-modify-goal g-constant-unit-desired-num-goal c:= g-desired-num-trade-cart)
)

(defrule
(current-age >= castle-age)
(or
	(up-building-type-in-town c: castle > 0)
	(military-population > 15))
(building-type-count siege-workshop > 0)
(unit-type-count-total battering-ram-line == 0)
(up-compare-goal g-desired-num-battering-ram > 0)
=>
(up-modify-goal g-constant-train-unit c:= battering-ram)
(up-modify-goal g-constant-unit-desired-num-goal c:= g-desired-num-battering-ram)
)

(defrule
(current-age == imperial-age)
(or
	(up-building-type-in-town c: castle > 0)
	(military-population > 15))
(building-type-count castle > 0)
(unit-type-count-total trebuchet-set == 0)
(up-compare-goal g-desired-num-trebuchet > 0)
=>
(up-modify-goal g-constant-train-unit c:= trebuchet)
(up-modify-goal g-constant-unit-desired-num-goal c:= g-desired-num-trebuchet)
)



;====GOAL: g-military-superiority

(defrule
(true)
=>
(up-get-fact-max any-enemy military-population 0 g-enemy-military-pop)
(up-get-player-fact target-player military-population 0 g-temp)
(up-get-fact military-population 0 g-military-superiority)
(up-modify-goal g-military-superiority g:- g-temp)
)



;====GOAL: g-total-superiority

(defrule
(true)
=>
(up-get-player-fact target-player population 0 g-temp)
(up-get-fact population 0 g-total-superiority)
(up-modify-goal g-total-superiority g:- g-temp)
)

(defrule
(unit-type-count infantry-class < 5)
(unit-type-count cavalry-class < 5)
(up-compare-goal g-siege-class == 0)
=>
(up-get-player-fact target-player building-type-count watch-tower g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-total-superiority g:+ g-temp)
)

(defrule
(up-compare-goal g-siege-class < 2)
=>
(up-get-player-fact target-player building-type-count castle g-temp)
(up-modify-goal g-temp c:* 15)
(up-modify-goal g-temp c:min 40)
(up-modify-goal g-total-superiority g:+ g-temp)
)

(defrule
(players-building-type-count target-player castle > 0)
=>
(up-get-player-fact target-player building-type-count castle g-temp)
(up-modify-goal g-temp c:* 5)
(up-modify-goal g-temp c:min 20)
(up-modify-goal g-total-superiority g:+ g-temp)
)

;====GOAL: g-strategy

(defrule
(up-compare-goal g-strategy g:!= g-initial-strategy)
(up-compare-goal g-attack-status <= gv-first-attack)
(military-population < 20)
(goal g-town-under-attack NO)
(current-age-time < 600)
=>
(up-modify-goal g-strategy g:= g-initial-strategy)
(chat-local-to-self "back to initial strategy")
)

(defrule
(up-compare-goal g-strategy != gv-castle-military)
(current-age == castle-age)
(or
	(unit-type-count villager-gold >= 5)
	(unit-type-count trade-cart >= 10))
(or
	(up-compare-goal g-attack-status >= gv-before-later-attacks)
	(current-age-time >= 900))
=>
(set-goal g-strategy gv-castle-military)
(set-goal g-strategy-type gv-default)
)

(defrule
(goal g-strategy gv-castle-military)
=>
(chat-to-player my-player-number "Castle military")
(disable-self)
)

(defrule
(up-compare-goal g-strategy != gv-imperial-military)
(current-age == imperial-age)
(or
	(unit-type-count villager-gold >= 5)
	(or
		(unit-type-count trade-cart >= 10)
		(gold-amount >= 300)))
=>
(set-goal g-strategy gv-imperial-military)
(set-goal g-strategy-type gv-default)
)

(defrule
(up-compare-goal g-strategy != gv-low-gold)
(current-age >= castle-age)
(or
	(unit-type-count villager-gold < 5)
	(up-compare-goal g-recent-gold-gathered < 100))
(unit-type-count villager >= 60)
(gold-amount < 500)
=>
(set-goal g-strategy gv-low-gold)
(set-goal g-strategy-type gv-default)
)

(defrule
(up-compare-goal g-strategy != gv-trash-war)
(current-age >= castle-age)
(unit-type-count villager-gold == 0)
(or
	(up-gaia-type-count c: gold == 0)
	(up-compare-goal g-recent-gold-gathered == 0))
(or
	(unit-type-count trade-cart == 0)
	(players-building-type-count every-ally market == 0))
(gold-amount < 300)
=>
(set-goal g-strategy gv-trash-war)
(set-goal g-strategy-type gv-default)
)

(defrule
(up-compare-goal g-strategy >= gv-castle-military)
(up-compare-goal g-attack-status >= gv-before-later-attacks)
=>
(set-goal g-strategy-type gv-default)
)

;====GOAL: g-town-under-attack

(defrule
(timer-triggered t-10-sec)
=>
(set-strategic-number sn-focus-player-number 1)
(set-goal g-enemy-buildings-in-town 0)
(set-goal g-enemy-units-in-town 0)
)

	(defrule
	(timer-triggered t-10-sec)
	(player-in-game focus-player)
	(not
		(stance-toward focus-player ally))
	=>
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(up-filter-distance c: -1 s: sn-safe-town-size)
	(up-find-remote c: building-class c: 40)
	(up-find-remote c: tower-class c: 40)
	(up-get-search-state g-local-total)
	(up-modify-goal g-enemy-buildings-in-town g:+ g-remote-total)
	(up-reset-search 1 1 1 1)
	(up-find-remote c: all-units-class c: 40)
	(up-get-search-state g-local-total)
	(up-modify-goal g-enemy-units-in-town g:+ g-remote-total)
	)

	(defrule
	(timer-triggered t-10-sec)
	(up-compare-sn sn-focus-player-number < 8)
	=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2)
	)

(defrule
(town-under-attack)
(up-compare-goal g-town-under-attack != YES)
(goal g-attacking NO)
(or
	(up-compare-goal g-enemy-buildings-in-town > 0)
	(up-compare-goal g-enemy-units-in-town >= 3))
=>
(disable-timer t-town-under-attack)
(set-goal g-town-under-attack YES)
(up-release-escrow)
(chat-to-player my-player-number "town under attack")
)

(defrule
(not
	(town-under-attack))
(goal g-town-under-attack YES)
(goal g-attacking NO)
(up-compare-goal g-enemy-buildings-in-town == 0)
(up-compare-goal g-enemy-units-in-town < 3)
=>
(enable-timer t-town-under-attack 30)
(set-goal g-town-under-attack PENDING)
(chat-to-player my-player-number "wait to see if town is safe")
)

(defrule
(goal g-town-under-attack PENDING)
(up-timer-status t-town-under-attack == timer-triggered)
(goal g-attacking NO)
(not
	(town-under-attack))
(up-compare-goal g-enemy-buildings-in-town == 0)
(up-compare-goal g-enemy-units-in-town < 3)
=>
(disable-timer t-town-under-attack)
(set-goal g-town-under-attack NO)
(chat-to-player my-player-number "town is safe")
)

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-town-under-attack != NO)
=>
(chat-local-to-self "town still under attack")
)



;====GOAL: g-current-farming-rate

;constants are defined in Game Stats.per

(defrule
(true)
=>
(set-goal g-current-farming-rate FARM-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
=>
(set-goal g-current-farming-rate FARM-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
=>
(set-goal g-current-farming-rate FARM-CART-RATE)
(disable-self)
)

;====GOAL: g-current-wood-rate

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(up-research-status c: ri-double-bit-axe != research-complete)
=>
(set-goal g-current-wood-rate WOOD-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(up-research-status c: ri-double-bit-axe != research-complete)
=>
(set-goal g-current-wood-rate WOOD-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(up-research-status c: ri-double-bit-axe != research-complete)
=>
(set-goal g-current-wood-rate WOOD-CART-RATE)
(disable-self)
)

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(research-completed ri-double-bit-axe)
(up-research-status c: ri-bow-saw != research-complete)
=>
(set-goal g-current-wood-rate WOOD-DBA-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(research-completed ri-double-bit-axe)
(up-research-status c: ri-bow-saw != research-complete)
=>
(set-goal g-current-wood-rate WOOD-DBA-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(research-completed ri-double-bit-axe)
(up-research-status c: ri-bow-saw != research-complete)
=>
(set-goal g-current-wood-rate WOOD-DBA-CART-RATE)
(disable-self)
)

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(research-completed ri-bow-saw)
(up-research-status c: ri-two-man-saw != research-complete)
=>
(set-goal g-current-wood-rate WOOD-BS-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(research-completed ri-bow-saw)
(up-research-status c: ri-two-man-saw != research-complete)
=>
(set-goal g-current-wood-rate WOOD-BS-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(research-completed ri-bow-saw)
(up-research-status c: ri-two-man-saw != research-complete)
=>
(set-goal g-current-wood-rate WOOD-BS-CART-RATE)
(disable-self)
)

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(research-completed ri-two-man-saw)
=>
(set-goal g-current-wood-rate WOOD-TMS-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(research-completed ri-two-man-saw)
=>
(set-goal g-current-wood-rate WOOD-TMS-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(research-completed ri-two-man-saw)
=>
(set-goal g-current-wood-rate WOOD-TMS-CART-RATE)
(disable-self)
)

;====GOAL: g-current-gold-rate

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(up-research-status c: ri-gold-mining != research-complete)
=>
(set-goal g-current-gold-rate GOLD-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(up-research-status c: ri-gold-mining != research-complete)
=>
(set-goal g-current-gold-rate GOLD-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(up-research-status c: ri-gold-mining != research-complete)
=>
(set-goal g-current-gold-rate GOLD-CART-RATE)
(disable-self)
)

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(research-completed ri-gold-mining)
(up-research-status c: ri-gold-shaft-mining != research-complete)
=>
(set-goal g-current-gold-rate GOLD-GM-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(research-completed ri-gold-mining)
(up-research-status c: ri-gold-shaft-mining != research-complete)
=>
(set-goal g-current-gold-rate GOLD-GM-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(research-completed ri-gold-mining)
(up-research-status c: ri-gold-shaft-mining != research-complete)
=>
(set-goal g-current-gold-rate GOLD-GM-CART-RATE)
(disable-self)
)

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(research-completed ri-gold-shaft-mining)
=>
(set-goal g-current-gold-rate GOLD-GSM-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(research-completed ri-gold-shaft-mining)
=>
(set-goal g-current-gold-rate GOLD-GSM-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(research-completed ri-gold-shaft-mining)
=>
(set-goal g-current-gold-rate GOLD-GSM-CART-RATE)
(disable-self)
)

;====GOAL: g-current-stone-rate

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(up-research-status c: ri-stone-mining != research-complete)
=>
(set-goal g-current-stone-rate STONE-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(up-research-status c: ri-stone-mining != research-complete)
=>
(set-goal g-current-stone-rate STONE-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(up-research-status c: ri-stone-mining != research-complete)
=>
(set-goal g-current-stone-rate STONE-CART-RATE)
(disable-self)
)

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(research-completed ri-stone-mining)
(up-research-status c: ri-stone-shaft-mining != research-complete)
=>
(set-goal g-current-stone-rate STONE-SM-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(research-completed ri-stone-mining)
(up-research-status c: ri-stone-shaft-mining != research-complete)
=>
(set-goal g-current-stone-rate STONE-SM-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(research-completed ri-stone-mining)
(up-research-status c: ri-stone-shaft-mining != research-complete)
=>
(set-goal g-current-stone-rate STONE-SM-CART-RATE)
(disable-self)
)

(defrule
(up-research-status c: ri-wheel-barrow != research-complete)
(research-completed ri-stone-shaft-mining)
=>
(set-goal g-current-stone-rate STONE-SSM-RATE)
(disable-self)
)

(defrule
(research-completed ri-wheel-barrow)
(up-research-status c: ri-hand-cart != research-complete)
(research-completed ri-stone-shaft-mining)
=>
(set-goal g-current-stone-rate STONE-SSM-WHEEL-RATE)
(disable-self)
)

(defrule
(research-completed ri-hand-cart)
(research-completed ri-stone-shaft-mining)
=>
(set-goal g-current-stone-rate STONE-SSM-CART-RATE)
(disable-self)
)

;====GOAL: g-current-farm-food-amount

(defrule
(true)
=>
(set-goal g-current-farm-food-amount 175)
(disable-self)
)

(defrule
(research-completed ri-horse-collar)
=>
(up-modify-goal g-current-farm-food-amount c:+ 75)
(disable-self)
)

(defrule
(research-completed ri-heavy-plow)
=>
(up-modify-goal g-current-farm-food-amount c:+ 125)
(disable-self)
)

(defrule
(research-completed ri-crop-rotation)
=>
(up-modify-goal g-current-farm-food-amount c:+ 175)
(disable-self)
)

(defrule
(or
	(civ-selected chinese)
	(players-civ any-ally chinese))
=>
(up-modify-goal g-current-farm-food-amount c:+ 45)
(disable-self)
)



;====GOAL: g-eco-balance-system

(defrule
(true)
=>
(set-goal g-eco-balance-system gv-manual)
)

;(defrule
;(up-compare-goal g-attack-status >= gv-before-later-attacks)
;(up-compare-goal g-total-res-needed-soon > 1000)
;=>
;(set-goal g-eco-balance-system gv-automatic)
;)



;====GOAL: g-save-for-feudal, g-save-for-castle, g-save-for-imperial

(defrule
(current-age == dark-age)
(up-compare-goal g-age-status < gv-save-for-feudal)
=>
(up-modify-goal g-temp g:= g-required-num-villager)
(up-modify-goal g-temp c:- 3)
)

(defrule
(current-age == dark-age)
(up-compare-goal g-age-status < gv-save-for-feudal)
(up-object-type-count-total c: villager g:>= g-temp)
=>
(set-goal g-age-status gv-save-for-feudal)
(set-goal g-save-for-next-age YES)
)

(defrule
(current-age == feudal-age)
(up-compare-goal g-age-status < gv-save-for-castle)
=>
(up-modify-goal g-temp g:= g-required-num-villager)
(up-modify-goal g-temp c:- 4)
)

(defrule
(current-age == feudal-age)
(up-compare-goal g-age-status < gv-save-for-castle)
(up-object-type-count-total c: villager g:>= g-temp)
=>
(set-goal g-age-status gv-save-for-castle)
(set-goal g-save-for-next-age YES)
)

(defrule
(current-age == castle-age)
(up-compare-goal g-age-status < gv-save-for-imperial)
=>
(up-modify-goal g-temp g:= g-required-num-villager)
(up-modify-goal g-temp c:- 5)
)

(defrule
(current-age == castle-age)
(up-compare-goal g-age-status < gv-save-for-imperial)
(up-object-type-count-total c: villager g:>= g-temp)
=>
(set-goal g-age-status gv-save-for-imperial)
(set-goal g-save-for-next-age YES)
)

;====GOAL: g-excess-resources-flag

(defrule
(true)
=>
(up-modify-flag g-excess-resources-flag c:- gv-food)
(up-modify-flag g-excess-resources-flag c:- gv-wood)
(up-modify-flag g-excess-resources-flag c:- gv-gold)
(up-modify-flag g-excess-resources-flag c:- gv-stone)
(up-modify-flag g-excess-resources-flag c:- gv-food-wood)
(up-modify-flag g-excess-resources-flag c:- gv-food-gold)
(up-modify-flag g-excess-resources-flag c:- gv-food-stone)
(up-modify-flag g-excess-resources-flag c:- gv-wood-gold)
(up-modify-flag g-excess-resources-flag c:- gv-wood-stone)
(up-modify-flag g-excess-resources-flag c:- gv-gold-stone)
(up-modify-flag g-excess-resources-flag c:- gv-wood-gold-stone)
(up-modify-flag g-excess-resources-flag c:- gv-all-resources)
)

(defrule
(goal g-age-status gv-dark)
(food-amount >= 100)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food)
)

(defrule
(goal g-age-status gv-save-for-feudal)
(food-amount >= 550)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food)
)

(defrule
(goal g-age-status gv-feudal)
(up-compare-goal g-strategy-type < gv-fc)	;flush or drush
(food-amount >= 325)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food)
)

(defrule
(or
	(goal g-age-status gv-save-for-castle)
	(up-compare-goal g-strategy-type >= gv-fc))	;fast castle or fast imp
(food-amount >= 975)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food)
)

(defrule
(goal g-age-status gv-castle)
(up-compare-goal g-strategy-type < gv-fi)	;drush, flush, or fast castle
(food-amount >= 700)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food)
)

(defrule
(or
	(goal g-age-status gv-save-for-imperial)
	(up-compare-goal g-strategy-type >= gv-fi))
(food-amount >= 1400)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food)
)

(defrule
(current-age == imperial-age)
(food-amount >= 2500)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food)
)

(defrule
(goal g-age-status gv-dark)
(or
	(wood-amount >= 450)
	(and
		(building-type-count-total town-center > 0)
		(wood-amount >= 325)))
=>
(up-modify-flag g-excess-resources-flag c:+ gv-wood)
)

(defrule
(goal g-age-status gv-feudal)
(or
	(wood-amount >= 475)
	(and
		(building-type-count-total town-center > 0)
		(wood-amount >= 350)))
=>
(up-modify-flag g-excess-resources-flag g:+ gv-wood)
)

(defrule
(goal g-age-status gv-castle)
(wood-amount >= 500)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-wood)
)

(defrule
(current-age == imperial-age)
(wood-amount >= 1600)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-wood)
)

(defrule
(goal g-age-status gv-feudal)
(up-compare-goal g-strategy-type < gv-fc)
(gold-amount >= 150)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-gold)
)

(defrule
(or
	(goal g-age-status gv-save-for-castle)
	(up-compare-goal g-strategy-type >= gv-fc))
(gold-amount >= 300)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-gold)
)

(defrule
(goal g-age-status gv-castle)
(up-compare-goal g-strategy-type < gv-fi)
(up-compare-goal g-next-monastery-tech == -1)
(gold-amount >= 500)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-gold)
)

(defrule
(or
	(goal g-age-status gv-save-for-imperial)
	(up-compare-goal g-strategy-type >= gv-fi))
(up-compare-goal g-next-monastery-tech == -1)
(gold-amount >= 1100)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-gold)
)

(defrule
(goal g-age-status gv-castle)
(up-compare-goal g-strategy-type < gv-fi)
(up-compare-goal g-next-monastery-tech != -1)
(gold-amount >= 1475)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-gold)
)

(defrule
(or
	(goal g-age-status gv-save-for-imperial)
	(up-compare-goal g-strategy-type >= gv-fi))
(up-compare-goal g-next-monastery-tech != -1)
(gold-amount >= 1800)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-gold)
)

(defrule
(current-age == imperial-age)
(gold-amount >= 2000)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-gold)
)

(defrule
(goal g-age-status gv-dark)
(or
	(stone-amount >= 105)
	(and
		(building-type-count-total town-center > 0)
		(stone-amount >= 5)))
=>
(up-modify-flag g-excess-resources-flag c:+ gv-stone)
)

(defrule
(goal g-age-status gv-feudal)
(stone-amount >= 250)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-stone)
)

(defrule
(current-age >= castle-age)
(stone-amount >= 1300)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-stone)
)

(defrule
(up-compare-flag g-excess-resources-flag == gv-food)
(up-compare-flag g-excess-resources-flag == gv-wood)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food-wood)
)

(defrule
(up-compare-flag g-excess-resources-flag == gv-food)
(up-compare-flag g-excess-resources-flag == gv-gold)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food-gold)
)

(defrule
(up-compare-flag g-excess-resources-flag == gv-food)
(up-compare-flag g-excess-resources-flag == gv-stone)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-food-stone)
)

(defrule
(up-compare-flag g-excess-resources-flag == gv-wood)
(up-compare-flag g-excess-resources-flag == gv-gold)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-wood-gold)
)

(defrule
(up-compare-flag g-excess-resources-flag == gv-wood)
(up-compare-flag g-excess-resources-flag == gv-stone)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-wood-stone)
)

(defrule
(up-compare-flag g-excess-resources-flag == gv-gold)
(up-compare-flag g-excess-resources-flag == gv-stone)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-gold-stone)
)

(defrule
(up-compare-flag g-excess-resources-flag == gv-food-wood)
(up-compare-flag g-excess-resources-flag == gv-gold-stone)
=>
(up-modify-flag g-excess-resources-flag g:+ gv-all-resources)
)



;====GOAL: g-gathering-inside

#load-if-defined OPTIMIZE-LATER

	(defrule
	(true)
	=>
	(up-get-fact enemy-units-in-town 0 g-temp)
	(up-get-fact unit-type-in-town knight-line g-temp-2)
	(up-modify-goal g-temp-2 c:/ 2)
	(up-modify-goal g-temp g:+ g-temp-2)			;treat enemy knights as 1.5 soldiers
	(up-get-fact soldier-count 0 g-temp-3)
	(up-get-fact unit-type-count knight-line g-temp-2)
	(up-modify-goal g-temp-2 c:/ 2)
	(up-modify-goal g-temp-3 g:+ g-temp-2)			;treat own knights as 1.5 soldiers
	)

	(defrule
	(goal g-town-under-attack YES)
	(goal g-gathering-inside NO)
	(up-compare-goal g-enemy-units-in-town >= 6)
	(soldier-count < 40)
	(or
		(up-compare-goal g-enemy-units-in-town >= 25)
		(soldier-count < 20))
	(up-compare-goal g-temp g:> g-temp-3)	;Enemy outnumbers us
	=>
	(set-goal g-gathering-inside gv-military-buildings)
	(chat-local-to-self "outnumbered - garrison in mil bldgs")
	(up-chat-data-to-self "Enemy count: %d" g: g-temp)
	(up-chat-data-to-self "Soldier count: %d" g: g-temp-3)
	)

	(defrule
	(up-compare-goal g-gathering-inside >= gv-military-buildings)
	=>
	(up-gather-inside c: barracks c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: siege-workshop c: 1)
	(up-gather-inside c: castle c: 1)
	(up-gather-inside c: monastery c: 1)
	)

	(defrule
	(up-compare-goal g-gathering-inside == gv-all-buildings)
	=>
	(up-gather-inside c: town-center c: 1)
	(up-gather-inside c: dock c: 1)
	(up-gather-inside c: market c: 1)
	(chat-local-to-self "Garrison inside all bldgs")
	)

	(defrule
	(up-compare-goal g-gathering-inside > NO)
	(or
		(goal g-town-under-attack NO)
		(or
			(up-compare-goal g-enemy-units-in-town < 6)
			(up-compare-goal g-temp g:<= g-temp-3)))	;Enemy no longer outnumbers us
	=>
	(set-goal g-gathering-inside gv-reset)
	(chat-local-to-self "Ungarrison - not outnumbered")
	(up-chat-data-to-self "Enemy count: %d" g: g-temp)
	(up-chat-data-to-self "Soldier count: %d" g: g-temp-3)
	)

	(defrule
	(up-compare-goal g-gathering-inside > NO)
	(or
		(soldier-count >= 40)
		(and
			(up-compare-goal g-enemy-units-in-town < 25)
			(soldier-count >= 20)))
	=>
	(set-goal g-gathering-inside gv-reset)
	(chat-local-to-self "have enough soldiers - ungarrison")
	)

	(defrule
	(up-compare-goal g-gathering-inside > NO)
	(up-unit-type-in-town c: knight-line > 3)
	(up-unit-type-in-town c: knight-line < 12)
	(or
		(unit-type-count spearman-line >= 6)
		(and
			(up-unit-type-in-town c: knight-line < 7)
			(unit-type-count spearman-line >= 4)))
	=>
	(up-ungarrison c: spearman-line)
	)

	(defrule
	(up-compare-goal g-gathering-inside > NO)
	(up-unit-type-in-town c: knight-line > 3)
	(up-unit-type-in-town c: knight-line < 12)
	(or
		(up-compare-goal g-camel-line >= 5)
		(and
			(up-unit-type-in-town c: knight-line < 7)
			(up-compare-goal g-camel-line >= 3)))
	=>
	(up-ungarrison c: camel)
	)

	#load-if-defined SARACEN-CIV

		(defrule
		(up-compare-goal g-gathering-inside > NO)
		(up-unit-type-in-town c: knight-line > 3)
		(up-unit-type-in-town c: knight-line < 12)
		(or
			(up-compare-goal g-unique-unit-line >= 5)
			(and
				(up-unit-type-in-town c: knight-line < 7)
				(up-compare-goal g-unique-unit-line >= 3)))
		=>
		(up-ungarrison c: my-unique-unit)
		)
		
	#end-if

	(defrule
	(goal g-gathering-inside gv-reset)
	=>
	(up-gather-inside c: barracks c: 0)
	(up-gather-inside c: archery-range c: 0)
	(up-gather-inside c: stable c: 0)
	(up-gather-inside c: siege-workshop c: 0)
	(up-gather-inside c: castle c: 0)
	(up-gather-inside c: monastery c: 0)
	(up-gather-inside c: town-center c: 0)
	(up-gather-inside c: dock c: 0)
	(up-gather-inside c: market c: 0)
	)

	(defrule
	(goal g-gathering-inside gv-reset)
	=>
	(up-ungarrison c: barracks)
	(up-ungarrison c: archery-range)
	(up-ungarrison c: stable)
	(up-ungarrison c: siege-workshop)
	(up-ungarrison c: castle)
	(up-ungarrison c: monk)
	(up-ungarrison c: missionary)
	(up-ungarrison c: town-center)
	(up-ungarrison c: dock)
	(up-ungarrison c: market)
	(set-goal g-gathering-inside NO)
	)

;Ungarrison full buildings

(defrule
(up-compare-goal g-gathering-inside > NO)
(building-type-count barracks > 0)
=>
(up-full-reset-search)
(up-find-local c: barracks c: 240)
(up-get-search-state g-local-total)
(set-goal i 0)
)

	(defrule
	(up-compare-goal g-gathering-inside > NO)
	(building-type-count barracks > 0)
	(up-compare-goal g-local-total g:> i)
	(up-set-target-object search-local c: i)
	=>
	(up-get-object-data object-data-garrison-count g-temp)
	)

	(defrule
	(up-compare-goal g-gathering-inside > NO)
	(building-type-count barracks > 0)
	(up-compare-goal g-local-total g:> i)
	(up-set-target-object search-local c: i)
	(up-compare-goal g-temp >= 10)
	=>
	(up-target-objects 1 action-ungarrison -1 -1)
	(chat-local-to-self "barracks full - ungarrison")
	)

	(defrule
	(up-compare-goal g-gathering-inside > NO)
	(building-type-count barracks > 0)
	(up-compare-goal g-local-total g:> i)
	(up-set-target-object search-local c: i)
	=>
	(up-modify-goal i c:+ 1)
	(up-jump-rule -3)
	)

#end-if



;====GOAL: g-starting-scout-alive and g-starting-scout-id

(defrule
(goal g-starting-scout-id PENDING)
(unit-type-count scout-unit > 0)
(goal g-boar-hunt-status -1)
=>
(up-full-reset-search)
(up-find-local c: scout-unit c: 1)
)

(defrule
(goal g-starting-scout-id PENDING)
(up-set-target-object search-local c: 0)
(up-object-data object-data-type g:== scout-unit)
(goal g-boar-hunt-status -1)
=>
(up-get-object-data object-data-id g-starting-scout-id)
;(up-chat-data-to-self "Scout ID: %d" g: g-starting-scout-id)
)

(defrule
(up-compare-goal g-starting-scout-id != PENDING)
(goal g-starting-scout-alive YES)
(not
	(up-set-target-by-id g: g-starting-scout-id))
(goal g-boar-hunt-status -1)
=>
(set-goal g-starting-scout-alive NO)
(chat-local-to-self "Scout died")
)



;====GOAL: g-closest-enemy-by-tc

(defrule
(players-building-type-count any-enemy town-center > 0)
=>
(up-modify-goal g-temp s:= sn-focus-player-number)
(set-strategic-number sn-focus-player-number 1)
(up-modify-goal g-closest-enemy-building-distance g:= g-map-size-ts)
(set-goal g-closest-enemy-by-tc 0)
)

(defrule
(players-building-type-count any-enemy town-center > 0)
(unit-type-count villager > 0)
=>
(up-full-reset-search)
(up-set-target-point g-position-self-x)
(up-find-local c: villager-class c: 240)
(up-clean-search search-local object-data-distance search-order-asc)
(up-get-search-state g-local-total)
)

;Store distance of nearest villager to own TC
(defrule
(players-building-type-count any-enemy town-center > 0)
(unit-type-count villager > 0)
(up-compare-goal g-local-total > 0)
(up-set-target-object search-local c: 0)
=>
(up-get-object-data object-data-distance g-temp-3)
(up-modify-goal g-temp-3 c:+ 3)	;add a little breathing room for the distance filter
)

	(defrule
	(players-building-type-count any-enemy town-center > 0)
	(not
		(and
			(player-in-game focus-player)
			(and
				(stance-toward focus-player enemy)
				(players-building-type-count focus-player town-center > 0))))
	=>
	(up-jump-rule 3)
	;(up-chat-data-to-self "skip p%d" s: sn-focus-player-number)
	)
	
	(defrule
	(players-building-type-count any-enemy town-center > 0)
	(player-in-game focus-player)
	(stance-toward focus-player enemy)
	(players-building-type-count focus-player town-center > 0)
	=>
	;(up-chat-data-to-all "P%d" s: sn-focus-player-number)
	(up-full-reset-search)
	(up-find-remote c: town-center c: 40)
	(up-clean-search search-remote object-data-id search-order-asc)
	(up-get-search-state g-local-total)
	)
	
	(defrule
	(players-building-type-count any-enemy town-center > 0)
	(player-in-game focus-player)
	(stance-toward focus-player enemy)
	(players-building-type-count focus-player town-center > 0)
	(up-compare-goal g-remote-total > 0)
	(up-set-target-object search-remote c: 0)
	=>
	(up-get-point position-object g-point-x)
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-set-target-point g-position-self-x)
	(up-filter-distance c: -1 g: g-temp-3)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-path-distance g-point-x 0 g-temp-2)
	)
	
	(defrule
	(players-building-type-count any-enemy town-center > 0)
	(player-in-game focus-player)
	(stance-toward focus-player enemy)
	(players-building-type-count focus-player town-center > 0)
	(up-compare-goal g-remote-total > 0)
	(up-set-target-object search-remote c: 0)
	(up-compare-goal g-temp-2 g:< g-closest-enemy-building-distance)
	=>
	(up-modify-goal g-closest-enemy-building-distance g:min g-temp-2)
	(up-modify-goal g-closest-enemy-by-tc s:= sn-focus-player-number)
	;(up-chat-data-to-self "Closest: %d" s: sn-focus-player-number)
	)
	
	(defrule
	(players-building-type-count any-enemy town-center > 0)
	(strategic-number sn-focus-player-number < 8)
	=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -5)
	)
	
(defrule
(players-building-type-count any-enemy town-center > 0)
=>
(up-modify-sn sn-focus-player-number g:= g-temp)
)

(defrule
(players-building-type-count any-enemy town-center > 0)
(goal g-closest-enemy-by-tc 0)
=>
(chat-to-player my-player-number "Closest enemy by TC not set")
)



;====GOAL: g-closest-enemy-by-buildings

(defrule
(players-building-count any-enemy > 0)
=>
(up-modify-goal g-temp s:= sn-focus-player-number)
(set-strategic-number sn-focus-player-number 1)
(up-modify-goal g-closest-enemy-building-distance g:= g-map-size-ts)
(set-goal g-closest-enemy-by-buildings 0)
;(chat-local-to-self "Enemy buildings found")
)

(defrule
(players-building-count any-enemy > 0)
(unit-type-count villager > 0)
=>
(up-full-reset-search)
(up-set-target-point g-position-self-x)
(up-find-local c: villager-class c: 240)
(up-clean-search search-local object-data-distance search-order-asc)
(up-get-search-state g-local-total)
;(chat-local-to-self "Find close vil")
)

;Store distance of nearest villager to own TC
(defrule
(players-building-count any-enemy > 0)
(unit-type-count villager > 0)
(up-compare-goal g-local-total > 0)
(up-set-target-object search-local c: 0)
=>
(up-get-object-data object-data-distance g-temp-3)
(up-modify-goal g-temp-3 c:+ 3)	;add a little breathing room for the distance filter
;(chat-local-to-self "Get vil distance")
)

	(defrule
	(players-building-count any-enemy > 0)
	(not
		(and
			(player-in-game focus-player)
			(and
				(stance-toward focus-player enemy)
				(players-building-count focus-player > 0))))
	=>
	(up-jump-rule 3)
	;(up-chat-data-to-self "skip p%d" s: sn-focus-player-number)
	)
	
	(defrule
	(players-building-count any-enemy > 0)
	(player-in-game focus-player)
	(stance-toward focus-player enemy)
	(players-building-count focus-player > 0)
	=>
	;(up-chat-data-to-all "P%d" s: sn-focus-player-number)
	(up-full-reset-search)
	(up-find-remote c: tower-class c: 40)
	(up-find-remote c: building-class c: 40)
	(up-clean-search search-remote object-data-distance search-order-asc)
	(up-get-search-state g-local-total)
	)
	
	(defrule
	(players-building-count any-enemy > 0)
	(player-in-game focus-player)
	(stance-toward focus-player enemy)
	(players-building-count focus-player > 0)
	(up-compare-goal g-remote-total > 0)
	(up-set-target-object search-remote c: 0)
	=>
	(up-get-point position-object g-point-x)
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-set-target-point g-position-self-x)
	(up-filter-distance c: -1 g: g-temp-3)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-path-distance g-point-x 0 g-temp-2)
	)
	
	(defrule
	(players-building-count any-enemy > 0)
	(player-in-game focus-player)
	(stance-toward focus-player enemy)
	(players-building-count focus-player > 0)
	(up-compare-goal g-remote-total > 0)
	(up-set-target-object search-remote c: 0)
	(up-compare-goal g-temp-2 g:< g-closest-enemy-building-distance)
	=>
	(up-modify-goal g-closest-enemy-building-distance g:min g-temp-2)
	(up-modify-goal g-closest-enemy-by-buildings s:= sn-focus-player-number)
	;(up-chat-data-to-self "Closest: %d" s: sn-focus-player-number)
	)
	
	(defrule
	(players-building-count any-enemy > 0)
	(strategic-number sn-focus-player-number < 8)
	=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -5)
	)
	
(defrule
(players-building-count any-enemy > 0)
=>
(up-modify-sn sn-focus-player-number g:= g-temp)
)

(defrule
(players-building-count any-enemy > 0)
(goal g-closest-enemy-by-buildings 0)
=>
(chat-to-player my-player-number "Closest enemy by buildings not set")
)



;====GOAL: g-closest-enemy-building-distance

(defrule
(players-building-count any-enemy > 0)
(up-compare-goal g-closest-enemy-by-tc > 0)
=>
(up-modify-goal g-temp s:= sn-focus-player-number)
(up-modify-sn sn-focus-player-number g:= g-closest-enemy-by-tc)
)

(defrule
(players-building-count any-enemy > 0)
(players-building-count focus-player > 0)
(up-compare-goal g-closest-enemy-by-tc > 0)
=>
(up-full-reset-search)
(up-set-target-point g-position-self-x)
(up-find-remote c: building-class c: 40)
(up-find-remote c: tower-class c: 40)
(up-clean-search search-remote object-data-distance search-order-asc)
(up-get-search-state g-local-total)
)

(defrule
(players-building-count any-enemy > 0)
(players-building-count focus-player > 0)
(up-compare-goal g-closest-enemy-by-tc > 0)
(up-compare-goal g-remote-total > 0)
(up-set-target-object search-remote c: 0)
=>
(up-get-object-data object-data-distance g-closest-enemy-building-distance)
;(up-chat-data-to-self "Enemy dist: %d" g: g-closest-enemy-building-distance)
(up-modify-sn sn-focus-player-number g:= g-temp)
)

(defrule
(players-building-count any-enemy > 0)
(up-compare-goal g-closest-enemy-by-tc == 0)
(up-compare-goal g-closest-enemy-by-buildings > 0)
=>
(up-modify-goal g-temp s:= sn-focus-player-number)
(up-modify-sn sn-focus-player-number g:= g-closest-enemy-by-buildings)
)

(defrule
(players-building-count any-enemy > 0)
(players-building-count focus-player > 0)
(up-compare-goal g-closest-enemy-by-tc == 0)
(up-compare-goal g-closest-enemy-by-buildings > 0)
=>
(up-full-reset-search)
(up-set-target-point g-position-self-x)
(up-find-remote c: building-class c: 40)
(up-find-remote c: tower-class c: 40)
(up-clean-search search-remote object-data-distance search-order-asc)
(up-get-search-state g-local-total)
)

(defrule
(players-building-count any-enemy > 0)
(players-building-count focus-player > 0)
(up-compare-goal g-closest-enemy-by-tc == 0)
(up-compare-goal g-closest-enemy-by-buildings > 0)
(up-compare-goal g-remote-total > 0)
(up-set-target-object search-remote c: 0)
=>
(up-get-object-data object-data-distance g-closest-enemy-building-distance)
;(up-chat-data-to-self "Enemy dist: %d" g: g-closest-enemy-building-distance)
(up-modify-sn sn-focus-player-number g:= g-temp)
)



;====GOAL: g-nearest-enemy-defenses-distance

(defrule
(players-building-count any-enemy > 0)
=>
(up-modify-goal g-temp s:= sn-focus-player-number)
(set-strategic-number sn-focus-player-number 1)
(up-modify-goal g-nearest-enemy-defenses-distance g:= g-map-size-ts)
)

	(defrule
	(players-building-count any-enemy > 0)
	(nor
		(player-in-game focus-player)
		(stance-toward focus-player enemy))
	=>
	(up-jump-rule 3)
	;(up-chat-data-to-self "skip p%d" s: sn-focus-player-number)
	)
	
	(defrule
	(players-building-count any-enemy > 0)
	(players-building-count focus-player > 0)
	(player-in-game focus-player)
	(stance-toward focus-player enemy)
	=>
	;(up-chat-data-to-all "P%d" s: sn-focus-player-number)
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(up-find-remote c: castle c: 40)
	(up-find-remote c: watch-tower c: 40)
	(up-find-remote c: bombard-tower c: 40)
	(up-clean-search search-remote -1 search-order-asc)
	(up-clean-search search-remote object-data-distance search-order-asc)
	)
	
	(defrule
	(players-building-count any-enemy > 0)
	(players-building-count focus-player > 0)
	(player-in-game focus-player)
	(stance-toward focus-player enemy)
	(up-set-target-object search-remote c: 0)
	=>
	(up-get-object-data object-data-distance g-temp-2)
	)
	
	(defrule
	(players-building-count any-enemy > 0)
	(players-building-count focus-player > 0)
	(player-in-game focus-player)
	(stance-toward focus-player enemy)
	(up-set-target-object search-remote c: 0)
	(up-compare-goal g-temp-2 g:< g-nearest-enemy-defenses-distance)
	=>
	(up-modify-goal g-nearest-enemy-defenses-distance g:min g-temp-2)
	)
	
	(defrule
	(players-building-count any-enemy > 0)
	(strategic-number sn-focus-player-number < 8)
	=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -5)
	)
	
(defrule
(true)
=>
;(up-chat-data-to-all "Nearest: %d" g: g-nearest-enemy-defenses-distance)
(up-modify-sn sn-focus-player-number g:= g-temp)
)



;====GOAL: g-min-forest-distance

(defrule
(or
	(resource-found wood)
	(up-gaia-type-count-total c: wood >= 40))
(up-compare-goal g-desired-num-wood-vils > 0)
(building-type-count town-center > 0)
(building-type-count-total lumber-camp == 0)
(goal g-min-forest-distance PENDING)
=>
(up-full-reset-search)
(up-set-target-point g-position-self-x)
(up-filter-status c: status-ready c: list-active)
(up-find-resource c: wood c: 240)
(up-clean-search search-remote object-data-distance search-order-asc)
(up-get-search-state g-local-total)
(up-chat-data-to-self "Trees found: %d" g: g-remote-total)
)

(defrule
(up-compare-goal g-remote-total >= 40)
=>
(set-goal i 0)
(up-modify-goal g-min-forest-distance g:= g-map-size-ts)
)

	(defrule
	(up-compare-goal g-desired-num-wood-vils > 0)
	(building-type-count town-center > 0)
	(building-type-count-total lumber-camp == 0)
	(up-compare-goal g-remote-total >= 40)
	(up-set-target-object search-remote g: i)
	=>
	(up-get-point position-object g-point-x)
	(up-get-point-terrain g-point-x g-temp)
	)

	(defrule
	(building-type-count town-center > 0)
	(building-type-count-total lumber-camp == 0)
	(up-compare-goal g-remote-total g:> i)
	(up-set-target-object search-remote g: i)
	(or
		(up-point-terrain g-point-x == terrain-forest)
		(or
			(up-point-terrain g-point-x == terrain-forest-bamboo)
			(or
				(up-point-terrain g-point-x == terrain-forest-jungle)
				(or
					(up-point-terrain g-point-x == terrain-forest-oak)
					(up-point-terrain g-point-x == terrain-forest-palm)))))
	=>
	(up-get-point-distance g-position-self-x g-point-x g-temp-2)
	(up-modify-goal g-min-forest-distance g:min g-temp-2)
	)

	(defrule
	(building-type-count town-center > 0)
	(building-type-count-total lumber-camp == 0)
	(up-compare-goal g-remote-total g:> i)
	(up-set-target-object search-remote g: i)
	(or
		(up-point-terrain g-point-x == terrain-forest-pine)
		(or
			(up-point-terrain g-point-x == terrain-forest-snow)
			(or
				(up-point-terrain g-point-x == terrain-forest-baobab)
				(up-point-terrain g-point-x == terrain-forest-acacia))))
	=>
	(up-get-point-distance g-position-self-x g-point-x g-temp-2)
	(up-modify-goal g-min-forest-distance g:min g-temp-2)
	)
	
	(defrule
	(building-type-count town-center > 0)
	(building-type-count-total lumber-camp == 0)
	(up-compare-goal g-remote-total g:> i)
	(up-set-target-object search-remote g: i)
	=>
	(up-modify-goal i c:+ 1)
	(up-jump-rule -4)
	)
	
(defrule
(building-type-count-total lumber-camp > 0)
(up-compare-goal g-min-forest-distance > 0)
=>
(up-chat-data-to-self "Forest distance: %d" g: g-min-forest-distance)
(disable-self)
)



;====GOAL: g-avg-mil-training-delay

(defrule
(true)
=>
(set-goal g-avg-mil-training-delay 0)
)

; (defrule
; (goal g-town-under-attack NO)
; (up-compare-goal g-attack-status >= gv-first-attack)
; (up-compare-goal g-team-position >= gv-pocket)
; (current-age == castle-age)
; =>
; (set-goal g-avg-mil-training-delay 5)
; )

; (defrule
; (goal g-town-under-attack NO)
; (up-compare-goal g-attack-status >= gv-first-attack)
; (goal g-highest-tech-priority gv-emergency)
; =>
; (set-goal g-avg-mil-training-delay 30)
; )

; (defrule
; (goal g-town-under-attack NO)
; (up-compare-goal g-attack-status >= gv-first-attack)
; (goal g-highest-tech-priority gv-primary)
; =>
; (set-goal g-avg-mil-training-delay 8)
; )

; (defrule
; (goal g-town-under-attack NO)
; (up-compare-goal g-attack-status >= gv-first-attack)
; (goal g-highest-tech-priority gv-secondary)
; =>
; (set-goal g-avg-mil-training-delay 3)
; )

; (defrule
; (goal g-town-under-attack NO)
; (up-compare-goal g-attack-status >= gv-first-attack)
; (unit-type-count-total villager <= 50)
; (military-population < 20)
; =>
; (up-modify-goal g-avg-mil-training-delay c:max 5)
; )

; (defrule
; (goal g-town-under-attack NO)
; (up-compare-goal g-attack-status >= gv-first-attack)
; (unit-type-count-total villager <= 50)
; (military-population >= 20)
; =>
; (up-modify-goal g-avg-mil-training-delay c:max 15)
; )



;====GOAL: g-allow-military-training

; (defrule
; (up-compare-goal g-avg-mil-training-delay > 0)
; =>
; (set-goal g-allow-military-training NO)
; (up-modify-goal g-temp g:= g-rule-pass-count)
; (up-modify-goal g-temp-2 g:= g-avg-mil-training-delay)
; (up-modify-goal g-temp-2 c:* 2)
; (up-modify-goal g-temp g:mod g-temp-2)
; )

(defrule
(or
	(and
		(up-compare-goal g-avg-mil-training-delay > 0)
		(goal g-temp 0)
	)
	(goal g-avg-mil-training-delay 0))
=>
(set-goal g-allow-military-training YES)
)



;====GOAL: g-map-size and g-map-size-ts

(defrule
(true)
=>
(up-get-point position-map-size g-point-x)
(up-modify-goal g-map-size g:= g-point-x)
(up-modify-goal g-map-size-ts g:= g-map-size)
(up-modify-goal g-map-size-ts c:%* 150)
(disable-self)
)



;====GOAL: g-team-position

#load-if-defined UP-POCKET-POSITION

	(defrule
	(true)
	=>
	(set-goal g-team-position gv-pocket)
	)

#end-if

#load-if-not-defined UP-POCKET-POSITION

	(defrule
	(true)
	=>
	(set-goal g-team-position gv-flank)
	)

#end-if



;====GOAL: g-enemy-unit-counts

(defrule
(timer-triggered t-10-sec)
(players-building-count target-player > 0)
=>
(set-goal g-enemy-swordsmen-count 0)
(set-goal g-enemy-spearmen-count 0)
(set-goal g-enemy-eagle-warrior-count 0)
(set-goal g-enemy-condottiero-count 0)
(set-goal g-enemy-foot-archers-count 0)
(set-goal g-enemy-skirmishers-count 0)
(set-goal g-enemy-cavalry-archers-count 0)
(set-goal g-enemy-hand-cannoneer-slinger-count 0)
(set-goal g-enemy-cavalry-count 0)
(set-goal g-enemy-camel-count 0)
(set-goal g-enemy-elephants-count 0)
(set-goal g-enemy-field-siege-count 0)
(set-goal g-enemy-unique-count 0)
(set-goal g-enemy-visible-military-count 0)
)

(defrule
(timer-triggered t-10-sec)
(players-building-count target-player > 0)
=>
(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
(up-full-reset-search)
(up-find-remote c: militiaman-line c: 40)
(up-find-remote c: woad-raider-line c: 40)
(up-find-remote c: berserk-line c: 40)
(up-find-remote c: shotel-warrior c: 40)
(up-find-remote c: karambit-warrior c: 40)
(up-find-remote c: teutonic-knight-line c: 40)
(up-get-search-state g-local-total)
)

	(defrule
	(timer-triggered t-10-sec)
	(players-building-count target-player > 0)
	(up-compare-goal g-remote-total > 0)
	=>
	(up-modify-goal g-enemy-swordsmen-count g:+ g-remote-total)
	; (up-reset-search 1 1 0 1)
	; (up-find-remote c: militiaman-line c: 40)
	; (up-find-remote c: woad-raider-line c: 40)
	; (up-find-remote c: berserk-line c: 40)
	; (up-find-remote c: shotel-warrior c: 40)
	; (up-find-remote c: karambit-warrior c: 40)
	; (up-find-remote c: teutonic-knight-line c: 40)
	; (up-get-search-state g-local-total)
	; (up-jump-rule -1)
	)

#load-if-defined UP-MULTIPLE-ENEMIES

	(defrule
	(strategic-number sn-target-player-number > 0)
	(players-current-age target-player == dark-age)
	(players-civilian-population target-player >= 27)
	=>
	(set-goal g-enemy-strategy gv-fc)
	(disable-self)
	)

#else

	(defrule
	(players-current-age any-enemy == dark-age)
	(players-civilian-population any-enemy >= 27)
	(players-military-population any-enemy <= 1)
	=>
	(set-goal g-enemy-strategy gv-fc)
	(disable-self)
	)

#end-if



;----------------------
;   GATHERING INSIDE
;----------------------

(defrule
(true)
=>
(up-get-fact military-population 0 g-temp)
(up-modify-goal g-temp g:- g-enemy-units-in-town)
)

(defrule
(true)
=>
(up-gather-inside c: barracks c: 1)
(up-gather-inside c: archery-range c: 1)
(up-gather-inside c: stable c: 1)
(up-gather-inside c: siege-workshop c: 1)
(up-gather-inside c: castle c: 1)
(up-gather-inside c: monastery c: 1)
)

(defrule
(military-population >= 4)
;(up-compare-goal g-military-superiority > -10)
(or
	(up-compare-goal g-temp > -8) ;enemy units in town outnumber our military pop by less than 6
	(military-population >= 6))
(players-current-age every-enemy < castle-age)
(current-age >= castle-age)
=>
(up-full-reset-search)
(up-find-local c: barracks c: 40)
(up-find-local c: archery-range c: 40)
(up-find-local c: stable c: 40)
(up-find-local c: siege-workshop c: 40)
(up-find-local c: castle c: 40)
(up-find-local c: monastery c: 40)
(up-remove-objects search-local object-data-attacker-count >= 3)
(up-set-target-point g-position-self-x)
(up-target-point g-position-self-x action-unload -1 -1)
)

(defrule
(military-population >= 6)
;(up-compare-goal g-military-superiority > -10)
(or
	(up-compare-goal g-temp > -5) ;enemy units in town outnumber our military pop by less than 6
	(military-population >= 10))
(or
	(players-current-age every-enemy >= castle-age)
	(current-age < castle-age))
=>
(up-full-reset-search)
(up-find-local c: barracks c: 40)
(up-find-local c: archery-range c: 40)
(up-find-local c: stable c: 40)
(up-find-local c: siege-workshop c: 40)
(up-find-local c: castle c: 40)
(up-remove-objects search-local object-data-attacker-count >= 3)
(up-set-target-point g-position-self-x)
(up-target-point g-position-self-x action-unload -1 -1)
)

(defrule
(military-population >= 6)
;(up-compare-goal g-military-superiority > -10)
(or
	(up-compare-goal g-temp > -5) ;enemy units in town outnumber our military pop by less than 6
	(military-population >= 10))
(or
	(players-current-age every-enemy >= castle-age)
	(current-age < castle-age))
=>
(up-full-reset-search)
(up-find-local c: monastery c: 40)
(up-remove-objects search-local object-data-attacker-count < 3)
(up-get-search-state g-local-total)
)

(defrule
(military-population >= 6)
;(up-compare-goal g-military-superiority > -10)
(or
	(up-compare-goal g-temp > -5) ;enemy units in town outnumber our military pop by less than 6
	(military-population >= 10))
(or
	(players-current-age every-enemy >= castle-age)
	(current-age < castle-age))
(goal g-local-total 0) ;no monasteries under attack
=>
(up-ungarrison c: monastery)
)