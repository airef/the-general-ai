;Gathering.per

(defrule
(true)
=>
(up-modify-goal g-desired-num-wood-vils c:= 0)
(up-modify-goal g-desired-num-food-vils c:= 0)
(up-modify-goal g-desired-num-gold-vils c:= 0)
(up-modify-goal g-desired-num-stone-vils c:= 0)
(up-modify-goal g-desired-num-shepherds c:= 0)
(up-modify-goal g-desired-num-boar-hunters c:= 0)
(up-modify-goal g-desired-num-foragers c:= 0)
(up-modify-goal g-desired-num-deer-hunters c:= 0)
(up-modify-goal g-desired-num-farmers c:= 0)
(up-modify-goal g-desired-num-fishermen c:= 0)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager <= 6)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:= 0)
(up-modify-goal g-desired-num-gold-vils c:= 0)
(up-modify-goal g-desired-num-stone-vils c:= 0)
(up-modify-goal g-desired-num-shepherds c:= 6)
(up-modify-goal g-desired-num-foragers c:= 0)
(up-modify-goal g-desired-num-deer-hunters c:= 0)
(up-modify-goal g-desired-num-farmers c:= 0)
(up-modify-goal g-desired-num-fishermen c:= 0)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 7)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:= 1)
(up-modify-goal g-desired-num-gold-vils c:= 0)
(up-modify-goal g-desired-num-stone-vils c:= 0)
(up-modify-goal g-desired-num-shepherds c:= 6)
(up-modify-goal g-desired-num-foragers c:= 0)
(up-modify-goal g-desired-num-deer-hunters c:= 0)
(up-modify-goal g-desired-num-farmers c:= 0)
(up-modify-goal g-desired-num-fishermen c:= 0)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 8)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:= 2)
(up-modify-goal g-desired-num-gold-vils c:= 0)
(up-modify-goal g-desired-num-stone-vils c:= 0)
(up-modify-goal g-desired-num-shepherds c:= 6)
(up-modify-goal g-desired-num-foragers c:= 0)
(up-modify-goal g-desired-num-deer-hunters c:= 0)
(up-modify-goal g-desired-num-farmers c:= 0)
(up-modify-goal g-desired-num-fishermen c:= 0)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 9)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:= 3)
(up-modify-goal g-desired-num-gold-vils c:= 0)
(up-modify-goal g-desired-num-stone-vils c:= 0)
(up-modify-goal g-desired-num-shepherds c:= 6)
(up-modify-goal g-desired-num-foragers c:= 0)
(up-modify-goal g-desired-num-deer-hunters c:= 0)
(up-modify-goal g-desired-num-farmers c:= 0)
(up-modify-goal g-desired-num-fishermen c:= 0)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 10)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:= 3)
(up-modify-goal g-desired-num-gold-vils c:= 0)
(up-modify-goal g-desired-num-stone-vils c:= 0)
(up-modify-goal g-desired-num-shepherds c:= 6)
(up-modify-goal g-desired-num-boar-hunters c:= 1)
(up-modify-goal g-desired-num-foragers c:= 0)
(up-modify-goal g-desired-num-deer-hunters c:= 0)
(up-modify-goal g-desired-num-farmers c:= 0)
(up-modify-goal g-desired-num-fishermen c:= 0)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 11)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:= 4)
(up-modify-goal g-desired-num-gold-vils c:= 0)
(up-modify-goal g-desired-num-stone-vils c:= 0)
(up-modify-goal g-desired-num-shepherds c:= 6)
(up-modify-goal g-desired-num-boar-hunters c:= 1)
(up-modify-goal g-desired-num-foragers c:= 0)
(up-modify-goal g-desired-num-deer-hunters c:= 0)
(up-modify-goal g-desired-num-farmers c:= 0)
(up-modify-goal g-desired-num-fishermen c:= 0)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 12)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:= 4)
(up-modify-goal g-desired-num-gold-vils c:= 0)
(up-modify-goal g-desired-num-stone-vils c:= 0)
(up-modify-goal g-desired-num-shepherds c:= 7)
(up-modify-goal g-desired-num-boar-hunters c:= 1)
(up-modify-goal g-desired-num-foragers c:= 0)
(up-modify-goal g-desired-num-deer-hunters c:= 0)
(up-modify-goal g-desired-num-farmers c:= 0)
(up-modify-goal g-desired-num-fishermen c:= 0)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 13)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-foragers c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 14)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-foragers c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 15)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-foragers c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 16)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 17)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:+ 1)
(disable-self)
)

(defrule
;current-age == dark-age)
(unit-type-count villager == 18)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 19)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 20)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 21)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 22)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 23)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-wood-vils c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 24)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 25)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 26)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(disable-self)
)

(defrule
;(current-age == dark-age)
(unit-type-count villager == 27)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-gold-vils c:+ 1)
(disable-self)
)

(defrule
;(up-compare-goal g-age-status == gv-feudal)
(unit-type-count villager == 28)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-gold-vils c:+ 1)
(disable-self)
)

(defrule
;(up-compare-goal g-age-status == gv-feudal)
(unit-type-count villager == 29)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-gold-vils c:+ 1)
(disable-self)
)

#load-if-not-defined ITALIAN-CIV

	(defrule
	(goal g-age-status gv-save-for-castle)
	(timer-triggered t-30-sec)
	(gold-amount >= 170)
	(food-amount < 680)
	(up-compare-goal g-desired-num-gold-vils > 1)
	=>
	(up-modify-goal g-desired-num-farmers c:+ 1)
	(up-modify-goal g-desired-num-gold-vils c:- 1)
	(chat-local-to-self "more farmers for castle age food")
	)

	(defrule
	(goal g-age-status gv-save-for-castle)
	(timer-triggered t-30-sec)
	(gold-amount < 170)
	(food-amount >= 680)
	(up-compare-goal g-desired-num-farmers > 0)
	=>
	(up-modify-goal g-desired-num-farmers c:- 1)
	(up-modify-goal g-desired-num-gold-vils c:+ 1)
	(chat-local-to-self "more gold miners for castle age gold")
	(disable-self)
	)
	
#else

	(defrule
	(goal g-age-status gv-save-for-castle)
	(timer-triggered t-30-sec)
	(gold-amount >= 200)
	(food-amount < 800)
	(up-compare-goal g-desired-num-gold-vils > 1)
	=>
	(up-modify-goal g-desired-num-farmers c:+ 1)
	(up-modify-goal g-desired-num-gold-vils c:- 1)
	(chat-local-to-self "more farmers for castle age food")
	)

	(defrule
	(goal g-age-status gv-save-for-castle)
	(timer-triggered t-30-sec)
	(gold-amount < 200)
	(food-amount >= 800)
	(up-compare-goal g-desired-num-farmers > 0)
	=>
	(up-modify-goal g-desired-num-farmers c:- 1)
	(up-modify-goal g-desired-num-gold-vils c:+ 1)
	(chat-local-to-self "more gold miners for castle age gold")
	(disable-self)
	)
	
#end-if

(defrule
(up-compare-goal g-age-status == gv-advancing-to-castle)
(goal g-eco-balance-system gv-manual)
=>
(up-get-fact unit-type-count villager g-temp)
(up-modify-goal g-desired-num-gold-vils c:max 5)
(up-modify-goal g-desired-num-farmers g:= g-temp)
(up-modify-goal g-desired-num-farmers g:- g-desired-num-gold-vils)
(up-modify-goal g-desired-num-farmers g:- g-desired-num-wood-vils)
(up-modify-goal g-desired-num-farmers g:- g-desired-num-stone-vils)
(disable-self)
)




(defrule
(current-age == dark-age)
(unit-type-count villager-hunter > 0)
(dropsite-min-distance boar-hunting < 10)
;(unit-type-count villager >= 12)
;(unit-type-count villager <= 14)
(up-compare-goal g-boar-hunt-status > 0)
(up-compare-goal g-desired-num-shepherds > 0)
=>
(up-modify-goal g-desired-num-boar-hunters g:+ g-desired-num-shepherds)
(up-modify-goal g-desired-num-shepherds c:= 0)
(up-chat-data-to-self "Num boar hunters: %d" g: g-desired-num-boar-hunters)
(disable-self)
)

(defrule
(current-age == dark-age)
(up-compare-goal g-desired-num-boar-hunters > 0)
(unit-type-count villager-hunter == 0)
(dropsite-min-distance livestock-class < 10)
(goal g-boar-found gv-all-boar-hunted)
(up-compare-goal g-boar-hunt-status == -1)
=>
(up-modify-goal g-desired-num-shepherds g:+ g-desired-num-boar-hunters)
(up-modify-goal g-desired-num-boar-hunters c:= 0)
(up-chat-data-to-self "Num shepherds: %d" g: g-desired-num-shepherds)
(disable-self)
)

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-age-status < gv-advancing-to-feudal)
(unit-type-count villager >= 18)
(unit-type-count villager-forager > 6)
(unit-type-count villager-farmer < 9)
(up-compare-goal g-desired-num-farmers < 8)
(up-compare-goal g-desired-num-foragers > 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-foragers c:- 1)
(up-chat-data-to-self "Num farmers (from foragers): %d" g: g-desired-num-farmers)
)

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-age-status < gv-advancing-to-feudal)
(unit-type-count villager >= 24)
(unit-type-count villager-forager > 4)
(unit-type-count villager-farmer < 9)
(up-compare-goal g-desired-num-farmers < 8)
(up-compare-goal g-desired-num-fishermen > 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-fishermen c:- 1)
(up-chat-data-to-self "Num farmers (from fish): %d" g: g-desired-num-farmers)
)

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-age-status < gv-advancing-to-feudal)
(unit-type-count villager >= 24)
(unit-type-count villager-forager > 4)
(unit-type-count villager-farmer < 9)
(up-compare-goal g-desired-num-farmers < 8)
(up-compare-goal g-desired-num-deer-hunters > 0)
(up-compare-goal g-desired-num-fishermen == 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-deer-hunters c:- 1)
(up-chat-data-to-self "Num farmers (from deer): %d" g: g-desired-num-farmers)
)

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-age-status < gv-advancing-to-feudal)
(unit-type-count villager >= 24)
(unit-type-count villager-forager > 4)
(unit-type-count villager-farmer < 9)
(up-compare-goal g-desired-num-farmers < 8)
(up-compare-goal g-desired-num-boar-hunters > 0)
(up-compare-goal g-desired-num-fishermen == 0)
(up-compare-goal g-desired-num-deer-hunters == 0)
(or
	(goal g-boar-found gv-all-boar-hunted)
	(dropsite-min-distance boar-hunting > MAX-BOAR-HUNT-DISTANCE))
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-boar-hunters c:- 1)
(up-chat-data-to-self "Num farmers (from boar): %d" g: g-desired-num-farmers)
)

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-age-status < gv-advancing-to-feudal)
(unit-type-count villager >= 24)
(unit-type-count villager-forager > 4)
(unit-type-count villager-farmer < 9)
(up-compare-goal g-desired-num-farmers < 8)
(up-compare-goal g-desired-num-shepherds > 0)
(up-compare-goal g-desired-num-fishermen == 0)
(up-compare-goal g-desired-num-deer-hunters == 0)
(up-compare-goal g-desired-num-boar-hunters == 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-shepherds c:- 1)
(up-chat-data-to-self "Num farmers (from shepherd): %d" g: g-desired-num-farmers)
)



(defrule
(up-compare-goal g-age-status == gv-advancing-to-feudal)
(up-compare-goal g-desired-num-farmers < 9)
(up-compare-goal g-desired-num-fishermen > 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-fishermen c:- 1)
(up-chat-data-to-self "Num farmers (from fish): %d" g: g-desired-num-farmers)
)

(defrule
(up-compare-goal g-age-status == gv-advancing-to-feudal)
(up-compare-goal g-desired-num-farmers < 9)
(up-compare-goal g-desired-num-deer-hunters > 0)
(up-compare-goal g-desired-num-fishermen == 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-deer-hunters c:- 1)
(up-chat-data-to-self "Num farmers (from deer): %d" g: g-desired-num-farmers)
)

(defrule
(up-compare-goal g-age-status == gv-advancing-to-feudal)
(up-compare-goal g-desired-num-farmers < 9)
(up-compare-goal g-desired-num-boar-hunters > 0)
(up-compare-goal g-desired-num-fishermen == 0)
(up-compare-goal g-desired-num-deer-hunters == 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-boar-hunters c:- 1)
(up-chat-data-to-self "Num farmers (from boar): %d" g: g-desired-num-farmers)
)

(defrule
(up-compare-goal g-age-status == gv-advancing-to-feudal)
(up-compare-goal g-desired-num-farmers < 9)
(up-compare-goal g-desired-num-shepherds > 0)
(up-compare-goal g-desired-num-fishermen == 0)
(up-compare-goal g-desired-num-deer-hunters == 0)
(up-compare-goal g-desired-num-boar-hunters == 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-shepherds c:- 1)
(up-chat-data-to-self "Num farmers (from shepherd): %d" g: g-desired-num-farmers)
)

(defrule
(timer-triggered t-10-sec)
(dropsite-min-distance livestock-class > 10)
=>
(chat-local-to-self "livestock not close")
)


(defrule
(up-compare-goal g-age-status >= gv-advancing-to-feudal)
(dropsite-min-distance livestock-class > 10)
(goal g-boar-found gv-all-boar-hunted)
(dropsite-min-distance food < 5)
(unit-type-count villager-forager > 0)
(up-compare-goal g-desired-num-foragers < 6)
(up-compare-goal g-desired-num-fishermen > 0)
=>
(up-modify-goal g-desired-num-foragers c:+ 1)
(up-modify-goal g-desired-num-fishermen c:- 1)
(up-chat-data-to-self "Num foragers (from fish): %d" g: g-desired-num-foragers)
)

(defrule
(up-compare-goal g-age-status >= gv-advancing-to-feudal)
(dropsite-min-distance livestock-class > 10)
(goal g-boar-found gv-all-boar-hunted)
(dropsite-min-distance food < 5)
(unit-type-count villager-forager > 0)
(up-compare-goal g-desired-num-foragers < 6)
(up-compare-goal g-desired-num-farmers >= 9)
(up-compare-goal g-desired-num-deer-hunters > 0)
(up-compare-goal g-desired-num-fishermen == 0)
=>
(up-modify-goal g-desired-num-foragers c:+ 1)
(up-modify-goal g-desired-num-deer-hunters c:- 1)
(up-chat-data-to-self "Num foragers (from deer): %d" g: g-desired-num-foragers)
)

(defrule
(up-compare-goal g-age-status >= gv-advancing-to-feudal)
(dropsite-min-distance livestock-class > 10)
(goal g-boar-found gv-all-boar-hunted)
(dropsite-min-distance food < 5)
(unit-type-count villager-forager > 0)
(up-compare-goal g-desired-num-foragers < 6)
(up-compare-goal g-desired-num-farmers >= 9)
(up-compare-goal g-desired-num-boar-hunters > 0)
(up-compare-goal g-desired-num-fishermen == 0)
(up-compare-goal g-desired-num-deer-hunters == 0)
=>
(up-modify-goal g-desired-num-foragers c:+ 1)
(up-modify-goal g-desired-num-boar-hunters c:- 1)
(up-chat-data-to-self "Num foragers (from boar): %d" g: g-desired-num-foragers)
)

(defrule
(up-compare-goal g-age-status >= gv-advancing-to-feudal)
(dropsite-min-distance livestock-class > 10)
(goal g-boar-found gv-all-boar-hunted)
(dropsite-min-distance food < 5)
(unit-type-count villager-forager > 0)
(up-compare-goal g-desired-num-foragers < 6)
(up-compare-goal g-desired-num-farmers >= 9)
(up-compare-goal g-desired-num-shepherds > 0)
(up-compare-goal g-desired-num-fishermen == 0)
(up-compare-goal g-desired-num-deer-hunters == 0)
(up-compare-goal g-desired-num-boar-hunters == 0)
=>
(up-modify-goal g-desired-num-foragers c:+ 1)
(up-modify-goal g-desired-num-shepherds c:- 1)
(up-chat-data-to-self "Num foragers (from shepherd): %d" g: g-desired-num-foragers)
)


(defrule
(up-compare-goal g-age-status == gv-advancing-to-castle)
(up-compare-goal g-desired-num-farmers < 11)
(up-compare-goal g-desired-num-fishermen > 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-fishermen c:- 1)
(up-chat-data-to-self "Num farmers (from fish): %d" g: g-desired-num-farmers)
)

(defrule
(up-compare-goal g-age-status == gv-advancing-to-castle)
(up-compare-goal g-desired-num-farmers < 11)
(up-compare-goal g-desired-num-deer-hunters > 0)
(up-compare-goal g-desired-num-fishermen == 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-deer-hunters c:- 1)
(up-chat-data-to-self "Num farmers (from deer): %d" g: g-desired-num-farmers)
)

(defrule
(up-compare-goal g-age-status == gv-advancing-to-castle)
(up-compare-goal g-desired-num-farmers < 11)
(up-compare-goal g-desired-num-boar-hunters > 0)
(up-compare-goal g-desired-num-fishermen == 0)
(up-compare-goal g-desired-num-deer-hunters == 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-boar-hunters c:- 1)
(up-chat-data-to-self "Num farmers (from boar): %d" g: g-desired-num-farmers)
)

(defrule
(up-compare-goal g-age-status == gv-advancing-to-castle)
(up-compare-goal g-desired-num-farmers < 11)
(up-compare-goal g-desired-num-shepherds > 0)
(up-compare-goal g-desired-num-fishermen == 0)
(up-compare-goal g-desired-num-deer-hunters == 0)
(up-compare-goal g-desired-num-boar-hunters == 0)
=>
(up-modify-goal g-desired-num-farmers c:+ 1)
(up-modify-goal g-desired-num-shepherds c:- 1)
(up-chat-data-to-self "Num farmers (from shepherd): %d" g: g-desired-num-farmers)
)

(defrule
(nor
	(goal g-boar-hunting-conditions-met NO)
	(goal g-boar-hunting-conditions-met gv-far-boar-vils-met))
(goal g-boar-hunt-status -1)
(up-compare-goal g-desired-num-boar-hunters <= 0)
(up-compare-goal g-desired-num-shepherds > 0)
=>
(up-modify-goal g-desired-num-boar-hunters c:+ 1)
(up-modify-goal g-desired-num-shepherds c:- 1)
(chat-local-to-self "Need boar hunters again")
)

(defrule
(nor
	(goal g-boar-hunting-conditions-met NO)
	(goal g-boar-hunting-conditions-met gv-far-boar-vils-met))
(goal g-boar-hunt-status -1)
(up-compare-goal g-desired-num-boar-hunters <= 0)
(up-compare-goal g-desired-num-farmers > 0)
=>
(up-modify-goal g-desired-num-boar-hunters c:+ 1)
(up-modify-goal g-desired-num-farmers c:- 1)
(chat-local-to-self "Need boar hunters again")
)

(defrule
(nor
	(goal g-boar-hunting-conditions-met NO)
	(goal g-boar-hunting-conditions-met gv-far-boar-vils-met))
(goal g-boar-hunt-status -1)
(up-compare-goal g-desired-num-boar-hunters <= 0)
(up-compare-goal g-desired-num-foragers > 0)
=>
(up-modify-goal g-desired-num-boar-hunters c:+ 1)
(up-modify-goal g-desired-num-foragers c:- 1)
(chat-local-to-self "Need boar hunters again")
)



(defrule
(goal g-eco-balance-system gv-manual)
=>
(up-modify-goal g-desired-num-food-vils g:= g-desired-num-shepherds)
(up-modify-goal g-desired-num-food-vils g:+ g-desired-num-boar-hunters)
(up-modify-goal g-desired-num-food-vils g:+ g-desired-num-deer-hunters)
(up-modify-goal g-desired-num-food-vils g:+ g-desired-num-foragers)
(up-modify-goal g-desired-num-food-vils g:+ g-desired-num-farmers)
(up-modify-goal g-desired-num-food-vils g:+ g-desired-num-fishermen)
)

(defrule
(goal g-eco-balance-system gv-manual)
(current-age < castle-age)
=>
(up-get-fact unit-type-count villager g-temp)
(up-modify-goal g-desired-num-gatherers g:= g-temp)
(up-modify-goal g-temp g:= g-desired-num-stone-vils)
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-desired-num-gatherers)
(up-modify-sn sn-stone-gatherer-percentage g:= g-temp)
)

(defrule
(goal g-eco-balance-system gv-manual)
(current-age < castle-age)
=>
(up-modify-goal g-temp g:= g-desired-num-gold-vils)		;Gold vils
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-desired-num-gatherers)
(up-modify-sn sn-gold-gatherer-percentage g:= g-temp)
(up-modify-goal g-temp g:= g-desired-num-wood-vils)		;Wood vils
(up-modify-goal g-temp c:* 100)
(up-modify-goal g-temp g:/ g-desired-num-gatherers)
(up-modify-sn sn-wood-gatherer-percentage g:= g-temp)
)

(defrule
(goal g-eco-balance-system gv-manual)
(current-age < castle-age)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 100)
(up-modify-sn sn-food-gatherer-percentage s:- sn-wood-gatherer-percentage)
(up-modify-sn sn-food-gatherer-percentage s:- sn-gold-gatherer-percentage)
(up-modify-sn sn-food-gatherer-percentage s:- sn-stone-gatherer-percentage)
)



;(defrule
;(up-compare-goal g-age-status == gv-advancing-to-castle)
;(up-compare-goal g-initial-strategy == gv-krush)
;(goal g-eco-balance-system gv-manual)
;=>
;(up-modify-sn sn-food-gatherer-percentage c:= 45)
;(up-modify-sn sn-wood-gatherer-percentage c:= 30)
;(up-modify-sn sn-stone-gatherer-percentage c:= 0)
;(up-modify-sn sn-gold-gatherer-percentage c:= 25)
;)


(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-strongbow)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 25)
(up-modify-sn sn-wood-gatherer-percentage c:= 35)
(up-modify-sn sn-stone-gatherer-percentage c:= 10)
(up-modify-sn sn-gold-gatherer-percentage c:= 30)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-krush)
(unit-type-count knight-line < 8)
(up-compare-goal g-attack-status < gv-first-attack)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 40)
(up-modify-sn sn-wood-gatherer-percentage c:= 35)
(up-modify-sn sn-stone-gatherer-percentage c:= 0)
(up-modify-sn sn-gold-gatherer-percentage c:= 25)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-crush)
(unit-type-count camel-line < 8)
(up-compare-goal g-attack-status < gv-first-attack)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 40)
(up-modify-sn sn-wood-gatherer-percentage c:= 35)
(up-modify-sn sn-stone-gatherer-percentage c:= 0)
(up-modify-sn sn-gold-gatherer-percentage c:= 25)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-eagles-revenge)
(up-compare-goal g-eagle-scout-line < 12)
(up-compare-goal g-attack-status < gv-first-attack)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 35)
(up-modify-sn sn-wood-gatherer-percentage c:= 30)
(up-modify-sn sn-stone-gatherer-percentage c:= 0)
(up-modify-sn sn-gold-gatherer-percentage c:= 35)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-krush)
(or
	(unit-type-count knight-line >= 8)
	(up-compare-goal g-attack-status >= gv-before-later-attacks))
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 46)
(up-modify-sn sn-wood-gatherer-percentage c:= 39)
(up-modify-sn sn-gold-gatherer-percentage c:= 15)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-crush)
(or
	(unit-type-count camel-line >= 8)
	(up-compare-goal g-attack-status >= gv-before-later-attacks))
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 46)
(up-modify-sn sn-wood-gatherer-percentage c:= 39)
(up-modify-sn sn-gold-gatherer-percentage c:= 15)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-eagles-revenge)
(or
	(up-compare-goal g-eagle-scout-line >= 12)
	(up-compare-goal g-attack-status >= gv-before-later-attacks))
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 41)
(up-modify-sn sn-wood-gatherer-percentage c:= 34)
(up-modify-sn sn-gold-gatherer-percentage c:= 25)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-krush)
(up-object-type-count c: town-center g:>= g-desired-num-town-center)
(up-object-type-count c: siege-workshop g:>= g-desired-num-siege-workshop)
(up-object-type-count c: monastery g:>= g-desired-num-monastery)
(up-object-type-count c: university g:>= g-desired-num-university)
(or
	(unit-type-count knight-line >= 8)
	(up-compare-goal g-attack-status >= gv-before-later-attacks))
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 46)
(up-modify-sn sn-wood-gatherer-percentage c:= 34)
(up-modify-sn sn-gold-gatherer-percentage c:= 20)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-crush)
(up-object-type-count c: town-center g:>= g-desired-num-town-center)
(up-object-type-count c: siege-workshop g:>= g-desired-num-siege-workshop)
(up-object-type-count c: monastery g:>= g-desired-num-monastery)
(up-object-type-count c: university g:>= g-desired-num-university)
(or
	(unit-type-count camel-line >= 8)
	(up-compare-goal g-attack-status >= gv-before-later-attacks))
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 46)
(up-modify-sn sn-wood-gatherer-percentage c:= 34)
(up-modify-sn sn-gold-gatherer-percentage c:= 20)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-initial-strategy == gv-eagles-revenge)
(up-object-type-count c: town-center g:>= g-desired-num-town-center)
(up-object-type-count c: siege-workshop g:>= g-desired-num-siege-workshop)
(up-object-type-count c: monastery g:>= g-desired-num-monastery)
(up-object-type-count c: university g:>= g-desired-num-university)
(or
	(up-compare-goal g-eagle-scout-line >= 12)
	(up-compare-goal g-attack-status >= gv-before-later-attacks))
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-food-gatherer-percentage c:= 41)
(up-modify-sn sn-wood-gatherer-percentage c:= 29)
(up-modify-sn sn-gold-gatherer-percentage c:= 30)
)

;Need castles, TCs, or towers. Gather stone.

(defrule
(current-age >= castle-age)
(up-object-type-count c: castle g:< g-desired-num-castle)
(not
	(can-afford-building castle))
(or
	(up-compare-goal g-attack-status >= gv-before-later-attacks)
	(current-age-time >= 240))
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-stone-gatherer-percentage c:max 10)
)

(defrule
(current-age >= castle-age)
(up-object-type-count c: town-center g:< g-desired-num-town-center)
(or
	(stone-amount < 100)
	(and
		(stone-amount < 50)
		(civ-selected bulgarians)))
(or
	(up-compare-goal g-attack-status >= gv-before-later-attacks)
	(current-age-time >= 240))
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-stone-gatherer-percentage c:max 10)
)

(defrule
(current-age >= castle-age)
(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)
(wood-amount > 25)
(not
	(can-afford-building watch-tower))
(or
	(up-compare-goal g-attack-status >= gv-before-later-attacks)
	(current-age-time >= 240))
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-stone-gatherer-percentage c:max 4)
)

;Castles, towers, and TCs complete. Set stone % to 0. Split prior stone gathering between food and gold.
(defrule
(current-age >= castle-age)
;(up-compare-goal g-initial-strategy == gv-krush)
;(or
;	(unit-type-count knight-line >= 8)
;	(up-compare-goal g-attack-status >= gv-before-later-attacks))
(up-object-type-count c: castle g:>= g-desired-num-castle)
(up-object-type-count c: town-center g:>= g-desired-num-town-center)
(up-compare-goal g-watch-tower-line g:>= g-desired-num-watch-tower)
(up-compare-sn sn-stone-gatherer-percentage > 0)
(goal g-eco-balance-system gv-manual)
=>
(up-modify-sn sn-stone-gatherer-percentage c:= 0)
)

(defrule
(current-age >= castle-age)
=>
(enable-timer t-adjust-gathering ADJUST-GATHERING-TIMER-LENGTH)
(disable-self)
);Decrease gathering percentages if there are excess resources

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-attack-status >= gv-castle-military)
=>
(up-get-fact food-amount 0 g-temp)
(up-modify-goal g-temp g:- g-max-food-needed)
(up-modify-goal g-temp c:max 0)
(up-modify-goal g-temp c:/ 75)
(up-modify-sn sn-food-gatherer-percentage g:- g-temp)
)

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-attack-status >= gv-castle-military)
=>
(up-get-fact wood-amount 0 g-temp)
(up-modify-goal g-temp g:- g-max-wood-needed)
(up-modify-goal g-temp c:max 0)
(up-modify-goal g-temp c:/ 75)
(up-modify-sn sn-wood-gatherer-percentage g:- g-temp)
)

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-attack-status >= gv-castle-military)
=>
(up-get-fact gold-amount 0 g-temp)
(up-modify-goal g-temp g:- g-max-gold-needed)
(up-modify-goal g-temp c:max 0)
(up-modify-goal g-temp c:/ 75)
(up-modify-sn sn-gold-gatherer-percentage g:- g-temp)
)

;Adjust gathering percentages so they add up to 100
;Stone is not adjusted

(defrule
(up-compare-goal g-strategy >= gv-castle-military)
=>
(set-goal g-temp 100)
(up-modify-goal g-temp s:- sn-stone-gatherer-percentage)
(up-modify-sn sn-food-gatherer-percentage g:%* g-temp)
(up-modify-sn sn-wood-gatherer-percentage g:%* g-temp)
(up-modify-sn sn-gold-gatherer-percentage g:%* g-temp)
)

(defrule
(timer-triggered t-30-sec)
=>
(up-chat-data-to-self "W %: %d" s: sn-wood-gatherer-percentage)
(up-chat-data-to-self "F %: %d" s: sn-food-gatherer-percentage)
(up-chat-data-to-self "G %: %d" s: sn-gold-gatherer-percentage)
)

#load-if-defined REPLACE-WITH-FUNCTIONAL-RULES

	(defrule
	(timer-triggered t-adjust-gathering)
	(current-age >= castle-age)
	(wood-amount < 100)
	(food-amount > 1000)
	(up-compare-sn sn-wood-gatherer-percentage <= 98)
	(up-compare-sn sn-gold-gatherer-percentage <= 98)
	(up-compare-sn sn-food-gatherer-percentage <= 98)
	(unit-type-count villager-wood > 5)
	(goal g-eco-balance-system gv-manual)
	=>
	(up-modify-sn sn-wood-gatherer-percentage c:+ 1)
	(up-modify-sn sn-food-gatherer-percentage c:- 1)
	(up-chat-data-to-player my-player-number "Wood %: %d" s: sn-wood-gatherer-percentage)
	(up-chat-data-to-player my-player-number "Food %: %d" s: sn-food-gatherer-percentage)
	)

	(defrule
	(timer-triggered t-adjust-gathering)
	(current-age >= castle-age)
	(wood-amount < 100)
	(gold-amount > 1000)
	(up-compare-sn sn-wood-gatherer-percentage <= 98)
	(up-compare-sn sn-gold-gatherer-percentage <= 98)
	(up-compare-sn sn-food-gatherer-percentage <= 98)
	(unit-type-count villager-wood > 5)
	(goal g-eco-balance-system gv-manual)
	=>
	(up-modify-sn sn-wood-gatherer-percentage c:+ 1)
	(up-modify-sn sn-gold-gatherer-percentage c:- 1)
	(up-chat-data-to-player my-player-number "Wood %: %d" s: sn-wood-gatherer-percentage)
	(up-chat-data-to-player my-player-number "Gold %: %d" s: sn-gold-gatherer-percentage)
	)

	(defrule
	(timer-triggered t-adjust-gathering)
	(current-age >= castle-age)
	(food-amount < 100)
	(gold-amount > 1000)
	(up-compare-sn sn-wood-gatherer-percentage <= 98)
	(up-compare-sn sn-gold-gatherer-percentage <= 98)
	(up-compare-sn sn-food-gatherer-percentage <= 98)
	(unit-type-count villager-food > 5)
	(goal g-eco-balance-system gv-manual)
	=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 1)
	(up-modify-sn sn-gold-gatherer-percentage c:- 1)
	(up-chat-data-to-player my-player-number "Food %: %d" s: sn-food-gatherer-percentage)
	(up-chat-data-to-player my-player-number "Gold %: %d" s: sn-gold-gatherer-percentage)
	)

	(defrule
	(timer-triggered t-adjust-gathering)
	(current-age >= castle-age)
	(food-amount < 100)
	(wood-amount > 1000)
	(up-compare-sn sn-wood-gatherer-percentage <= 98)
	(up-compare-sn sn-gold-gatherer-percentage <= 98)
	(up-compare-sn sn-food-gatherer-percentage <= 98)
	(unit-type-count villager-food > 5)
	(goal g-eco-balance-system gv-manual)
	=>
	(up-modify-sn sn-food-gatherer-percentage c:+ 1)
	(up-modify-sn sn-wood-gatherer-percentage c:- 1)
	(up-chat-data-to-player my-player-number "Food %: %d" s: sn-food-gatherer-percentage)
	(up-chat-data-to-player my-player-number "Wood %: %d" s: sn-wood-gatherer-percentage)
	)

	(defrule
	(timer-triggered t-adjust-gathering)
	(current-age >= castle-age)
	(gold-amount < 100)
	(wood-amount > 1000)
	(up-compare-sn sn-wood-gatherer-percentage <= 98)
	(up-compare-sn sn-gold-gatherer-percentage <= 98)
	(up-compare-sn sn-food-gatherer-percentage <= 98)
	(unit-type-count villager-gold > 5)
	(goal g-eco-balance-system gv-manual)
	=>
	(up-modify-sn sn-gold-gatherer-percentage c:+ 1)
	(up-modify-sn sn-wood-gatherer-percentage c:- 1)
	(up-chat-data-to-player my-player-number "Gold %: %d" s: sn-gold-gatherer-percentage)
	(up-chat-data-to-player my-player-number "Wood %: %d" s: sn-wood-gatherer-percentage)
	)

	(defrule
	(timer-triggered t-adjust-gathering)
	(current-age >= castle-age)
	(gold-amount < 100)
	(food-amount > 1000)
	(up-compare-sn sn-wood-gatherer-percentage <= 98)
	(up-compare-sn sn-gold-gatherer-percentage <= 98)
	(up-compare-sn sn-food-gatherer-percentage <= 98)
	(unit-type-count villager-gold > 5)
	(goal g-eco-balance-system gv-manual)
	=>
	(up-modify-sn sn-gold-gatherer-percentage c:+ 1)
	(up-modify-sn sn-food-gatherer-percentage c:- 1)
	(up-chat-data-to-player my-player-number "Gold %: %d" s: sn-gold-gatherer-percentage)
	(up-chat-data-to-player my-player-number "Food %: %d" s: sn-food-gatherer-percentage)
	)
	
#end-if

(defrule
(timer-triggered t-adjust-gathering)
=>
(disable-timer t-adjust-gathering)
(enable-timer t-adjust-gathering ADJUST-GATHERING-TIMER-LENGTH)
)



;====Automatic Gathering Percentages

;Modify resources needed soon amounts to account for different
;gather rates.

(defrule
(goal g-eco-balance-system gv-automatic)
(up-timer-status t-30-sec != timer-running)
=>
(up-modify-goal g-food-needed-soon c:* 3000)
(up-modify-goal g-food-needed-soon g:/ g-current-farming-rate)
(up-modify-goal g-wood-needed-soon c:* 3000)
(up-modify-goal g-wood-needed-soon g:/ g-current-wood-rate)
(up-modify-goal g-stone-needed-soon c:* 3000)
(up-modify-goal g-stone-needed-soon g:/ g-current-stone-rate)
(up-modify-goal g-gold-needed-soon c:* 3000)
(up-modify-goal g-gold-needed-soon g:/ g-current-gold-rate)
)

;Modify resources needed soon by dropsite distances

(defrule
(goal g-eco-balance-system gv-automatic)
(up-timer-status t-30-sec != timer-running)
(dropsite-min-distance food > 0)		;does this check farming distances? need to test
=>
(up-get-fact dropsite-min-distance food g-temp)
(up-modify-goal g-temp c:min 20)
(up-modify-goal g-temp c:+ 100)	;convert to %
(up-modify-goal g-food-needed-soon c:%* g-temp)
)

(defrule
(goal g-eco-balance-system gv-automatic)
(up-timer-status t-30-sec != timer-running)
(dropsite-min-distance wood > 0)
=>
(up-get-fact dropsite-min-distance wood g-temp)
(up-modify-goal g-temp c:min 20)
(up-modify-goal g-temp c:+ 100)	;convert to %
(up-modify-goal g-wood-needed-soon c:%* g-temp)
)

(defrule
(goal g-eco-balance-system gv-automatic)
(up-timer-status t-30-sec != timer-running)
(dropsite-min-distance gold > 0)
=>
(up-get-fact dropsite-min-distance gold g-temp)
(up-modify-goal g-temp c:min 20)
(up-modify-goal g-temp c:+ 100)	;convert to %
(up-modify-goal g-gold-needed-soon c:%* g-temp)
)

(defrule
(goal g-eco-balance-system gv-automatic)
(up-timer-status t-30-sec != timer-running)
(dropsite-min-distance stone > 0)
=>
(up-get-fact dropsite-min-distance stone g-temp)
(up-modify-goal g-temp c:min 20)
(up-modify-goal g-temp c:+ 100)	;convert to %
(up-modify-goal g-stone-needed-soon c:%* g-temp)
)

;Set gathering percentages based on resources needed soon.

(defrule
(goal g-eco-balance-system gv-automatic)
(up-timer-status t-30-sec != timer-running)
=>
(up-modify-goal g-total-res-needed-soon g:= g-food-needed-soon)
(up-modify-goal g-total-res-needed-soon g:+ g-wood-needed-soon)
(up-modify-goal g-total-res-needed-soon g:+ g-stone-needed-soon)
(up-modify-goal g-total-res-needed-soon g:+ g-gold-needed-soon)
)

(defrule
(goal g-eco-balance-system gv-automatic)
(up-timer-status t-30-sec != timer-running)
=>
(up-modify-goal g-temp g:= g-food-needed-soon)
(up-modify-goal g-temp g:%/ g-total-res-needed-soon)
(up-modify-sn sn-food-gatherer-percentage g:= g-temp)
(up-modify-goal g-temp g:= g-wood-needed-soon)
(up-modify-goal g-temp g:%/ g-total-res-needed-soon)
(up-modify-sn sn-wood-gatherer-percentage g:= g-temp)
(up-modify-goal g-temp g:= g-gold-needed-soon)
(up-modify-goal g-temp g:%/ g-total-res-needed-soon)
(up-modify-sn sn-gold-gatherer-percentage g:= g-temp)
(up-modify-goal g-temp g:= g-stone-needed-soon)
(up-modify-goal g-temp g:%/ g-total-res-needed-soon)
(up-modify-sn sn-stone-gatherer-percentage g:= g-temp)
)

;Adjust number of gatherers for each resource to the
;number set by gathering percentages.

(defrule
(goal g-eco-balance-system gv-automatic)
(up-compare-goal g-food-needed-soon > 0)
(up-timer-status t-30-sec != timer-running)
=>
(up-modify-sn sn-food-gatherer-percentage c:max 5)
(up-get-fact unit-type-count villager g-temp)
(up-modify-goal g-temp s:%* sn-food-gatherer-percentage)
(up-modify-goal g-desired-num-farmers g:= g-temp)
(up-modify-goal g-desired-num-food-vils g:= g-temp)
(up-chat-data-to-self "Farmers: %d" g: g-desired-num-farmers)
)

(defrule
(goal g-eco-balance-system gv-automatic)
(up-compare-goal g-wood-needed-soon > 0)
(up-timer-status t-30-sec != timer-running)
=>
(up-modify-sn sn-wood-gatherer-percentage c:max 5)
(up-get-fact unit-type-count villager g-temp)
(up-modify-goal g-temp s:%* sn-wood-gatherer-percentage)
(up-modify-goal g-desired-num-wood-vils g:= g-temp)
)

(defrule
(goal g-eco-balance-system gv-automatic)
(up-compare-goal g-gold-needed-soon > 0)
(up-timer-status t-30-sec != timer-running)
=>
(up-modify-sn sn-gold-gatherer-percentage c:max 5)
(up-get-fact unit-type-count villager g-temp)
(up-modify-goal g-temp s:%* sn-gold-gatherer-percentage)
(up-modify-goal g-desired-num-gold-vils g:= g-temp)
)

(defrule
(goal g-eco-balance-system gv-automatic)
(up-compare-goal g-stone-needed-soon > 0)
(up-timer-status t-30-sec != timer-running)
=>
(up-modify-sn sn-stone-gatherer-percentage c:max 5)
(up-get-fact unit-type-count villager g-temp)
(up-modify-goal g-temp s:%* sn-stone-gatherer-percentage)
(up-modify-goal g-desired-num-stone-vils g:= g-temp)
)

;Periodically chat gathering percentages.

(defrule
(goal g-eco-balance-system gv-automatic)
(up-timer-status t-30-sec != timer-running)
=>
(up-chat-data-to-self "Needed Food %: %d" g: g-food-needed-soon)
(up-chat-data-to-self "Needed Wood %: %d" g: g-wood-needed-soon)
(up-chat-data-to-self "Needed Gold %: %d" g: g-gold-needed-soon)
(up-chat-data-to-self "Needed Stone %: %d" g: g-stone-needed-soon)
(up-chat-data-to-self "Food %: %d" s: sn-food-gatherer-percentage)
(up-chat-data-to-self "Wood %: %d" s: sn-wood-gatherer-percentage)
(up-chat-data-to-self "Gold %: %d" s: sn-gold-gatherer-percentage)
(up-chat-data-to-self "Stone %: %d" s: sn-stone-gatherer-percentage)
)






;If sheep visible but unclaimed, claim sheep

(defrule
(up-gaia-type-count c: livestock-class > 0)
;(up-compare-goal g-sheep-count != gv-claim-sheep)
;(game-time < 300)
=>
(up-set-target-point g-position-self-x)
(up-full-reset-search)
(set-strategic-number sn-focus-player-number 0)
(up-filter-distance c: -1 c: 30)
(up-find-remote c: livestock-class c: 40)
(up-remove-objects search-remote object-data-player != 0)   ;seems like up-find-remote considers all livestock owned by gaia
(up-find-local c: scout-unit c: 1)
(up-get-search-state g-local-total)
)

(defrule
(up-gaia-type-count c: livestock-class > 0)
;(game-time < 300)
(up-compare-goal g-local-total > 0) ;scout is near town
(up-compare-goal g-remote-total > 0) ;unclaimed sheep found
(up-set-target-object search-remote c: 0)
=>
(set-strategic-number sn-number-explore-groups 0)
(up-modify-sn sn-total-number-explorers s:= sn-cap-civilian-explorers)
(up-reset-scouts)
(up-target-objects 0 action-move -1 -1)
(set-goal g-claim-sheep YES)
(chat-local-to-self "claim sheep")
)

(defrule
(or
	(up-gaia-type-count c: livestock-class == 0)
	(or
		(timer-triggered t-10-sec)
		(goal g-starting-scout-alive NO)))
(goal g-claim-sheep YES)
=>
(set-goal g-claim-sheep NO)
(set-strategic-number sn-number-explore-groups 1)
(set-goal g-temp 1)
(up-modify-sn g-temp s:+ sn-cap-civilian-explorers)
(up-modify-sn sn-total-number-explorers g:= g-temp)
(up-reset-scouts)
(chat-local-to-self "ready to claim sheep again")
)

#load-if-defined SHOULDNT-BE-NEEDED

	;Retask sheep to town center if they stopped away from TC

	(defrule
	(unit-type-count livestock-class > 0)
	=>
	(up-full-reset-search)
	(up-filter-distance c: 4 c: -1)
	(up-find-local c: livestock-class c: 240)
	(up-remove-objects search-local object-data-move-x != -2) ;remove sheep that are moving to TC
	(up-get-search-state g-local-total)
	)

	(defrule
	(unit-type-count livestock-class > 0)
	(up-compare-goal g-local-total > 0)
	(up-set-target-object search-local c: 0)
	=>
	(up-target-point g-position-self-x action-default -1 -1) ;move sheep to TC
	(chat-to-player my-player-number "Move idle sheep to TC")
	)

#end-if



(defrule
(up-compare-goal g-villager-training-time-left <= 14)
(up-resource-amount amount-food g:< g-villager-cost)
(up-pending-objects c: villager <= 1)
=>
(up-drop-resources food c: 15)
;(chat-local-to-self "Drop food (>= 15)")
)

(defrule
(up-compare-goal g-villager-training-time-left <= 11)
(up-resource-amount amount-food g:< g-villager-cost)
(up-pending-objects c: villager <= 1)
=>
(up-drop-resources food c: 8)
;(chat-local-to-self "Drop food (>= 8)")
)

(defrule
(up-compare-goal g-villager-training-time-left <= 5)
(up-resource-amount amount-food g:< g-villager-cost)
(up-pending-objects c: villager <= 1)
(dropsite-min-distance food < 2)
=>
(up-drop-resources food c: 4)
;(chat-local-to-self "Drop food (>= 5)")
)

(defrule
(up-compare-goal g-villager-training-time-left <= 11)
(up-resource-amount amount-food g:< g-villager-cost)
(up-pending-objects c: villager <= 1)
(unit-type-count villager-farmer > 5)
=>
(up-drop-resources farm-class c: 5)
;(chat-local-to-self "Drop farmer food (>= 5)")
)

(defrule
(timer-triggered t-10-sec)
(unit-type-count villager-shepherd > 0)
(unit-type-count villager-forager > 0)
(building-type-count mill == 0)
=>
(up-drop-resources food c: 0)
)

;Order extra foragers to gather sheep or boar

(defrule
(timer-triggered t-10-sec)
(up-compare-goal g-age-status <= gv-save-for-feudal)
(unit-type-count villager < 11)
(up-compare-goal g-desired-num-foragers == 0)
(unit-type-count villager-forager > 0)
(building-type-count-total mill == 0)
(unit-type-count livestock-class > 0)
=>
(up-full-reset-search)
(up-find-local c: male-forager c: 240)
(up-find-local c: female-forager c: 240)
(up-modify-goal g-temp s:= sn-focus-player-number)
(set-strategic-number sn-focus-player-number my-player-number)
(up-find-remote c: town-center c: 1)
)

(defrule
(timer-triggered t-10-sec)
(up-set-target-object search-remote c: 0)
(up-compare-goal g-age-status <= gv-save-for-feudal)
(unit-type-count villager < 11)
(up-compare-goal g-desired-num-foragers == 0)
(unit-type-count villager-forager > 0)
(building-type-count-total mill == 0)
(unit-type-count livestock-class > 0)
=>
(up-target-objects 1 action-garrison -1 -1)
(chat-local-to-self "retask foragers to sheep")
(set-goal g-garrison-for-retask YES)
(up-modify-sn sn-focus-player-number g:= g-temp)
)

(defrule
(goal g-town-under-attack NO)
(up-compare-goal g-age-status <= gv-save-for-feudal)
(unit-type-count villager < 11)
(up-compare-goal g-desired-num-foragers == 0)
(unit-type-count villager-forager > 0)
=>
(up-full-reset-search)
(up-find-local c: town-center c: 1)
(up-set-target-object search-local c: 0)
(up-get-object-data object-data-garrison-count g-temp)
)

(defrule
(goal g-town-under-attack NO)
(up-compare-goal g-age-status <= gv-save-for-feudal)
(unit-type-count villager < 11)
(up-compare-goal g-desired-num-foragers == 0)
(unit-type-count villager-forager > 0)
(up-compare-goal g-temp > 0)
=>
(up-ungarrison c: town-center)
)

#load-if-defined FIX-BROKEN-CODE

	;Order extra foragers to gather from farms

	(defrule
	(timer-triggered t-10-sec)
	(up-compare-goal g-age-status <= gv-save-for-feudal)
	(unit-type-count villager-forager > 4)
	(idle-farm-count > 0)
	=>
	(up-garrison town-center c: villager-forager)
	(chat-local-to-self "retask forager to farms")
	)

	(defrule
	(timer-triggered t-10-sec)
	(up-compare-goal g-age-status >= gv-advancing-to-feudal)
	(unit-type-count villager-forager > 6)
	(idle-farm-count > 0)
	=>
	(up-garrison town-center c: villager-forager)
	(chat-local-to-self "retask forager to farms")
	)



	;(defrule
	;(timer-triggered t-10-sec)
	;(up-compare-goal g-age-status <= gv-save-for-feudal)
	;(unit-type-count villager-forager > 4)
	;(idle-farm-count > 0)
	;=>
	;(up-modify-goal g-temp s:= sn-focus-player-number)
	;(set-strategic-number sn-focus-player-number my-player-number)
	;(set-goal g-current-search -1)
	;(up-full-reset-search)
	;(up-filter-distance c: -1 c: 12)
	;(up-find-remote c: farm c: 1)
	;(up-set-target-object search-remote c: 0)
	;(up-get-object-data object-data-id g-current-search)
	;(chat-local-to-self "extra forager, find farm")
	;)

	;(defrule
	;(timer-triggered t-10-sec)
	;(up-compare-goal g-age-status <= gv-save-for-feudal)
	;(unit-type-count villager-forager > 4)
	;(idle-farm-count > 0)
	;(up-compare-goal g-current-search != -1)
	;=>
	;(up-full-reset-search)
	;(up-filter-distance c: -1 c: 24)
	;(up-find-local c: villager-forager c: 1)
	;(chat-local-to-self "find extra forager")
	;)

	;(defrule
	;(up-set-target-object search-local c: 0)
	;(up-compare-goal g-current-search != -1)
	;=>
	;(chat-local-to-self "search done")
	;)

	;(defrule
	;;(timer-triggered t-10-sec)
	;(up-compare-goal g-age-status <= gv-save-for-feudal)
	;(unit-type-count villager-forager > 4)
	;(idle-farm-count > 0)
	;(up-set-target-object search-local c: 0)
	;(up-compare-goal g-current-search != -1)
	;=>
	;(up-set-target-by-id g: g-current-search)
	;(up-target-objects 1 action-default -1 -1);right-click the farm with the forager
	;(up-modify-sn sn-focus-player-number g:= g-temp)
	;(set-goal g-current-search -1)
	;(chat-local-to-self "move forager to farms")
	;)


	;Order extra foragers to gather from farms

	;(defrule
	;(timer-triggered t-10-sec)
	;(up-compare-goal g-age-status >= gv-advancing-to-feudal)
	;(unit-type-count villager-forager > 4)
	;(idle-farm-count > 0)
	;=>
	;(up-modify-goal g-temp s:= sn-focus-player-number)
	;(set-strategic-number sn-focus-player-number my-player-number)
	;(set-goal g-current-search -1)
	;(up-full-reset-search)
	;(up-filter-distance c: -1 c: 12)
	;(up-find-remote c: farm c: 1)
	;(up-set-target-object search-remote c: 0)
	;(up-get-object-data object-data-id g-current-search)
	;(chat-local-to-self "extra forager, find farm")
	;)

	;(defrule
	;(timer-triggered t-10-sec)
	;(up-compare-goal g-age-status >= gv-advancing-to-feudal)
	;(unit-type-count villager-forager > 4)
	;(idle-farm-count > 0)
	;(up-compare-goal g-current-search != -1)
	;=>
	;(up-full-reset-search)
	;(up-filter-distance c: -1 c: 24)
	;(up-find-local c: villager-forager c: 1)
	;(chat-local-to-self "find extra forager")
	;)

	;(defrule
	;;(timer-triggered t-10-sec)
	;(up-compare-goal g-age-status >= gv-advancing-to-feudal)
	;(unit-type-count villager-forager > 4)
	;(idle-farm-count > 0)
	;(up-set-target-object search-local c: 0)
	;(up-compare-goal g-current-search != -1)
	;=>
	;(up-set-target-by-id g: g-current-search)
	;(up-target-objects 1 action-default -1 -1);right-click the farm with the forager
	;(up-modify-sn sn-focus-player-number g:= g-temp)
	;(set-goal g-current-search -1)
	;(chat-local-to-self "move forager to farms")
	;)

#end-if

;Set farmers by food gatherer percentage

(defrule
(current-age >= castle-age)
=>
(up-get-fact unit-type-count villager g-temp)
(up-modify-goal g-temp s:* sn-food-gatherer-percentage)
(up-modify-goal g-temp c:/ 100)
(up-modify-goal g-desired-num-farmers g:= g-temp)
)

;(defrule
;(timer-triggered t-30-sec)
;=>
;(up-get-fact escrow-amount wood g-temp)
;(up-chat-data-to-self "Wood escrow: %d" g: g-temp)
;(up-get-fact escrow-amount food g-temp)
;(up-chat-data-to-self "Food escrow: %d" g: g-temp)
;(up-get-fact escrow-amount gold g-temp)
;(up-chat-data-to-self "Gold escrow: %d" g: g-temp)
;(up-get-fact escrow-amount stone g-temp)
;(up-chat-data-to-self "Stone escrow: %d" g: g-temp)
;(up-chat-data-to-self "Farmers: %d" g: g-desired-num-farmers)
;)

#load-if-defined INCAN-CIV

	;Target llama

	(defrule
	(timer-triggered t-10-sec)
	(unit-type-count llama > 0)
	=>
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(up-filter-distance c: 2 c: -1)
	(up-find-local c: llama c: 20)
	(set-strategic-number sn-target-point-adjustment 4)
	(up-target-point g-position-self-x action-default -1 -1)
	(set-strategic-number sn-target-point-adjustment 0)
	)

	(defrule
	(unit-type-count llama > 0)
	(game-time >= 30)
	(unit-type-count villager-shepherd == 0)
	(unit-type-count villager-hunter == 0)
	(building-type-count house >= 2)
	=>
	(up-full-reset-search)
	(up-set-target-point g-position-self-x)
	(up-modify-goal g-temp-2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-filter-distance c: -1 c: 2)
	(up-find-remote c: llama c: 1)
	(set-goal g-temp 100)
	(chat-local-to-self "Time to gather llama")
	)

	(defrule
	(goal g-temp 100)
	(unit-type-count llama > 0)
	(up-set-target-object search-remote c: 0)
	=>
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 8)
	(up-find-local c: villager-class c: 1)
	(up-target-objects 1 action-default -1 -1) ;kill llama
	(chat-local-to-self "Gather llama")
	)
	
#end-if


;Track how many resources are gathered in 120 seconds

(defrule
(game-time >= T-GATHER-AMOUNT-LENGTH)	;120 seconds
(up-timer-status t-res-gather-amount != timer-running)
=>
(up-modify-goal g-temp g:= g-total-food-gathered)
(up-get-fact resource-amount amount-food-total g-total-food-gathered)
;(up-chat-data-to-self "Total food: %d" g: g-total-food-gathered)
(up-modify-goal g-recent-food-gathered g:= g-total-food-gathered)
(up-modify-goal g-recent-food-gathered g:- g-temp)
;(up-chat-data-to-self "Recent food: %d" g: g-recent-food-gathered)

(up-modify-goal g-temp g:= g-total-wood-gathered)
(up-get-fact resource-amount amount-wood-total g-total-wood-gathered)
;(up-chat-data-to-self "Total wood: %d" g: g-total-wood-gathered)
(up-modify-goal g-recent-wood-gathered g:= g-total-wood-gathered)
(up-modify-goal g-recent-wood-gathered g:- g-temp)
;(up-chat-data-to-self "Recent wood: %d" g: g-recent-wood-gathered)
)

(defrule
(game-time >= T-GATHER-AMOUNT-LENGTH)	;120 seconds
(up-timer-status t-res-gather-amount != timer-running)
=>
(up-modify-goal g-temp g:= g-total-stone-gathered)
(up-get-fact resource-amount amount-stone-total g-total-stone-gathered)
;(up-chat-data-to-self "Total stone: %d" g: g-total-stone-gathered)
(up-modify-goal g-recent-stone-gathered g:= g-total-stone-gathered)
(up-modify-goal g-recent-stone-gathered g:- g-temp)
;(up-chat-data-to-self "Recent stone: %d" g: g-recent-stone-gathered)

(up-modify-goal g-temp g:= g-total-gold-gathered)
(up-get-fact resource-amount amount-gold-total g-total-gold-gathered)
;(up-chat-data-to-self "Total gold: %d" g: g-total-gold-gathered)
(up-modify-goal g-recent-gold-gathered g:= g-total-gold-gathered)
(up-modify-goal g-recent-gold-gathered g:- g-temp)
;(up-chat-data-to-self "Recent gold: %d" g: g-recent-gold-gathered)
)

; (defrule
; (game-time >= T-GATHER-AMOUNT-LENGTH)	;120 seconds
; (up-timer-status t-res-gather-amount != timer-running)
; (not
; 	(player-in-game any-human))
; =>
; (up-log-data 0 "Recent food: %d" g: g-recent-food-gathered)
; (up-log-data 0 "Recent wood: %d" g: g-recent-wood-gathered)
; (up-log-data 0 "Recent gold: %d" g: g-recent-gold-gathered)
; (up-log-data 0 "Recent stone: %d" g: g-recent-stone-gathered)
; (up-get-fact unit-type-count villager g-temp)
; (up-log-data 0 "Vils: %d" g: g-temp)
; )

(defrule
(game-time >= T-GATHER-AMOUNT-LENGTH)	;120 seconds
(up-timer-status t-res-gather-amount != timer-running)
=>
(up-set-timer c: t-res-gather-amount c: T-GATHER-AMOUNT-LENGTH)
)


;(defrule
;(timer-triggered t-30-sec)
;=>
;(up-chat-data-to-self "Food Perc: %d" s: sn-food-gatherer-percentage)
;(up-chat-data-to-self "Wood Perc: %d" s: sn-wood-gatherer-percentage)
;(up-chat-data-to-self "Gold Perc: %d" s: sn-gold-gatherer-percentage)
;(up-chat-data-to-self "Stone Perc: %d" s: sn-stone-gatherer-percentage)
;)






;====Market Trading

;Trade for Castle Age

(defrule
(up-timer-status t-10-sec == timer-triggered)
(or
	(goal g-age-status gv-save-for-castle)
	(goal g-age-status gv-save-for-imperial))
=>
(up-get-fact commodity-buying-price food g-food-cost)
(up-get-fact commodity-buying-price wood g-wood-cost)
(up-get-fact commodity-buying-price stone g-stone-cost)
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-save-for-castle)
(food-amount >= 900)
(gold-amount < 200)
(can-sell-commodity food)
=>
(sell-commodity food)
(chat-local-to-self "sell food for castle age")
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-save-for-castle)
(food-amount < 900)
(gold-amount < 200)
(or
	(wood-amount > 400)
	(and
		(wood-amount > 200)
		(goal g-town-under-attack YES)))
(can-sell-commodity wood)
=>
(sell-commodity wood)
(chat-local-to-self "sell wood for castle age")
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-save-for-castle)
(food-amount >= 800)
(gold-amount < 200)
(or
	(stone-amount > 200)
	(or
		(goal g-strategy gv-eagles-revenge)
		(goal g-town-under-attack YES)))
(can-sell-commodity stone)
(up-compare-goal g-desired-num-watch-tower == 0)
(up-compare-goal g-desired-num-castle == 0)
=>
(sell-commodity stone)
(chat-local-to-self "sell stone for castle age")
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-advancing-to-castle)
(can-sell-commodity stone)
(goal g-strategy gv-eagles-revenge)
=>
(sell-commodity stone)
(chat-local-to-self "sell stone for eagle warriors")
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(goal g-age-status gv-save-for-castle)
=>
(set-goal g-gold-cost 200)
(up-modify-goal g-gold-cost g:+ g-food-cost)
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-save-for-castle)
(food-amount < 800)
(up-resource-amount gold g:>= g-gold-cost)
(can-buy-commodity food)
=>
(buy-commodity food)
(chat-local-to-self "buy food for castle age")
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(goal g-age-status gv-save-for-castle)
=>
(set-goal g-gold-cost 200)
(up-modify-goal g-gold-cost g:+ g-wood-cost)
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-advancing-to-castle)
(up-resource-amount gold g:>= g-gold-cost)
(wood-amount < 100)
(can-buy-commodity wood)
=>
(buy-commodity wood)
(chat-local-to-self "buy wood for castle age buildings")
)

;Trade for Imperial Age

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-save-for-imperial)
(food-amount >= 1100)
(gold-amount < 800)
(can-sell-commodity food)
=>
(sell-commodity food)
(chat-local-to-self "sell food for imperial age")
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-save-for-imperial)
(food-amount < 1100)
(gold-amount < 800)
(wood-amount > 400)
(can-sell-commodity wood)
=>
(sell-commodity wood)
(chat-local-to-self "sell wood for imperial age")
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-save-for-imperial)
(food-amount >= 1000)
(gold-amount < 800)
(stone-amount > 300)
(up-object-type-count c: castle >= g-desired-num-castle)
(can-sell-commodity stone)
=>
(sell-commodity stone)
(chat-local-to-self "sell excess stone for imperial age")
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(goal g-age-status gv-save-for-imperial)
=>
(set-goal g-gold-cost 800)
(up-modify-goal g-gold-cost g:+ g-food-cost)
)

(defrule
(up-timer-status t-10-sec == timer-triggered)
(up-compare-goal g-age-status == gv-save-for-imperial)
(food-amount < 1000)
(up-resource-amount gold g:>= g-gold-cost)
(can-buy-commodity food)
=>
(buy-commodity food)
(chat-local-to-self "buy food for imperial age")
)

;Trade Resources

(defrule
(current-age == imperial-age)
(up-timer-status t-10-sec == timer-triggered)
(food-amount < 200)
(gold-amount >= 600)
(can-buy-commodity food)
=>
(buy-commodity food)
(chat-local-to-self "buy food")
)

(defrule
(current-age == imperial-age)
(up-timer-status t-10-sec == timer-triggered)
(wood-amount < 200)
(gold-amount >= 600)
(can-buy-commodity wood)
=>
(buy-commodity wood)
(chat-local-to-self "buy wood")
)

(defrule
(current-age == imperial-age)
(up-timer-status t-10-sec == timer-triggered)
(wood-amount >= 1200)
(gold-amount < 200)
(can-sell-commodity wood)
=>
(sell-commodity wood)
(chat-local-to-self "need gold, sell wood")
)

(defrule
(current-age == imperial-age)
(up-timer-status t-10-sec == timer-triggered)
(food-amount >= 1400)
(gold-amount < 200)
(can-sell-commodity food)
=>
(sell-commodity food)
(chat-local-to-self "need gold, sell food")
)

;Emergency Trade Resources

(defrule
(current-age == castle-age)
;(up-timer-status t-10-sec == timer-triggered)
(food-amount < 200)
(gold-amount >= 1000)
(can-buy-commodity food)
=>
(buy-commodity food)
(chat-local-to-self "buy food")
)

(defrule
(current-age == castle-age)
;(up-timer-status t-10-sec == timer-triggered)
(wood-amount < 200)
(gold-amount >= 1000)
(can-buy-commodity wood)
=>
(buy-commodity wood)
(chat-local-to-self "buy wood")
)

(defrule
(current-age == castle-age)
;(up-timer-status t-10-sec == timer-triggered)
(wood-amount >= 800)
(gold-amount < 200)
(can-sell-commodity wood)
=>
(sell-commodity wood)
(chat-local-to-self "need gold, sell wood")
)

(defrule
(current-age == castle-age)
;(up-timer-status t-10-sec == timer-triggered)
(food-amount >= 1200)
(gold-amount < 200)
(can-sell-commodity food)
=>
(sell-commodity food)
(chat-local-to-self "need gold, sell food")
)

(defrule
(current-age == imperial-age)
;(up-timer-status t-10-sec == timer-triggered)
(food-amount < 300)
(gold-amount >= 1600)
(can-buy-commodity food)
=>
(buy-commodity food)
(chat-local-to-self "buy food")
)

(defrule
(current-age == imperial-age)
;(up-timer-status t-10-sec == timer-triggered)
(wood-amount < 300)
(gold-amount >= 1600)
(can-buy-commodity wood)
=>
(buy-commodity wood)
(chat-local-to-self "buy wood")
)

(defrule
(current-age == imperial-age)
;(up-timer-status t-10-sec == timer-triggered)
(wood-amount >= 1500)
(gold-amount < 300)
(can-sell-commodity wood)
=>
(sell-commodity wood)
(chat-local-to-self "need gold, sell wood")
)

(defrule
(current-age == imperial-age)
;(up-timer-status t-10-sec == timer-triggered)
(food-amount >= 1800)
(gold-amount < 300)
(can-sell-commodity food)
=>
(sell-commodity food)
(chat-local-to-self "need gold, sell food")
)