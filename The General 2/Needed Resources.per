;Needed Resources

(defrule
(true)
=>
(up-reset-cost-data g-max-food-needed)
(up-reset-cost-data g-food-needed-soon)
)

;====================<<<<<<<<<<NEEDED NEW BUILDINGS>>>>>>>>>>====================

;====Town Center

(defrule
(building-available town-center)
(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
=>
(up-modify-goal g-temp g:= g-desired-num-town-center)
(up-get-fact building-type-count-total town-center g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)	;get number of desired building to be constructed
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: town-center-foundation c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: town-center-foundation g: g-temp)
(up-get-cost-delta g-food-delta)
)

(defrule
(building-available town-center)
(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

(defrule
(building-available town-center)
(up-object-type-count-total c: town-center g:< g-desired-num-town-center)
(up-compare-goal g-stone-delta < 0)
=>
(up-modify-goal g-stone-needed-soon g:+ g-stone-cost)
)

;====House

(defrule
(building-available house)
(up-object-type-count-total c: house g:< g-desired-num-house)
=>
(up-modify-goal g-temp g:= g-desired-num-house)
(up-get-fact building-type-count-total house g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)	;get number of desired building to be constructed
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: house g: g-temp)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: house c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Mill

(defrule
(building-available mill)
(up-object-type-count-total c: mill g:< g-desired-num-mill)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: mill c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: mill c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Mining Camp

(defrule
(building-available mining-camp)
(up-object-type-count-total c: mining-camp g:< g-desired-num-mining-camp)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: mining-camp c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: mining-camp c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Lumber Camp

(defrule
(building-available lumber-camp)
(up-object-type-count-total c: lumber-camp g:< g-desired-num-lumber-camp)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: lumber-camp c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: lumber-camp c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Dock

(defrule
(building-available dock)
(up-object-type-count-total c: dock g:< g-desired-num-dock)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: dock c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: dock c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Farm

;Add cost of new farms.
;Cost of replenishing old farms is added near the end of this file.

(defrule
(building-available farm)
(up-object-type-count-total c: farm g:< g-desired-num-farm)
=>
(up-modify-goal g-temp g:= g-desired-num-farm)
(up-get-fact building-type-count-total farm g-temp-2)
(up-modify-goal g-temp g:- g-temp-2)	;get number of desired building to be constructed
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: farm g: g-temp)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: farm c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-chat-data-to-self "Farms: %d" g: g-temp)
)

;====Blacksmith

(defrule
(building-available blacksmith)
(up-object-type-count-total c: blacksmith g:< g-desired-num-blacksmith)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: blacksmith c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: blacksmith c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Market

(defrule
(building-available market)
(up-object-type-count-total c: market g:< g-desired-num-market)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: market c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: market c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Monastery

(defrule
(building-available monastery)
(up-object-type-count-total c: monastery g:< g-desired-num-monastery)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: monastery c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: monastery c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====University

(defrule
(building-available university)
(up-object-type-count-total c: university g:< g-desired-num-university)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: university c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: university c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Wonder

(defrule
(building-available wonder)
(up-object-type-count-total c: wonder g:< g-desired-num-wonder)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: wonder c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: wonder c: 1)
(up-get-cost-delta g-food-delta)
)

(defrule
(building-available wonder)
(up-object-type-count-total c: wonder g:< g-desired-num-wonder)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-cost c:/ 5)
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

(defrule
(building-available wonder)
(up-object-type-count-total c: wonder g:< g-desired-num-wonder)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-cost c:/ 5)
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(building-available wonder)
(up-object-type-count-total c: wonder g:< g-desired-num-wonder)
(up-compare-goal g-stone-delta < 0)
=>
(up-modify-goal g-stone-cost c:/ 5)
(up-modify-goal g-stone-needed-soon g:+ g-stone-cost)
)

;====Barracks

(defrule
(building-available barracks)
(up-object-type-count-total c: barracks g:< g-desired-num-barracks)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: barracks c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: barracks c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Archery Range

(defrule
(building-available archery-range)
(up-object-type-count-total c: archery-range g:< g-desired-num-archery-range)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: archery-range c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: archery-range c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Stable

(defrule
(building-available stable)
(up-object-type-count-total c: stable g:< g-desired-num-stable)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: stable c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: stable c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Siege Workshop

(defrule
(building-available siege-workshop)
(up-object-type-count-total c: siege-workshop g:< g-desired-num-siege-workshop)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: siege-workshop c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: siege-workshop c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

;====Watch Tower

(defrule
(current-age >= feudal-age)
(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: watch-tower c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
)

(defrule
(current-age >= feudal-age)
(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

(defrule
(current-age >= feudal-age)
(up-compare-goal g-watch-tower-line g:< g-desired-num-watch-tower)
(up-compare-goal g-stone-delta < 0)
=>
(up-modify-goal g-stone-needed-soon g:+ g-stone-cost)
)

;====Bombard Tower

(defrule
(building-available bombard-tower)
(up-object-type-count-total c: bombard-tower g:< g-desired-num-bombard-tower)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: bombard-tower c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: bombard-tower c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)

(defrule
(building-available bombard-tower)
(up-object-type-count-total c: bombard-tower g:< g-desired-num-bombard-tower)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(building-available bombard-tower)
(up-object-type-count-total c: bombard-tower g:< g-desired-num-bombard-tower)
(up-compare-goal g-stone-delta < 0)
=>
(up-modify-goal g-stone-needed-soon g:+ g-stone-cost)
)

;====Castle

(defrule
(building-available castle)
(up-object-type-count-total c: castle g:< g-desired-num-castle)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: castle c: 1)
(up-modify-goal g-stone-cost c:/ 3)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: castle c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)


;====================<<<<<<<<<<TECHS>>>>>>>>>>====================

;Town Center

(defrule
(building-type-count town-center > 0)
=>
(up-reset-cost-data g-food-cost)
)

(defrule
(up-compare-goal g-next-town-center-tech != -1)
(up-research-status g: g-next-town-center-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-town-center-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-town-center-tech)
)

(defrule
(goal g-age-status gv-save-for-feudal)
(up-compare-goal g-next-town-center-tech != feudal-age)
(up-research-status c: feudal-age == research-available)
=>
(up-setup-cost-data 0 g-food-cost)
(up-add-research-cost c: feudal-age c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(chat-local-to-self "Save for Feudal")
)

(defrule
(goal g-age-status gv-save-for-castle)
(up-compare-goal g-next-town-center-tech != castle-age)
(up-research-status c: castle-age == research-available)
=>
(up-setup-cost-data 0 g-food-cost)
(up-add-research-cost c: castle-age c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(chat-local-to-self "Save for Castle")
)

(defrule
(goal g-age-status gv-save-for-imperial)
(up-compare-goal g-next-town-center-tech != imperial-age)
(up-research-status c: imperial-age == research-available)
=>
(up-setup-cost-data 0 g-food-cost)
(up-add-research-cost c: imperial-age c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(chat-local-to-self "Save for Imperial")
)

(defrule
(up-compare-goal g-next-town-center-tech != -1)
(up-research-status g: g-next-town-center-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-town-center-tech != -1)
(up-research-status g: g-next-town-center-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(up-compare-goal g-next-town-center-tech != -1)
(up-research-status g: g-next-town-center-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

(defrule
(goal g-age-status gv-save-for-feudal)
(up-compare-goal g-next-town-center-tech != feudal-age)
(up-research-status c: feudal-age == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(goal g-age-status gv-save-for-castle)
(up-compare-goal g-next-town-center-tech != castle-age)
(up-research-status c: castle-age == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(goal g-age-status gv-save-for-castle)
(up-compare-goal g-next-town-center-tech != castle-age)
(up-research-status c: castle-age == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(goal g-age-status gv-save-for-imperial)
(up-compare-goal g-next-town-center-tech != imperial-age)
(up-research-status c: imperial-age == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(goal g-age-status gv-save-for-imperial)
(up-compare-goal g-next-town-center-tech != imperial-age)
(up-research-status c: imperial-age == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

;Mill

(defrule
(up-compare-goal g-next-mill-tech != -1)
(up-research-status g: g-next-mill-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-mill-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-mill-tech)
)

(defrule
(up-compare-goal g-next-mill-tech != -1)
(up-research-status g: g-next-mill-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-mill-tech != -1)
(up-research-status g: g-next-mill-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

;Mining Camp

(defrule
(up-compare-goal g-next-mining-camp-tech != -1)
(up-research-status g: g-next-mining-camp-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-mining-camp-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-mining-camp-tech)
)

(defrule
(up-compare-goal g-next-mining-camp-tech != -1)
(up-research-status g: g-next-mining-camp-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-mining-camp-tech != -1)
(up-research-status g: g-next-mining-camp-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

;Lumber Camp

(defrule
(up-compare-goal g-next-lumber-camp-tech != -1)
(up-research-status g: g-next-lumber-camp-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-lumber-camp-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-lumber-camp-tech)
)

(defrule
(up-compare-goal g-next-lumber-camp-tech != -1)
(up-research-status g: g-next-lumber-camp-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-lumber-camp-tech != -1)
(up-research-status g: g-next-lumber-camp-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

;Dock

(defrule
(up-compare-goal g-next-dock-tech != -1)
(up-research-status g: g-next-dock-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-dock-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-dock-tech)
)

(defrule
(up-compare-goal g-next-dock-tech != -1)
(up-research-status g: g-next-dock-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-dock-tech != -1)
(up-research-status g: g-next-dock-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(up-compare-goal g-next-dock-tech != -1)
(up-research-status g: g-next-dock-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

;Blacksmith

(defrule
(up-compare-goal g-next-blacksmith-tech != -1)
(up-research-status g: g-next-blacksmith-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-blacksmith-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-blacksmith-tech)
)

(defrule
(up-compare-goal g-next-blacksmith-tech != -1)
(up-research-status g: g-next-blacksmith-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-blacksmith-tech != -1)
(up-research-status g: g-next-blacksmith-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

;Market

(defrule
(up-compare-goal g-next-market-tech != -1)
(up-research-status g: g-next-market-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-market-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-market-tech)
)

(defrule
(up-compare-goal g-next-market-tech != -1)
(up-research-status g: g-next-market-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-market-tech != -1)
(up-research-status g: g-next-market-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(up-compare-goal g-next-market-tech != -1)
(up-research-status g: g-next-market-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

;Monastery

(defrule
(up-compare-goal g-next-monastery-tech != -1)
(up-research-status g: g-next-monastery-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-monastery-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-monastery-tech)
)

(defrule
(up-compare-goal g-next-monastery-tech != -1)
(up-research-status g: g-next-monastery-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-monastery-tech != -1)
(up-research-status g: g-next-monastery-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

;University

(defrule
(up-compare-goal g-next-university-tech != -1)
(up-research-status g: g-next-university-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-university-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-university-tech)
)

(defrule
(up-compare-goal g-next-university-tech != -1)
(up-research-status g: g-next-university-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-university-tech != -1)
(up-research-status g: g-next-university-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(up-compare-goal g-next-university-tech != -1)
(up-research-status g: g-next-university-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

(defrule
(up-compare-goal g-next-university-tech != -1)
(up-research-status g: g-next-university-tech == research-available)
(up-compare-goal g-stone-delta < 0)
=>
(up-modify-goal g-stone-needed-soon g:+ g-stone-cost)
)

;Barracks

(defrule
(up-compare-goal g-next-barracks-tech != -1)
(up-research-status g: g-next-barracks-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-barracks-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-barracks-tech)
)

(defrule
(up-compare-goal g-next-barracks-tech != -1)
(up-research-status g: g-next-barracks-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-barracks-tech != -1)
(up-research-status g: g-next-barracks-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(up-compare-goal g-next-barracks-tech != -1)
(up-research-status g: g-next-barracks-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

;Archery Range

(defrule
(up-compare-goal g-next-archery-range-tech != -1)
(up-research-status g: g-next-archery-range-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-archery-range-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-archery-range-tech)
)

(defrule
(up-compare-goal g-next-archery-range-tech != -1)
(up-research-status g: g-next-archery-range-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-archery-range-tech != -1)
(up-research-status g: g-next-archery-range-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(up-compare-goal g-next-archery-range-tech != -1)
(up-research-status g: g-next-archery-range-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

;Stable

(defrule
(up-compare-goal g-next-stable-tech != -1)
(up-research-status g: g-next-stable-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-stable-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-stable-tech)
)

(defrule
(up-compare-goal g-next-stable-tech != -1)
(up-research-status g: g-next-stable-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-stable-tech != -1)
(up-research-status g: g-next-stable-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(up-compare-goal g-next-stable-tech != -1)
(up-research-status g: g-next-stable-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

;Siege Workshop

(defrule
(up-compare-goal g-next-siege-workshop-tech != -1)
(up-research-status g: g-next-siege-workshop-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-siege-workshop-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-siege-workshop-tech)
)

(defrule
(up-compare-goal g-next-siege-workshop-tech != -1)
(up-research-status g: g-next-siege-workshop-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-siege-workshop-tech != -1)
(up-research-status g: g-next-siege-workshop-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(up-compare-goal g-next-siege-workshop-tech != -1)
(up-research-status g: g-next-siege-workshop-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

;Castle

(defrule
(up-compare-goal g-next-castle-tech != -1)
(up-research-status g: g-next-castle-tech == research-available)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-research-cost g: g-next-castle-tech c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-get-cost-delta g-food-delta)
(up-chat-data-to-self "Next tech: %d" g: g-next-castle-tech)
)

(defrule
(up-compare-goal g-next-castle-tech != -1)
(up-research-status g: g-next-castle-tech == research-available)
(up-compare-goal g-food-delta < 0)
=>
(up-modify-goal g-food-needed-soon g:+ g-food-cost)
)

(defrule
(up-compare-goal g-next-castle-tech != -1)
(up-research-status g: g-next-castle-tech == research-available)
(up-compare-goal g-gold-delta < 0)
=>
(up-modify-goal g-gold-needed-soon g:+ g-gold-cost)
)

(defrule
(up-compare-goal g-next-castle-tech != -1)
(up-research-status g: g-next-castle-tech == research-available)
(up-compare-goal g-wood-delta < 0)
=>
(up-modify-goal g-wood-needed-soon g:+ g-wood-cost)
)

(defrule
(up-compare-goal g-next-castle-tech != -1)
(up-research-status g: g-next-castle-tech == research-available)
(up-compare-goal g-stone-delta < 0)
=>
(up-modify-goal g-stone-needed-soon g:+ g-stone-cost)
)


;====================<<<<<<<<<<UNITS>>>>>>>>>>====================

;====Town Center

(defrule
(building-type-count town-center > 0)
=>
(up-get-fact building-type-count town-center g-temp)
)

;Villagers

(defrule
(up-object-type-count-total c: villager g:< g-desired-num-villager)
(population-headroom > 0)
(building-type-count town-center > 0)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: villager g: g-temp)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: villager c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)



;====Market

(defrule
(building-type-count market > 0)
=>
(up-get-fact building-type-count market g-temp)
)

;Trade Carts

(defrule
(up-object-type-count-total c: trade-cart g:< g-desired-num-trade-cart)
(population-headroom > 0)
(building-type-count market > 0)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost c: trade-cart g: g-temp)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: trade-cart c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)



;====Monastery

;Determine ratio of monasteries to types of monastery
;units to train. Then multiply unit costs by this ratio.

(defrule
(building-type-count monastery > 0)
=>
(up-get-fact building-type-count monastery g-temp)
(set-goal g-temp-2 0)
)

(defrule
(building-type-count monastery > 0)
(up-object-type-count-total c: monk-set g:< g-desired-num-monk)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count monastery > 0)
(up-object-type-count-total c: missionary g:< g-desired-num-missionary)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count monastery > 0)
(up-compare-goal g-temp-2 > 0)
=>
(up-modify-goal g-temp c:* 100)	;convert to a % multiplier
(up-modify-goal g-temp g:/ g-temp-2)
)

;Monks

(defrule
(up-object-type-count-total c: monk-set g:< g-desired-num-monk)
(population-headroom > 0)
(building-type-count monastery > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: monk c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Missionaries

(defrule
(up-object-type-count-total c: missionary g:< g-desired-num-missionary)
(population-headroom > 0)
(building-type-count monastery > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: missionary c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)



;====Barracks

;Determine ratio of barracks to types of barracks
;units to train. Then multiply unit costs by this ratio.

(defrule
(building-type-count barracks > 0)
=>
(up-get-fact building-type-count barracks g-temp)
(set-goal g-temp-2 0)
)

(defrule
(building-type-count barracks > 0)
(up-object-type-count-total c: militiaman-line g:< g-desired-num-militia)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count barracks > 0)
(up-object-type-count-total c: spearman-line g:< g-desired-num-spearman)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count barracks > 0)
(up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count barracks > 0)
(up-object-type-count-total c: condottiero g:< g-desired-num-condottiero)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

#load-if-defined GOTHIC-CIV

	(defrule
	(building-type-count barracks > 0)
	(research-completed ri-castle-unique-tech)
	(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
	=>
	(up-modify-goal g-temp-2 c:+ 1)
	)
	
#end-if

(defrule
(building-type-count barracks > 0)
(up-compare-goal g-temp-2 > 0)
=>
(up-modify-goal g-temp c:* 100)	;convert to a % multiplier
(up-modify-goal g-temp g:/ g-temp-2)
)

;Swordsmen

(defrule
(up-object-type-count-total c: militiaman-line g:< g-desired-num-militia)
(population-headroom > 0)
(building-type-count barracks > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: militiaman c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Spearmen

(defrule
(up-object-type-count-total c: spearman-line g:< g-desired-num-spearman)
(population-headroom > 0)
(building-type-count barracks > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: spearman c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Eagle Warriors

(defrule
(up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
(population-headroom > 0)
(building-type-count barracks > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: eagle-warrior c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Condottieros

(defrule
(up-object-type-count-total c: condottiero g:< g-desired-num-condottiero)
(population-headroom > 0)
(building-type-count barracks > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: condottiero c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

#load-if-defined GOTHIC-CIV

	;Barracks Huskarls

	(defrule
	(research-completed ri-castle-unique-tech)
	(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
	(population-headroom > 0)
	(building-type-count barracks > 0)
	=>
	(up-setup-cost-data 1 g-food-cost)
	(up-add-object-cost c: my-unique-unit c: 1)
	(up-modify-goal g-max-food-needed g:max g-food-cost)
	(up-modify-goal g-max-wood-needed g:max g-wood-cost)
	(up-modify-goal g-max-stone-needed g:max g-stone-cost)
	(up-modify-goal g-max-gold-needed g:max g-gold-cost)
	(up-modify-goal g-food-cost g:%* g-temp)
	(up-modify-goal g-wood-cost g:%* g-temp)
	(up-modify-goal g-gold-cost g:%* g-temp)
	(up-modify-goal g-stone-cost g:%* g-temp)
	(up-setup-cost-data 0 g-food-needed-soon)
	(up-add-cost-data g-food-cost c: 1)
	)
	
#end-if



;====Archery Range

;Determine ratio of archery ranges to types of archery range
;units to train. Then multiply unit costs by this ratio.

(defrule
(building-type-count archery-range > 0)
=>
(up-get-fact building-type-count archery-range g-temp)
(set-goal g-temp-2 0)
)

(defrule
(building-type-count archery-range > 0)
(up-object-type-count-total c: archer-line g:< g-desired-num-archer)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count archery-range > 0)
(up-compare-goal g-skirmisher-line g:< g-desired-num-skirmisher)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count archery-range > 0)
(up-object-type-count-total c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count archery-range > 0)
(up-object-type-count-total c: hand-cannoneer g:< g-desired-num-hand-cannoneer)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count archery-range > 0)
(up-object-type-count-total c: slinger g:< g-desired-num-slinger)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count archery-range > 0)
(up-compare-goal g-genitour-line g:< g-desired-num-genitour)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count archery-range > 0)
(up-compare-goal g-temp-2 > 0)
=>
(up-modify-goal g-temp c:* 100)	;convert to a % multiplier
(up-modify-goal g-temp g:/ g-temp-2)
)

;Archers

(defrule
(up-object-type-count-total c: archer-line g:< g-desired-num-archer)
(population-headroom > 0)
(building-type-count archery-range > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: archer c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Skirmishers

(defrule
(up-compare-goal g-skirmisher-line g:< g-desired-num-skirmisher)
(population-headroom > 0)
(building-type-count archery-range > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: skirmisher c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Cavalry Archers

(defrule
(up-object-type-count-total c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
(population-headroom > 0)
(building-type-count archery-range > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: cavalry-archer c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Hand Cannoneers

(defrule
(up-object-type-count-total c: hand-cannoneer g:< g-desired-num-hand-cannoneer)
(population-headroom > 0)
(building-type-count archery-range > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: hand-cannoneer c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Slingers

(defrule
(up-object-type-count-total c: slinger g:< g-desired-num-slinger)
(population-headroom > 0)
(building-type-count archery-range > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: slinger c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Genitours

(defrule
(up-compare-goal g-genitour-line g:< g-desired-num-genitour)
(population-headroom > 0)
(building-type-count archery-range > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: genitour c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)



;====Stable

;Determine ratio of stables to types of stable
;units to train. Then multiply unit costs by this ratio.

(defrule
(building-type-count stable > 0)
=>
(up-get-fact building-type-count stable g-temp)
(set-goal g-temp-2 0)
)

(defrule
(building-type-count stable > 0)
(up-object-type-count-total c: scout-cavalry-line g:< g-desired-num-scout-cavalry)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count stable > 0)
(up-object-type-count-total c: knight-line g:< g-desired-num-knight)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count stable > 0)
(up-compare-goal g-camel-line g:< g-desired-num-camel)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count stable > 0)
(up-compare-goal g-battle-elephant-line g:< g-desired-num-battle-elephant)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

#load-if-defined HUN-CIV

	(defrule
	(building-type-count stable > 0)
	(research-completed ri-castle-unique-tech)
	(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
	=>
	(up-modify-goal g-temp-2 c:+ 1)
	)
	
#end-if

(defrule
(building-type-count stable > 0)
(up-compare-goal g-temp-2 > 0)
=>
(up-modify-goal g-temp c:* 100)	;convert to a % multiplier
(up-modify-goal g-temp g:/ g-temp-2)
)

;Scouts

(defrule
(up-object-type-count-total c: scout-cavalry-line g:< g-desired-num-scout-cavalry)
(population-headroom > 0)
(building-type-count stable > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: scout-cavalry c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Knights

(defrule
(up-object-type-count-total c: knight-line g:< g-desired-num-knight)
(population-headroom > 0)
(building-type-count stable > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: knight c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Camels

(defrule
(up-compare-goal g-camel-line g:< g-desired-num-camel)
(population-headroom > 0)
(building-type-count stable > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: camel c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Battle Elephants

(defrule
(up-compare-goal g-battle-elephant-line g:< g-desired-num-battle-elephant)
(population-headroom > 0)
(building-type-count stable > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: battle-elephant c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

#load-if-defined HUN-CIV

;Stable Tarkans

	(defrule
	(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
	(population-headroom > 0)
	(building-type-count stable > 0)
	=>
	(up-setup-cost-data 1 g-food-cost)
	(up-add-object-cost c: my-unique-unit c: 1)
	(up-modify-goal g-max-food-needed g:max g-food-cost)
	(up-modify-goal g-max-wood-needed g:max g-wood-cost)
	(up-modify-goal g-max-stone-needed g:max g-stone-cost)
	(up-modify-goal g-max-gold-needed g:max g-gold-cost)
	(up-modify-goal g-food-cost g:%* g-temp)
	(up-modify-goal g-wood-cost g:%* g-temp)
	(up-modify-goal g-gold-cost g:%* g-temp)
	(up-modify-goal g-stone-cost g:%* g-temp)
	(up-setup-cost-data 0 g-food-needed-soon)
	(up-add-cost-data g-food-cost c: 1)
	)
	
#end-if



;====Siege Workshop

;Determine ratio of siege workshops to types of siege workshop
;units to train. Then multiply unit costs by this ratio.

(defrule
(building-type-count siege-workshop > 0)
=>
(up-get-fact building-type-count siege-workshop g-temp)
(set-goal g-temp-2 0)
)

(defrule
(building-type-count siege-workshop > 0)
(up-object-type-count-total c: battering-ram-line g:< g-desired-num-battering-ram)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count siege-workshop > 0)
(up-compare-goal g-mangonel-line g:< g-desired-num-mangonel)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count siege-workshop > 0)
(up-object-type-count-total c: scorpion-line g:< g-desired-num-scorpion)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count siege-workshop > 0)
(up-object-type-count-total c: bombard-cannon g:< g-desired-num-bombard-cannon)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count siege-workshop > 0)
(up-compare-goal g-temp-2 > 0)
=>
(up-modify-goal g-temp c:* 100)	;convert to a % multiplier
(up-modify-goal g-temp g:/ g-temp-2)
)

;Rams

(defrule
(up-object-type-count-total c: battering-ram-line g:< g-desired-num-battering-ram)
(population-headroom > 0)
(building-type-count siege-workshop > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: battering-ram c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Mangonels

(defrule
(up-compare-goal g-mangonel-line g:< g-desired-num-mangonel)
(population-headroom > 0)
(building-type-count siege-workshop > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: mangonel c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Scorpions

(defrule
(up-object-type-count-total c: scorpion-line g:< g-desired-num-scorpion)
(population-headroom > 0)
(building-type-count siege-workshop > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: scorpion c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Bombard Cannons

(defrule
(up-object-type-count-total c: bombard-cannon g:< g-desired-num-bombard-cannon)
(population-headroom > 0)
(building-type-count siege-workshop > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: bombard-cannon c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)



;====Castle

;Determine ratio of castles to types of castle
;units to train. Then multiply unit costs by this ratio.

(defrule
(building-type-count castle > 0)
=>
(up-get-fact building-type-count castle g-temp)
(set-goal g-temp-2 0)
)

(defrule
(building-type-count castle > 0)
(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count castle > 0)
(up-object-type-count-total c: trebuchet-set g:< g-desired-num-trebuchet)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count castle > 0)
(up-object-type-count-total c: petard g:< g-desired-num-petard)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count castle > 0)
(up-compare-goal g-temp-2 > 0)
=>
(up-modify-goal g-temp c:* 100)	;convert to a % multiplier
(up-modify-goal g-temp g:/ g-temp-2)
)

;Unique Units

(defrule
(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
(population-headroom > 0)
(building-type-count castle > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: my-unique-unit c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Trebuchets

(defrule
(up-object-type-count-total c: trebuchet-set g:< g-desired-num-trebuchet)
(population-headroom > 0)
(building-type-count castle > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: trebuchet c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Petards

(defrule
(up-object-type-count-total c: petard g:< g-desired-num-petard)
(population-headroom > 0)
(building-type-count castle > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: petard c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)



;====Dock

;Determine ratio of docks to types of dock
;ships to train. Then multiply unit costs by this ratio.

(defrule
(building-type-count dock > 0)
=>
(up-get-fact building-type-count dock g-temp)
(set-goal g-temp-2 0)
)

(defrule
(building-type-count dock > 0)
(up-object-type-count-total c: fishing-ship g:< g-desired-num-fishing-ship)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count dock > 0)
(up-object-type-count-total c: transport-ship g:< g-desired-num-transport-ship)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count dock > 0)
(up-object-type-count-total c: trade-cog g:< g-desired-num-trade-cog)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count dock > 0)
(up-object-type-count-total c: galley-line g:< g-desired-num-galley)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count dock > 0)
(up-compare-goal g-fire-galley-line g:< g-desired-num-fire-ship)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count dock > 0)
(up-compare-goal g-demolition-raft-line g:< g-desired-num-demolition-ship)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count dock > 0)
(up-object-type-count-total c: cannon-galleon-line g:< g-desired-num-cannon-galleon)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count dock > 0)
(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
=>
(up-modify-goal g-temp-2 c:+ 1)
)

(defrule
(building-type-count dock > 0)
(up-compare-goal g-temp-2 > 0)
=>
(up-modify-goal g-temp c:* 100)	;convert to a % multiplier
(up-modify-goal g-temp g:/ g-temp-2)
)

;Fishing Ships

(defrule
(up-object-type-count-total c: fishing-ship g:< g-desired-num-fishing-ship)
(population-headroom > 0)
(building-type-count dock > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: fishing-ship c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Transport Ships

(defrule
(up-object-type-count-total c: transport-ship g:< g-desired-num-transport-ship)
(population-headroom > 0)
(building-type-count dock > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: transport-ship c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Trade Cogs

(defrule
(up-object-type-count-total c: trade-cog g:< g-desired-num-trade-cog)
(population-headroom > 0)
(building-type-count dock > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: trade-cog c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Galleys

(defrule
(up-object-type-count-total c: galley-line g:< g-desired-num-galley)
(population-headroom > 0)
(building-type-count dock > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: galley c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Fire Ships

(defrule
(up-compare-goal g-fire-galley-line g:< g-desired-num-fire-ship)
(population-headroom > 0)
(building-type-count dock > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: fire-ship c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Demo Ships

(defrule
(up-compare-goal g-demolition-raft-line g:< g-desired-num-demolition-ship)
(population-headroom > 0)
(building-type-count dock > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: demolition-ship c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Cannon Galleons

(defrule
(up-object-type-count-total c: cannon-galleon-line g:< g-desired-num-cannon-galleon)
(population-headroom > 0)
(building-type-count dock > 0)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: cannon-galleon c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
(up-modify-goal g-food-cost g:%* g-temp)
(up-modify-goal g-wood-cost g:%* g-temp)
(up-modify-goal g-gold-cost g:%* g-temp)
(up-modify-goal g-stone-cost g:%* g-temp)
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-cost-data g-food-cost c: 1)
)

;Unique Ships

#load-if-defined KOREAN-CIV

	(defrule
	(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
	(population-headroom > 0)
	(building-type-count dock > 0)
	=>
	(up-setup-cost-data 1 g-food-cost)
	(up-add-object-cost c: turtle-ship c: 1)
	(up-modify-goal g-max-food-needed g:max g-food-cost)
	(up-modify-goal g-max-wood-needed g:max g-wood-cost)
	(up-modify-goal g-max-stone-needed g:max g-stone-cost)
	(up-modify-goal g-max-gold-needed g:max g-gold-cost)
	(up-modify-goal g-food-cost g:%* g-temp)
	(up-modify-goal g-wood-cost g:%* g-temp)
	(up-modify-goal g-gold-cost g:%* g-temp)
	(up-modify-goal g-stone-cost g:%* g-temp)
	(up-setup-cost-data 0 g-food-needed-soon)
	(up-add-cost-data g-food-cost c: 1)
	)

#end-if

#load-if-defined PORTUGUESE-CIV

	(defrule
	(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
	(population-headroom > 0)
	(building-type-count dock > 0)
	=>
	(up-setup-cost-data 1 g-food-cost)
	(up-add-object-cost c: caravel c: 1)
	(up-modify-goal g-max-food-needed g:max g-food-cost)
	(up-modify-goal g-max-wood-needed g:max g-wood-cost)
	(up-modify-goal g-max-stone-needed g:max g-stone-cost)
	(up-modify-goal g-max-gold-needed g:max g-gold-cost)
	(up-modify-goal g-food-cost g:%* g-temp)
	(up-modify-goal g-wood-cost g:%* g-temp)
	(up-modify-goal g-gold-cost g:%* g-temp)
	(up-modify-goal g-stone-cost g:%* g-temp)
	(up-setup-cost-data 0 g-food-needed-soon)
	(up-add-cost-data g-food-cost c: 1)
	)

#end-if

#load-if-defined VIKING-CIV

	(defrule
	(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
	(population-headroom > 0)
	(building-type-count dock > 0)
	=>
	(up-setup-cost-data 1 g-food-cost)
	(up-add-object-cost c: longboat c: 1)
	(up-modify-goal g-max-food-needed g:max g-food-cost)
	(up-modify-goal g-max-wood-needed g:max g-wood-cost)
	(up-modify-goal g-max-stone-needed g:max g-stone-cost)
	(up-modify-goal g-max-gold-needed g:max g-gold-cost)
	(up-modify-goal g-food-cost g:%* g-temp)
	(up-modify-goal g-wood-cost g:%* g-temp)
	(up-modify-goal g-gold-cost g:%* g-temp)
	(up-modify-goal g-stone-cost g:%* g-temp)
	(up-setup-cost-data 0 g-food-needed-soon)
	(up-add-cost-data g-food-cost c: 1)
	)

#end-if

;Constant Train Unit - count constant train unit twice (once here and once above)

(defrule
(true)
=>
(up-get-indirect-goal g: g-constant-unit-desired-num-goal g-desired-num-constant-train-unit)
)

(defrule
(up-object-type-count-total g: g-constant-train-unit g:< g-desired-num-constant-train-unit)
(population-headroom > 0)
=>
(up-setup-cost-data 0 g-food-needed-soon)
(up-add-object-cost g: g-constant-train-unit c: 1)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost g: g-constant-train-unit c: 1)
(up-modify-goal g-max-food-needed g:max g-food-cost)
(up-modify-goal g-max-wood-needed g:max g-wood-cost)
(up-modify-goal g-max-stone-needed g:max g-stone-cost)
(up-modify-goal g-max-gold-needed g:max g-gold-cost)
)



(defrule
(true)
=>
(up-modify-goal g-max-food-needed c:max 0)	;in case max-food-needed = -1
(up-modify-goal g-max-wood-needed c:max 0)
(up-modify-goal g-max-gold-needed c:max 0)
(up-modify-goal g-max-stone-needed c:max 0)
(up-modify-goal g-food-needed-soon c:max 0)
(up-modify-goal g-wood-needed-soon c:max 0)
(up-modify-goal g-gold-needed-soon c:max 0)
(up-modify-goal g-stone-needed-soon c:max 0)
)



;====================<<<<<<<<<<FARMS>>>>>>>>>>====================

;Calculate gathering percentages to see how many farmers are required.
;Use only 90% of food percentage because some vils will need to be
;moved to wood to afford new farms.



(defrule
(current-age >= feudal-age)
(building-type-count-total farm > 0)
=>
(up-modify-goal g-total-res-needed-soon g:= g-food-needed-soon)
(up-modify-goal g-total-res-needed-soon g:+ g-wood-needed-soon)
(up-modify-goal g-total-res-needed-soon g:+ g-stone-needed-soon)
(up-modify-goal g-total-res-needed-soon g:+ g-gold-needed-soon)
(up-modify-goal g-temp g:= g-food-needed-soon)
(up-modify-goal g-temp g:%/ g-total-res-needed-soon)
(up-modify-goal g-temp c:%* 90)
(up-get-fact unit-type-count villager g-temp-2)
(up-modify-goal g-desired-num-farmers g:%* g-temp)
)

(defrule
(current-age >= feudal-age)
(building-type-count-total farm > 0)
=>
(up-modify-goal g-temp g:= g-temp-2)
(up-modify-goal g-temp g:* g-current-farming-rate)
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost c: farm c: 1)
(up-modify-goal g-temp g:* g-wood-cost)
(up-modify-goal g-temp g:/ g-current-farm-food-amount)
(up-modify-goal g-temp c:/ 100)	;current farming rate is multiplied by 100
(up-modify-goal g-wood-needed-soon g:+ g-temp)
;(up-chat-data-to-self "Farm wood needed: %d" g: g-temp)
(up-modify-goal g-max-wood-needed g:max g-temp)
)




;====================<<<<<<<<<<ESCROW>>>>>>>>>>====================



;Reset escrow to constant train unit's cost if escrow is lower than unit's cost

(defrule
(up-object-type-count-total g: g-constant-train-unit g:< g-desired-num-constant-train-unit)
=>
(up-setup-cost-data 1 g-food-cost)
(up-add-object-cost g: g-constant-train-unit c: 1)
(up-get-fact escrow-amount food g-temp-food-cost)
(up-get-fact escrow-amount wood g-temp-wood-cost)
(up-get-fact escrow-amount stone g-temp-stone-cost)
(up-get-fact escrow-amount gold g-temp-gold-cost)
)

(defrule
(up-object-type-count-total g: g-constant-train-unit g:< g-desired-num-constant-train-unit)
(up-compare-goal g-temp-food-cost g:< g-food-cost)		;food escrow less than unit cost
=>
(up-modify-escrow food g:= g-food-cost)
;(up-chat-data-to-self "Set Escrow: %d" g: g-food-cost)
)

(defrule
(up-object-type-count-total g: g-constant-train-unit g:< g-desired-num-constant-train-unit)
(up-compare-goal g-temp-wood-cost g:< g-wood-cost)		;wood escrow less than unit cost
=>
(up-modify-escrow wood g:= g-wood-cost)
;(up-chat-data-to-self "Set Escrow: %d" g: g-wood-cost)
)

(defrule
(up-object-type-count-total g: g-constant-train-unit g:< g-desired-num-constant-train-unit)
(up-compare-goal g-temp-stone-cost g:< g-stone-cost)	;stone escrow less than unit cost
=>
(up-modify-escrow stone g:= g-stone-cost)
;(up-chat-data-to-self "Set Escrow: %d" g: g-stone-cost)
)

(defrule
(up-object-type-count-total g: g-constant-train-unit g:< g-desired-num-constant-train-unit)
(up-compare-goal g-temp-gold-cost g:< g-gold-cost)		;gold escrow less than unit cost
=>
(up-modify-escrow gold g:= g-gold-cost)
;(up-chat-data-to-self "Set Escrow: %d" g: g-gold-cost)
)



(defrule
;(timer-triggered t-30-sec)
(true)
=>
(up-chat-data-to-self "Food soon: %d" g: g-food-needed-soon)
(up-chat-data-to-self "Wood soon: %d" g: g-wood-needed-soon)
(up-chat-data-to-self "Gold soon: %d" g: g-gold-needed-soon)
(up-chat-data-to-self "Stone soon: %d" g: g-stone-needed-soon)
;(up-chat-data-to-self "Max food: %d" g: g-max-food-needed)
;(up-chat-data-to-self "Max wood: %d" g: g-max-wood-needed)
;(up-chat-data-to-self "Max gold: %d" g: g-max-gold-needed)
;(up-chat-data-to-self "Max stone: %d" g: g-max-stone-needed)
)