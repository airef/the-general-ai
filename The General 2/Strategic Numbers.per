;Strategic Numbers.per

;====SN-SAFE-TOWN-SIZE and SN-MAXIMUM-TOWN-SIZE

(defrule
(current-age == dark-age)
(up-compare-sn sn-safe-town-size != 10)
(unit-type-count villager < 10)
=>
(up-modify-sn sn-safe-town-size c:= 10)
(up-modify-sn sn-maximum-town-size s:max sn-safe-town-size)
)

(defrule
(current-age == dark-age)
(up-compare-sn sn-safe-town-size != 12)
(unit-type-count villager >= 10)
=>
(up-modify-sn sn-safe-town-size c:= 10)
(up-modify-sn sn-maximum-town-size s:max sn-safe-town-size)
)

(defrule
(or
	(current-age >= feudal-age)
	(goal g-nomad-map YES))
(up-compare-sn sn-safe-town-size < 14)
(goal g-enemy-buildings-in-town 0)
=>
(up-modify-sn sn-safe-town-size c:= 14)
(up-modify-sn sn-maximum-town-size s:max sn-safe-town-size)
)

(defrule
(population > 40)
(up-compare-sn sn-safe-town-size < 18)
(goal g-enemy-buildings-in-town 0)
=>
(up-modify-sn sn-safe-town-size c:= 18)
(up-modify-sn sn-maximum-town-size s:max sn-safe-town-size)
)

(defrule
(population > 50)
(up-compare-sn sn-safe-town-size < 24)
(goal g-enemy-buildings-in-town 0)
=>
(up-modify-sn sn-safe-town-size c:= 24)
(up-modify-sn sn-maximum-town-size s:max sn-safe-town-size)
)

(defrule
(population > 100)
(goal g-enemy-buildings-in-town 0)
(up-compare-sn sn-safe-town-size < 32)
=>
(up-modify-sn sn-safe-town-size c:= 32)
(up-modify-sn sn-maximum-town-size s:max sn-safe-town-size)
)

(defrule
(population > 180)
(goal g-enemy-buildings-in-town 0)
(up-compare-sn sn-safe-town-size < 40)
=>
(up-modify-sn sn-safe-town-size c:= 40)
(up-modify-sn sn-maximum-town-size s:max sn-safe-town-size)
)



;====SN-CAMP-MAX-DISTANCE

(defrule
(up-compare-goal g-min-forest-distance > PENDING)
(building-type-count-total lumber-camp == 0)
;(goal g-nomad-map NO)
=>
(up-modify-sn sn-lumber-camp-max-distance g:= g-min-forest-distance)
(up-modify-sn sn-lumber-camp-max-distance s:max sn-dropsite-separation-distance)
(up-modify-sn sn-lumber-camp-max-distance c:+ 2)
)

; (defrule
; (building-type-count town-center > 0)
; (goal g-nomad-map YES)
; =>
; (set-strategic-number sn-lumber-camp-max-distance 30)
; (set-strategic-number sn-mining-camp-max-distance 30)
; (set-strategic-number sn-mill-max-distance 20)
; (disable-self)
; )

(defrule
(building-type-count-total lumber-camp > 0)
(goal g-nomad-map NO)
=>
(up-modify-sn sn-lumber-camp-max-distance c:+ 12)
(disable-self)
)

(defrule
(strategic-number sn-mining-camp-max-distance < 30)
(building-type-count-total mining-camp > 1)
(goal g-nomad-map NO)
=>
(up-modify-sn sn-mining-camp-max-distance c:= 30)
)

(defrule
(up-compare-sn sn-mining-camp-max-distance g:< g-map-size-ts)
(or
	(population > 125)
	(and
		(current-age >= castle-age)
		(dropsite-min-distance gold > 5)))
(game-time > 1800)
=>
(up-modify-sn sn-lumber-camp-max-distance g:= g-map-size-ts)
(up-modify-sn sn-mining-camp-max-distance g:= g-map-size-ts)
)

(defrule
(strategic-number sn-mining-camp-max-distance < 70)
(or
	(population > 100)
	(and
		(current-age >= castle-age)
		(dropsite-min-distance gold > 5)))
=>
(up-modify-sn sn-lumber-camp-max-distance c:= 70)
(up-modify-sn sn-mining-camp-max-distance c:= 70)
)

;(defrule
;(up-timer-status t-10-sec == timer-triggered)
;(goal g-check-drop-distance PENDING)
;=>
;(up-get-fact dropsite-min-distance wood g-temp)
;(set-goal g-check-drop-distance wood)
;)

;(defrule
;(military-population > 40)
;(up-compare-goal g-temp s:> sn-lumber-camp-max-distance)
;(up-compare-goal g-temp g:< g-map-size-ts)
;(goal g-check-drop-distance wood)
;=>
;(up-modify-sn sn-lumber-camp-max-distance g:= g-temp)
;(up-modify-sn sn-lumber-camp-max-distance c:+ 5)
;(up-chat-data-to-self "Increase wood camp size to %d" s: sn-lumber-camp-max-distance)
;)

;(defrule
;(up-timer-status t-10-sec == timer-triggered)
;(goal g-check-drop-distance wood)
;=>
;(up-get-fact dropsite-min-distance gold g-temp)
;(set-goal g-check-drop-distance gold)
;)

;(defrule
;(military-population > 40)
;(up-compare-goal g-temp s:> sn-mining-camp-max-distance)
;(up-compare-goal g-temp g:< g-map-size-ts)
;(goal g-check-drop-distance gold)
;=>
;(up-modify-sn sn-mining-camp-max-distance g:= g-temp)
;(up-modify-sn sn-mining-camp-max-distance c:+ 5)
;(up-chat-data-to-self "Increase gold camp size to %d" s: sn-mining-camp-max-distance)
;)

;(defrule
;(up-timer-status t-10-sec == timer-triggered)
;(goal g-check-drop-distance gold)
;=>
;(up-get-fact dropsite-min-distance stone g-temp)
;(set-goal g-check-drop-distance stone)
;)

;(defrule
;(military-population > 40)
;(up-compare-goal g-temp s:> sn-mining-camp-max-distance)
;(up-compare-goal g-temp g:< g-map-size-ts)
;(goal g-check-drop-distance stone)
;=>
;(up-modify-sn sn-mining-camp-max-distance g:= g-temp)
;(up-modify-sn sn-mining-camp-max-distance c:+ 5)
;(up-chat-data-to-self "Increase stone camp size to %d" s: sn-mining-camp-max-distance)
;)



;====SN-RETASK-GATHER-AMOUNT

;(defrule
;(up-compare-goal g-boar-hunt-status == -1)
;=>
;(up-modify-sn sn-retask-gather-amount c:= 0)
;(up-modify-sn sn-max-retask-gather-amount c:= 0)
;)

;(defrule
;(up-compare-goal g-boar-hunt-status != -1)
;=>
;(up-modify-sn sn-retask-gather-amount c:= 100)
;(up-modify-sn sn-max-retask-gather-amount c:= 100)
;)



;====EXPLORING SNS

(defrule
(game-time == 0)
(building-type-count-total town-center > 0)
(or
	(cc-players-unit-type-count 0 livestock-class > 0)
	(cc-players-unit-type-count 0 forage-class > 0))
(unit-type-count-total livestock-class == 0)
(up-gaia-type-count c: forage-class == 0)
(strategic-number sn-percent-civilian-explorers < 100)
(unit-type-count villager-builder == 0)
(goal g-nomad-map NO)
=>
(set-strategic-number sn-percent-civilian-explorers 100)
(set-strategic-number sn-cap-civilian-explorers 5)
(set-strategic-number sn-total-number-explorers 6)
(chat-local-to-self "explore for food")
)

(defrule
(game-time > 90)
(game-time < 100)
(building-type-count-total town-center > 0)
(cc-players-unit-type-count 0 livestock-class > 0)
(unit-type-count-total livestock-class == 0)
(strategic-number sn-percent-civilian-explorers < 51)
(goal g-nomad-map NO)
=>
(set-strategic-number sn-percent-civilian-explorers 51)
(set-strategic-number sn-cap-civilian-explorers 2)
(set-strategic-number sn-total-number-explorers 4)
(chat-local-to-self "explore for livestock")
)

(defrule
(game-time > 90)
(game-time < 100)
(building-type-count-total town-center > 0)
(cc-players-unit-type-count 0 forage-class > 0)
(up-gaia-type-count c: forage-class == 0)
(building-type-count-total mill == 0)
(strategic-number sn-percent-civilian-explorers < 50)
(goal g-nomad-map NO)
=>
(set-strategic-number sn-percent-civilian-explorers 50)
(set-strategic-number sn-cap-civilian-explorers 2)
(set-strategic-number sn-total-number-explorers 4)
(chat-local-to-self "explore for forage")
)

(defrule
(game-time > 0)
(building-type-count-total town-center > 0)
(or
	(unit-type-count-total livestock-class > 0)
	(up-gaia-type-count c: forage-class > 0))
(strategic-number sn-percent-civilian-explorers == 100)
(goal g-nomad-map NO)
=>
(set-strategic-number sn-percent-civilian-explorers 0)
(set-strategic-number sn-percent-civilian-gatherers 100)
(set-strategic-number sn-cap-civilian-explorers 0)
(set-strategic-number sn-total-number-explorers 1)
(set-strategic-number sn-number-explore-groups 1)
(chat-local-to-self "found food")
)

(defrule
(game-time > 90)
(building-type-count-total town-center > 0)
(unit-type-count-total livestock-class > 0)
(strategic-number sn-percent-civilian-explorers == 51)
(goal g-nomad-map NO)
=>
(set-strategic-number sn-percent-civilian-explorers 0)
(set-strategic-number sn-percent-civilian-gatherers 100)
(set-strategic-number sn-cap-civilian-explorers 0)
(set-strategic-number sn-total-number-explorers 1)
(chat-local-to-self "found livestock")
)

(defrule
(game-time > 90)
(building-type-count-total town-center > 0)
(up-gaia-type-count c: forage-class > 0)
(strategic-number sn-percent-civilian-explorers == 50)
(goal g-nomad-map NO)
=>
(set-strategic-number sn-percent-civilian-explorers 0)
(set-strategic-number sn-percent-civilian-gatherers 100)
(set-strategic-number sn-cap-civilian-explorers 0)
(set-strategic-number sn-total-number-explorers 1)
(chat-local-to-self "found forage")
)

; (defrule
; (game-time > 240)
; (game-time < 270)
; (up-compare-goal g-boar-found < gv-all-boar-found)
; (goal g-boar-hunt-status -1)
; (strategic-number sn-percent-civilian-explorers < 49)
; =>
; (set-strategic-number sn-percent-civilian-explorers 49)
; (set-strategic-number sn-cap-civilian-explorers 3)
; (set-strategic-number sn-total-number-explorers 4)
; (chat-local-to-self "search for boar")
; )

; (defrule
; (up-compare-goal g-boar-found >= gv-all-boar-found)
; (strategic-number sn-percent-civilian-explorers == 49)
; =>
; (set-strategic-number sn-percent-civilian-explorers 0)
; (set-strategic-number sn-percent-civilian-gatherers 100)
; (set-strategic-number sn-cap-civilian-explorers 0)
; (set-strategic-number sn-total-number-explorers 1)
; (chat-local-to-self "found boar")
; )

(defrule
(game-time > 100)
(strategic-number sn-percent-civilian-explorers > 0)
(or
	(unit-type-count scout-unit > 0)
	(game-time > 1200))
(goal g-nomad-map NO)
=>
(set-strategic-number sn-percent-civilian-explorers 0)
(set-strategic-number sn-percent-civilian-gatherers 100)
(set-strategic-number sn-cap-civilian-explorers 0)
(set-strategic-number sn-total-number-explorers 1)
(chat-local-to-self "stop civilian explorers")
)

;Nomad

(defrule
(game-time < 45)
(goal g-nomad-map YES)
;(or
;	(cc-players-unit-type-count 0 boar-class > 0)
;	(cc-players-unit-type-count 0 forage-class > 0))
;(up-gaia-type-count g: g-boar-type == 0)
;(up-gaia-type-count c: forage-class == 0)
(strategic-number sn-percent-civilian-explorers < 100)
(building-type-count-total town-center == 0)
(building-type-count-total lumber-camp == 0)
=>
(set-strategic-number sn-percent-civilian-explorers 100)
(set-strategic-number sn-cap-civilian-explorers 7)
(set-strategic-number sn-total-number-explorers 8)
(chat-local-to-self "nomad explore for food")
)

(defrule
(goal g-nomad-map YES)
(or
	(up-gaia-type-count g: g-boar-type > 0)
	(or
		(up-gaia-type-count c: forage-class > 0)
		(up-gaia-type-count c: deer-class > 0)))
(strategic-number sn-percent-civilian-explorers == 100)
; (up-gaia-type-count c: wood > 20)
(or
	(building-type-count-total town-center > 0)
	(building-type-count-total lumber-camp > 0))
=>
(set-strategic-number sn-percent-civilian-explorers 0)
(set-strategic-number sn-cap-civilian-explorers 0)
(set-strategic-number sn-number-explore-groups 0)
(up-get-fact military-population 0 g-temp)
(up-modify-sn sn-total-number-explorers g:= g-temp)
(chat-local-to-self "nomad food food, stop exploring")
)

(defrule
(goal g-nomad-map YES)
(game-time >= 45)
(strategic-number sn-percent-civilian-explorers == 100)
(up-gaia-type-count c: wood > 20)
(or
	(building-type-count-total town-center > 0)
	(building-type-count-total lumber-camp > 0))
=>
(set-strategic-number sn-percent-civilian-explorers 0)
(set-strategic-number sn-cap-civilian-explorers 0)
(set-strategic-number sn-number-explore-groups 0)
(up-get-fact military-population 0 g-temp)
(up-modify-sn sn-total-number-explorers g:= g-temp)
(chat-local-to-self "nomad time's up, stop exploring for food")
)

(defrule
(or
	(goal g-nomad-map YES)
	(military-population == 0))
(game-time < 1200)
(unit-type-count villager > 6)
(unit-type-count villager < 30)
(strategic-number sn-cap-civilian-explorers < 1)
=>
(set-strategic-number sn-percent-civilian-explorers 99)
(set-strategic-number sn-cap-civilian-explorers 1)
(set-strategic-number sn-number-explore-groups 0)
(set-strategic-number sn-total-number-explorers 1)
(chat-local-to-self "nomad start 1 villager explore")
)

(defrule
(or
	(goal g-nomad-map YES)
	(military-population == 0))
(or
	(game-time >= 1200)
	(or
		(unit-type-count villager <= 6)
		(unit-type-count villager >= 30)))
(strategic-number sn-cap-civilian-explorers == 1)
=>
(set-strategic-number sn-percent-civilian-explorers 0)
(set-strategic-number sn-cap-civilian-explorers 0)
(set-strategic-number sn-total-number-explorers 1)
(set-strategic-number sn-number-explore-groups 0)
(chat-local-to-self "nomad stop 1 villager explore")
)

(defrule
(strategic-number sn-cap-civilian-explorers == 0)
(strategic-number sn-percent-civilian-explorers == 0)
(strategic-number sn-total-number-explorers == 0)
=>
(up-full-reset-search)
(up-find-local c: villager-class c: 6)
(up-remove-objects search-local object-data-action != actionid-explore)
(up-get-search-state g-local-total)
)

(defrule
(strategic-number sn-cap-civilian-explorers == 0)
(strategic-number sn-percent-civilian-explorers == 0)
(strategic-number sn-total-number-explorers == 0)
(up-compare-goal g-local-total > 0)
=>
(up-target-point 0 action-stop -1 -1)
)

;Don't scout when town under attack

; (defrule
; (goal g-town-under-attack YES)
; (strategic-number sn-number-explore-groups > 0)
; =>
; (set-strategic-number sn-number-explore-groups 0)
; (set-strategic-number sn-total-number-explorers 0)
; (set-strategic-number sn-cap-civilian-explorers 0)
; (up-reset-scouts)
; )

; (defrule
; (goal g-town-under-attack NO)
; (strategic-number sn-number-explore-groups == 0)
; =>
; (set-strategic-number sn-number-explore-groups 1)
; (set-strategic-number sn-total-number-explorers 1)
; )

;Send-Scout

(defrule
(up-research-status c: castle-age == research-pending)
(up-compare-goal g-attack-status <= gv-first-attack)
=>
(up-send-scout group-type-land-explore scout-flank)
(disable-self)
)

;Offensive Priorities

;Defensive Priorities

(defrule
(true)
=>
(up-set-defense-priority c: palisade-wall c: 1000)
(up-set-defense-priority c: stone-wall c: 1000)
(up-set-defense-priority c: fortified-wall c: 1000)
(up-set-defense-priority c: gate c: 2000)
(disable-self)
)

(defrule
(goal g-attacking YES)
(or
	(military-population < 12)
	(up-compare-goal g-siege-class == 0))
=>
(up-set-defense-priority c: lumber-camp c: 3000)
(up-set-defense-priority c: mining-camp c: 3000)
(up-set-defense-priority c: mill c: 2000)
(up-set-defense-priority c: town-center c: 500)
(up-set-defense-priority c: watch-tower c: 50)
(up-set-defense-priority c: guard-tower c: 20)
(up-set-defense-priority c: keep c: 20)
(up-set-defense-priority c: bombard-tower c: 10)
(up-set-defense-priority c: castle c: 5)
)

(defrule
(goal g-attacking YES)
(military-population >= 12)
(up-compare-goal g-siege-class > 0)
=>
(up-set-defense-priority c: lumber-camp c: 750)
(up-set-defense-priority c: mining-camp c: 750)
(up-set-defense-priority c: mill c: 600)
(up-set-defense-priority c: town-center c: 3000)
(up-set-defense-priority c: watch-tower c: 1000)
(up-set-defense-priority c: guard-tower c: 1000)
(up-set-defense-priority c: keep c: 1000)
(up-set-defense-priority c: bombard-tower c: 2000)
(up-set-defense-priority c: castle c: 5000)
)

(defrule
(goal g-attacking NO)
(up-compare-goal g-siege-class == 0)
=>
(up-set-defense-priority c: lumber-camp c: 50)
(up-set-defense-priority c: mining-camp c: 50)
(up-set-defense-priority c: mill c: 50)
(up-set-defense-priority c: town-center c: 2000)
(up-set-defense-priority c: watch-tower c: 1500)
(up-set-defense-priority c: guard-tower c: 1500)
(up-set-defense-priority c: keep c: 1500)
(up-set-defense-priority c: bombard-tower c: 1000)
(up-set-defense-priority c: castle c: 5)
)

(defrule
(goal g-attacking NO)
(up-compare-goal g-siege-class > 0)
=>
(up-set-defense-priority c: lumber-camp c: 50)
(up-set-defense-priority c: mining-camp c: 50)
(up-set-defense-priority c: mill c: 50)
(up-set-defense-priority c: town-center c: 2000)
(up-set-defense-priority c: watch-tower c: 3000)
(up-set-defense-priority c: guard-tower c: 4000)
(up-set-defense-priority c: keep c: 5000)
(up-set-defense-priority c: bombard-tower c: 6000)
(up-set-defense-priority c: castle c: 10000)
)

#load-if-not-defined VICTORY-CONQUEST

	(defrule
	(enemy-captured-relics)
	=>
	(up-set-defense-priority c: monastery c: 20000)
	)

	(defrule
	(not
		(enemy-captured-relics))
	=>
	(up-set-defense-priority c: monastery c: 500)
	)

#end-if

(defrule
(up-projectile-detected projectile-watch-tower <= 5000)
(timer-triggered t-5-sec)
=>
(up-get-projectile-player projectile-watch-tower g-temp)
(up-modify-sn sn-focus-player-number g:= g-temp)
(up-full-reset-search)
(up-find-remote c: watch-tower c: 40)
(up-remove-objects search-remote object-data-next-attack <= 0)
)

(defrule
(up-projectile-detected projectile-watch-tower <= 5000)
(up-set-target-object search-remote c: 0)
(timer-triggered t-5-sec)
=>
(up-get-point position-object g-point-x)
(up-set-target-point g-point-x)
(up-get-object-data object-data-id g-temp-2)
(up-full-reset-search)
(up-filter-distance c: -1 c: 2)
(up-find-remote c: palisade-wall c: 20)
(up-find-remote c: stone-wall c: 20)
(up-find-remote c: fortified-wall c: 20)
(up-get-search-state g-local-total)
)

(defrule
(up-projectile-detected projectile-watch-tower <= 5000)
(up-compare-goal g-remote-total > 3)
(timer-triggered t-5-sec)
=>
(up-reset-search 1 1 0 0)
(up-reset-filters)
(up-filter-include cmdid-military -1 -1 -1)
(up-filter-exclude -1 actionid-explore orderid-explore -1)
(up-find-local c: all-units-class c: 240)
(up-remove-objects search-local object-data-attack-stance == stance-stand-ground)
(up-remove-objects search-local object-data-range > 0)
(up-get-search-state g-local-total)
(up-remove-objects search-local object-data-target-id g:!= g-temp-2)	;remove soldiers targeting tower with walls around it
(up-get-search-state g-local-total)
)

(defrule
(up-projectile-detected projectile-watch-tower <= 5000)
(up-compare-goal g-remote-total > 3)
(up-compare-goal g-local-total > 0)
(timer-triggered t-5-sec)
=>
(up-chat-data-to-all "num targeting tower %d" g: g-local-total)
(up-target-objects 0 action-default -1 stance-stand-ground)	;attack walls
)

(defrule
(true)
=>
(up-full-reset-search)
(up-filter-include cmdid-military -1 -1 -1)
(up-filter-exclude -1 actionid-explore orderid-explore -1)
(up-find-local c: all-units-class c: 240)
(up-remove-objects search-local object-data-attack-stance != stance-stand-ground)
(up-remove-objects search-local object-data-target == wall-class)
(up-target-point 0 action-none -1 stance-aggressive)
)

(defrule
(true)
=>
(up-full-reset-search)
(up-filter-include cmdid-military -1 -1 -1)
(up-filter-exclude -1 actionid-explore orderid-explore -1)
(up-find-local c: all-units-class c: 240)
(up-remove-objects search-local object-data-attack-stance != stance-stand-ground)
(up-remove-objects search-local object-data-action == actionid-attack)
(up-target-point 0 action-none -1 stance-aggressive)
)

;====SN-HOME-EXPLORATION-TIME

(defrule
(strategic-number sn-home-exploration-time > 0)
(goal g-boar-found gv-all-boar-found)
(up-gaia-type-count c: wood > 0)
(up-gaia-type-count c: forage-class > 0)
(up-gaia-type-count c: gold > 0)
(up-gaia-type-count c: stone > 0)
(goal g-nomad-map NO)
=>
(set-strategic-number sn-home-exploration-time 240)
)

(defrule
(goal g-nomad-map YES)
=>
(set-strategic-number sn-home-exploration-time 600)
)

;====SN-ENABLE-BOAR-HUNTING

(defrule
(or
	(goal g-boar-found gv-all-boar-found)
	(cc-players-unit-type-count 0 boar-class == 0))
(not
	(up-set-target-by-id g: g-current-boar-id))
(or
	(strategic-number sn-enable-boar-hunting != 1)
	(strategic-number sn-maximum-hunt-drop-distance < 10))
(goal g-nomad-map NO)
=>
(set-strategic-number sn-enable-boar-hunting 1)
(set-strategic-number sn-maximum-hunt-drop-distance 10)
(chat-local-to-self "enable deer hunting")
)

(defrule
(or
	(strategic-number sn-enable-boar-hunting != 1)
	(strategic-number sn-maximum-hunt-drop-distance < 15))
(goal g-nomad-map YES)
=>
(set-strategic-number sn-enable-boar-hunting 1)
(set-strategic-number sn-maximum-hunt-drop-distance 15)
(chat-local-to-self "enable deer hunting")
)