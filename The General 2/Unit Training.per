;========<<<<Constant Train Unit>>>>========

;AI will try to train this unit constantly

(defrule
(true)
=>
(up-get-indirect-goal g: g-constant-unit-desired-num-goal g-desired-num-constant-train-unit)
(set-goal g-use-escrow with-escrow)
)

(defrule
(or
	(up-compare-goal g-boar-hunting-conditions-met != gv-far-boar-vils-met)
	(up-compare-goal g-constant-train-unit != villager))
(up-compare-goal g-attack-status < gv-first-attack)
=>
(set-strategic-number sn-enable-training-queue 1)
)

(defrule
(up-object-type-count-total g: g-constant-train-unit g:< g-desired-num-constant-train-unit)
(up-can-train g-use-escrow g: g-constant-train-unit)
(up-compare-goal g-constant-train-unit == villager)
(or
	(up-compare-goal g-loom-progress != gv-have-enough-vils)	;don't train vils if loom is needed
	(gold-amount < 50))	;can't afford loom
(or
	(goal g-next-town-center-tech -1)
	(current-age >= castle-age))
=>
(set-goal g-use-escrow with-escrow)
(up-train g-use-escrow g: g-constant-train-unit)
(up-modify-goal g-villager-creation-game-time g:= g-villager-train-time)
(up-modify-goal g-villager-creation-game-time g:+ g-villager-training-time-left)
(up-modify-goal g-villager-creation-game-time g:+ g-game-time)
(up-modify-goal g-villager-training-time-left c:+ 1)
(set-strategic-number sn-enable-training-queue 0)
)

(defrule
(up-object-type-count-total g: g-constant-train-unit g:< g-desired-num-constant-train-unit)
(up-can-train g-use-escrow g: g-constant-train-unit)
(up-compare-goal g-constant-train-unit != villager)
=>
(set-goal g-use-escrow with-escrow)
(up-train g-use-escrow g: g-constant-train-unit)
(set-strategic-number sn-enable-training-queue 0)
)

(defrule
(true)
=>
(set-goal g-use-escrow without-escrow)
(set-strategic-number sn-enable-training-queue 0)
)

;========<<<<CIVILIANS>>>>========

(defrule
(up-object-type-count-total c: villager g:< g-desired-num-villager)
(can-train-with-escrow villager)
(up-compare-goal g-loom-progress != gv-have-enough-vils)	;don't train if loom is needed
(or
	(goal g-next-town-center-tech -1)
	(current-age >= castle-age))
=>
(set-goal g-use-escrow with-escrow)
(up-train g-use-escrow c: villager)
(up-modify-goal g-villager-creation-game-time g:= g-villager-train-time)
(up-modify-goal g-villager-creation-game-time g:+ g-villager-training-time-left)
(up-modify-goal g-villager-creation-game-time g:+ g-game-time)
(up-modify-goal g-villager-training-time-left c:+ 1)
)

(defrule
(up-object-type-count-total c: fishing-ship g:< g-desired-num-fishing-ship)
(can-train fishing-ship)
=>
(train fishing-ship)
)

(defrule
(up-object-type-count-total c: trade-cart g:< g-desired-num-trade-cart)
(can-train trade-cart)
=>
(train trade-cart)
)

(defrule
(up-object-type-count-total c: trade-cog g:< g-desired-num-trade-cog)
(can-train trade-cog)
=>
(train trade-cog)
)

;========<<<<SIEGE WEAPONS>>>>========

(defrule
(goal g-allow-military-training YES)
(or
	(goal g-town-under-attack NO)
	(players-unit-type-count any-enemy unpacked-trebuchet-class >= 2))
(up-object-type-count-total c: trebuchet-set g:< g-desired-num-trebuchet)
(can-train trebuchet)
=>
(train trebuchet)
)

(defrule
(goal g-allow-military-training YES)
(or
	(or
		(goal g-attacking YES)
		(up-compare-goal g-enemy-units-in-town < 15))
	(players-unit-type-count any-enemy unpacked-trebuchet-class >= 2))
(up-object-type-count-total c: battering-ram-line g:< g-desired-num-battering-ram)
(can-train battering-ram-line)
=>
(train battering-ram-line)
)

(defrule
(goal g-allow-military-training YES)
(up-compare-goal g-mangonel-line g:< g-desired-num-mangonel)
(can-train mangonel)
=>
(train mangonel)
)

(defrule
(goal g-allow-military-training YES)
(goal g-town-under-attack NO)
(up-object-type-count-total c: scorpion-line g:< g-desired-num-scorpion)
(can-train scorpion)
=>
(train scorpion)
)

(defrule
(goal g-allow-military-training YES)
(goal g-town-under-attack NO)
(up-object-type-count-total c: bombard-cannon g:< g-desired-num-bombard-cannon)
(can-train bombard-cannon)
=>
(train bombard-cannon)
)

(defrule
(goal g-allow-military-training YES)
(goal g-town-under-attack NO)
(up-object-type-count-total c: petard g:< g-desired-num-petard)
(can-train petard)
=>
(train petard)
)

;========<<<<SHIPS>>>>========

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: cannon-galleon-line g:< g-desired-num-cannon-galleon)
(can-train cannon-galleon-line)
=>
(train cannon-galleon-line)
)

(defrule
(goal g-allow-military-training YES)
(up-compare-goal g-demolition-raft-line g:< g-desired-num-demolition-ship)
(can-train demolition-ship)
=>
(train demolition-ship)
)

(defrule
(goal g-allow-military-training YES)
(up-compare-goal g-fire-galley-line g:< g-desired-num-fire-ship)
(can-train fire-ship)
=>
(train fire-ship)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: galley-line g:< g-desired-num-galley)
(can-train galley-line)
=>
(train galley-line)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: transport-ship g:< g-desired-num-transport-ship)
(can-train transport-ship)
=>
(train transport-ship)
)

#load-if-defined KOREAN-CIV

	(defrule
	(goal g-allow-military-training YES)
	(up-object-type-count-total c: turtle-ship-line g:< g-desired-num-unique-ship)
	(can-train turtle-ship-line)
	=>
	(train turtle-ship-line)
	)

#end-if

#load-if-defined PORTUGUESE-CIV

	(defrule
	(goal g-allow-military-training YES)
	(up-compare-goal g-unique-ship-line g:< g-desired-num-unique-ship)
	(can-train caravel)
	=>
	(train caravel)
	)

#end-if

#load-if-defined VIKING-CIV

	(defrule
	(goal g-allow-military-training YES)
	(up-object-type-count-total c: longboat-line g:< g-desired-num-unique-ship)
	(can-train longboat-line)
	=>
	(train longboat-line)
	)

#end-if

;========<<<<UNIQUE UNITS>>>>========

#load-if-not-defined GOTHIC-CIV
	#load-if-not-defined HUN-CIV

		(defrule
		(goal g-allow-military-training YES)
		(up-compare-goal g-unique-unit-line g:< g-desired-num-unique-unit)
		(can-train my-unique-unit)
		=>
		(train my-unique-unit)
		)
		
	#end-if
#end-if

#load-if-defined GOTHIC-CIV

	(defrule
	(goal g-allow-military-training YES)
	(up-object-type-count-total c: huskarl-set g:< g-desired-num-unique-unit)
	(can-train barracks-huskarl)
	=>
	(train barracks-huskarl)
	)

	(defrule
	(up-object-type-count-total c: huskarl-set g:< g-desired-num-unique-unit)
	(up-train-site-ready c: huskarl)
	(can-train huskarl-line)
	=>
	(train huskarl-line)
	)

#end-if

#load-if-defined HUN-CIV
	#load-if-defined UP-GAME-WK

		(defrule
		(goal g-allow-military-training YES)
		(up-compare-goal g-tarkan-line g:< g-desired-num-unique-unit)
		(up-train-site-ready c: tarkan)
		(can-train tarkan-line)
		=>
		(train tarkan-line)
		)

		(defrule
		(goal g-allow-military-training YES)
		(up-compare-goal g-tarkan-line g:< g-desired-num-unique-unit)
		(not
			(up-train-site-ready c: tarkan))
		(can-train stable-tarkan)
		=>
		(train stable-tarkan)
		)

	#else
	
		(defrule
		(goal g-allow-military-training YES)
		(up-compare-goal g-tarkan-line g:< g-desired-num-unique-unit)
		(up-train-site-ready c: tarkan)
		(can-train tarkan-line)
		=>
		(train tarkan-line)
		)

	#end-if
#end-if

;========<<<<CAVALRY>>>>========

(defrule
(goal g-allow-military-training YES)
(up-compare-goal g-battle-elephant-line g:< g-desired-num-battle-elephant)
(can-train battle-elephant)
=>
(train battle-elephant)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: knight-line g:< g-desired-num-knight)
(can-train knight-line)
=>
(train knight-line)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total g: g-camel-line g:< g-desired-num-camel)
(can-train camel)
=>
(train camel)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: scout-cavalry-line g:< g-desired-num-scout-cavalry)
(can-train scout-cavalry-line)
=>
(train scout-cavalry-line)
)

;========<<<<MONKS>>>>========

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: monk-set g:< g-desired-num-monk)
(can-train monk)
=>
(train monk)
)

#load-if-defined SPANISH-CIV

	(defrule
	(goal g-allow-military-training YES)
	(up-object-type-count-total c: missionary g:< g-desired-num-missionary)
	(can-train missionary)
	=>
	(train missionary)
	)
	
#end-if

;========<<<<ARCHERS>>>>========

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: cavalry-archer-line g:< g-desired-num-cavalry-archer)
(can-train cavalry-archer-line)
=>
(train cavalry-archer-line)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: hand-cannoneer g:< g-desired-num-hand-cannoneer)
(can-train hand-cannoneer)
=>
(train hand-cannoneer)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: slinger g:< g-desired-num-slinger)
(can-train slinger)
=>
(train slinger)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: archer-line g:< g-desired-num-archer)
(can-train archer-line)
=>
(train archer-line)
)

(defrule
(goal g-allow-military-training YES)
(up-compare-goal g-genitour-line g:< g-desired-num-genitour)
(can-train genitour-train)
=>
(train genitour-train)
)

(defrule
(goal g-allow-military-training YES)
(up-compare-goal g-skirmisher-line g:< g-desired-num-skirmisher)
(can-train skirmisher)
=>
(train skirmisher)
)

;========<<<<INFANTRY>>>>========

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: condottiero g:< g-desired-num-condottiero)
(can-train condottiero-train)
=>
(train condottiero-train)
)

(defrule
(goal g-allow-military-training YES)
(up-compare-goal g-eagle-scout-line g:< g-desired-num-eagle-warrior)
(or
	(up-compare-goal g-strategy != gv-eagles-revenge)
	(up-research-status c: ri-eagle-warrior != research-available))
(can-train eagle-warrior)
=>
(train eagle-warrior)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: militiaman-line g:< g-desired-num-militia)
(or
	(current-age < castle-age)
	(research-completed ri-two-handed-swordsman))
(can-train militiaman-line)
=>
(train militiaman-line)
)

(defrule
(goal g-allow-military-training YES)
(up-object-type-count-total c: spearman-line g:< g-desired-num-spearman)
(can-train spearman-line)
=>
(train spearman-line)
)